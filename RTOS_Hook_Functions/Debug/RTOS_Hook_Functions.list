
RTOS_Hook_Functions.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ac0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08006c90  08006c90  00007c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006db0  08006db0  00008018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006db0  08006db0  00007db0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006db8  08006db8  00008018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006db8  08006db8  00007db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006dbc  08006dbc  00007dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08006dc0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014490  20000018  08006dd8  00008018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200144a8  08006dd8  000084a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014749  00000000  00000000  00008048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000331c  00000000  00000000  0001c791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  0001fab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f30  00000000  00000000  00020e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024e9c  00000000  00000000  00021da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000194ea  00000000  00000000  00046c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dda39  00000000  00000000  0006012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013db67  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005280  00000000  00000000  0013dbac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000ee  00000000  00000000  00142e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000018 	.word	0x20000018
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006c78 	.word	0x08006c78

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000001c 	.word	0x2000001c
 800020c:	08006c78 	.word	0x08006c78

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012ed4 	.word	0x20012ed4

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b988 	b.w	80005cc <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	468e      	mov	lr, r1
 80002dc:	4604      	mov	r4, r0
 80002de:	4688      	mov	r8, r1
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d14a      	bne.n	800037a <__udivmoddi4+0xa6>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4617      	mov	r7, r2
 80002e8:	d962      	bls.n	80003b0 <__udivmoddi4+0xdc>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	b14e      	cbz	r6, 8000304 <__udivmoddi4+0x30>
 80002f0:	f1c6 0320 	rsb	r3, r6, #32
 80002f4:	fa01 f806 	lsl.w	r8, r1, r6
 80002f8:	fa20 f303 	lsr.w	r3, r0, r3
 80002fc:	40b7      	lsls	r7, r6
 80002fe:	ea43 0808 	orr.w	r8, r3, r8
 8000302:	40b4      	lsls	r4, r6
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000310:	0c23      	lsrs	r3, r4, #16
 8000312:	fb0e 8811 	mls	r8, lr, r1, r8
 8000316:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800031a:	fb01 f20c 	mul.w	r2, r1, ip
 800031e:	429a      	cmp	r2, r3
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x62>
 8000322:	18fb      	adds	r3, r7, r3
 8000324:	f101 30ff 	add.w	r0, r1, #4294967295
 8000328:	f080 80ea 	bcs.w	8000500 <__udivmoddi4+0x22c>
 800032c:	429a      	cmp	r2, r3
 800032e:	f240 80e7 	bls.w	8000500 <__udivmoddi4+0x22c>
 8000332:	3902      	subs	r1, #2
 8000334:	443b      	add	r3, r7
 8000336:	1a9a      	subs	r2, r3, r2
 8000338:	b2a3      	uxth	r3, r4
 800033a:	fbb2 f0fe 	udiv	r0, r2, lr
 800033e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb00 fc0c 	mul.w	ip, r0, ip
 800034a:	459c      	cmp	ip, r3
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x8e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	f080 80d6 	bcs.w	8000504 <__udivmoddi4+0x230>
 8000358:	459c      	cmp	ip, r3
 800035a:	f240 80d3 	bls.w	8000504 <__udivmoddi4+0x230>
 800035e:	443b      	add	r3, r7
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000366:	eba3 030c 	sub.w	r3, r3, ip
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa2>
 800036e:	40f3      	lsrs	r3, r6
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xb6>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb0>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa2>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x14c>
 8000392:	4573      	cmp	r3, lr
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xc8>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 8105 	bhi.w	80005a6 <__udivmoddi4+0x2d2>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb6e 0203 	sbc.w	r2, lr, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	4690      	mov	r8, r2
 80003a6:	2d00      	cmp	r5, #0
 80003a8:	d0e5      	beq.n	8000376 <__udivmoddi4+0xa2>
 80003aa:	e9c5 4800 	strd	r4, r8, [r5]
 80003ae:	e7e2      	b.n	8000376 <__udivmoddi4+0xa2>
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f000 8090 	beq.w	80004d6 <__udivmoddi4+0x202>
 80003b6:	fab2 f682 	clz	r6, r2
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f040 80a4 	bne.w	8000508 <__udivmoddi4+0x234>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	0c03      	lsrs	r3, r0, #16
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	b280      	uxth	r0, r0
 80003ca:	b2bc      	uxth	r4, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb2 fcfe 	udiv	ip, r2, lr
 80003d2:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003da:	fb04 f20c 	mul.w	r2, r4, ip
 80003de:	429a      	cmp	r2, r3
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x11e>
 80003e2:	18fb      	adds	r3, r7, r3
 80003e4:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e8:	d202      	bcs.n	80003f0 <__udivmoddi4+0x11c>
 80003ea:	429a      	cmp	r2, r3
 80003ec:	f200 80e0 	bhi.w	80005b0 <__udivmoddi4+0x2dc>
 80003f0:	46c4      	mov	ip, r8
 80003f2:	1a9b      	subs	r3, r3, r2
 80003f4:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f8:	fb0e 3312 	mls	r3, lr, r2, r3
 80003fc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000400:	fb02 f404 	mul.w	r4, r2, r4
 8000404:	429c      	cmp	r4, r3
 8000406:	d907      	bls.n	8000418 <__udivmoddi4+0x144>
 8000408:	18fb      	adds	r3, r7, r3
 800040a:	f102 30ff 	add.w	r0, r2, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x142>
 8000410:	429c      	cmp	r4, r3
 8000412:	f200 80ca 	bhi.w	80005aa <__udivmoddi4+0x2d6>
 8000416:	4602      	mov	r2, r0
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x98>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa0e f401 	lsl.w	r4, lr, r1
 8000430:	fa20 f306 	lsr.w	r3, r0, r6
 8000434:	fa2e fe06 	lsr.w	lr, lr, r6
 8000438:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800043c:	4323      	orrs	r3, r4
 800043e:	fa00 f801 	lsl.w	r8, r0, r1
 8000442:	fa1f fc87 	uxth.w	ip, r7
 8000446:	fbbe f0f9 	udiv	r0, lr, r9
 800044a:	0c1c      	lsrs	r4, r3, #16
 800044c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000450:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000454:	fb00 fe0c 	mul.w	lr, r0, ip
 8000458:	45a6      	cmp	lr, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d909      	bls.n	8000474 <__udivmoddi4+0x1a0>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f100 3aff 	add.w	sl, r0, #4294967295
 8000466:	f080 809c 	bcs.w	80005a2 <__udivmoddi4+0x2ce>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f240 8099 	bls.w	80005a2 <__udivmoddi4+0x2ce>
 8000470:	3802      	subs	r0, #2
 8000472:	443c      	add	r4, r7
 8000474:	eba4 040e 	sub.w	r4, r4, lr
 8000478:	fa1f fe83 	uxth.w	lr, r3
 800047c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000480:	fb09 4413 	mls	r4, r9, r3, r4
 8000484:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000488:	fb03 fc0c 	mul.w	ip, r3, ip
 800048c:	45a4      	cmp	ip, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1ce>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f103 3eff 	add.w	lr, r3, #4294967295
 8000496:	f080 8082 	bcs.w	800059e <__udivmoddi4+0x2ca>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d97f      	bls.n	800059e <__udivmoddi4+0x2ca>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a6:	eba4 040c 	sub.w	r4, r4, ip
 80004aa:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ae:	4564      	cmp	r4, ip
 80004b0:	4673      	mov	r3, lr
 80004b2:	46e1      	mov	r9, ip
 80004b4:	d362      	bcc.n	800057c <__udivmoddi4+0x2a8>
 80004b6:	d05f      	beq.n	8000578 <__udivmoddi4+0x2a4>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x1fe>
 80004ba:	ebb8 0203 	subs.w	r2, r8, r3
 80004be:	eb64 0409 	sbc.w	r4, r4, r9
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	fa22 f301 	lsr.w	r3, r2, r1
 80004ca:	431e      	orrs	r6, r3
 80004cc:	40cc      	lsrs	r4, r1
 80004ce:	e9c5 6400 	strd	r6, r4, [r5]
 80004d2:	2100      	movs	r1, #0
 80004d4:	e74f      	b.n	8000376 <__udivmoddi4+0xa2>
 80004d6:	fbb1 fcf2 	udiv	ip, r1, r2
 80004da:	0c01      	lsrs	r1, r0, #16
 80004dc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004e0:	b280      	uxth	r0, r0
 80004e2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e6:	463b      	mov	r3, r7
 80004e8:	4638      	mov	r0, r7
 80004ea:	463c      	mov	r4, r7
 80004ec:	46b8      	mov	r8, r7
 80004ee:	46be      	mov	lr, r7
 80004f0:	2620      	movs	r6, #32
 80004f2:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f6:	eba2 0208 	sub.w	r2, r2, r8
 80004fa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fe:	e766      	b.n	80003ce <__udivmoddi4+0xfa>
 8000500:	4601      	mov	r1, r0
 8000502:	e718      	b.n	8000336 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e72c      	b.n	8000362 <__udivmoddi4+0x8e>
 8000508:	f1c6 0220 	rsb	r2, r6, #32
 800050c:	fa2e f302 	lsr.w	r3, lr, r2
 8000510:	40b7      	lsls	r7, r6
 8000512:	40b1      	lsls	r1, r6
 8000514:	fa20 f202 	lsr.w	r2, r0, r2
 8000518:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800051c:	430a      	orrs	r2, r1
 800051e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000522:	b2bc      	uxth	r4, r7
 8000524:	fb0e 3318 	mls	r3, lr, r8, r3
 8000528:	0c11      	lsrs	r1, r2, #16
 800052a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052e:	fb08 f904 	mul.w	r9, r8, r4
 8000532:	40b0      	lsls	r0, r6
 8000534:	4589      	cmp	r9, r1
 8000536:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800053a:	b280      	uxth	r0, r0
 800053c:	d93e      	bls.n	80005bc <__udivmoddi4+0x2e8>
 800053e:	1879      	adds	r1, r7, r1
 8000540:	f108 3cff 	add.w	ip, r8, #4294967295
 8000544:	d201      	bcs.n	800054a <__udivmoddi4+0x276>
 8000546:	4589      	cmp	r9, r1
 8000548:	d81f      	bhi.n	800058a <__udivmoddi4+0x2b6>
 800054a:	eba1 0109 	sub.w	r1, r1, r9
 800054e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000552:	fb09 f804 	mul.w	r8, r9, r4
 8000556:	fb0e 1119 	mls	r1, lr, r9, r1
 800055a:	b292      	uxth	r2, r2
 800055c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000560:	4542      	cmp	r2, r8
 8000562:	d229      	bcs.n	80005b8 <__udivmoddi4+0x2e4>
 8000564:	18ba      	adds	r2, r7, r2
 8000566:	f109 31ff 	add.w	r1, r9, #4294967295
 800056a:	d2c4      	bcs.n	80004f6 <__udivmoddi4+0x222>
 800056c:	4542      	cmp	r2, r8
 800056e:	d2c2      	bcs.n	80004f6 <__udivmoddi4+0x222>
 8000570:	f1a9 0102 	sub.w	r1, r9, #2
 8000574:	443a      	add	r2, r7
 8000576:	e7be      	b.n	80004f6 <__udivmoddi4+0x222>
 8000578:	45f0      	cmp	r8, lr
 800057a:	d29d      	bcs.n	80004b8 <__udivmoddi4+0x1e4>
 800057c:	ebbe 0302 	subs.w	r3, lr, r2
 8000580:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000584:	3801      	subs	r0, #1
 8000586:	46e1      	mov	r9, ip
 8000588:	e796      	b.n	80004b8 <__udivmoddi4+0x1e4>
 800058a:	eba7 0909 	sub.w	r9, r7, r9
 800058e:	4449      	add	r1, r9
 8000590:	f1a8 0c02 	sub.w	ip, r8, #2
 8000594:	fbb1 f9fe 	udiv	r9, r1, lr
 8000598:	fb09 f804 	mul.w	r8, r9, r4
 800059c:	e7db      	b.n	8000556 <__udivmoddi4+0x282>
 800059e:	4673      	mov	r3, lr
 80005a0:	e77f      	b.n	80004a2 <__udivmoddi4+0x1ce>
 80005a2:	4650      	mov	r0, sl
 80005a4:	e766      	b.n	8000474 <__udivmoddi4+0x1a0>
 80005a6:	4608      	mov	r0, r1
 80005a8:	e6fd      	b.n	80003a6 <__udivmoddi4+0xd2>
 80005aa:	443b      	add	r3, r7
 80005ac:	3a02      	subs	r2, #2
 80005ae:	e733      	b.n	8000418 <__udivmoddi4+0x144>
 80005b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b4:	443b      	add	r3, r7
 80005b6:	e71c      	b.n	80003f2 <__udivmoddi4+0x11e>
 80005b8:	4649      	mov	r1, r9
 80005ba:	e79c      	b.n	80004f6 <__udivmoddi4+0x222>
 80005bc:	eba1 0109 	sub.w	r1, r1, r9
 80005c0:	46c4      	mov	ip, r8
 80005c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c6:	fb09 f804 	mul.w	r8, r9, r4
 80005ca:	e7c4      	b.n	8000556 <__udivmoddi4+0x282>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 fa4d 	bl	8000a74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f833 	bl	8000644 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  // Set the 0th bit to 1
  DWT_CTRL |=(1<<0);
 80005de:	4b15      	ldr	r3, [pc, #84]	@ (8000634 <main+0x64>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a14      	ldr	r2, [pc, #80]	@ (8000634 <main+0x64>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 80005ea:	4813      	ldr	r0, [pc, #76]	@ (8000638 <main+0x68>)
 80005ec:	f004 fc6e 	bl	8004ecc <SEGGER_UART_init>

   SEGGER_SYSVIEW_Conf();
 80005f0:	f004 fa96 	bl	8004b20 <SEGGER_SYSVIEW_Conf>
   MX_GPIO_Init();
 80005f4:	f000 f892 	bl	800071c <MX_GPIO_Init>

   // status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);

   // configASSERT(status == pdPASS);

    status = xTaskCreate(led_blink, "LED Blink", 200, NULL, 2, &task2_handle);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	2302      	movs	r3, #2
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	2300      	movs	r3, #0
 8000602:	22c8      	movs	r2, #200	@ 0xc8
 8000604:	490d      	ldr	r1, [pc, #52]	@ (800063c <main+0x6c>)
 8000606:	480e      	ldr	r0, [pc, #56]	@ (8000640 <main+0x70>)
 8000608:	f002 fbb0 	bl	8002d6c <xTaskCreate>
 800060c:	60f8      	str	r0, [r7, #12]

    configASSERT(status == pdPASS);
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d00b      	beq.n	800062c <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000618:	f383 8811 	msr	BASEPRI, r3
 800061c:	f3bf 8f6f 	isb	sy
 8000620:	f3bf 8f4f 	dsb	sy
 8000624:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000626:	bf00      	nop
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <main+0x58>

    //start the freeRTOS scheduler
    vTaskStartScheduler();
 800062c:	f002 fd2e 	bl	800308c <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <main+0x60>
 8000634:	e0001000 	.word	0xe0001000
 8000638:	0007a120 	.word	0x0007a120
 800063c:	08006c90 	.word	0x08006c90
 8000640:	08000819 	.word	0x08000819

08000644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b094      	sub	sp, #80	@ 0x50
 8000648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064a:	f107 031c 	add.w	r3, r7, #28
 800064e:	2234      	movs	r2, #52	@ 0x34
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f006 fad6 	bl	8006c04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000658:	f107 0308 	add.w	r3, r7, #8
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000668:	2300      	movs	r3, #0
 800066a:	607b      	str	r3, [r7, #4]
 800066c:	4b29      	ldr	r3, [pc, #164]	@ (8000714 <SystemClock_Config+0xd0>)
 800066e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000670:	4a28      	ldr	r2, [pc, #160]	@ (8000714 <SystemClock_Config+0xd0>)
 8000672:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000676:	6413      	str	r3, [r2, #64]	@ 0x40
 8000678:	4b26      	ldr	r3, [pc, #152]	@ (8000714 <SystemClock_Config+0xd0>)
 800067a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800067c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	2300      	movs	r3, #0
 8000686:	603b      	str	r3, [r7, #0]
 8000688:	4b23      	ldr	r3, [pc, #140]	@ (8000718 <SystemClock_Config+0xd4>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a22      	ldr	r2, [pc, #136]	@ (8000718 <SystemClock_Config+0xd4>)
 800068e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	4b20      	ldr	r3, [pc, #128]	@ (8000718 <SystemClock_Config+0xd4>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006a0:	2302      	movs	r3, #2
 80006a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a4:	2301      	movs	r3, #1
 80006a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a8:	2310      	movs	r3, #16
 80006aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006b0:	2300      	movs	r3, #0
 80006b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006b4:	2308      	movs	r3, #8
 80006b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006b8:	23a8      	movs	r3, #168	@ 0xa8
 80006ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 f825 	bl	800171c <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006d8:	f000 f8c0 	bl	800085c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2302      	movs	r3, #2
 80006e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80006ec:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006f2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f4:	f107 0308 	add.w	r3, r7, #8
 80006f8:	2105      	movs	r1, #5
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fca6 	bl	800104c <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000706:	f000 f8a9 	bl	800085c <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3750      	adds	r7, #80	@ 0x50
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	@ 0x28
 8000720:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
 8000736:	4b35      	ldr	r3, [pc, #212]	@ (800080c <MX_GPIO_Init+0xf0>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	4a34      	ldr	r2, [pc, #208]	@ (800080c <MX_GPIO_Init+0xf0>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	6313      	str	r3, [r2, #48]	@ 0x30
 8000742:	4b32      	ldr	r3, [pc, #200]	@ (800080c <MX_GPIO_Init+0xf0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	613b      	str	r3, [r7, #16]
 800074c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	2300      	movs	r3, #0
 8000750:	60fb      	str	r3, [r7, #12]
 8000752:	4b2e      	ldr	r3, [pc, #184]	@ (800080c <MX_GPIO_Init+0xf0>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000756:	4a2d      	ldr	r2, [pc, #180]	@ (800080c <MX_GPIO_Init+0xf0>)
 8000758:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800075c:	6313      	str	r3, [r2, #48]	@ 0x30
 800075e:	4b2b      	ldr	r3, [pc, #172]	@ (800080c <MX_GPIO_Init+0xf0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	60bb      	str	r3, [r7, #8]
 800076e:	4b27      	ldr	r3, [pc, #156]	@ (800080c <MX_GPIO_Init+0xf0>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000772:	4a26      	ldr	r2, [pc, #152]	@ (800080c <MX_GPIO_Init+0xf0>)
 8000774:	f043 0301 	orr.w	r3, r3, #1
 8000778:	6313      	str	r3, [r2, #48]	@ 0x30
 800077a:	4b24      	ldr	r3, [pc, #144]	@ (800080c <MX_GPIO_Init+0xf0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	f003 0301 	and.w	r3, r3, #1
 8000782:	60bb      	str	r3, [r7, #8]
 8000784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	4b20      	ldr	r3, [pc, #128]	@ (800080c <MX_GPIO_Init+0xf0>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078e:	4a1f      	ldr	r2, [pc, #124]	@ (800080c <MX_GPIO_Init+0xf0>)
 8000790:	f043 0302 	orr.w	r3, r3, #2
 8000794:	6313      	str	r3, [r2, #48]	@ 0x30
 8000796:	4b1d      	ldr	r3, [pc, #116]	@ (800080c <MX_GPIO_Init+0xf0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	f003 0302 	and.w	r3, r3, #2
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2120      	movs	r1, #32
 80007a6:	481a      	ldr	r0, [pc, #104]	@ (8000810 <MX_GPIO_Init+0xf4>)
 80007a8:	f000 fc1c 	bl	8000fe4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007b2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	4814      	ldr	r0, [pc, #80]	@ (8000814 <MX_GPIO_Init+0xf8>)
 80007c4:	f000 fa7a 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007c8:	230c      	movs	r3, #12
 80007ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007cc:	2302      	movs	r3, #2
 80007ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d4:	2303      	movs	r3, #3
 80007d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007d8:	2307      	movs	r3, #7
 80007da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007dc:	f107 0314 	add.w	r3, r7, #20
 80007e0:	4619      	mov	r1, r3
 80007e2:	480b      	ldr	r0, [pc, #44]	@ (8000810 <MX_GPIO_Init+0xf4>)
 80007e4:	f000 fa6a 	bl	8000cbc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007e8:	2320      	movs	r3, #32
 80007ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	4619      	mov	r1, r3
 80007fe:	4804      	ldr	r0, [pc, #16]	@ (8000810 <MX_GPIO_Init+0xf4>)
 8000800:	f000 fa5c 	bl	8000cbc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000804:	bf00      	nop
 8000806:	3728      	adds	r7, #40	@ 0x28
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40023800 	.word	0x40023800
 8000810:	40020000 	.word	0x40020000
 8000814:	40020800 	.word	0x40020800

08000818 <led_blink>:

}


static void led_blink(void* parameters)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	 for(;;)
	    {
	        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000820:	2120      	movs	r1, #32
 8000822:	4804      	ldr	r0, [pc, #16]	@ (8000834 <led_blink+0x1c>)
 8000824:	f000 fbf7 	bl	8001016 <HAL_GPIO_TogglePin>
	        vTaskDelay(pdMS_TO_TICKS(2000));   // 2000 ms
 8000828:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800082c:	f002 fbf4 	bl	8003018 <vTaskDelay>
	        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000830:	bf00      	nop
 8000832:	e7f5      	b.n	8000820 <led_blink+0x8>
 8000834:	40020000 	.word	0x40020000

08000838 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a04      	ldr	r2, [pc, #16]	@ (8000858 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000846:	4293      	cmp	r3, r2
 8000848:	d101      	bne.n	800084e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800084a:	f000 f935 	bl	8000ab8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40001000 	.word	0x40001000

0800085c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000860:	b672      	cpsid	i
}
 8000862:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <Error_Handler+0x8>

08000868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	607b      	str	r3, [r7, #4]
 8000872:	4b10      	ldr	r3, [pc, #64]	@ (80008b4 <HAL_MspInit+0x4c>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000876:	4a0f      	ldr	r2, [pc, #60]	@ (80008b4 <HAL_MspInit+0x4c>)
 8000878:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800087c:	6453      	str	r3, [r2, #68]	@ 0x44
 800087e:	4b0d      	ldr	r3, [pc, #52]	@ (80008b4 <HAL_MspInit+0x4c>)
 8000880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000882:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000886:	607b      	str	r3, [r7, #4]
 8000888:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <HAL_MspInit+0x4c>)
 8000890:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000892:	4a08      	ldr	r2, [pc, #32]	@ (80008b4 <HAL_MspInit+0x4c>)
 8000894:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000898:	6413      	str	r3, [r2, #64]	@ 0x40
 800089a:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <HAL_MspInit+0x4c>)
 800089c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008a2:	603b      	str	r3, [r7, #0]
 80008a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
vInitPrioGroupValue();
 80008a6:	f003 fd79 	bl	800439c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40023800 	.word	0x40023800

080008b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08e      	sub	sp, #56	@ 0x38
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008c4:	2300      	movs	r3, #0
 80008c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008c8:	2300      	movs	r3, #0
 80008ca:	60fb      	str	r3, [r7, #12]
 80008cc:	4b33      	ldr	r3, [pc, #204]	@ (800099c <HAL_InitTick+0xe4>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d0:	4a32      	ldr	r2, [pc, #200]	@ (800099c <HAL_InitTick+0xe4>)
 80008d2:	f043 0310 	orr.w	r3, r3, #16
 80008d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80008d8:	4b30      	ldr	r3, [pc, #192]	@ (800099c <HAL_InitTick+0xe4>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008dc:	f003 0310 	and.w	r3, r3, #16
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80008e4:	f107 0210 	add.w	r2, r7, #16
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4611      	mov	r1, r2
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 fcb2 	bl	8001258 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80008f4:	6a3b      	ldr	r3, [r7, #32]
 80008f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80008f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d103      	bne.n	8000906 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008fe:	f000 fc97 	bl	8001230 <HAL_RCC_GetPCLK1Freq>
 8000902:	6378      	str	r0, [r7, #52]	@ 0x34
 8000904:	e004      	b.n	8000910 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000906:	f000 fc93 	bl	8001230 <HAL_RCC_GetPCLK1Freq>
 800090a:	4603      	mov	r3, r0
 800090c:	005b      	lsls	r3, r3, #1
 800090e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000912:	4a23      	ldr	r2, [pc, #140]	@ (80009a0 <HAL_InitTick+0xe8>)
 8000914:	fba2 2303 	umull	r2, r3, r2, r3
 8000918:	0c9b      	lsrs	r3, r3, #18
 800091a:	3b01      	subs	r3, #1
 800091c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800091e:	4b21      	ldr	r3, [pc, #132]	@ (80009a4 <HAL_InitTick+0xec>)
 8000920:	4a21      	ldr	r2, [pc, #132]	@ (80009a8 <HAL_InitTick+0xf0>)
 8000922:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000924:	4b1f      	ldr	r3, [pc, #124]	@ (80009a4 <HAL_InitTick+0xec>)
 8000926:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800092a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800092c:	4a1d      	ldr	r2, [pc, #116]	@ (80009a4 <HAL_InitTick+0xec>)
 800092e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000930:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000932:	4b1c      	ldr	r3, [pc, #112]	@ (80009a4 <HAL_InitTick+0xec>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000938:	4b1a      	ldr	r3, [pc, #104]	@ (80009a4 <HAL_InitTick+0xec>)
 800093a:	2200      	movs	r2, #0
 800093c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093e:	4b19      	ldr	r3, [pc, #100]	@ (80009a4 <HAL_InitTick+0xec>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000944:	4817      	ldr	r0, [pc, #92]	@ (80009a4 <HAL_InitTick+0xec>)
 8000946:	f001 f987 	bl	8001c58 <HAL_TIM_Base_Init>
 800094a:	4603      	mov	r3, r0
 800094c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000950:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000954:	2b00      	cmp	r3, #0
 8000956:	d11b      	bne.n	8000990 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000958:	4812      	ldr	r0, [pc, #72]	@ (80009a4 <HAL_InitTick+0xec>)
 800095a:	f001 f9d7 	bl	8001d0c <HAL_TIM_Base_Start_IT>
 800095e:	4603      	mov	r3, r0
 8000960:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000964:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000968:	2b00      	cmp	r3, #0
 800096a:	d111      	bne.n	8000990 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800096c:	2036      	movs	r0, #54	@ 0x36
 800096e:	f000 f997 	bl	8000ca0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	2b0f      	cmp	r3, #15
 8000976:	d808      	bhi.n	800098a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000978:	2200      	movs	r2, #0
 800097a:	6879      	ldr	r1, [r7, #4]
 800097c:	2036      	movs	r0, #54	@ 0x36
 800097e:	f000 f973 	bl	8000c68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000982:	4a0a      	ldr	r2, [pc, #40]	@ (80009ac <HAL_InitTick+0xf4>)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	6013      	str	r3, [r2, #0]
 8000988:	e002      	b.n	8000990 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000990:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000994:	4618      	mov	r0, r3
 8000996:	3738      	adds	r7, #56	@ 0x38
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40023800 	.word	0x40023800
 80009a0:	431bde83 	.word	0x431bde83
 80009a4:	20000034 	.word	0x20000034
 80009a8:	40001000 	.word	0x40001000
 80009ac:	20000004 	.word	0x20000004

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <NMI_Handler+0x4>

080009b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <HardFault_Handler+0x4>

080009c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <MemManage_Handler+0x4>

080009c8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <BusFault_Handler+0x4>

080009d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <UsageFault_Handler+0x4>

080009d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
	...

080009e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009ec:	4802      	ldr	r0, [pc, #8]	@ (80009f8 <TIM6_DAC_IRQHandler+0x10>)
 80009ee:	f001 f9fd 	bl	8001dec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000034 	.word	0x20000034

080009fc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a00:	4b06      	ldr	r3, [pc, #24]	@ (8000a1c <SystemInit+0x20>)
 8000a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a06:	4a05      	ldr	r2, [pc, #20]	@ (8000a1c <SystemInit+0x20>)
 8000a08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a58 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a24:	f7ff ffea 	bl	80009fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a28:	480c      	ldr	r0, [pc, #48]	@ (8000a5c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a2a:	490d      	ldr	r1, [pc, #52]	@ (8000a60 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000a64 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a30:	e002      	b.n	8000a38 <LoopCopyDataInit>

08000a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a36:	3304      	adds	r3, #4

08000a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a3c:	d3f9      	bcc.n	8000a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a68 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a40:	4c0a      	ldr	r4, [pc, #40]	@ (8000a6c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a44:	e001      	b.n	8000a4a <LoopFillZerobss>

08000a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a48:	3204      	adds	r2, #4

08000a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a4c:	d3fb      	bcc.n	8000a46 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000a4e:	f006 f8e1 	bl	8006c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a52:	f7ff fdbd 	bl	80005d0 <main>
  bx  lr    
 8000a56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a58:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a60:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000a64:	08006dc0 	.word	0x08006dc0
  ldr r2, =_sbss
 8000a68:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000a6c:	200144a8 	.word	0x200144a8

08000a70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a70:	e7fe      	b.n	8000a70 <ADC_IRQHandler>
	...

08000a74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a78:	4b0e      	ldr	r3, [pc, #56]	@ (8000ab4 <HAL_Init+0x40>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab4 <HAL_Init+0x40>)
 8000a7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a84:	4b0b      	ldr	r3, [pc, #44]	@ (8000ab4 <HAL_Init+0x40>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	4a0a      	ldr	r2, [pc, #40]	@ (8000ab4 <HAL_Init+0x40>)
 8000a8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a90:	4b08      	ldr	r3, [pc, #32]	@ (8000ab4 <HAL_Init+0x40>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a07      	ldr	r2, [pc, #28]	@ (8000ab4 <HAL_Init+0x40>)
 8000a96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a9c:	2003      	movs	r0, #3
 8000a9e:	f000 f8d8 	bl	8000c52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f7ff ff08 	bl	80008b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa8:	f7ff fede 	bl	8000868 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aac:	2300      	movs	r3, #0
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40023c00 	.word	0x40023c00

08000ab8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000abc:	4b06      	ldr	r3, [pc, #24]	@ (8000ad8 <HAL_IncTick+0x20>)
 8000abe:	781b      	ldrb	r3, [r3, #0]
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <HAL_IncTick+0x24>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	4a04      	ldr	r2, [pc, #16]	@ (8000adc <HAL_IncTick+0x24>)
 8000aca:	6013      	str	r3, [r2, #0]
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	2000007c 	.word	0x2000007c

08000ae0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae4:	4b03      	ldr	r3, [pc, #12]	@ (8000af4 <HAL_GetTick+0x14>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
 8000af2:	bf00      	nop
 8000af4:	2000007c 	.word	0x2000007c

08000af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	f003 0307 	and.w	r3, r3, #7
 8000b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b08:	4b0c      	ldr	r3, [pc, #48]	@ (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b0e:	68ba      	ldr	r2, [r7, #8]
 8000b10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b14:	4013      	ands	r3, r2
 8000b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b1c:	68bb      	ldr	r3, [r7, #8]
 8000b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b2a:	4a04      	ldr	r2, [pc, #16]	@ (8000b3c <__NVIC_SetPriorityGrouping+0x44>)
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	60d3      	str	r3, [r2, #12]
}
 8000b30:	bf00      	nop
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000ed00 	.word	0xe000ed00

08000b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b44:	4b04      	ldr	r3, [pc, #16]	@ (8000b58 <__NVIC_GetPriorityGrouping+0x18>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	0a1b      	lsrs	r3, r3, #8
 8000b4a:	f003 0307 	and.w	r3, r3, #7
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	db0b      	blt.n	8000b86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	f003 021f 	and.w	r2, r3, #31
 8000b74:	4907      	ldr	r1, [pc, #28]	@ (8000b94 <__NVIC_EnableIRQ+0x38>)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	095b      	lsrs	r3, r3, #5
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000e100 	.word	0xe000e100

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	@ (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	@ (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	@ 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	@ 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	b082      	sub	sp, #8
 8000c56:	af00      	add	r7, sp, #0
 8000c58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f7ff ff4c 	bl	8000af8 <__NVIC_SetPriorityGrouping>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b086      	sub	sp, #24
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	60b9      	str	r1, [r7, #8]
 8000c72:	607a      	str	r2, [r7, #4]
 8000c74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c76:	2300      	movs	r3, #0
 8000c78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c7a:	f7ff ff61 	bl	8000b40 <__NVIC_GetPriorityGrouping>
 8000c7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c80:	687a      	ldr	r2, [r7, #4]
 8000c82:	68b9      	ldr	r1, [r7, #8]
 8000c84:	6978      	ldr	r0, [r7, #20]
 8000c86:	f7ff ffb1 	bl	8000bec <NVIC_EncodePriority>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c90:	4611      	mov	r1, r2
 8000c92:	4618      	mov	r0, r3
 8000c94:	f7ff ff80 	bl	8000b98 <__NVIC_SetPriority>
}
 8000c98:	bf00      	nop
 8000c9a:	3718      	adds	r7, #24
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}

08000ca0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f7ff ff54 	bl	8000b5c <__NVIC_EnableIRQ>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b089      	sub	sp, #36	@ 0x24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	61fb      	str	r3, [r7, #28]
 8000cd6:	e165      	b.n	8000fa4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000cd8:	2201      	movs	r2, #1
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	697a      	ldr	r2, [r7, #20]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000cec:	693a      	ldr	r2, [r7, #16]
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	f040 8154 	bne.w	8000f9e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	f003 0303 	and.w	r3, r3, #3
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d005      	beq.n	8000d0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d0a:	2b02      	cmp	r3, #2
 8000d0c:	d130      	bne.n	8000d70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	005b      	lsls	r3, r3, #1
 8000d18:	2203      	movs	r2, #3
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4013      	ands	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	68da      	ldr	r2, [r3, #12]
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	69ba      	ldr	r2, [r7, #24]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d44:	2201      	movs	r2, #1
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4c:	43db      	mvns	r3, r3
 8000d4e:	69ba      	ldr	r2, [r7, #24]
 8000d50:	4013      	ands	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	091b      	lsrs	r3, r3, #4
 8000d5a:	f003 0201 	and.w	r2, r3, #1
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	69ba      	ldr	r2, [r7, #24]
 8000d6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 0303 	and.w	r3, r3, #3
 8000d78:	2b03      	cmp	r3, #3
 8000d7a:	d017      	beq.n	8000dac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	68db      	ldr	r3, [r3, #12]
 8000d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	2203      	movs	r2, #3
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	43db      	mvns	r3, r3
 8000d8e:	69ba      	ldr	r2, [r7, #24]
 8000d90:	4013      	ands	r3, r2
 8000d92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	689a      	ldr	r2, [r3, #8]
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	69ba      	ldr	r2, [r7, #24]
 8000da2:	4313      	orrs	r3, r2
 8000da4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	f003 0303 	and.w	r3, r3, #3
 8000db4:	2b02      	cmp	r3, #2
 8000db6:	d123      	bne.n	8000e00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	08da      	lsrs	r2, r3, #3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3208      	adds	r2, #8
 8000dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	f003 0307 	and.w	r3, r3, #7
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	220f      	movs	r2, #15
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	691a      	ldr	r2, [r3, #16]
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	f003 0307 	and.w	r3, r3, #7
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	08da      	lsrs	r2, r3, #3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	3208      	adds	r2, #8
 8000dfa:	69b9      	ldr	r1, [r7, #24]
 8000dfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	2203      	movs	r2, #3
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4013      	ands	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0203 	and.w	r2, r3, #3
 8000e20:	69fb      	ldr	r3, [r7, #28]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	69ba      	ldr	r2, [r7, #24]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	f000 80ae 	beq.w	8000f9e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b5d      	ldr	r3, [pc, #372]	@ (8000fbc <HAL_GPIO_Init+0x300>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4a:	4a5c      	ldr	r2, [pc, #368]	@ (8000fbc <HAL_GPIO_Init+0x300>)
 8000e4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e50:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e52:	4b5a      	ldr	r3, [pc, #360]	@ (8000fbc <HAL_GPIO_Init+0x300>)
 8000e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e5e:	4a58      	ldr	r2, [pc, #352]	@ (8000fc0 <HAL_GPIO_Init+0x304>)
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	089b      	lsrs	r3, r3, #2
 8000e64:	3302      	adds	r3, #2
 8000e66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f003 0303 	and.w	r3, r3, #3
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	220f      	movs	r2, #15
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a4f      	ldr	r2, [pc, #316]	@ (8000fc4 <HAL_GPIO_Init+0x308>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d025      	beq.n	8000ed6 <HAL_GPIO_Init+0x21a>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a4e      	ldr	r2, [pc, #312]	@ (8000fc8 <HAL_GPIO_Init+0x30c>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d01f      	beq.n	8000ed2 <HAL_GPIO_Init+0x216>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a4d      	ldr	r2, [pc, #308]	@ (8000fcc <HAL_GPIO_Init+0x310>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d019      	beq.n	8000ece <HAL_GPIO_Init+0x212>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a4c      	ldr	r2, [pc, #304]	@ (8000fd0 <HAL_GPIO_Init+0x314>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d013      	beq.n	8000eca <HAL_GPIO_Init+0x20e>
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4a4b      	ldr	r2, [pc, #300]	@ (8000fd4 <HAL_GPIO_Init+0x318>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d00d      	beq.n	8000ec6 <HAL_GPIO_Init+0x20a>
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a4a      	ldr	r2, [pc, #296]	@ (8000fd8 <HAL_GPIO_Init+0x31c>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d007      	beq.n	8000ec2 <HAL_GPIO_Init+0x206>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4a49      	ldr	r2, [pc, #292]	@ (8000fdc <HAL_GPIO_Init+0x320>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d101      	bne.n	8000ebe <HAL_GPIO_Init+0x202>
 8000eba:	2306      	movs	r3, #6
 8000ebc:	e00c      	b.n	8000ed8 <HAL_GPIO_Init+0x21c>
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	e00a      	b.n	8000ed8 <HAL_GPIO_Init+0x21c>
 8000ec2:	2305      	movs	r3, #5
 8000ec4:	e008      	b.n	8000ed8 <HAL_GPIO_Init+0x21c>
 8000ec6:	2304      	movs	r3, #4
 8000ec8:	e006      	b.n	8000ed8 <HAL_GPIO_Init+0x21c>
 8000eca:	2303      	movs	r3, #3
 8000ecc:	e004      	b.n	8000ed8 <HAL_GPIO_Init+0x21c>
 8000ece:	2302      	movs	r3, #2
 8000ed0:	e002      	b.n	8000ed8 <HAL_GPIO_Init+0x21c>
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	e000      	b.n	8000ed8 <HAL_GPIO_Init+0x21c>
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	69fa      	ldr	r2, [r7, #28]
 8000eda:	f002 0203 	and.w	r2, r2, #3
 8000ede:	0092      	lsls	r2, r2, #2
 8000ee0:	4093      	lsls	r3, r2
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ee8:	4935      	ldr	r1, [pc, #212]	@ (8000fc0 <HAL_GPIO_Init+0x304>)
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	089b      	lsrs	r3, r3, #2
 8000eee:	3302      	adds	r3, #2
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ef6:	4b3a      	ldr	r3, [pc, #232]	@ (8000fe0 <HAL_GPIO_Init+0x324>)
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	43db      	mvns	r3, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4013      	ands	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f1a:	4a31      	ldr	r2, [pc, #196]	@ (8000fe0 <HAL_GPIO_Init+0x324>)
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f20:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe0 <HAL_GPIO_Init+0x324>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f44:	4a26      	ldr	r2, [pc, #152]	@ (8000fe0 <HAL_GPIO_Init+0x324>)
 8000f46:	69bb      	ldr	r3, [r7, #24]
 8000f48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f4a:	4b25      	ldr	r3, [pc, #148]	@ (8000fe0 <HAL_GPIO_Init+0x324>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000fe0 <HAL_GPIO_Init+0x324>)
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f74:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe0 <HAL_GPIO_Init+0x324>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f98:	4a11      	ldr	r2, [pc, #68]	@ (8000fe0 <HAL_GPIO_Init+0x324>)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	61fb      	str	r3, [r7, #28]
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	2b0f      	cmp	r3, #15
 8000fa8:	f67f ae96 	bls.w	8000cd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000fac:	bf00      	nop
 8000fae:	bf00      	nop
 8000fb0:	3724      	adds	r7, #36	@ 0x24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40013800 	.word	0x40013800
 8000fc4:	40020000 	.word	0x40020000
 8000fc8:	40020400 	.word	0x40020400
 8000fcc:	40020800 	.word	0x40020800
 8000fd0:	40020c00 	.word	0x40020c00
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	40021400 	.word	0x40021400
 8000fdc:	40021800 	.word	0x40021800
 8000fe0:	40013c00 	.word	0x40013c00

08000fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	807b      	strh	r3, [r7, #2]
 8000ff0:	4613      	mov	r3, r2
 8000ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ff4:	787b      	ldrb	r3, [r7, #1]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ffa:	887a      	ldrh	r2, [r7, #2]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001000:	e003      	b.n	800100a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001002:	887b      	ldrh	r3, [r7, #2]
 8001004:	041a      	lsls	r2, r3, #16
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	619a      	str	r2, [r3, #24]
}
 800100a:	bf00      	nop
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr

08001016 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001016:	b480      	push	{r7}
 8001018:	b085      	sub	sp, #20
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	460b      	mov	r3, r1
 8001020:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	695b      	ldr	r3, [r3, #20]
 8001026:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001028:	887a      	ldrh	r2, [r7, #2]
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	4013      	ands	r3, r2
 800102e:	041a      	lsls	r2, r3, #16
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	43d9      	mvns	r1, r3
 8001034:	887b      	ldrh	r3, [r7, #2]
 8001036:	400b      	ands	r3, r1
 8001038:	431a      	orrs	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	619a      	str	r2, [r3, #24]
}
 800103e:	bf00      	nop
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d101      	bne.n	8001060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800105c:	2301      	movs	r3, #1
 800105e:	e0cc      	b.n	80011fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001060:	4b68      	ldr	r3, [pc, #416]	@ (8001204 <HAL_RCC_ClockConfig+0x1b8>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 030f 	and.w	r3, r3, #15
 8001068:	683a      	ldr	r2, [r7, #0]
 800106a:	429a      	cmp	r2, r3
 800106c:	d90c      	bls.n	8001088 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800106e:	4b65      	ldr	r3, [pc, #404]	@ (8001204 <HAL_RCC_ClockConfig+0x1b8>)
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	b2d2      	uxtb	r2, r2
 8001074:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001076:	4b63      	ldr	r3, [pc, #396]	@ (8001204 <HAL_RCC_ClockConfig+0x1b8>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	429a      	cmp	r2, r3
 8001082:	d001      	beq.n	8001088 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e0b8      	b.n	80011fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f003 0302 	and.w	r3, r3, #2
 8001090:	2b00      	cmp	r3, #0
 8001092:	d020      	beq.n	80010d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f003 0304 	and.w	r3, r3, #4
 800109c:	2b00      	cmp	r3, #0
 800109e:	d005      	beq.n	80010ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010a0:	4b59      	ldr	r3, [pc, #356]	@ (8001208 <HAL_RCC_ClockConfig+0x1bc>)
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	4a58      	ldr	r2, [pc, #352]	@ (8001208 <HAL_RCC_ClockConfig+0x1bc>)
 80010a6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80010aa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0308 	and.w	r3, r3, #8
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d005      	beq.n	80010c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010b8:	4b53      	ldr	r3, [pc, #332]	@ (8001208 <HAL_RCC_ClockConfig+0x1bc>)
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	4a52      	ldr	r2, [pc, #328]	@ (8001208 <HAL_RCC_ClockConfig+0x1bc>)
 80010be:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80010c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010c4:	4b50      	ldr	r3, [pc, #320]	@ (8001208 <HAL_RCC_ClockConfig+0x1bc>)
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	494d      	ldr	r1, [pc, #308]	@ (8001208 <HAL_RCC_ClockConfig+0x1bc>)
 80010d2:	4313      	orrs	r3, r2
 80010d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d044      	beq.n	800116c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d107      	bne.n	80010fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ea:	4b47      	ldr	r3, [pc, #284]	@ (8001208 <HAL_RCC_ClockConfig+0x1bc>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d119      	bne.n	800112a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e07f      	b.n	80011fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d003      	beq.n	800110a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001106:	2b03      	cmp	r3, #3
 8001108:	d107      	bne.n	800111a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800110a:	4b3f      	ldr	r3, [pc, #252]	@ (8001208 <HAL_RCC_ClockConfig+0x1bc>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d109      	bne.n	800112a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e06f      	b.n	80011fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800111a:	4b3b      	ldr	r3, [pc, #236]	@ (8001208 <HAL_RCC_ClockConfig+0x1bc>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0302 	and.w	r3, r3, #2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d101      	bne.n	800112a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	e067      	b.n	80011fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800112a:	4b37      	ldr	r3, [pc, #220]	@ (8001208 <HAL_RCC_ClockConfig+0x1bc>)
 800112c:	689b      	ldr	r3, [r3, #8]
 800112e:	f023 0203 	bic.w	r2, r3, #3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	4934      	ldr	r1, [pc, #208]	@ (8001208 <HAL_RCC_ClockConfig+0x1bc>)
 8001138:	4313      	orrs	r3, r2
 800113a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800113c:	f7ff fcd0 	bl	8000ae0 <HAL_GetTick>
 8001140:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001142:	e00a      	b.n	800115a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001144:	f7ff fccc 	bl	8000ae0 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001152:	4293      	cmp	r3, r2
 8001154:	d901      	bls.n	800115a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e04f      	b.n	80011fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800115a:	4b2b      	ldr	r3, [pc, #172]	@ (8001208 <HAL_RCC_ClockConfig+0x1bc>)
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f003 020c 	and.w	r2, r3, #12
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	429a      	cmp	r2, r3
 800116a:	d1eb      	bne.n	8001144 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800116c:	4b25      	ldr	r3, [pc, #148]	@ (8001204 <HAL_RCC_ClockConfig+0x1b8>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 030f 	and.w	r3, r3, #15
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	429a      	cmp	r2, r3
 8001178:	d20c      	bcs.n	8001194 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800117a:	4b22      	ldr	r3, [pc, #136]	@ (8001204 <HAL_RCC_ClockConfig+0x1b8>)
 800117c:	683a      	ldr	r2, [r7, #0]
 800117e:	b2d2      	uxtb	r2, r2
 8001180:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001182:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <HAL_RCC_ClockConfig+0x1b8>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 030f 	and.w	r3, r3, #15
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	429a      	cmp	r2, r3
 800118e:	d001      	beq.n	8001194 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e032      	b.n	80011fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	2b00      	cmp	r3, #0
 800119e:	d008      	beq.n	80011b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011a0:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <HAL_RCC_ClockConfig+0x1bc>)
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	4916      	ldr	r1, [pc, #88]	@ (8001208 <HAL_RCC_ClockConfig+0x1bc>)
 80011ae:	4313      	orrs	r3, r2
 80011b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0308 	and.w	r3, r3, #8
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d009      	beq.n	80011d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011be:	4b12      	ldr	r3, [pc, #72]	@ (8001208 <HAL_RCC_ClockConfig+0x1bc>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	490e      	ldr	r1, [pc, #56]	@ (8001208 <HAL_RCC_ClockConfig+0x1bc>)
 80011ce:	4313      	orrs	r3, r2
 80011d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80011d2:	f000 f873 	bl	80012bc <HAL_RCC_GetSysClockFreq>
 80011d6:	4602      	mov	r2, r0
 80011d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001208 <HAL_RCC_ClockConfig+0x1bc>)
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	091b      	lsrs	r3, r3, #4
 80011de:	f003 030f 	and.w	r3, r3, #15
 80011e2:	490a      	ldr	r1, [pc, #40]	@ (800120c <HAL_RCC_ClockConfig+0x1c0>)
 80011e4:	5ccb      	ldrb	r3, [r1, r3]
 80011e6:	fa22 f303 	lsr.w	r3, r2, r3
 80011ea:	4a09      	ldr	r2, [pc, #36]	@ (8001210 <HAL_RCC_ClockConfig+0x1c4>)
 80011ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80011ee:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <HAL_RCC_ClockConfig+0x1c8>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7ff fb60 	bl	80008b8 <HAL_InitTick>

  return HAL_OK;
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023c00 	.word	0x40023c00
 8001208:	40023800 	.word	0x40023800
 800120c:	08006d68 	.word	0x08006d68
 8001210:	20000000 	.word	0x20000000
 8001214:	20000004 	.word	0x20000004

08001218 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800121c:	4b03      	ldr	r3, [pc, #12]	@ (800122c <HAL_RCC_GetHCLKFreq+0x14>)
 800121e:	681b      	ldr	r3, [r3, #0]
}
 8001220:	4618      	mov	r0, r3
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	20000000 	.word	0x20000000

08001230 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001234:	f7ff fff0 	bl	8001218 <HAL_RCC_GetHCLKFreq>
 8001238:	4602      	mov	r2, r0
 800123a:	4b05      	ldr	r3, [pc, #20]	@ (8001250 <HAL_RCC_GetPCLK1Freq+0x20>)
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	0a9b      	lsrs	r3, r3, #10
 8001240:	f003 0307 	and.w	r3, r3, #7
 8001244:	4903      	ldr	r1, [pc, #12]	@ (8001254 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001246:	5ccb      	ldrb	r3, [r1, r3]
 8001248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800124c:	4618      	mov	r0, r3
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40023800 	.word	0x40023800
 8001254:	08006d78 	.word	0x08006d78

08001258 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	220f      	movs	r2, #15
 8001266:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <HAL_RCC_GetClockConfig+0x5c>)
 800126a:	689b      	ldr	r3, [r3, #8]
 800126c:	f003 0203 	and.w	r2, r3, #3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001274:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <HAL_RCC_GetClockConfig+0x5c>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001280:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <HAL_RCC_GetClockConfig+0x5c>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800128c:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <HAL_RCC_GetClockConfig+0x5c>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	08db      	lsrs	r3, r3, #3
 8001292:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800129a:	4b07      	ldr	r3, [pc, #28]	@ (80012b8 <HAL_RCC_GetClockConfig+0x60>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f003 020f 	and.w	r2, r3, #15
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	601a      	str	r2, [r3, #0]
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40023c00 	.word	0x40023c00

080012bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012c0:	b0ae      	sub	sp, #184	@ 0xb8
 80012c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80012c4:	2300      	movs	r3, #0
 80012c6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80012d0:	2300      	movs	r3, #0
 80012d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80012dc:	2300      	movs	r3, #0
 80012de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012e2:	4bcb      	ldr	r3, [pc, #812]	@ (8001610 <HAL_RCC_GetSysClockFreq+0x354>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 030c 	and.w	r3, r3, #12
 80012ea:	2b0c      	cmp	r3, #12
 80012ec:	f200 8206 	bhi.w	80016fc <HAL_RCC_GetSysClockFreq+0x440>
 80012f0:	a201      	add	r2, pc, #4	@ (adr r2, 80012f8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80012f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f6:	bf00      	nop
 80012f8:	0800132d 	.word	0x0800132d
 80012fc:	080016fd 	.word	0x080016fd
 8001300:	080016fd 	.word	0x080016fd
 8001304:	080016fd 	.word	0x080016fd
 8001308:	08001335 	.word	0x08001335
 800130c:	080016fd 	.word	0x080016fd
 8001310:	080016fd 	.word	0x080016fd
 8001314:	080016fd 	.word	0x080016fd
 8001318:	0800133d 	.word	0x0800133d
 800131c:	080016fd 	.word	0x080016fd
 8001320:	080016fd 	.word	0x080016fd
 8001324:	080016fd 	.word	0x080016fd
 8001328:	0800152d 	.word	0x0800152d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800132c:	4bb9      	ldr	r3, [pc, #740]	@ (8001614 <HAL_RCC_GetSysClockFreq+0x358>)
 800132e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001332:	e1e7      	b.n	8001704 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001334:	4bb8      	ldr	r3, [pc, #736]	@ (8001618 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001336:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800133a:	e1e3      	b.n	8001704 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800133c:	4bb4      	ldr	r3, [pc, #720]	@ (8001610 <HAL_RCC_GetSysClockFreq+0x354>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001344:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001348:	4bb1      	ldr	r3, [pc, #708]	@ (8001610 <HAL_RCC_GetSysClockFreq+0x354>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001350:	2b00      	cmp	r3, #0
 8001352:	d071      	beq.n	8001438 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001354:	4bae      	ldr	r3, [pc, #696]	@ (8001610 <HAL_RCC_GetSysClockFreq+0x354>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	099b      	lsrs	r3, r3, #6
 800135a:	2200      	movs	r2, #0
 800135c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001360:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001364:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800136c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001370:	2300      	movs	r3, #0
 8001372:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001376:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800137a:	4622      	mov	r2, r4
 800137c:	462b      	mov	r3, r5
 800137e:	f04f 0000 	mov.w	r0, #0
 8001382:	f04f 0100 	mov.w	r1, #0
 8001386:	0159      	lsls	r1, r3, #5
 8001388:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800138c:	0150      	lsls	r0, r2, #5
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4621      	mov	r1, r4
 8001394:	1a51      	subs	r1, r2, r1
 8001396:	6439      	str	r1, [r7, #64]	@ 0x40
 8001398:	4629      	mov	r1, r5
 800139a:	eb63 0301 	sbc.w	r3, r3, r1
 800139e:	647b      	str	r3, [r7, #68]	@ 0x44
 80013a0:	f04f 0200 	mov.w	r2, #0
 80013a4:	f04f 0300 	mov.w	r3, #0
 80013a8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80013ac:	4649      	mov	r1, r9
 80013ae:	018b      	lsls	r3, r1, #6
 80013b0:	4641      	mov	r1, r8
 80013b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80013b6:	4641      	mov	r1, r8
 80013b8:	018a      	lsls	r2, r1, #6
 80013ba:	4641      	mov	r1, r8
 80013bc:	1a51      	subs	r1, r2, r1
 80013be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80013c0:	4649      	mov	r1, r9
 80013c2:	eb63 0301 	sbc.w	r3, r3, r1
 80013c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	f04f 0300 	mov.w	r3, #0
 80013d0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80013d4:	4649      	mov	r1, r9
 80013d6:	00cb      	lsls	r3, r1, #3
 80013d8:	4641      	mov	r1, r8
 80013da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80013de:	4641      	mov	r1, r8
 80013e0:	00ca      	lsls	r2, r1, #3
 80013e2:	4610      	mov	r0, r2
 80013e4:	4619      	mov	r1, r3
 80013e6:	4603      	mov	r3, r0
 80013e8:	4622      	mov	r2, r4
 80013ea:	189b      	adds	r3, r3, r2
 80013ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80013ee:	462b      	mov	r3, r5
 80013f0:	460a      	mov	r2, r1
 80013f2:	eb42 0303 	adc.w	r3, r2, r3
 80013f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80013f8:	f04f 0200 	mov.w	r2, #0
 80013fc:	f04f 0300 	mov.w	r3, #0
 8001400:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001404:	4629      	mov	r1, r5
 8001406:	024b      	lsls	r3, r1, #9
 8001408:	4621      	mov	r1, r4
 800140a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800140e:	4621      	mov	r1, r4
 8001410:	024a      	lsls	r2, r1, #9
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
 8001416:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800141a:	2200      	movs	r2, #0
 800141c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001420:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001424:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001428:	f7fe ff3c 	bl	80002a4 <__aeabi_uldivmod>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	4613      	mov	r3, r2
 8001432:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001436:	e067      	b.n	8001508 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001438:	4b75      	ldr	r3, [pc, #468]	@ (8001610 <HAL_RCC_GetSysClockFreq+0x354>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	099b      	lsrs	r3, r3, #6
 800143e:	2200      	movs	r2, #0
 8001440:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001444:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001448:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800144c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001450:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001452:	2300      	movs	r3, #0
 8001454:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001456:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800145a:	4622      	mov	r2, r4
 800145c:	462b      	mov	r3, r5
 800145e:	f04f 0000 	mov.w	r0, #0
 8001462:	f04f 0100 	mov.w	r1, #0
 8001466:	0159      	lsls	r1, r3, #5
 8001468:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800146c:	0150      	lsls	r0, r2, #5
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4621      	mov	r1, r4
 8001474:	1a51      	subs	r1, r2, r1
 8001476:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001478:	4629      	mov	r1, r5
 800147a:	eb63 0301 	sbc.w	r3, r3, r1
 800147e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	f04f 0300 	mov.w	r3, #0
 8001488:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800148c:	4649      	mov	r1, r9
 800148e:	018b      	lsls	r3, r1, #6
 8001490:	4641      	mov	r1, r8
 8001492:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001496:	4641      	mov	r1, r8
 8001498:	018a      	lsls	r2, r1, #6
 800149a:	4641      	mov	r1, r8
 800149c:	ebb2 0a01 	subs.w	sl, r2, r1
 80014a0:	4649      	mov	r1, r9
 80014a2:	eb63 0b01 	sbc.w	fp, r3, r1
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	f04f 0300 	mov.w	r3, #0
 80014ae:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80014b2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80014b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80014ba:	4692      	mov	sl, r2
 80014bc:	469b      	mov	fp, r3
 80014be:	4623      	mov	r3, r4
 80014c0:	eb1a 0303 	adds.w	r3, sl, r3
 80014c4:	623b      	str	r3, [r7, #32]
 80014c6:	462b      	mov	r3, r5
 80014c8:	eb4b 0303 	adc.w	r3, fp, r3
 80014cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80014ce:	f04f 0200 	mov.w	r2, #0
 80014d2:	f04f 0300 	mov.w	r3, #0
 80014d6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80014da:	4629      	mov	r1, r5
 80014dc:	028b      	lsls	r3, r1, #10
 80014de:	4621      	mov	r1, r4
 80014e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80014e4:	4621      	mov	r1, r4
 80014e6:	028a      	lsls	r2, r1, #10
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80014f0:	2200      	movs	r2, #0
 80014f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80014f4:	677a      	str	r2, [r7, #116]	@ 0x74
 80014f6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80014fa:	f7fe fed3 	bl	80002a4 <__aeabi_uldivmod>
 80014fe:	4602      	mov	r2, r0
 8001500:	460b      	mov	r3, r1
 8001502:	4613      	mov	r3, r2
 8001504:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001508:	4b41      	ldr	r3, [pc, #260]	@ (8001610 <HAL_RCC_GetSysClockFreq+0x354>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	0c1b      	lsrs	r3, r3, #16
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	3301      	adds	r3, #1
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800151a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800151e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001522:	fbb2 f3f3 	udiv	r3, r2, r3
 8001526:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800152a:	e0eb      	b.n	8001704 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800152c:	4b38      	ldr	r3, [pc, #224]	@ (8001610 <HAL_RCC_GetSysClockFreq+0x354>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001534:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001538:	4b35      	ldr	r3, [pc, #212]	@ (8001610 <HAL_RCC_GetSysClockFreq+0x354>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d06b      	beq.n	800161c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001544:	4b32      	ldr	r3, [pc, #200]	@ (8001610 <HAL_RCC_GetSysClockFreq+0x354>)
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	099b      	lsrs	r3, r3, #6
 800154a:	2200      	movs	r2, #0
 800154c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800154e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001550:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001556:	663b      	str	r3, [r7, #96]	@ 0x60
 8001558:	2300      	movs	r3, #0
 800155a:	667b      	str	r3, [r7, #100]	@ 0x64
 800155c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001560:	4622      	mov	r2, r4
 8001562:	462b      	mov	r3, r5
 8001564:	f04f 0000 	mov.w	r0, #0
 8001568:	f04f 0100 	mov.w	r1, #0
 800156c:	0159      	lsls	r1, r3, #5
 800156e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001572:	0150      	lsls	r0, r2, #5
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4621      	mov	r1, r4
 800157a:	1a51      	subs	r1, r2, r1
 800157c:	61b9      	str	r1, [r7, #24]
 800157e:	4629      	mov	r1, r5
 8001580:	eb63 0301 	sbc.w	r3, r3, r1
 8001584:	61fb      	str	r3, [r7, #28]
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	f04f 0300 	mov.w	r3, #0
 800158e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001592:	4659      	mov	r1, fp
 8001594:	018b      	lsls	r3, r1, #6
 8001596:	4651      	mov	r1, sl
 8001598:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800159c:	4651      	mov	r1, sl
 800159e:	018a      	lsls	r2, r1, #6
 80015a0:	4651      	mov	r1, sl
 80015a2:	ebb2 0801 	subs.w	r8, r2, r1
 80015a6:	4659      	mov	r1, fp
 80015a8:	eb63 0901 	sbc.w	r9, r3, r1
 80015ac:	f04f 0200 	mov.w	r2, #0
 80015b0:	f04f 0300 	mov.w	r3, #0
 80015b4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015b8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015bc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015c0:	4690      	mov	r8, r2
 80015c2:	4699      	mov	r9, r3
 80015c4:	4623      	mov	r3, r4
 80015c6:	eb18 0303 	adds.w	r3, r8, r3
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	462b      	mov	r3, r5
 80015ce:	eb49 0303 	adc.w	r3, r9, r3
 80015d2:	617b      	str	r3, [r7, #20]
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	f04f 0300 	mov.w	r3, #0
 80015dc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80015e0:	4629      	mov	r1, r5
 80015e2:	024b      	lsls	r3, r1, #9
 80015e4:	4621      	mov	r1, r4
 80015e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80015ea:	4621      	mov	r1, r4
 80015ec:	024a      	lsls	r2, r1, #9
 80015ee:	4610      	mov	r0, r2
 80015f0:	4619      	mov	r1, r3
 80015f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015f6:	2200      	movs	r2, #0
 80015f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80015fa:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80015fc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001600:	f7fe fe50 	bl	80002a4 <__aeabi_uldivmod>
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	4613      	mov	r3, r2
 800160a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800160e:	e065      	b.n	80016dc <HAL_RCC_GetSysClockFreq+0x420>
 8001610:	40023800 	.word	0x40023800
 8001614:	00f42400 	.word	0x00f42400
 8001618:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800161c:	4b3d      	ldr	r3, [pc, #244]	@ (8001714 <HAL_RCC_GetSysClockFreq+0x458>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	099b      	lsrs	r3, r3, #6
 8001622:	2200      	movs	r2, #0
 8001624:	4618      	mov	r0, r3
 8001626:	4611      	mov	r1, r2
 8001628:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800162c:	653b      	str	r3, [r7, #80]	@ 0x50
 800162e:	2300      	movs	r3, #0
 8001630:	657b      	str	r3, [r7, #84]	@ 0x54
 8001632:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001636:	4642      	mov	r2, r8
 8001638:	464b      	mov	r3, r9
 800163a:	f04f 0000 	mov.w	r0, #0
 800163e:	f04f 0100 	mov.w	r1, #0
 8001642:	0159      	lsls	r1, r3, #5
 8001644:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001648:	0150      	lsls	r0, r2, #5
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4641      	mov	r1, r8
 8001650:	1a51      	subs	r1, r2, r1
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	4649      	mov	r1, r9
 8001656:	eb63 0301 	sbc.w	r3, r3, r1
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	f04f 0200 	mov.w	r2, #0
 8001660:	f04f 0300 	mov.w	r3, #0
 8001664:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001668:	4659      	mov	r1, fp
 800166a:	018b      	lsls	r3, r1, #6
 800166c:	4651      	mov	r1, sl
 800166e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001672:	4651      	mov	r1, sl
 8001674:	018a      	lsls	r2, r1, #6
 8001676:	4651      	mov	r1, sl
 8001678:	1a54      	subs	r4, r2, r1
 800167a:	4659      	mov	r1, fp
 800167c:	eb63 0501 	sbc.w	r5, r3, r1
 8001680:	f04f 0200 	mov.w	r2, #0
 8001684:	f04f 0300 	mov.w	r3, #0
 8001688:	00eb      	lsls	r3, r5, #3
 800168a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800168e:	00e2      	lsls	r2, r4, #3
 8001690:	4614      	mov	r4, r2
 8001692:	461d      	mov	r5, r3
 8001694:	4643      	mov	r3, r8
 8001696:	18e3      	adds	r3, r4, r3
 8001698:	603b      	str	r3, [r7, #0]
 800169a:	464b      	mov	r3, r9
 800169c:	eb45 0303 	adc.w	r3, r5, r3
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	f04f 0300 	mov.w	r3, #0
 80016aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016ae:	4629      	mov	r1, r5
 80016b0:	028b      	lsls	r3, r1, #10
 80016b2:	4621      	mov	r1, r4
 80016b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016b8:	4621      	mov	r1, r4
 80016ba:	028a      	lsls	r2, r1, #10
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80016c4:	2200      	movs	r2, #0
 80016c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80016c8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80016ca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80016ce:	f7fe fde9 	bl	80002a4 <__aeabi_uldivmod>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4613      	mov	r3, r2
 80016d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80016dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001714 <HAL_RCC_GetSysClockFreq+0x458>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	0f1b      	lsrs	r3, r3, #28
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80016ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80016ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80016f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80016fa:	e003      	b.n	8001704 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016fc:	4b06      	ldr	r3, [pc, #24]	@ (8001718 <HAL_RCC_GetSysClockFreq+0x45c>)
 80016fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001702:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001704:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001708:	4618      	mov	r0, r3
 800170a:	37b8      	adds	r7, #184	@ 0xb8
 800170c:	46bd      	mov	sp, r7
 800170e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800
 8001718:	00f42400 	.word	0x00f42400

0800171c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e28d      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	2b00      	cmp	r3, #0
 8001738:	f000 8083 	beq.w	8001842 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800173c:	4b94      	ldr	r3, [pc, #592]	@ (8001990 <HAL_RCC_OscConfig+0x274>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 030c 	and.w	r3, r3, #12
 8001744:	2b04      	cmp	r3, #4
 8001746:	d019      	beq.n	800177c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001748:	4b91      	ldr	r3, [pc, #580]	@ (8001990 <HAL_RCC_OscConfig+0x274>)
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 030c 	and.w	r3, r3, #12
        || \
 8001750:	2b08      	cmp	r3, #8
 8001752:	d106      	bne.n	8001762 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001754:	4b8e      	ldr	r3, [pc, #568]	@ (8001990 <HAL_RCC_OscConfig+0x274>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800175c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001760:	d00c      	beq.n	800177c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001762:	4b8b      	ldr	r3, [pc, #556]	@ (8001990 <HAL_RCC_OscConfig+0x274>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800176a:	2b0c      	cmp	r3, #12
 800176c:	d112      	bne.n	8001794 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800176e:	4b88      	ldr	r3, [pc, #544]	@ (8001990 <HAL_RCC_OscConfig+0x274>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001776:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800177a:	d10b      	bne.n	8001794 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800177c:	4b84      	ldr	r3, [pc, #528]	@ (8001990 <HAL_RCC_OscConfig+0x274>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001784:	2b00      	cmp	r3, #0
 8001786:	d05b      	beq.n	8001840 <HAL_RCC_OscConfig+0x124>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d157      	bne.n	8001840 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e25a      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800179c:	d106      	bne.n	80017ac <HAL_RCC_OscConfig+0x90>
 800179e:	4b7c      	ldr	r3, [pc, #496]	@ (8001990 <HAL_RCC_OscConfig+0x274>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a7b      	ldr	r2, [pc, #492]	@ (8001990 <HAL_RCC_OscConfig+0x274>)
 80017a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	e01d      	b.n	80017e8 <HAL_RCC_OscConfig+0xcc>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017b4:	d10c      	bne.n	80017d0 <HAL_RCC_OscConfig+0xb4>
 80017b6:	4b76      	ldr	r3, [pc, #472]	@ (8001990 <HAL_RCC_OscConfig+0x274>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a75      	ldr	r2, [pc, #468]	@ (8001990 <HAL_RCC_OscConfig+0x274>)
 80017bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017c0:	6013      	str	r3, [r2, #0]
 80017c2:	4b73      	ldr	r3, [pc, #460]	@ (8001990 <HAL_RCC_OscConfig+0x274>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a72      	ldr	r2, [pc, #456]	@ (8001990 <HAL_RCC_OscConfig+0x274>)
 80017c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	e00b      	b.n	80017e8 <HAL_RCC_OscConfig+0xcc>
 80017d0:	4b6f      	ldr	r3, [pc, #444]	@ (8001990 <HAL_RCC_OscConfig+0x274>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a6e      	ldr	r2, [pc, #440]	@ (8001990 <HAL_RCC_OscConfig+0x274>)
 80017d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b6c      	ldr	r3, [pc, #432]	@ (8001990 <HAL_RCC_OscConfig+0x274>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a6b      	ldr	r2, [pc, #428]	@ (8001990 <HAL_RCC_OscConfig+0x274>)
 80017e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d013      	beq.n	8001818 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f0:	f7ff f976 	bl	8000ae0 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f8:	f7ff f972 	bl	8000ae0 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b64      	cmp	r3, #100	@ 0x64
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e21f      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180a:	4b61      	ldr	r3, [pc, #388]	@ (8001990 <HAL_RCC_OscConfig+0x274>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0f0      	beq.n	80017f8 <HAL_RCC_OscConfig+0xdc>
 8001816:	e014      	b.n	8001842 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001818:	f7ff f962 	bl	8000ae0 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001820:	f7ff f95e 	bl	8000ae0 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b64      	cmp	r3, #100	@ 0x64
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e20b      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001832:	4b57      	ldr	r3, [pc, #348]	@ (8001990 <HAL_RCC_OscConfig+0x274>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d1f0      	bne.n	8001820 <HAL_RCC_OscConfig+0x104>
 800183e:	e000      	b.n	8001842 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001840:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	2b00      	cmp	r3, #0
 800184c:	d06f      	beq.n	800192e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800184e:	4b50      	ldr	r3, [pc, #320]	@ (8001990 <HAL_RCC_OscConfig+0x274>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	f003 030c 	and.w	r3, r3, #12
 8001856:	2b00      	cmp	r3, #0
 8001858:	d017      	beq.n	800188a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800185a:	4b4d      	ldr	r3, [pc, #308]	@ (8001990 <HAL_RCC_OscConfig+0x274>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 030c 	and.w	r3, r3, #12
        || \
 8001862:	2b08      	cmp	r3, #8
 8001864:	d105      	bne.n	8001872 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001866:	4b4a      	ldr	r3, [pc, #296]	@ (8001990 <HAL_RCC_OscConfig+0x274>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d00b      	beq.n	800188a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001872:	4b47      	ldr	r3, [pc, #284]	@ (8001990 <HAL_RCC_OscConfig+0x274>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800187a:	2b0c      	cmp	r3, #12
 800187c:	d11c      	bne.n	80018b8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800187e:	4b44      	ldr	r3, [pc, #272]	@ (8001990 <HAL_RCC_OscConfig+0x274>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d116      	bne.n	80018b8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800188a:	4b41      	ldr	r3, [pc, #260]	@ (8001990 <HAL_RCC_OscConfig+0x274>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d005      	beq.n	80018a2 <HAL_RCC_OscConfig+0x186>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d001      	beq.n	80018a2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	e1d3      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001990 <HAL_RCC_OscConfig+0x274>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	00db      	lsls	r3, r3, #3
 80018b0:	4937      	ldr	r1, [pc, #220]	@ (8001990 <HAL_RCC_OscConfig+0x274>)
 80018b2:	4313      	orrs	r3, r2
 80018b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018b6:	e03a      	b.n	800192e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d020      	beq.n	8001902 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018c0:	4b34      	ldr	r3, [pc, #208]	@ (8001994 <HAL_RCC_OscConfig+0x278>)
 80018c2:	2201      	movs	r2, #1
 80018c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c6:	f7ff f90b 	bl	8000ae0 <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018cc:	e008      	b.n	80018e0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ce:	f7ff f907 	bl	8000ae0 <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d901      	bls.n	80018e0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80018dc:	2303      	movs	r3, #3
 80018de:	e1b4      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001990 <HAL_RCC_OscConfig+0x274>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0302 	and.w	r3, r3, #2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0f0      	beq.n	80018ce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ec:	4b28      	ldr	r3, [pc, #160]	@ (8001990 <HAL_RCC_OscConfig+0x274>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	691b      	ldr	r3, [r3, #16]
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	4925      	ldr	r1, [pc, #148]	@ (8001990 <HAL_RCC_OscConfig+0x274>)
 80018fc:	4313      	orrs	r3, r2
 80018fe:	600b      	str	r3, [r1, #0]
 8001900:	e015      	b.n	800192e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001902:	4b24      	ldr	r3, [pc, #144]	@ (8001994 <HAL_RCC_OscConfig+0x278>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001908:	f7ff f8ea 	bl	8000ae0 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001910:	f7ff f8e6 	bl	8000ae0 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e193      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001922:	4b1b      	ldr	r3, [pc, #108]	@ (8001990 <HAL_RCC_OscConfig+0x274>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0308 	and.w	r3, r3, #8
 8001936:	2b00      	cmp	r3, #0
 8001938:	d036      	beq.n	80019a8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	695b      	ldr	r3, [r3, #20]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d016      	beq.n	8001970 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001942:	4b15      	ldr	r3, [pc, #84]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 8001944:	2201      	movs	r2, #1
 8001946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001948:	f7ff f8ca 	bl	8000ae0 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001950:	f7ff f8c6 	bl	8000ae0 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e173      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001962:	4b0b      	ldr	r3, [pc, #44]	@ (8001990 <HAL_RCC_OscConfig+0x274>)
 8001964:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0f0      	beq.n	8001950 <HAL_RCC_OscConfig+0x234>
 800196e:	e01b      	b.n	80019a8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001970:	4b09      	ldr	r3, [pc, #36]	@ (8001998 <HAL_RCC_OscConfig+0x27c>)
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001976:	f7ff f8b3 	bl	8000ae0 <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800197c:	e00e      	b.n	800199c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800197e:	f7ff f8af 	bl	8000ae0 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d907      	bls.n	800199c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e15c      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
 8001990:	40023800 	.word	0x40023800
 8001994:	42470000 	.word	0x42470000
 8001998:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800199c:	4b8a      	ldr	r3, [pc, #552]	@ (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 800199e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019a0:	f003 0302 	and.w	r3, r3, #2
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d1ea      	bne.n	800197e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0304 	and.w	r3, r3, #4
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 8097 	beq.w	8001ae4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019b6:	2300      	movs	r3, #0
 80019b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ba:	4b83      	ldr	r3, [pc, #524]	@ (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10f      	bne.n	80019e6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	4b7f      	ldr	r3, [pc, #508]	@ (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	4a7e      	ldr	r2, [pc, #504]	@ (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 80019d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019d6:	4b7c      	ldr	r3, [pc, #496]	@ (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019de:	60bb      	str	r3, [r7, #8]
 80019e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019e2:	2301      	movs	r3, #1
 80019e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e6:	4b79      	ldr	r3, [pc, #484]	@ (8001bcc <HAL_RCC_OscConfig+0x4b0>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d118      	bne.n	8001a24 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019f2:	4b76      	ldr	r3, [pc, #472]	@ (8001bcc <HAL_RCC_OscConfig+0x4b0>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a75      	ldr	r2, [pc, #468]	@ (8001bcc <HAL_RCC_OscConfig+0x4b0>)
 80019f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019fe:	f7ff f86f 	bl	8000ae0 <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a04:	e008      	b.n	8001a18 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a06:	f7ff f86b 	bl	8000ae0 <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e118      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a18:	4b6c      	ldr	r3, [pc, #432]	@ (8001bcc <HAL_RCC_OscConfig+0x4b0>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d0f0      	beq.n	8001a06 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d106      	bne.n	8001a3a <HAL_RCC_OscConfig+0x31e>
 8001a2c:	4b66      	ldr	r3, [pc, #408]	@ (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001a2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a30:	4a65      	ldr	r2, [pc, #404]	@ (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001a32:	f043 0301 	orr.w	r3, r3, #1
 8001a36:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a38:	e01c      	b.n	8001a74 <HAL_RCC_OscConfig+0x358>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	2b05      	cmp	r3, #5
 8001a40:	d10c      	bne.n	8001a5c <HAL_RCC_OscConfig+0x340>
 8001a42:	4b61      	ldr	r3, [pc, #388]	@ (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a46:	4a60      	ldr	r2, [pc, #384]	@ (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001a48:	f043 0304 	orr.w	r3, r3, #4
 8001a4c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a4e:	4b5e      	ldr	r3, [pc, #376]	@ (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001a50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a52:	4a5d      	ldr	r2, [pc, #372]	@ (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001a54:	f043 0301 	orr.w	r3, r3, #1
 8001a58:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a5a:	e00b      	b.n	8001a74 <HAL_RCC_OscConfig+0x358>
 8001a5c:	4b5a      	ldr	r3, [pc, #360]	@ (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a60:	4a59      	ldr	r2, [pc, #356]	@ (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001a62:	f023 0301 	bic.w	r3, r3, #1
 8001a66:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a68:	4b57      	ldr	r3, [pc, #348]	@ (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a6c:	4a56      	ldr	r2, [pc, #344]	@ (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001a6e:	f023 0304 	bic.w	r3, r3, #4
 8001a72:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d015      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7c:	f7ff f830 	bl	8000ae0 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a82:	e00a      	b.n	8001a9a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a84:	f7ff f82c 	bl	8000ae0 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e0d7      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a9a:	4b4b      	ldr	r3, [pc, #300]	@ (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a9e:	f003 0302 	and.w	r3, r3, #2
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d0ee      	beq.n	8001a84 <HAL_RCC_OscConfig+0x368>
 8001aa6:	e014      	b.n	8001ad2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aa8:	f7ff f81a 	bl	8000ae0 <HAL_GetTick>
 8001aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001aae:	e00a      	b.n	8001ac6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab0:	f7ff f816 	bl	8000ae0 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e0c1      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ac6:	4b40      	ldr	r3, [pc, #256]	@ (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d1ee      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ad2:	7dfb      	ldrb	r3, [r7, #23]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d105      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad8:	4b3b      	ldr	r3, [pc, #236]	@ (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001adc:	4a3a      	ldr	r2, [pc, #232]	@ (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001ade:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ae2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	699b      	ldr	r3, [r3, #24]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 80ad 	beq.w	8001c48 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001aee:	4b36      	ldr	r3, [pc, #216]	@ (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	f003 030c 	and.w	r3, r3, #12
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d060      	beq.n	8001bbc <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d145      	bne.n	8001b8e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b02:	4b33      	ldr	r3, [pc, #204]	@ (8001bd0 <HAL_RCC_OscConfig+0x4b4>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b08:	f7fe ffea 	bl	8000ae0 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b0e:	e008      	b.n	8001b22 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b10:	f7fe ffe6 	bl	8000ae0 <HAL_GetTick>
 8001b14:	4602      	mov	r2, r0
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e093      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b22:	4b29      	ldr	r3, [pc, #164]	@ (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1f0      	bne.n	8001b10 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69da      	ldr	r2, [r3, #28]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	431a      	orrs	r2, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b3c:	019b      	lsls	r3, r3, #6
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b44:	085b      	lsrs	r3, r3, #1
 8001b46:	3b01      	subs	r3, #1
 8001b48:	041b      	lsls	r3, r3, #16
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b50:	061b      	lsls	r3, r3, #24
 8001b52:	431a      	orrs	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b58:	071b      	lsls	r3, r3, #28
 8001b5a:	491b      	ldr	r1, [pc, #108]	@ (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b60:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd0 <HAL_RCC_OscConfig+0x4b4>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b66:	f7fe ffbb 	bl	8000ae0 <HAL_GetTick>
 8001b6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b6e:	f7fe ffb7 	bl	8000ae0 <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e064      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b80:	4b11      	ldr	r3, [pc, #68]	@ (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0f0      	beq.n	8001b6e <HAL_RCC_OscConfig+0x452>
 8001b8c:	e05c      	b.n	8001c48 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8e:	4b10      	ldr	r3, [pc, #64]	@ (8001bd0 <HAL_RCC_OscConfig+0x4b4>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7fe ffa4 	bl	8000ae0 <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9c:	f7fe ffa0 	bl	8000ae0 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e04d      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bae:	4b06      	ldr	r3, [pc, #24]	@ (8001bc8 <HAL_RCC_OscConfig+0x4ac>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d1f0      	bne.n	8001b9c <HAL_RCC_OscConfig+0x480>
 8001bba:	e045      	b.n	8001c48 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d107      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e040      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40007000 	.word	0x40007000
 8001bd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c54 <HAL_RCC_OscConfig+0x538>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	699b      	ldr	r3, [r3, #24]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d030      	beq.n	8001c44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d129      	bne.n	8001c44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d122      	bne.n	8001c44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bfe:	68fa      	ldr	r2, [r7, #12]
 8001c00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c04:	4013      	ands	r3, r2
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d119      	bne.n	8001c44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c1a:	085b      	lsrs	r3, r3, #1
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d10f      	bne.n	8001c44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d107      	bne.n	8001c44 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d001      	beq.n	8001c48 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800

08001c58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e041      	b.n	8001cee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d106      	bne.n	8001c84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f839 	bl	8001cf6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2202      	movs	r2, #2
 8001c88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	3304      	adds	r3, #4
 8001c94:	4619      	mov	r1, r3
 8001c96:	4610      	mov	r0, r2
 8001c98:	f000 f9c0 	bl	800201c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
	...

08001d0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b085      	sub	sp, #20
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d001      	beq.n	8001d24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e04e      	b.n	8001dc2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2202      	movs	r2, #2
 8001d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	68da      	ldr	r2, [r3, #12]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f042 0201 	orr.w	r2, r2, #1
 8001d3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a23      	ldr	r2, [pc, #140]	@ (8001dd0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d022      	beq.n	8001d8c <HAL_TIM_Base_Start_IT+0x80>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d4e:	d01d      	beq.n	8001d8c <HAL_TIM_Base_Start_IT+0x80>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a1f      	ldr	r2, [pc, #124]	@ (8001dd4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d018      	beq.n	8001d8c <HAL_TIM_Base_Start_IT+0x80>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a1e      	ldr	r2, [pc, #120]	@ (8001dd8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d013      	beq.n	8001d8c <HAL_TIM_Base_Start_IT+0x80>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a1c      	ldr	r2, [pc, #112]	@ (8001ddc <HAL_TIM_Base_Start_IT+0xd0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d00e      	beq.n	8001d8c <HAL_TIM_Base_Start_IT+0x80>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a1b      	ldr	r2, [pc, #108]	@ (8001de0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d009      	beq.n	8001d8c <HAL_TIM_Base_Start_IT+0x80>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a19      	ldr	r2, [pc, #100]	@ (8001de4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d004      	beq.n	8001d8c <HAL_TIM_Base_Start_IT+0x80>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a18      	ldr	r2, [pc, #96]	@ (8001de8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d111      	bne.n	8001db0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2b06      	cmp	r3, #6
 8001d9c:	d010      	beq.n	8001dc0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f042 0201 	orr.w	r2, r2, #1
 8001dac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dae:	e007      	b.n	8001dc0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f042 0201 	orr.w	r2, r2, #1
 8001dbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40010000 	.word	0x40010000
 8001dd4:	40000400 	.word	0x40000400
 8001dd8:	40000800 	.word	0x40000800
 8001ddc:	40000c00 	.word	0x40000c00
 8001de0:	40010400 	.word	0x40010400
 8001de4:	40014000 	.word	0x40014000
 8001de8:	40001800 	.word	0x40001800

08001dec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	f003 0302 	and.w	r3, r3, #2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d020      	beq.n	8001e50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d01b      	beq.n	8001e50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f06f 0202 	mvn.w	r2, #2
 8001e20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2201      	movs	r2, #1
 8001e26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f8d2 	bl	8001fe0 <HAL_TIM_IC_CaptureCallback>
 8001e3c:	e005      	b.n	8001e4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f8c4 	bl	8001fcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f8d5 	bl	8001ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d020      	beq.n	8001e9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d01b      	beq.n	8001e9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0204 	mvn.w	r2, #4
 8001e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2202      	movs	r2, #2
 8001e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f8ac 	bl	8001fe0 <HAL_TIM_IC_CaptureCallback>
 8001e88:	e005      	b.n	8001e96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f89e 	bl	8001fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f8af 	bl	8001ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d020      	beq.n	8001ee8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d01b      	beq.n	8001ee8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f06f 0208 	mvn.w	r2, #8
 8001eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2204      	movs	r2, #4
 8001ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	69db      	ldr	r3, [r3, #28]
 8001ec6:	f003 0303 	and.w	r3, r3, #3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d003      	beq.n	8001ed6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f886 	bl	8001fe0 <HAL_TIM_IC_CaptureCallback>
 8001ed4:	e005      	b.n	8001ee2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f878 	bl	8001fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f889 	bl	8001ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	f003 0310 	and.w	r3, r3, #16
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d020      	beq.n	8001f34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d01b      	beq.n	8001f34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f06f 0210 	mvn.w	r2, #16
 8001f04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2208      	movs	r2, #8
 8001f0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f860 	bl	8001fe0 <HAL_TIM_IC_CaptureCallback>
 8001f20:	e005      	b.n	8001f2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f000 f852 	bl	8001fcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f000 f863 	bl	8001ff4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d00c      	beq.n	8001f58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d007      	beq.n	8001f58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0201 	mvn.w	r2, #1
 8001f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7fe fc70 	bl	8000838 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00c      	beq.n	8001f7c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d007      	beq.n	8001f7c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f000 f900 	bl	800217c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00c      	beq.n	8001fa0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d007      	beq.n	8001fa0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f834 	bl	8002008 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f003 0320 	and.w	r3, r3, #32
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00c      	beq.n	8001fc4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f003 0320 	and.w	r3, r3, #32
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d007      	beq.n	8001fc4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0220 	mvn.w	r2, #32
 8001fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f8d2 	bl	8002168 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	3710      	adds	r7, #16
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4a43      	ldr	r2, [pc, #268]	@ (800213c <TIM_Base_SetConfig+0x120>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d013      	beq.n	800205c <TIM_Base_SetConfig+0x40>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800203a:	d00f      	beq.n	800205c <TIM_Base_SetConfig+0x40>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a40      	ldr	r2, [pc, #256]	@ (8002140 <TIM_Base_SetConfig+0x124>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d00b      	beq.n	800205c <TIM_Base_SetConfig+0x40>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a3f      	ldr	r2, [pc, #252]	@ (8002144 <TIM_Base_SetConfig+0x128>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d007      	beq.n	800205c <TIM_Base_SetConfig+0x40>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a3e      	ldr	r2, [pc, #248]	@ (8002148 <TIM_Base_SetConfig+0x12c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d003      	beq.n	800205c <TIM_Base_SetConfig+0x40>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a3d      	ldr	r2, [pc, #244]	@ (800214c <TIM_Base_SetConfig+0x130>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d108      	bne.n	800206e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002062:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	68fa      	ldr	r2, [r7, #12]
 800206a:	4313      	orrs	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a32      	ldr	r2, [pc, #200]	@ (800213c <TIM_Base_SetConfig+0x120>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d02b      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800207c:	d027      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a2f      	ldr	r2, [pc, #188]	@ (8002140 <TIM_Base_SetConfig+0x124>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d023      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a2e      	ldr	r2, [pc, #184]	@ (8002144 <TIM_Base_SetConfig+0x128>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d01f      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a2d      	ldr	r2, [pc, #180]	@ (8002148 <TIM_Base_SetConfig+0x12c>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d01b      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a2c      	ldr	r2, [pc, #176]	@ (800214c <TIM_Base_SetConfig+0x130>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d017      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a2b      	ldr	r2, [pc, #172]	@ (8002150 <TIM_Base_SetConfig+0x134>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d013      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a2a      	ldr	r2, [pc, #168]	@ (8002154 <TIM_Base_SetConfig+0x138>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d00f      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a29      	ldr	r2, [pc, #164]	@ (8002158 <TIM_Base_SetConfig+0x13c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00b      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a28      	ldr	r2, [pc, #160]	@ (800215c <TIM_Base_SetConfig+0x140>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d007      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a27      	ldr	r2, [pc, #156]	@ (8002160 <TIM_Base_SetConfig+0x144>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d003      	beq.n	80020ce <TIM_Base_SetConfig+0xb2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a26      	ldr	r2, [pc, #152]	@ (8002164 <TIM_Base_SetConfig+0x148>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d108      	bne.n	80020e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	68fa      	ldr	r2, [r7, #12]
 80020dc:	4313      	orrs	r3, r2
 80020de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	689a      	ldr	r2, [r3, #8]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a0e      	ldr	r2, [pc, #56]	@ (800213c <TIM_Base_SetConfig+0x120>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d003      	beq.n	800210e <TIM_Base_SetConfig+0xf2>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a10      	ldr	r2, [pc, #64]	@ (800214c <TIM_Base_SetConfig+0x130>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d103      	bne.n	8002116 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	691a      	ldr	r2, [r3, #16]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f043 0204 	orr.w	r2, r3, #4
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	601a      	str	r2, [r3, #0]
}
 800212e:	bf00      	nop
 8002130:	3714      	adds	r7, #20
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	40010000 	.word	0x40010000
 8002140:	40000400 	.word	0x40000400
 8002144:	40000800 	.word	0x40000800
 8002148:	40000c00 	.word	0x40000c00
 800214c:	40010400 	.word	0x40010400
 8002150:	40014000 	.word	0x40014000
 8002154:	40014400 	.word	0x40014400
 8002158:	40014800 	.word	0x40014800
 800215c:	40001800 	.word	0x40001800
 8002160:	40001c00 	.word	0x40001c00
 8002164:	40002000 	.word	0x40002000

08002168 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	f103 0208 	add.w	r2, r3, #8
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f04f 32ff 	mov.w	r2, #4294967295
 80021a8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f103 0208 	add.w	r2, r3, #8
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f103 0208 	add.w	r2, r3, #8
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80021ea:	b480      	push	{r7}
 80021ec:	b085      	sub	sp, #20
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	68fa      	ldr	r2, [r7, #12]
 80021fe:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	689a      	ldr	r2, [r3, #8]
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	683a      	ldr	r2, [r7, #0]
 8002214:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	601a      	str	r2, [r3, #0]
}
 8002226:	bf00      	nop
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002232:	b480      	push	{r7}
 8002234:	b085      	sub	sp, #20
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
 800223a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002248:	d103      	bne.n	8002252 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	e00c      	b.n	800226c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3308      	adds	r3, #8
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	e002      	b.n	8002260 <vListInsert+0x2e>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	68ba      	ldr	r2, [r7, #8]
 8002268:	429a      	cmp	r2, r3
 800226a:	d2f6      	bcs.n	800225a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	68fa      	ldr	r2, [r7, #12]
 8002280:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	601a      	str	r2, [r3, #0]
}
 8002298:	bf00      	nop
 800229a:	3714      	adds	r7, #20
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022a4:	b480      	push	{r7}
 80022a6:	b085      	sub	sp, #20
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6892      	ldr	r2, [r2, #8]
 80022ba:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6852      	ldr	r2, [r2, #4]
 80022c4:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d103      	bne.n	80022d8 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	1e5a      	subs	r2, r3, #1
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d10b      	bne.n	8002324 <xQueueGenericReset+0x2c>
        __asm volatile
 800230c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002310:	f383 8811 	msr	BASEPRI, r3
 8002314:	f3bf 8f6f 	isb	sy
 8002318:	f3bf 8f4f 	dsb	sy
 800231c:	60bb      	str	r3, [r7, #8]
    }
 800231e:	bf00      	nop
 8002320:	bf00      	nop
 8002322:	e7fd      	b.n	8002320 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002324:	f002 f8ba 	bl	800449c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002330:	68f9      	ldr	r1, [r7, #12]
 8002332:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002334:	fb01 f303 	mul.w	r3, r1, r3
 8002338:	441a      	add	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2200      	movs	r2, #0
 8002342:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002354:	3b01      	subs	r3, #1
 8002356:	68f9      	ldr	r1, [r7, #12]
 8002358:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800235a:	fb01 f303 	mul.w	r3, r1, r3
 800235e:	441a      	add	r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	22ff      	movs	r2, #255	@ 0xff
 8002368:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	22ff      	movs	r2, #255	@ 0xff
 8002370:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d109      	bne.n	800238e <xQueueGenericReset+0x96>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00f      	beq.n	80023a2 <xQueueGenericReset+0xaa>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	3310      	adds	r3, #16
 8002386:	4618      	mov	r0, r3
 8002388:	f001 f900 	bl	800358c <xTaskRemoveFromEventList>
 800238c:	e009      	b.n	80023a2 <xQueueGenericReset+0xaa>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	3310      	adds	r3, #16
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff fefc 	bl	8002190 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	3324      	adds	r3, #36	@ 0x24
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fef7 	bl	8002190 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 80023a2:	f002 f8ad 	bl	8004500 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 80023a6:	2301      	movs	r3, #1
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3710      	adds	r7, #16
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08c      	sub	sp, #48	@ 0x30
 80023b4:	af02      	add	r7, sp, #8
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	4613      	mov	r3, r2
 80023bc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10b      	bne.n	80023dc <xQueueGenericCreate+0x2c>
        __asm volatile
 80023c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023c8:	f383 8811 	msr	BASEPRI, r3
 80023cc:	f3bf 8f6f 	isb	sy
 80023d0:	f3bf 8f4f 	dsb	sy
 80023d4:	61bb      	str	r3, [r7, #24]
    }
 80023d6:	bf00      	nop
 80023d8:	bf00      	nop
 80023da:	e7fd      	b.n	80023d8 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	68ba      	ldr	r2, [r7, #8]
 80023e0:	fb02 f303 	mul.w	r3, r2, r3
 80023e4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d006      	beq.n	80023fa <xQueueGenericCreate+0x4a>
 80023ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f4:	68fa      	ldr	r2, [r7, #12]
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d101      	bne.n	80023fe <xQueueGenericCreate+0x4e>
 80023fa:	2301      	movs	r3, #1
 80023fc:	e000      	b.n	8002400 <xQueueGenericCreate+0x50>
 80023fe:	2300      	movs	r3, #0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d10b      	bne.n	800241c <xQueueGenericCreate+0x6c>
        __asm volatile
 8002404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002408:	f383 8811 	msr	BASEPRI, r3
 800240c:	f3bf 8f6f 	isb	sy
 8002410:	f3bf 8f4f 	dsb	sy
 8002414:	617b      	str	r3, [r7, #20]
    }
 8002416:	bf00      	nop
 8002418:	bf00      	nop
 800241a:	e7fd      	b.n	8002418 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800241c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002422:	d90b      	bls.n	800243c <xQueueGenericCreate+0x8c>
        __asm volatile
 8002424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002428:	f383 8811 	msr	BASEPRI, r3
 800242c:	f3bf 8f6f 	isb	sy
 8002430:	f3bf 8f4f 	dsb	sy
 8002434:	613b      	str	r3, [r7, #16]
    }
 8002436:	bf00      	nop
 8002438:	bf00      	nop
 800243a:	e7fd      	b.n	8002438 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800243c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243e:	3350      	adds	r3, #80	@ 0x50
 8002440:	4618      	mov	r0, r3
 8002442:	f002 f95d 	bl	8004700 <pvPortMalloc>
 8002446:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002448:	6a3b      	ldr	r3, [r7, #32]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d00d      	beq.n	800246a <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800244e:	6a3b      	ldr	r3, [r7, #32]
 8002450:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	3350      	adds	r3, #80	@ 0x50
 8002456:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002458:	79fa      	ldrb	r2, [r7, #7]
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	4613      	mov	r3, r2
 8002460:	69fa      	ldr	r2, [r7, #28]
 8002462:	68b9      	ldr	r1, [r7, #8]
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 f805 	bl	8002474 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800246a:	6a3b      	ldr	r3, [r7, #32]
    }
 800246c:	4618      	mov	r0, r3
 800246e:	3728      	adds	r7, #40	@ 0x28
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}

08002474 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	607a      	str	r2, [r7, #4]
 8002480:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d103      	bne.n	8002490 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002488:	69bb      	ldr	r3, [r7, #24]
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	e002      	b.n	8002496 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002490:	69bb      	ldr	r3, [r7, #24]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	68fa      	ldr	r2, [r7, #12]
 800249a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800249c:	69bb      	ldr	r3, [r7, #24]
 800249e:	68ba      	ldr	r2, [r7, #8]
 80024a0:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024a2:	2101      	movs	r1, #1
 80024a4:	69b8      	ldr	r0, [r7, #24]
 80024a6:	f7ff ff27 	bl	80022f8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 80024aa:	69bb      	ldr	r3, [r7, #24]
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80024b2:	78fb      	ldrb	r3, [r7, #3]
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	68f9      	ldr	r1, [r7, #12]
 80024b8:	2073      	movs	r0, #115	@ 0x73
 80024ba:	f003 fc8f 	bl	8005ddc <SEGGER_SYSVIEW_RecordU32x3>
}
 80024be:	bf00      	nop
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b090      	sub	sp, #64	@ 0x40
 80024cc:	af02      	add	r7, sp, #8
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
 80024d4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80024d6:	2300      	movs	r3, #0
 80024d8:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 80024de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d10b      	bne.n	80024fc <xQueueGenericSend+0x34>
        __asm volatile
 80024e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024e8:	f383 8811 	msr	BASEPRI, r3
 80024ec:	f3bf 8f6f 	isb	sy
 80024f0:	f3bf 8f4f 	dsb	sy
 80024f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80024f6:	bf00      	nop
 80024f8:	bf00      	nop
 80024fa:	e7fd      	b.n	80024f8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d103      	bne.n	800250a <xQueueGenericSend+0x42>
 8002502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <xQueueGenericSend+0x46>
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <xQueueGenericSend+0x48>
 800250e:	2300      	movs	r3, #0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10b      	bne.n	800252c <xQueueGenericSend+0x64>
        __asm volatile
 8002514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002518:	f383 8811 	msr	BASEPRI, r3
 800251c:	f3bf 8f6f 	isb	sy
 8002520:	f3bf 8f4f 	dsb	sy
 8002524:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8002526:	bf00      	nop
 8002528:	bf00      	nop
 800252a:	e7fd      	b.n	8002528 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	2b02      	cmp	r3, #2
 8002530:	d103      	bne.n	800253a <xQueueGenericSend+0x72>
 8002532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002534:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002536:	2b01      	cmp	r3, #1
 8002538:	d101      	bne.n	800253e <xQueueGenericSend+0x76>
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <xQueueGenericSend+0x78>
 800253e:	2300      	movs	r3, #0
 8002540:	2b00      	cmp	r3, #0
 8002542:	d10b      	bne.n	800255c <xQueueGenericSend+0x94>
        __asm volatile
 8002544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002548:	f383 8811 	msr	BASEPRI, r3
 800254c:	f3bf 8f6f 	isb	sy
 8002550:	f3bf 8f4f 	dsb	sy
 8002554:	623b      	str	r3, [r7, #32]
    }
 8002556:	bf00      	nop
 8002558:	bf00      	nop
 800255a:	e7fd      	b.n	8002558 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800255c:	f001 f9b4 	bl	80038c8 <xTaskGetSchedulerState>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d102      	bne.n	800256c <xQueueGenericSend+0xa4>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <xQueueGenericSend+0xa8>
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <xQueueGenericSend+0xaa>
 8002570:	2300      	movs	r3, #0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10b      	bne.n	800258e <xQueueGenericSend+0xc6>
        __asm volatile
 8002576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800257a:	f383 8811 	msr	BASEPRI, r3
 800257e:	f3bf 8f6f 	isb	sy
 8002582:	f3bf 8f4f 	dsb	sy
 8002586:	61fb      	str	r3, [r7, #28]
    }
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	e7fd      	b.n	800258a <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800258e:	f001 ff85 	bl	800449c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002594:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800259a:	429a      	cmp	r2, r3
 800259c:	d302      	bcc.n	80025a4 <xQueueGenericSend+0xdc>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d11f      	bne.n	80025e4 <xQueueGenericSend+0x11c>
            {
                traceQUEUE_SEND( pxQueue );
 80025a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025a6:	4618      	mov	r0, r3
 80025a8:	f004 f9a6 	bl	80068f8 <SEGGER_SYSVIEW_ShrinkId>
 80025ac:	68ba      	ldr	r2, [r7, #8]
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	9300      	str	r3, [sp, #0]
 80025b4:	460b      	mov	r3, r1
 80025b6:	4601      	mov	r1, r0
 80025b8:	205a      	movs	r0, #90	@ 0x5a
 80025ba:	f003 fc85 	bl	8005ec8 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80025be:	683a      	ldr	r2, [r7, #0]
 80025c0:	68b9      	ldr	r1, [r7, #8]
 80025c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025c4:	f000 fa5c 	bl	8002a80 <prvCopyDataToQueue>
 80025c8:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80025ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d004      	beq.n	80025dc <xQueueGenericSend+0x114>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80025d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d4:	3324      	adds	r3, #36	@ 0x24
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 ffd8 	bl	800358c <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80025dc:	f001 ff90 	bl	8004500 <vPortExitCritical>
                return pdPASS;
 80025e0:	2301      	movs	r3, #1
 80025e2:	e07d      	b.n	80026e0 <xQueueGenericSend+0x218>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d110      	bne.n	800260c <xQueueGenericSend+0x144>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80025ea:	f001 ff89 	bl	8004500 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 80025ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f0:	4618      	mov	r0, r3
 80025f2:	f004 f981 	bl	80068f8 <SEGGER_SYSVIEW_ShrinkId>
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	460b      	mov	r3, r1
 8002600:	4601      	mov	r1, r0
 8002602:	205a      	movs	r0, #90	@ 0x5a
 8002604:	f003 fc60 	bl	8005ec8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002608:	2300      	movs	r3, #0
 800260a:	e069      	b.n	80026e0 <xQueueGenericSend+0x218>
                }
                else if( xEntryTimeSet == pdFALSE )
 800260c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800260e:	2b00      	cmp	r3, #0
 8002610:	d106      	bne.n	8002620 <xQueueGenericSend+0x158>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002612:	f107 0314 	add.w	r3, r7, #20
 8002616:	4618      	mov	r0, r3
 8002618:	f001 f820 	bl	800365c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800261c:	2301      	movs	r3, #1
 800261e:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002620:	f001 ff6e 	bl	8004500 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002624:	f000 fd94 	bl	8003150 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002628:	f001 ff38 	bl	800449c <vPortEnterCritical>
 800262c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800262e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002632:	b25b      	sxtb	r3, r3
 8002634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002638:	d103      	bne.n	8002642 <xQueueGenericSend+0x17a>
 800263a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002644:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002648:	b25b      	sxtb	r3, r3
 800264a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800264e:	d103      	bne.n	8002658 <xQueueGenericSend+0x190>
 8002650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002652:	2200      	movs	r2, #0
 8002654:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002658:	f001 ff52 	bl	8004500 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800265c:	1d3a      	adds	r2, r7, #4
 800265e:	f107 0314 	add.w	r3, r7, #20
 8002662:	4611      	mov	r1, r2
 8002664:	4618      	mov	r0, r3
 8002666:	f001 f80f 	bl	8003688 <xTaskCheckForTimeOut>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d124      	bne.n	80026ba <xQueueGenericSend+0x1f2>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002670:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002672:	f000 fafd 	bl	8002c70 <prvIsQueueFull>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d018      	beq.n	80026ae <xQueueGenericSend+0x1e6>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800267c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800267e:	3310      	adds	r3, #16
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	4611      	mov	r1, r2
 8002684:	4618      	mov	r0, r3
 8002686:	f000 ff2b 	bl	80034e0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 800268a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800268c:	f000 fa88 	bl	8002ba0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002690:	f000 fd6c 	bl	800316c <xTaskResumeAll>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	f47f af79 	bne.w	800258e <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 800269c:	4b12      	ldr	r3, [pc, #72]	@ (80026e8 <xQueueGenericSend+0x220>)
 800269e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	f3bf 8f4f 	dsb	sy
 80026a8:	f3bf 8f6f 	isb	sy
 80026ac:	e76f      	b.n	800258e <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80026ae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80026b0:	f000 fa76 	bl	8002ba0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80026b4:	f000 fd5a 	bl	800316c <xTaskResumeAll>
 80026b8:	e769      	b.n	800258e <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80026ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80026bc:	f000 fa70 	bl	8002ba0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80026c0:	f000 fd54 	bl	800316c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 80026c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026c6:	4618      	mov	r0, r3
 80026c8:	f004 f916 	bl	80068f8 <SEGGER_SYSVIEW_ShrinkId>
 80026cc:	68ba      	ldr	r2, [r7, #8]
 80026ce:	6879      	ldr	r1, [r7, #4]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	460b      	mov	r3, r1
 80026d6:	4601      	mov	r1, r0
 80026d8:	205a      	movs	r0, #90	@ 0x5a
 80026da:	f003 fbf5 	bl	8005ec8 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 80026de:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3738      	adds	r7, #56	@ 0x38
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	e000ed04 	.word	0xe000ed04

080026ec <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b090      	sub	sp, #64	@ 0x40
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	607a      	str	r2, [r7, #4]
 80026f8:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 80026fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002700:	2b00      	cmp	r3, #0
 8002702:	d10b      	bne.n	800271c <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8002704:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002708:	f383 8811 	msr	BASEPRI, r3
 800270c:	f3bf 8f6f 	isb	sy
 8002710:	f3bf 8f4f 	dsb	sy
 8002714:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8002716:	bf00      	nop
 8002718:	bf00      	nop
 800271a:	e7fd      	b.n	8002718 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d103      	bne.n	800272a <xQueueGenericSendFromISR+0x3e>
 8002722:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <xQueueGenericSendFromISR+0x42>
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <xQueueGenericSendFromISR+0x44>
 800272e:	2300      	movs	r3, #0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10b      	bne.n	800274c <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8002734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002738:	f383 8811 	msr	BASEPRI, r3
 800273c:	f3bf 8f6f 	isb	sy
 8002740:	f3bf 8f4f 	dsb	sy
 8002744:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8002746:	bf00      	nop
 8002748:	bf00      	nop
 800274a:	e7fd      	b.n	8002748 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	2b02      	cmp	r3, #2
 8002750:	d103      	bne.n	800275a <xQueueGenericSendFromISR+0x6e>
 8002752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002756:	2b01      	cmp	r3, #1
 8002758:	d101      	bne.n	800275e <xQueueGenericSendFromISR+0x72>
 800275a:	2301      	movs	r3, #1
 800275c:	e000      	b.n	8002760 <xQueueGenericSendFromISR+0x74>
 800275e:	2300      	movs	r3, #0
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10b      	bne.n	800277c <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8002764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002768:	f383 8811 	msr	BASEPRI, r3
 800276c:	f3bf 8f6f 	isb	sy
 8002770:	f3bf 8f4f 	dsb	sy
 8002774:	623b      	str	r3, [r7, #32]
    }
 8002776:	bf00      	nop
 8002778:	bf00      	nop
 800277a:	e7fd      	b.n	8002778 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800277c:	f001 ff7e 	bl	800467c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002780:	f3ef 8211 	mrs	r2, BASEPRI
 8002784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002788:	f383 8811 	msr	BASEPRI, r3
 800278c:	f3bf 8f6f 	isb	sy
 8002790:	f3bf 8f4f 	dsb	sy
 8002794:	61fa      	str	r2, [r7, #28]
 8002796:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002798:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800279a:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800279c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800279e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80027a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d302      	bcc.n	80027ae <xQueueGenericSendFromISR+0xc2>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d149      	bne.n	8002842 <xQueueGenericSendFromISR+0x156>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 80027ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80027b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 80027be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027c0:	4618      	mov	r0, r3
 80027c2:	f004 f899 	bl	80068f8 <SEGGER_SYSVIEW_ShrinkId>
 80027c6:	4601      	mov	r1, r0
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	461a      	mov	r2, r3
 80027cc:	2060      	movs	r0, #96	@ 0x60
 80027ce:	f003 faab 	bl	8005d28 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	68b9      	ldr	r1, [r7, #8]
 80027d6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80027d8:	f000 f952 	bl	8002a80 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 80027dc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80027e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e4:	d112      	bne.n	800280c <xQueueGenericSendFromISR+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d026      	beq.n	800283c <xQueueGenericSendFromISR+0x150>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027f0:	3324      	adds	r3, #36	@ 0x24
 80027f2:	4618      	mov	r0, r3
 80027f4:	f000 feca 	bl	800358c <xTaskRemoveFromEventList>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d01e      	beq.n	800283c <xQueueGenericSendFromISR+0x150>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d01b      	beq.n	800283c <xQueueGenericSendFromISR+0x150>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	601a      	str	r2, [r3, #0]
 800280a:	e017      	b.n	800283c <xQueueGenericSendFromISR+0x150>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800280c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002810:	2b7f      	cmp	r3, #127	@ 0x7f
 8002812:	d10b      	bne.n	800282c <xQueueGenericSendFromISR+0x140>
        __asm volatile
 8002814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002818:	f383 8811 	msr	BASEPRI, r3
 800281c:	f3bf 8f6f 	isb	sy
 8002820:	f3bf 8f4f 	dsb	sy
 8002824:	617b      	str	r3, [r7, #20]
    }
 8002826:	bf00      	nop
 8002828:	bf00      	nop
 800282a:	e7fd      	b.n	8002828 <xQueueGenericSendFromISR+0x13c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800282c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002830:	3301      	adds	r3, #1
 8002832:	b2db      	uxtb	r3, r3
 8002834:	b25a      	sxtb	r2, r3
 8002836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002838:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800283c:	2301      	movs	r3, #1
 800283e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8002840:	e00b      	b.n	800285a <xQueueGenericSendFromISR+0x16e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 8002842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002844:	4618      	mov	r0, r3
 8002846:	f004 f857 	bl	80068f8 <SEGGER_SYSVIEW_ShrinkId>
 800284a:	4601      	mov	r1, r0
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	461a      	mov	r2, r3
 8002850:	2060      	movs	r0, #96	@ 0x60
 8002852:	f003 fa69 	bl	8005d28 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 8002856:	2300      	movs	r3, #0
 8002858:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800285a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800285c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002864:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002866:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002868:	4618      	mov	r0, r3
 800286a:	3740      	adds	r7, #64	@ 0x40
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002870:	b590      	push	{r4, r7, lr}
 8002872:	b08f      	sub	sp, #60	@ 0x3c
 8002874:	af02      	add	r7, sp, #8
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800287c:	2300      	movs	r3, #0
 800287e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10b      	bne.n	80028a2 <xQueueReceive+0x32>
        __asm volatile
 800288a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800288e:	f383 8811 	msr	BASEPRI, r3
 8002892:	f3bf 8f6f 	isb	sy
 8002896:	f3bf 8f4f 	dsb	sy
 800289a:	623b      	str	r3, [r7, #32]
    }
 800289c:	bf00      	nop
 800289e:	bf00      	nop
 80028a0:	e7fd      	b.n	800289e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d103      	bne.n	80028b0 <xQueueReceive+0x40>
 80028a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <xQueueReceive+0x44>
 80028b0:	2301      	movs	r3, #1
 80028b2:	e000      	b.n	80028b6 <xQueueReceive+0x46>
 80028b4:	2300      	movs	r3, #0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10b      	bne.n	80028d2 <xQueueReceive+0x62>
        __asm volatile
 80028ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028be:	f383 8811 	msr	BASEPRI, r3
 80028c2:	f3bf 8f6f 	isb	sy
 80028c6:	f3bf 8f4f 	dsb	sy
 80028ca:	61fb      	str	r3, [r7, #28]
    }
 80028cc:	bf00      	nop
 80028ce:	bf00      	nop
 80028d0:	e7fd      	b.n	80028ce <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028d2:	f000 fff9 	bl	80038c8 <xTaskGetSchedulerState>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d102      	bne.n	80028e2 <xQueueReceive+0x72>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <xQueueReceive+0x76>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <xQueueReceive+0x78>
 80028e6:	2300      	movs	r3, #0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10b      	bne.n	8002904 <xQueueReceive+0x94>
        __asm volatile
 80028ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028f0:	f383 8811 	msr	BASEPRI, r3
 80028f4:	f3bf 8f6f 	isb	sy
 80028f8:	f3bf 8f4f 	dsb	sy
 80028fc:	61bb      	str	r3, [r7, #24]
    }
 80028fe:	bf00      	nop
 8002900:	bf00      	nop
 8002902:	e7fd      	b.n	8002900 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002904:	f001 fdca 	bl	800449c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800290a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800290c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800290e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002910:	2b00      	cmp	r3, #0
 8002912:	d024      	beq.n	800295e <xQueueReceive+0xee>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002914:	68b9      	ldr	r1, [r7, #8]
 8002916:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002918:	f000 f91c 	bl	8002b54 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800291c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800291e:	4618      	mov	r0, r3
 8002920:	f003 ffea 	bl	80068f8 <SEGGER_SYSVIEW_ShrinkId>
 8002924:	4604      	mov	r4, r0
 8002926:	2000      	movs	r0, #0
 8002928:	f003 ffe6 	bl	80068f8 <SEGGER_SYSVIEW_ShrinkId>
 800292c:	4602      	mov	r2, r0
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2101      	movs	r1, #1
 8002932:	9100      	str	r1, [sp, #0]
 8002934:	4621      	mov	r1, r4
 8002936:	205c      	movs	r0, #92	@ 0x5c
 8002938:	f003 fac6 	bl	8005ec8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800293c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293e:	1e5a      	subs	r2, r3, #1
 8002940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002942:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002944:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d004      	beq.n	8002956 <xQueueReceive+0xe6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800294c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800294e:	3310      	adds	r3, #16
 8002950:	4618      	mov	r0, r3
 8002952:	f000 fe1b 	bl	800358c <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002956:	f001 fdd3 	bl	8004500 <vPortExitCritical>
                return pdPASS;
 800295a:	2301      	movs	r3, #1
 800295c:	e08a      	b.n	8002a74 <xQueueReceive+0x204>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d113      	bne.n	800298c <xQueueReceive+0x11c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002964:	f001 fdcc 	bl	8004500 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002968:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800296a:	4618      	mov	r0, r3
 800296c:	f003 ffc4 	bl	80068f8 <SEGGER_SYSVIEW_ShrinkId>
 8002970:	4604      	mov	r4, r0
 8002972:	2000      	movs	r0, #0
 8002974:	f003 ffc0 	bl	80068f8 <SEGGER_SYSVIEW_ShrinkId>
 8002978:	4602      	mov	r2, r0
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2101      	movs	r1, #1
 800297e:	9100      	str	r1, [sp, #0]
 8002980:	4621      	mov	r1, r4
 8002982:	205c      	movs	r0, #92	@ 0x5c
 8002984:	f003 faa0 	bl	8005ec8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002988:	2300      	movs	r3, #0
 800298a:	e073      	b.n	8002a74 <xQueueReceive+0x204>
                }
                else if( xEntryTimeSet == pdFALSE )
 800298c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <xQueueReceive+0x130>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002992:	f107 0310 	add.w	r3, r7, #16
 8002996:	4618      	mov	r0, r3
 8002998:	f000 fe60 	bl	800365c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800299c:	2301      	movs	r3, #1
 800299e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80029a0:	f001 fdae 	bl	8004500 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80029a4:	f000 fbd4 	bl	8003150 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80029a8:	f001 fd78 	bl	800449c <vPortEnterCritical>
 80029ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80029b2:	b25b      	sxtb	r3, r3
 80029b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029b8:	d103      	bne.n	80029c2 <xQueueReceive+0x152>
 80029ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029bc:	2200      	movs	r2, #0
 80029be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029c8:	b25b      	sxtb	r3, r3
 80029ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ce:	d103      	bne.n	80029d8 <xQueueReceive+0x168>
 80029d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029d8:	f001 fd92 	bl	8004500 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029dc:	1d3a      	adds	r2, r7, #4
 80029de:	f107 0310 	add.w	r3, r7, #16
 80029e2:	4611      	mov	r1, r2
 80029e4:	4618      	mov	r0, r3
 80029e6:	f000 fe4f 	bl	8003688 <xTaskCheckForTimeOut>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d124      	bne.n	8002a3a <xQueueReceive+0x1ca>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80029f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029f2:	f000 f927 	bl	8002c44 <prvIsQueueEmpty>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d018      	beq.n	8002a2e <xQueueReceive+0x1be>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80029fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029fe:	3324      	adds	r3, #36	@ 0x24
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	4611      	mov	r1, r2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 fd6b 	bl	80034e0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002a0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a0c:	f000 f8c8 	bl	8002ba0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002a10:	f000 fbac 	bl	800316c <xTaskResumeAll>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	f47f af74 	bne.w	8002904 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8002a1c:	4b17      	ldr	r3, [pc, #92]	@ (8002a7c <xQueueReceive+0x20c>)
 8002a1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	f3bf 8f4f 	dsb	sy
 8002a28:	f3bf 8f6f 	isb	sy
 8002a2c:	e76a      	b.n	8002904 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002a2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a30:	f000 f8b6 	bl	8002ba0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002a34:	f000 fb9a 	bl	800316c <xTaskResumeAll>
 8002a38:	e764      	b.n	8002904 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002a3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a3c:	f000 f8b0 	bl	8002ba0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002a40:	f000 fb94 	bl	800316c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002a44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a46:	f000 f8fd 	bl	8002c44 <prvIsQueueEmpty>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f43f af59 	beq.w	8002904 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002a52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a54:	4618      	mov	r0, r3
 8002a56:	f003 ff4f 	bl	80068f8 <SEGGER_SYSVIEW_ShrinkId>
 8002a5a:	4604      	mov	r4, r0
 8002a5c:	2000      	movs	r0, #0
 8002a5e:	f003 ff4b 	bl	80068f8 <SEGGER_SYSVIEW_ShrinkId>
 8002a62:	4602      	mov	r2, r0
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2101      	movs	r1, #1
 8002a68:	9100      	str	r1, [sp, #0]
 8002a6a:	4621      	mov	r1, r4
 8002a6c:	205c      	movs	r0, #92	@ 0x5c
 8002a6e:	f003 fa2b 	bl	8005ec8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002a72:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3734      	adds	r7, #52	@ 0x34
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd90      	pop	{r4, r7, pc}
 8002a7c:	e000ed04 	.word	0xe000ed04

08002a80 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	60b9      	str	r1, [r7, #8]
 8002a8a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a94:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10d      	bne.n	8002aba <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d14d      	bne.n	8002b42 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f000 ff2a 	bl	8003904 <xTaskPriorityDisinherit>
 8002ab0:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	e043      	b.n	8002b42 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d119      	bne.n	8002af4 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6858      	ldr	r0, [r3, #4]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac8:	461a      	mov	r2, r3
 8002aca:	68b9      	ldr	r1, [r7, #8]
 8002acc:	f004 f8c6 	bl	8006c5c <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad8:	441a      	add	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d32b      	bcc.n	8002b42 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	605a      	str	r2, [r3, #4]
 8002af2:	e026      	b.n	8002b42 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	68d8      	ldr	r0, [r3, #12]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afc:	461a      	mov	r2, r3
 8002afe:	68b9      	ldr	r1, [r7, #8]
 8002b00:	f004 f8ac 	bl	8006c5c <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	68da      	ldr	r2, [r3, #12]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0c:	425b      	negs	r3, r3
 8002b0e:	441a      	add	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	68da      	ldr	r2, [r3, #12]
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d207      	bcs.n	8002b30 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b28:	425b      	negs	r3, r3
 8002b2a:	441a      	add	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d105      	bne.n	8002b42 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d002      	beq.n	8002b42 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8002b4a:	697b      	ldr	r3, [r7, #20]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}

08002b54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d018      	beq.n	8002b98 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	68da      	ldr	r2, [r3, #12]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6e:	441a      	add	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68da      	ldr	r2, [r3, #12]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d303      	bcc.n	8002b88 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	68d9      	ldr	r1, [r3, #12]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b90:	461a      	mov	r2, r3
 8002b92:	6838      	ldr	r0, [r7, #0]
 8002b94:	f004 f862 	bl	8006c5c <memcpy>
    }
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002ba8:	f001 fc78 	bl	800449c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002bb2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bb4:	e011      	b.n	8002bda <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d012      	beq.n	8002be4 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3324      	adds	r3, #36	@ 0x24
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 fce2 	bl	800358c <xTaskRemoveFromEventList>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d001      	beq.n	8002bd2 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002bce:	f000 fdc3 	bl	8003758 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
 8002bd4:	3b01      	subs	r3, #1
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	dce9      	bgt.n	8002bb6 <prvUnlockQueue+0x16>
 8002be2:	e000      	b.n	8002be6 <prvUnlockQueue+0x46>
                        break;
 8002be4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	22ff      	movs	r2, #255	@ 0xff
 8002bea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002bee:	f001 fc87 	bl	8004500 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002bf2:	f001 fc53 	bl	800449c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002bfc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bfe:	e011      	b.n	8002c24 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d012      	beq.n	8002c2e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3310      	adds	r3, #16
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f000 fcbd 	bl	800358c <xTaskRemoveFromEventList>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002c18:	f000 fd9e 	bl	8003758 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002c1c:	7bbb      	ldrb	r3, [r7, #14]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002c24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	dce9      	bgt.n	8002c00 <prvUnlockQueue+0x60>
 8002c2c:	e000      	b.n	8002c30 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002c2e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	22ff      	movs	r2, #255	@ 0xff
 8002c34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002c38:	f001 fc62 	bl	8004500 <vPortExitCritical>
}
 8002c3c:	bf00      	nop
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002c4c:	f001 fc26 	bl	800449c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d102      	bne.n	8002c5e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	e001      	b.n	8002c62 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002c62:	f001 fc4d 	bl	8004500 <vPortExitCritical>

    return xReturn;
 8002c66:	68fb      	ldr	r3, [r7, #12]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3710      	adds	r7, #16
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002c78:	f001 fc10 	bl	800449c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d102      	bne.n	8002c8e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	60fb      	str	r3, [r7, #12]
 8002c8c:	e001      	b.n	8002c92 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002c92:	f001 fc35 	bl	8004500 <vPortExitCritical>

    return xReturn;
 8002c96:	68fb      	ldr	r3, [r7, #12]
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b084      	sub	sp, #16
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002caa:	2300      	movs	r3, #0
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	e01e      	b.n	8002cee <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002cb0:	4a13      	ldr	r2, [pc, #76]	@ (8002d00 <vQueueAddToRegistry+0x60>)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d115      	bne.n	8002ce8 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002cbc:	4910      	ldr	r1, [pc, #64]	@ (8002d00 <vQueueAddToRegistry+0x60>)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002cc6:	4a0e      	ldr	r2, [pc, #56]	@ (8002d00 <vQueueAddToRegistry+0x60>)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	00db      	lsls	r3, r3, #3
 8002ccc:	4413      	add	r3, r2
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f003 fe0f 	bl	80068f8 <SEGGER_SYSVIEW_ShrinkId>
 8002cda:	4601      	mov	r1, r0
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	2071      	movs	r0, #113	@ 0x71
 8002ce2:	f003 f821 	bl	8005d28 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002ce6:	e006      	b.n	8002cf6 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	3301      	adds	r3, #1
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2b07      	cmp	r3, #7
 8002cf2:	d9dd      	bls.n	8002cb0 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002cf4:	bf00      	nop
 8002cf6:	bf00      	nop
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20000080 	.word	0x20000080

08002d04 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	60f8      	str	r0, [r7, #12]
 8002d0c:	60b9      	str	r1, [r7, #8]
 8002d0e:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002d14:	f001 fbc2 	bl	800449c <vPortEnterCritical>
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d1e:	b25b      	sxtb	r3, r3
 8002d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d24:	d103      	bne.n	8002d2e <vQueueWaitForMessageRestricted+0x2a>
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d34:	b25b      	sxtb	r3, r3
 8002d36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d3a:	d103      	bne.n	8002d44 <vQueueWaitForMessageRestricted+0x40>
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d44:	f001 fbdc 	bl	8004500 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d106      	bne.n	8002d5e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	3324      	adds	r3, #36	@ 0x24
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	68b9      	ldr	r1, [r7, #8]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 fbe7 	bl	800352c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002d5e:	6978      	ldr	r0, [r7, #20]
 8002d60:	f7ff ff1e 	bl	8002ba0 <prvUnlockQueue>
    }
 8002d64:	bf00      	nop
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}

08002d6c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b08c      	sub	sp, #48	@ 0x30
 8002d70:	af04      	add	r7, sp, #16
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4618      	mov	r0, r3
 8002d82:	f001 fcbd 	bl	8004700 <pvPortMalloc>
 8002d86:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00e      	beq.n	8002dac <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002d8e:	2058      	movs	r0, #88	@ 0x58
 8002d90:	f001 fcb6 	bl	8004700 <pvPortMalloc>
 8002d94:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d003      	beq.n	8002da4 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	697a      	ldr	r2, [r7, #20]
 8002da0:	631a      	str	r2, [r3, #48]	@ 0x30
 8002da2:	e005      	b.n	8002db0 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002da4:	6978      	ldr	r0, [r7, #20]
 8002da6:	f001 fd8d 	bl	80048c4 <vPortFree>
 8002daa:	e001      	b.n	8002db0 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002dac:	2300      	movs	r3, #0
 8002dae:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d013      	beq.n	8002dde <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002db6:	88fa      	ldrh	r2, [r7, #6]
 8002db8:	2300      	movs	r3, #0
 8002dba:	9303      	str	r3, [sp, #12]
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	9302      	str	r3, [sp, #8]
 8002dc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dc2:	9301      	str	r3, [sp, #4]
 8002dc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	68b9      	ldr	r1, [r7, #8]
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f000 f80e 	bl	8002dee <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002dd2:	69f8      	ldr	r0, [r7, #28]
 8002dd4:	f000 f8a2 	bl	8002f1c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	61bb      	str	r3, [r7, #24]
 8002ddc:	e002      	b.n	8002de4 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002dde:	f04f 33ff 	mov.w	r3, #4294967295
 8002de2:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002de4:	69bb      	ldr	r3, [r7, #24]
    }
 8002de6:	4618      	mov	r0, r3
 8002de8:	3720      	adds	r7, #32
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b088      	sub	sp, #32
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	60f8      	str	r0, [r7, #12]
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	607a      	str	r2, [r7, #4]
 8002dfa:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dfe:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	461a      	mov	r2, r3
 8002e06:	21a5      	movs	r1, #165	@ 0xa5
 8002e08:	f003 fefc 	bl	8006c04 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e0e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002e16:	3b01      	subs	r3, #1
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	f023 0307 	bic.w	r3, r3, #7
 8002e24:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002e26:	69bb      	ldr	r3, [r7, #24]
 8002e28:	f003 0307 	and.w	r3, r3, #7
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00b      	beq.n	8002e48 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002e30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e34:	f383 8811 	msr	BASEPRI, r3
 8002e38:	f3bf 8f6f 	isb	sy
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	617b      	str	r3, [r7, #20]
    }
 8002e42:	bf00      	nop
 8002e44:	bf00      	nop
 8002e46:	e7fd      	b.n	8002e44 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d01f      	beq.n	8002e8e <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e4e:	2300      	movs	r3, #0
 8002e50:	61fb      	str	r3, [r7, #28]
 8002e52:	e012      	b.n	8002e7a <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002e54:	68ba      	ldr	r2, [r7, #8]
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	4413      	add	r3, r2
 8002e5a:	7819      	ldrb	r1, [r3, #0]
 8002e5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	4413      	add	r3, r2
 8002e62:	3334      	adds	r3, #52	@ 0x34
 8002e64:	460a      	mov	r2, r1
 8002e66:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	4413      	add	r3, r2
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d006      	beq.n	8002e82 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	3301      	adds	r3, #1
 8002e78:	61fb      	str	r3, [r7, #28]
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	2b09      	cmp	r3, #9
 8002e7e:	d9e9      	bls.n	8002e54 <prvInitialiseNewTask+0x66>
 8002e80:	e000      	b.n	8002e84 <prvInitialiseNewTask+0x96>
            {
                break;
 8002e82:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8002e8c:	e003      	b.n	8002e96 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d901      	bls.n	8002ea0 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002e9c:	2304      	movs	r3, #4
 8002e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ea4:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002eaa:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eae:	2200      	movs	r2, #0
 8002eb0:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f7ff f98a 	bl	80021d0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ebe:	3318      	adds	r3, #24
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff f985 	bl	80021d0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ec8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eca:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ece:	f1c3 0205 	rsb	r2, r3, #5
 8002ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed4:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eda:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8002edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ede:	3350      	adds	r3, #80	@ 0x50
 8002ee0:	2204      	movs	r2, #4
 8002ee2:	2100      	movs	r1, #0
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f003 fe8d 	bl	8006c04 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eec:	3354      	adds	r3, #84	@ 0x54
 8002eee:	2201      	movs	r2, #1
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f003 fe86 	bl	8006c04 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	68f9      	ldr	r1, [r7, #12]
 8002efc:	69b8      	ldr	r0, [r7, #24]
 8002efe:	f001 f919 	bl	8004134 <pxPortInitialiseStack>
 8002f02:	4602      	mov	r2, r0
 8002f04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f06:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d002      	beq.n	8002f14 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002f0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002f12:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002f14:	bf00      	nop
 8002f16:	3720      	adds	r7, #32
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002f1c:	b5b0      	push	{r4, r5, r7, lr}
 8002f1e:	b084      	sub	sp, #16
 8002f20:	af02      	add	r7, sp, #8
 8002f22:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002f24:	f001 faba 	bl	800449c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002f28:	4b35      	ldr	r3, [pc, #212]	@ (8003000 <prvAddNewTaskToReadyList+0xe4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	4a34      	ldr	r2, [pc, #208]	@ (8003000 <prvAddNewTaskToReadyList+0xe4>)
 8002f30:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002f32:	4b34      	ldr	r3, [pc, #208]	@ (8003004 <prvAddNewTaskToReadyList+0xe8>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d109      	bne.n	8002f4e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002f3a:	4a32      	ldr	r2, [pc, #200]	@ (8003004 <prvAddNewTaskToReadyList+0xe8>)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f40:	4b2f      	ldr	r3, [pc, #188]	@ (8003000 <prvAddNewTaskToReadyList+0xe4>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d110      	bne.n	8002f6a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002f48:	f000 fc24 	bl	8003794 <prvInitialiseTaskLists>
 8002f4c:	e00d      	b.n	8002f6a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002f4e:	4b2e      	ldr	r3, [pc, #184]	@ (8003008 <prvAddNewTaskToReadyList+0xec>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002f56:	4b2b      	ldr	r3, [pc, #172]	@ (8003004 <prvAddNewTaskToReadyList+0xe8>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d802      	bhi.n	8002f6a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002f64:	4a27      	ldr	r2, [pc, #156]	@ (8003004 <prvAddNewTaskToReadyList+0xe8>)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002f6a:	4b28      	ldr	r3, [pc, #160]	@ (800300c <prvAddNewTaskToReadyList+0xf0>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	4a26      	ldr	r2, [pc, #152]	@ (800300c <prvAddNewTaskToReadyList+0xf0>)
 8002f72:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002f74:	4b25      	ldr	r3, [pc, #148]	@ (800300c <prvAddNewTaskToReadyList+0xf0>)
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d016      	beq.n	8002fb0 <prvAddNewTaskToReadyList+0x94>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f003 fb91 	bl	80066ac <SEGGER_SYSVIEW_OnTaskCreate>
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9a:	461d      	mov	r5, r3
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	461c      	mov	r4, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa6:	1ae3      	subs	r3, r4, r3
 8002fa8:	9300      	str	r3, [sp, #0]
 8002faa:	462b      	mov	r3, r5
 8002fac:	f001 fe5a 	bl	8004c64 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f003 fbfe 	bl	80067b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	4b13      	ldr	r3, [pc, #76]	@ (8003010 <prvAddNewTaskToReadyList+0xf4>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	4a12      	ldr	r2, [pc, #72]	@ (8003010 <prvAddNewTaskToReadyList+0xf4>)
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fce:	4613      	mov	r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	4a0f      	ldr	r2, [pc, #60]	@ (8003014 <prvAddNewTaskToReadyList+0xf8>)
 8002fd8:	441a      	add	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	3304      	adds	r3, #4
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	f7ff f902 	bl	80021ea <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002fe6:	f001 fa8b 	bl	8004500 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002fea:	4b07      	ldr	r3, [pc, #28]	@ (8003008 <prvAddNewTaskToReadyList+0xec>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ff2:	4b04      	ldr	r3, [pc, #16]	@ (8003004 <prvAddNewTaskToReadyList+0xe8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002ff6:	bf00      	nop
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bdb0      	pop	{r4, r5, r7, pc}
 8002ffe:	bf00      	nop
 8003000:	20000198 	.word	0x20000198
 8003004:	200000c0 	.word	0x200000c0
 8003008:	200001a4 	.word	0x200001a4
 800300c:	200001b4 	.word	0x200001b4
 8003010:	200001a0 	.word	0x200001a0
 8003014:	200000c4 	.word	0x200000c4

08003018 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8003020:	2300      	movs	r3, #0
 8003022:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d01c      	beq.n	8003064 <vTaskDelay+0x4c>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 800302a:	4b16      	ldr	r3, [pc, #88]	@ (8003084 <vTaskDelay+0x6c>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00b      	beq.n	800304a <vTaskDelay+0x32>
        __asm volatile
 8003032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003036:	f383 8811 	msr	BASEPRI, r3
 800303a:	f3bf 8f6f 	isb	sy
 800303e:	f3bf 8f4f 	dsb	sy
 8003042:	60bb      	str	r3, [r7, #8]
    }
 8003044:	bf00      	nop
 8003046:	bf00      	nop
 8003048:	e7fd      	b.n	8003046 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 800304a:	f000 f881 	bl	8003150 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	2023      	movs	r0, #35	@ 0x23
 8003052:	f002 fe2d 	bl	8005cb0 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003056:	2100      	movs	r1, #0
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 fcd5 	bl	8003a08 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 800305e:	f000 f885 	bl	800316c <xTaskResumeAll>
 8003062:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d107      	bne.n	800307a <vTaskDelay+0x62>
        {
            portYIELD_WITHIN_API();
 800306a:	4b07      	ldr	r3, [pc, #28]	@ (8003088 <vTaskDelay+0x70>)
 800306c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800307a:	bf00      	nop
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}
 8003082:	bf00      	nop
 8003084:	200001c0 	.word	0x200001c0
 8003088:	e000ed04 	.word	0xe000ed04

0800308c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b086      	sub	sp, #24
 8003090:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8003092:	4b27      	ldr	r3, [pc, #156]	@ (8003130 <vTaskStartScheduler+0xa4>)
 8003094:	9301      	str	r3, [sp, #4]
 8003096:	2300      	movs	r3, #0
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	2300      	movs	r3, #0
 800309c:	2282      	movs	r2, #130	@ 0x82
 800309e:	4925      	ldr	r1, [pc, #148]	@ (8003134 <vTaskStartScheduler+0xa8>)
 80030a0:	4825      	ldr	r0, [pc, #148]	@ (8003138 <vTaskStartScheduler+0xac>)
 80030a2:	f7ff fe63 	bl	8002d6c <xTaskCreate>
 80030a6:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d102      	bne.n	80030b4 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80030ae:	f000 fd23 	bl	8003af8 <xTimerCreateTimerTask>
 80030b2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d124      	bne.n	8003104 <vTaskStartScheduler+0x78>
        __asm volatile
 80030ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030be:	f383 8811 	msr	BASEPRI, r3
 80030c2:	f3bf 8f6f 	isb	sy
 80030c6:	f3bf 8f4f 	dsb	sy
 80030ca:	60bb      	str	r3, [r7, #8]
    }
 80030cc:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80030ce:	4b1b      	ldr	r3, [pc, #108]	@ (800313c <vTaskStartScheduler+0xb0>)
 80030d0:	f04f 32ff 	mov.w	r2, #4294967295
 80030d4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80030d6:	4b1a      	ldr	r3, [pc, #104]	@ (8003140 <vTaskStartScheduler+0xb4>)
 80030d8:	2201      	movs	r2, #1
 80030da:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80030dc:	4b19      	ldr	r3, [pc, #100]	@ (8003144 <vTaskStartScheduler+0xb8>)
 80030de:	2200      	movs	r2, #0
 80030e0:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80030e2:	4b19      	ldr	r3, [pc, #100]	@ (8003148 <vTaskStartScheduler+0xbc>)
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	4b12      	ldr	r3, [pc, #72]	@ (8003130 <vTaskStartScheduler+0xa4>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d102      	bne.n	80030f4 <vTaskStartScheduler+0x68>
 80030ee:	f003 fac1 	bl	8006674 <SEGGER_SYSVIEW_OnIdle>
 80030f2:	e004      	b.n	80030fe <vTaskStartScheduler+0x72>
 80030f4:	4b14      	ldr	r3, [pc, #80]	@ (8003148 <vTaskStartScheduler+0xbc>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f003 fb19 	bl	8006730 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80030fe:	f001 f8a9 	bl	8004254 <xPortStartScheduler>
 8003102:	e00f      	b.n	8003124 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310a:	d10b      	bne.n	8003124 <vTaskStartScheduler+0x98>
        __asm volatile
 800310c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003110:	f383 8811 	msr	BASEPRI, r3
 8003114:	f3bf 8f6f 	isb	sy
 8003118:	f3bf 8f4f 	dsb	sy
 800311c:	607b      	str	r3, [r7, #4]
    }
 800311e:	bf00      	nop
 8003120:	bf00      	nop
 8003122:	e7fd      	b.n	8003120 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003124:	4b09      	ldr	r3, [pc, #36]	@ (800314c <vTaskStartScheduler+0xc0>)
 8003126:	681b      	ldr	r3, [r3, #0]
}
 8003128:	bf00      	nop
 800312a:	3710      	adds	r7, #16
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}
 8003130:	200001bc 	.word	0x200001bc
 8003134:	08006ca0 	.word	0x08006ca0
 8003138:	08003771 	.word	0x08003771
 800313c:	200001b8 	.word	0x200001b8
 8003140:	200001a4 	.word	0x200001a4
 8003144:	2000019c 	.word	0x2000019c
 8003148:	200000c0 	.word	0x200000c0
 800314c:	08006d80 	.word	0x08006d80

08003150 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003154:	4b04      	ldr	r3, [pc, #16]	@ (8003168 <vTaskSuspendAll+0x18>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3301      	adds	r3, #1
 800315a:	4a03      	ldr	r2, [pc, #12]	@ (8003168 <vTaskSuspendAll+0x18>)
 800315c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800315e:	bf00      	nop
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	200001c0 	.word	0x200001c0

0800316c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003172:	2300      	movs	r3, #0
 8003174:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003176:	2300      	movs	r3, #0
 8003178:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800317a:	4b3e      	ldr	r3, [pc, #248]	@ (8003274 <xTaskResumeAll+0x108>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10b      	bne.n	800319a <xTaskResumeAll+0x2e>
        __asm volatile
 8003182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003186:	f383 8811 	msr	BASEPRI, r3
 800318a:	f3bf 8f6f 	isb	sy
 800318e:	f3bf 8f4f 	dsb	sy
 8003192:	603b      	str	r3, [r7, #0]
    }
 8003194:	bf00      	nop
 8003196:	bf00      	nop
 8003198:	e7fd      	b.n	8003196 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800319a:	f001 f97f 	bl	800449c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800319e:	4b35      	ldr	r3, [pc, #212]	@ (8003274 <xTaskResumeAll+0x108>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	3b01      	subs	r3, #1
 80031a4:	4a33      	ldr	r2, [pc, #204]	@ (8003274 <xTaskResumeAll+0x108>)
 80031a6:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031a8:	4b32      	ldr	r3, [pc, #200]	@ (8003274 <xTaskResumeAll+0x108>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d159      	bne.n	8003264 <xTaskResumeAll+0xf8>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80031b0:	4b31      	ldr	r3, [pc, #196]	@ (8003278 <xTaskResumeAll+0x10c>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d055      	beq.n	8003264 <xTaskResumeAll+0xf8>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80031b8:	e032      	b.n	8003220 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031ba:	4b30      	ldr	r3, [pc, #192]	@ (800327c <xTaskResumeAll+0x110>)
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	3318      	adds	r3, #24
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff f86c 	bl	80022a4 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	3304      	adds	r3, #4
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7ff f867 	bl	80022a4 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4618      	mov	r0, r3
 80031da:	f003 faeb 	bl	80067b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e2:	2201      	movs	r2, #1
 80031e4:	409a      	lsls	r2, r3
 80031e6:	4b26      	ldr	r3, [pc, #152]	@ (8003280 <xTaskResumeAll+0x114>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	4a24      	ldr	r2, [pc, #144]	@ (8003280 <xTaskResumeAll+0x114>)
 80031ee:	6013      	str	r3, [r2, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031f4:	4613      	mov	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	4413      	add	r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	4a21      	ldr	r2, [pc, #132]	@ (8003284 <xTaskResumeAll+0x118>)
 80031fe:	441a      	add	r2, r3
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	3304      	adds	r3, #4
 8003204:	4619      	mov	r1, r3
 8003206:	4610      	mov	r0, r2
 8003208:	f7fe ffef 	bl	80021ea <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003210:	4b1d      	ldr	r3, [pc, #116]	@ (8003288 <xTaskResumeAll+0x11c>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003216:	429a      	cmp	r2, r3
 8003218:	d302      	bcc.n	8003220 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 800321a:	4b1c      	ldr	r3, [pc, #112]	@ (800328c <xTaskResumeAll+0x120>)
 800321c:	2201      	movs	r2, #1
 800321e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003220:	4b16      	ldr	r3, [pc, #88]	@ (800327c <xTaskResumeAll+0x110>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1c8      	bne.n	80031ba <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800322e:	f000 fb2f 	bl	8003890 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003232:	4b17      	ldr	r3, [pc, #92]	@ (8003290 <xTaskResumeAll+0x124>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d010      	beq.n	8003260 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800323e:	f000 f84b 	bl	80032d8 <xTaskIncrementTick>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 8003248:	4b10      	ldr	r3, [pc, #64]	@ (800328c <xTaskResumeAll+0x120>)
 800324a:	2201      	movs	r2, #1
 800324c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	3b01      	subs	r3, #1
 8003252:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f1      	bne.n	800323e <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 800325a:	4b0d      	ldr	r3, [pc, #52]	@ (8003290 <xTaskResumeAll+0x124>)
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003260:	4b0a      	ldr	r3, [pc, #40]	@ (800328c <xTaskResumeAll+0x120>)
 8003262:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003264:	f001 f94c 	bl	8004500 <vPortExitCritical>

    return xAlreadyYielded;
 8003268:	687b      	ldr	r3, [r7, #4]
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	200001c0 	.word	0x200001c0
 8003278:	20000198 	.word	0x20000198
 800327c:	20000158 	.word	0x20000158
 8003280:	200001a0 	.word	0x200001a0
 8003284:	200000c4 	.word	0x200000c4
 8003288:	200000c0 	.word	0x200000c0
 800328c:	200001ac 	.word	0x200001ac
 8003290:	200001a8 	.word	0x200001a8

08003294 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800329a:	4b05      	ldr	r3, [pc, #20]	@ (80032b0 <xTaskGetTickCount+0x1c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80032a0:	687b      	ldr	r3, [r7, #4]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	370c      	adds	r7, #12
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
 80032ae:	bf00      	nop
 80032b0:	2000019c 	.word	0x2000019c

080032b4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b082      	sub	sp, #8
 80032b8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032ba:	f001 f9df 	bl	800467c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80032be:	2300      	movs	r3, #0
 80032c0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80032c2:	4b04      	ldr	r3, [pc, #16]	@ (80032d4 <xTaskGetTickCountFromISR+0x20>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80032c8:	683b      	ldr	r3, [r7, #0]
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	2000019c 	.word	0x2000019c

080032d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80032de:	2300      	movs	r3, #0
 80032e0:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032e2:	4b41      	ldr	r3, [pc, #260]	@ (80033e8 <xTaskIncrementTick+0x110>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d174      	bne.n	80033d4 <xTaskIncrementTick+0xfc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80032ea:	4b40      	ldr	r3, [pc, #256]	@ (80033ec <xTaskIncrementTick+0x114>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	3301      	adds	r3, #1
 80032f0:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80032f2:	4a3e      	ldr	r2, [pc, #248]	@ (80033ec <xTaskIncrementTick+0x114>)
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d121      	bne.n	8003342 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 80032fe:	4b3c      	ldr	r3, [pc, #240]	@ (80033f0 <xTaskIncrementTick+0x118>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00b      	beq.n	8003320 <xTaskIncrementTick+0x48>
        __asm volatile
 8003308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800330c:	f383 8811 	msr	BASEPRI, r3
 8003310:	f3bf 8f6f 	isb	sy
 8003314:	f3bf 8f4f 	dsb	sy
 8003318:	603b      	str	r3, [r7, #0]
    }
 800331a:	bf00      	nop
 800331c:	bf00      	nop
 800331e:	e7fd      	b.n	800331c <xTaskIncrementTick+0x44>
 8003320:	4b33      	ldr	r3, [pc, #204]	@ (80033f0 <xTaskIncrementTick+0x118>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	60fb      	str	r3, [r7, #12]
 8003326:	4b33      	ldr	r3, [pc, #204]	@ (80033f4 <xTaskIncrementTick+0x11c>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a31      	ldr	r2, [pc, #196]	@ (80033f0 <xTaskIncrementTick+0x118>)
 800332c:	6013      	str	r3, [r2, #0]
 800332e:	4a31      	ldr	r2, [pc, #196]	@ (80033f4 <xTaskIncrementTick+0x11c>)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	4b30      	ldr	r3, [pc, #192]	@ (80033f8 <xTaskIncrementTick+0x120>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3301      	adds	r3, #1
 800333a:	4a2f      	ldr	r2, [pc, #188]	@ (80033f8 <xTaskIncrementTick+0x120>)
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	f000 faa7 	bl	8003890 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003342:	4b2e      	ldr	r3, [pc, #184]	@ (80033fc <xTaskIncrementTick+0x124>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	429a      	cmp	r2, r3
 800334a:	d348      	bcc.n	80033de <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800334c:	4b28      	ldr	r3, [pc, #160]	@ (80033f0 <xTaskIncrementTick+0x118>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d104      	bne.n	8003360 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003356:	4b29      	ldr	r3, [pc, #164]	@ (80033fc <xTaskIncrementTick+0x124>)
 8003358:	f04f 32ff 	mov.w	r2, #4294967295
 800335c:	601a      	str	r2, [r3, #0]
                    break;
 800335e:	e03e      	b.n	80033de <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003360:	4b23      	ldr	r3, [pc, #140]	@ (80033f0 <xTaskIncrementTick+0x118>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68db      	ldr	r3, [r3, #12]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	429a      	cmp	r2, r3
 8003376:	d203      	bcs.n	8003380 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003378:	4a20      	ldr	r2, [pc, #128]	@ (80033fc <xTaskIncrementTick+0x124>)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800337e:	e02e      	b.n	80033de <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	3304      	adds	r3, #4
 8003384:	4618      	mov	r0, r3
 8003386:	f7fe ff8d 	bl	80022a4 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338e:	2b00      	cmp	r3, #0
 8003390:	d004      	beq.n	800339c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	3318      	adds	r3, #24
 8003396:	4618      	mov	r0, r3
 8003398:	f7fe ff84 	bl	80022a4 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	4618      	mov	r0, r3
 80033a0:	f003 fa08 	bl	80067b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a8:	2201      	movs	r2, #1
 80033aa:	409a      	lsls	r2, r3
 80033ac:	4b14      	ldr	r3, [pc, #80]	@ (8003400 <xTaskIncrementTick+0x128>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	4a13      	ldr	r2, [pc, #76]	@ (8003400 <xTaskIncrementTick+0x128>)
 80033b4:	6013      	str	r3, [r2, #0]
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033ba:	4613      	mov	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	4413      	add	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4a10      	ldr	r2, [pc, #64]	@ (8003404 <xTaskIncrementTick+0x12c>)
 80033c4:	441a      	add	r2, r3
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	3304      	adds	r3, #4
 80033ca:	4619      	mov	r1, r3
 80033cc:	4610      	mov	r0, r2
 80033ce:	f7fe ff0c 	bl	80021ea <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033d2:	e7bb      	b.n	800334c <xTaskIncrementTick+0x74>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80033d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003408 <xTaskIncrementTick+0x130>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	3301      	adds	r3, #1
 80033da:	4a0b      	ldr	r2, [pc, #44]	@ (8003408 <xTaskIncrementTick+0x130>)
 80033dc:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80033de:	697b      	ldr	r3, [r7, #20]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	200001c0 	.word	0x200001c0
 80033ec:	2000019c 	.word	0x2000019c
 80033f0:	20000150 	.word	0x20000150
 80033f4:	20000154 	.word	0x20000154
 80033f8:	200001b0 	.word	0x200001b0
 80033fc:	200001b8 	.word	0x200001b8
 8003400:	200001a0 	.word	0x200001a0
 8003404:	200000c4 	.word	0x200000c4
 8003408:	200001a8 	.word	0x200001a8

0800340c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003412:	4b2d      	ldr	r3, [pc, #180]	@ (80034c8 <vTaskSwitchContext+0xbc>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800341a:	4b2c      	ldr	r3, [pc, #176]	@ (80034cc <vTaskSwitchContext+0xc0>)
 800341c:	2201      	movs	r2, #1
 800341e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003420:	e04e      	b.n	80034c0 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8003422:	4b2a      	ldr	r3, [pc, #168]	@ (80034cc <vTaskSwitchContext+0xc0>)
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003428:	4b29      	ldr	r3, [pc, #164]	@ (80034d0 <vTaskSwitchContext+0xc4>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	fab3 f383 	clz	r3, r3
 8003434:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003436:	7afb      	ldrb	r3, [r7, #11]
 8003438:	f1c3 031f 	rsb	r3, r3, #31
 800343c:	617b      	str	r3, [r7, #20]
 800343e:	4925      	ldr	r1, [pc, #148]	@ (80034d4 <vTaskSwitchContext+0xc8>)
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10b      	bne.n	800346a <vTaskSwitchContext+0x5e>
        __asm volatile
 8003452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003456:	f383 8811 	msr	BASEPRI, r3
 800345a:	f3bf 8f6f 	isb	sy
 800345e:	f3bf 8f4f 	dsb	sy
 8003462:	607b      	str	r3, [r7, #4]
    }
 8003464:	bf00      	nop
 8003466:	bf00      	nop
 8003468:	e7fd      	b.n	8003466 <vTaskSwitchContext+0x5a>
 800346a:	697a      	ldr	r2, [r7, #20]
 800346c:	4613      	mov	r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	4413      	add	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4a17      	ldr	r2, [pc, #92]	@ (80034d4 <vTaskSwitchContext+0xc8>)
 8003476:	4413      	add	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	685a      	ldr	r2, [r3, #4]
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	605a      	str	r2, [r3, #4]
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	3308      	adds	r3, #8
 800348c:	429a      	cmp	r2, r3
 800348e:	d104      	bne.n	800349a <vTaskSwitchContext+0x8e>
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	605a      	str	r2, [r3, #4]
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	4a0d      	ldr	r2, [pc, #52]	@ (80034d8 <vTaskSwitchContext+0xcc>)
 80034a2:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80034a4:	4b0c      	ldr	r3, [pc, #48]	@ (80034d8 <vTaskSwitchContext+0xcc>)
 80034a6:	681a      	ldr	r2, [r3, #0]
 80034a8:	4b0c      	ldr	r3, [pc, #48]	@ (80034dc <vTaskSwitchContext+0xd0>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d102      	bne.n	80034b6 <vTaskSwitchContext+0xaa>
 80034b0:	f003 f8e0 	bl	8006674 <SEGGER_SYSVIEW_OnIdle>
}
 80034b4:	e004      	b.n	80034c0 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 80034b6:	4b08      	ldr	r3, [pc, #32]	@ (80034d8 <vTaskSwitchContext+0xcc>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f003 f938 	bl	8006730 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80034c0:	bf00      	nop
 80034c2:	3718      	adds	r7, #24
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	200001c0 	.word	0x200001c0
 80034cc:	200001ac 	.word	0x200001ac
 80034d0:	200001a0 	.word	0x200001a0
 80034d4:	200000c4 	.word	0x200000c4
 80034d8:	200000c0 	.word	0x200000c0
 80034dc:	200001bc 	.word	0x200001bc

080034e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10b      	bne.n	8003508 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80034f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034f4:	f383 8811 	msr	BASEPRI, r3
 80034f8:	f3bf 8f6f 	isb	sy
 80034fc:	f3bf 8f4f 	dsb	sy
 8003500:	60fb      	str	r3, [r7, #12]
    }
 8003502:	bf00      	nop
 8003504:	bf00      	nop
 8003506:	e7fd      	b.n	8003504 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003508:	4b07      	ldr	r3, [pc, #28]	@ (8003528 <vTaskPlaceOnEventList+0x48>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	3318      	adds	r3, #24
 800350e:	4619      	mov	r1, r3
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7fe fe8e 	bl	8002232 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003516:	2101      	movs	r1, #1
 8003518:	6838      	ldr	r0, [r7, #0]
 800351a:	f000 fa75 	bl	8003a08 <prvAddCurrentTaskToDelayedList>
}
 800351e:	bf00      	nop
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	bf00      	nop
 8003528:	200000c0 	.word	0x200000c0

0800352c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	60b9      	str	r1, [r7, #8]
 8003536:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d10b      	bne.n	8003556 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 800353e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003542:	f383 8811 	msr	BASEPRI, r3
 8003546:	f3bf 8f6f 	isb	sy
 800354a:	f3bf 8f4f 	dsb	sy
 800354e:	617b      	str	r3, [r7, #20]
    }
 8003550:	bf00      	nop
 8003552:	bf00      	nop
 8003554:	e7fd      	b.n	8003552 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003556:	4b0c      	ldr	r3, [pc, #48]	@ (8003588 <vTaskPlaceOnEventListRestricted+0x5c>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	3318      	adds	r3, #24
 800355c:	4619      	mov	r1, r3
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f7fe fe43 	bl	80021ea <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d002      	beq.n	8003570 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 800356a:	f04f 33ff 	mov.w	r3, #4294967295
 800356e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003570:	2024      	movs	r0, #36	@ 0x24
 8003572:	f002 fb7f 	bl	8005c74 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	68b8      	ldr	r0, [r7, #8]
 800357a:	f000 fa45 	bl	8003a08 <prvAddCurrentTaskToDelayedList>
    }
 800357e:	bf00      	nop
 8003580:	3718      	adds	r7, #24
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	200000c0 	.word	0x200000c0

0800358c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10b      	bne.n	80035ba <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 80035a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a6:	f383 8811 	msr	BASEPRI, r3
 80035aa:	f3bf 8f6f 	isb	sy
 80035ae:	f3bf 8f4f 	dsb	sy
 80035b2:	60fb      	str	r3, [r7, #12]
    }
 80035b4:	bf00      	nop
 80035b6:	bf00      	nop
 80035b8:	e7fd      	b.n	80035b6 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	3318      	adds	r3, #24
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fe fe70 	bl	80022a4 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003644 <xTaskRemoveFromEventList+0xb8>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d120      	bne.n	800360e <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	3304      	adds	r3, #4
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7fe fe67 	bl	80022a4 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	4618      	mov	r0, r3
 80035da:	f003 f8eb 	bl	80067b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e2:	2201      	movs	r2, #1
 80035e4:	409a      	lsls	r2, r3
 80035e6:	4b18      	ldr	r3, [pc, #96]	@ (8003648 <xTaskRemoveFromEventList+0xbc>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4313      	orrs	r3, r2
 80035ec:	4a16      	ldr	r2, [pc, #88]	@ (8003648 <xTaskRemoveFromEventList+0xbc>)
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035f4:	4613      	mov	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	4413      	add	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4a13      	ldr	r2, [pc, #76]	@ (800364c <xTaskRemoveFromEventList+0xc0>)
 80035fe:	441a      	add	r2, r3
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	3304      	adds	r3, #4
 8003604:	4619      	mov	r1, r3
 8003606:	4610      	mov	r0, r2
 8003608:	f7fe fdef 	bl	80021ea <vListInsertEnd>
 800360c:	e005      	b.n	800361a <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	3318      	adds	r3, #24
 8003612:	4619      	mov	r1, r3
 8003614:	480e      	ldr	r0, [pc, #56]	@ (8003650 <xTaskRemoveFromEventList+0xc4>)
 8003616:	f7fe fde8 	bl	80021ea <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800361e:	4b0d      	ldr	r3, [pc, #52]	@ (8003654 <xTaskRemoveFromEventList+0xc8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003624:	429a      	cmp	r2, r3
 8003626:	d905      	bls.n	8003634 <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003628:	2301      	movs	r3, #1
 800362a:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800362c:	4b0a      	ldr	r3, [pc, #40]	@ (8003658 <xTaskRemoveFromEventList+0xcc>)
 800362e:	2201      	movs	r2, #1
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	e001      	b.n	8003638 <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003638:	697b      	ldr	r3, [r7, #20]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	200001c0 	.word	0x200001c0
 8003648:	200001a0 	.word	0x200001a0
 800364c:	200000c4 	.word	0x200000c4
 8003650:	20000158 	.word	0x20000158
 8003654:	200000c0 	.word	0x200000c0
 8003658:	200001ac 	.word	0x200001ac

0800365c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003664:	4b06      	ldr	r3, [pc, #24]	@ (8003680 <vTaskInternalSetTimeOutState+0x24>)
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800366c:	4b05      	ldr	r3, [pc, #20]	@ (8003684 <vTaskInternalSetTimeOutState+0x28>)
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	605a      	str	r2, [r3, #4]
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	200001b0 	.word	0x200001b0
 8003684:	2000019c 	.word	0x2000019c

08003688 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b088      	sub	sp, #32
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10b      	bne.n	80036b0 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8003698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800369c:	f383 8811 	msr	BASEPRI, r3
 80036a0:	f3bf 8f6f 	isb	sy
 80036a4:	f3bf 8f4f 	dsb	sy
 80036a8:	613b      	str	r3, [r7, #16]
    }
 80036aa:	bf00      	nop
 80036ac:	bf00      	nop
 80036ae:	e7fd      	b.n	80036ac <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10b      	bne.n	80036ce <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80036b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ba:	f383 8811 	msr	BASEPRI, r3
 80036be:	f3bf 8f6f 	isb	sy
 80036c2:	f3bf 8f4f 	dsb	sy
 80036c6:	60fb      	str	r3, [r7, #12]
    }
 80036c8:	bf00      	nop
 80036ca:	bf00      	nop
 80036cc:	e7fd      	b.n	80036ca <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80036ce:	f000 fee5 	bl	800449c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80036d2:	4b1f      	ldr	r3, [pc, #124]	@ (8003750 <xTaskCheckForTimeOut+0xc8>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ea:	d102      	bne.n	80036f2 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80036ec:	2300      	movs	r3, #0
 80036ee:	61fb      	str	r3, [r7, #28]
 80036f0:	e026      	b.n	8003740 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	4b17      	ldr	r3, [pc, #92]	@ (8003754 <xTaskCheckForTimeOut+0xcc>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d00a      	beq.n	8003714 <xTaskCheckForTimeOut+0x8c>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	429a      	cmp	r2, r3
 8003706:	d305      	bcc.n	8003714 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003708:	2301      	movs	r3, #1
 800370a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	e015      	b.n	8003740 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	697a      	ldr	r2, [r7, #20]
 800371a:	429a      	cmp	r2, r3
 800371c:	d20b      	bcs.n	8003736 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	1ad2      	subs	r2, r2, r3
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7ff ff96 	bl	800365c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003730:	2300      	movs	r3, #0
 8003732:	61fb      	str	r3, [r7, #28]
 8003734:	e004      	b.n	8003740 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 800373c:	2301      	movs	r3, #1
 800373e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003740:	f000 fede 	bl	8004500 <vPortExitCritical>

    return xReturn;
 8003744:	69fb      	ldr	r3, [r7, #28]
}
 8003746:	4618      	mov	r0, r3
 8003748:	3720      	adds	r7, #32
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	2000019c 	.word	0x2000019c
 8003754:	200001b0 	.word	0x200001b0

08003758 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003758:	b480      	push	{r7}
 800375a:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 800375c:	4b03      	ldr	r3, [pc, #12]	@ (800376c <vTaskMissedYield+0x14>)
 800375e:	2201      	movs	r2, #1
 8003760:	601a      	str	r2, [r3, #0]
}
 8003762:	bf00      	nop
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr
 800376c:	200001ac 	.word	0x200001ac

08003770 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b082      	sub	sp, #8
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003778:	f000 f84c 	bl	8003814 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 800377c:	4b04      	ldr	r3, [pc, #16]	@ (8003790 <prvIdleTask+0x20>)
 800377e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	f3bf 8f4f 	dsb	sy
 8003788:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800378c:	bf00      	nop
 800378e:	e7f3      	b.n	8003778 <prvIdleTask+0x8>
 8003790:	e000ed04 	.word	0xe000ed04

08003794 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800379a:	2300      	movs	r3, #0
 800379c:	607b      	str	r3, [r7, #4]
 800379e:	e00c      	b.n	80037ba <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4a12      	ldr	r2, [pc, #72]	@ (80037f4 <prvInitialiseTaskLists+0x60>)
 80037ac:	4413      	add	r3, r2
 80037ae:	4618      	mov	r0, r3
 80037b0:	f7fe fcee 	bl	8002190 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3301      	adds	r3, #1
 80037b8:	607b      	str	r3, [r7, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b04      	cmp	r3, #4
 80037be:	d9ef      	bls.n	80037a0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80037c0:	480d      	ldr	r0, [pc, #52]	@ (80037f8 <prvInitialiseTaskLists+0x64>)
 80037c2:	f7fe fce5 	bl	8002190 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80037c6:	480d      	ldr	r0, [pc, #52]	@ (80037fc <prvInitialiseTaskLists+0x68>)
 80037c8:	f7fe fce2 	bl	8002190 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80037cc:	480c      	ldr	r0, [pc, #48]	@ (8003800 <prvInitialiseTaskLists+0x6c>)
 80037ce:	f7fe fcdf 	bl	8002190 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80037d2:	480c      	ldr	r0, [pc, #48]	@ (8003804 <prvInitialiseTaskLists+0x70>)
 80037d4:	f7fe fcdc 	bl	8002190 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80037d8:	480b      	ldr	r0, [pc, #44]	@ (8003808 <prvInitialiseTaskLists+0x74>)
 80037da:	f7fe fcd9 	bl	8002190 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80037de:	4b0b      	ldr	r3, [pc, #44]	@ (800380c <prvInitialiseTaskLists+0x78>)
 80037e0:	4a05      	ldr	r2, [pc, #20]	@ (80037f8 <prvInitialiseTaskLists+0x64>)
 80037e2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80037e4:	4b0a      	ldr	r3, [pc, #40]	@ (8003810 <prvInitialiseTaskLists+0x7c>)
 80037e6:	4a05      	ldr	r2, [pc, #20]	@ (80037fc <prvInitialiseTaskLists+0x68>)
 80037e8:	601a      	str	r2, [r3, #0]
}
 80037ea:	bf00      	nop
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	200000c4 	.word	0x200000c4
 80037f8:	20000128 	.word	0x20000128
 80037fc:	2000013c 	.word	0x2000013c
 8003800:	20000158 	.word	0x20000158
 8003804:	2000016c 	.word	0x2000016c
 8003808:	20000184 	.word	0x20000184
 800380c:	20000150 	.word	0x20000150
 8003810:	20000154 	.word	0x20000154

08003814 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800381a:	e019      	b.n	8003850 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800381c:	f000 fe3e 	bl	800449c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003820:	4b10      	ldr	r3, [pc, #64]	@ (8003864 <prvCheckTasksWaitingTermination+0x50>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	68db      	ldr	r3, [r3, #12]
 8003826:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	3304      	adds	r3, #4
 800382c:	4618      	mov	r0, r3
 800382e:	f7fe fd39 	bl	80022a4 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003832:	4b0d      	ldr	r3, [pc, #52]	@ (8003868 <prvCheckTasksWaitingTermination+0x54>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	3b01      	subs	r3, #1
 8003838:	4a0b      	ldr	r2, [pc, #44]	@ (8003868 <prvCheckTasksWaitingTermination+0x54>)
 800383a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800383c:	4b0b      	ldr	r3, [pc, #44]	@ (800386c <prvCheckTasksWaitingTermination+0x58>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	3b01      	subs	r3, #1
 8003842:	4a0a      	ldr	r2, [pc, #40]	@ (800386c <prvCheckTasksWaitingTermination+0x58>)
 8003844:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003846:	f000 fe5b 	bl	8004500 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f810 	bl	8003870 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003850:	4b06      	ldr	r3, [pc, #24]	@ (800386c <prvCheckTasksWaitingTermination+0x58>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1e1      	bne.n	800381c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003858:	bf00      	nop
 800385a:	bf00      	nop
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	2000016c 	.word	0x2000016c
 8003868:	20000198 	.word	0x20000198
 800386c:	20000180 	.word	0x20000180

08003870 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800387c:	4618      	mov	r0, r3
 800387e:	f001 f821 	bl	80048c4 <vPortFree>
                vPortFree( pxTCB );
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f001 f81e 	bl	80048c4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003888:	bf00      	nop
 800388a:	3708      	adds	r7, #8
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003890:	b480      	push	{r7}
 8003892:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003894:	4b0a      	ldr	r3, [pc, #40]	@ (80038c0 <prvResetNextTaskUnblockTime+0x30>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d104      	bne.n	80038a8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800389e:	4b09      	ldr	r3, [pc, #36]	@ (80038c4 <prvResetNextTaskUnblockTime+0x34>)
 80038a0:	f04f 32ff 	mov.w	r2, #4294967295
 80038a4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80038a6:	e005      	b.n	80038b4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80038a8:	4b05      	ldr	r3, [pc, #20]	@ (80038c0 <prvResetNextTaskUnblockTime+0x30>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a04      	ldr	r2, [pc, #16]	@ (80038c4 <prvResetNextTaskUnblockTime+0x34>)
 80038b2:	6013      	str	r3, [r2, #0]
}
 80038b4:	bf00      	nop
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	20000150 	.word	0x20000150
 80038c4:	200001b8 	.word	0x200001b8

080038c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80038ce:	4b0b      	ldr	r3, [pc, #44]	@ (80038fc <xTaskGetSchedulerState+0x34>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d102      	bne.n	80038dc <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80038d6:	2301      	movs	r3, #1
 80038d8:	607b      	str	r3, [r7, #4]
 80038da:	e008      	b.n	80038ee <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038dc:	4b08      	ldr	r3, [pc, #32]	@ (8003900 <xTaskGetSchedulerState+0x38>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d102      	bne.n	80038ea <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80038e4:	2302      	movs	r3, #2
 80038e6:	607b      	str	r3, [r7, #4]
 80038e8:	e001      	b.n	80038ee <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80038ea:	2300      	movs	r3, #0
 80038ec:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80038ee:	687b      	ldr	r3, [r7, #4]
    }
 80038f0:	4618      	mov	r0, r3
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr
 80038fc:	200001a4 	.word	0x200001a4
 8003900:	200001c0 	.word	0x200001c0

08003904 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d06a      	beq.n	80039f0 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800391a:	4b38      	ldr	r3, [pc, #224]	@ (80039fc <xTaskPriorityDisinherit+0xf8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	429a      	cmp	r2, r3
 8003922:	d00b      	beq.n	800393c <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8003924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003928:	f383 8811 	msr	BASEPRI, r3
 800392c:	f3bf 8f6f 	isb	sy
 8003930:	f3bf 8f4f 	dsb	sy
 8003934:	60fb      	str	r3, [r7, #12]
    }
 8003936:	bf00      	nop
 8003938:	bf00      	nop
 800393a:	e7fd      	b.n	8003938 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003940:	2b00      	cmp	r3, #0
 8003942:	d10b      	bne.n	800395c <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8003944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003948:	f383 8811 	msr	BASEPRI, r3
 800394c:	f3bf 8f6f 	isb	sy
 8003950:	f3bf 8f4f 	dsb	sy
 8003954:	60bb      	str	r3, [r7, #8]
    }
 8003956:	bf00      	nop
 8003958:	bf00      	nop
 800395a:	e7fd      	b.n	8003958 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003960:	1e5a      	subs	r2, r3, #1
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800396e:	429a      	cmp	r2, r3
 8003970:	d03e      	beq.n	80039f0 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003976:	2b00      	cmp	r3, #0
 8003978:	d13a      	bne.n	80039f0 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	3304      	adds	r3, #4
 800397e:	4618      	mov	r0, r3
 8003980:	f7fe fc90 	bl	80022a4 <uxListRemove>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10a      	bne.n	80039a0 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398e:	2201      	movs	r2, #1
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43da      	mvns	r2, r3
 8003996:	4b1a      	ldr	r3, [pc, #104]	@ (8003a00 <xTaskPriorityDisinherit+0xfc>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4013      	ands	r3, r2
 800399c:	4a18      	ldr	r2, [pc, #96]	@ (8003a00 <xTaskPriorityDisinherit+0xfc>)
 800399e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4619      	mov	r1, r3
 80039a4:	204a      	movs	r0, #74	@ 0x4a
 80039a6:	f002 f983 	bl	8005cb0 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b6:	f1c3 0205 	rsb	r2, r3, #5
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c2:	2201      	movs	r2, #1
 80039c4:	409a      	lsls	r2, r3
 80039c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003a00 <xTaskPriorityDisinherit+0xfc>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	4a0c      	ldr	r2, [pc, #48]	@ (8003a00 <xTaskPriorityDisinherit+0xfc>)
 80039ce:	6013      	str	r3, [r2, #0]
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039d4:	4613      	mov	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4a09      	ldr	r2, [pc, #36]	@ (8003a04 <xTaskPriorityDisinherit+0x100>)
 80039de:	441a      	add	r2, r3
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	3304      	adds	r3, #4
 80039e4:	4619      	mov	r1, r3
 80039e6:	4610      	mov	r0, r2
 80039e8:	f7fe fbff 	bl	80021ea <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 80039ec:	2301      	movs	r3, #1
 80039ee:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80039f0:	697b      	ldr	r3, [r7, #20]
    }
 80039f2:	4618      	mov	r0, r3
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	200000c0 	.word	0x200000c0
 8003a00:	200001a0 	.word	0x200001a0
 8003a04:	200000c4 	.word	0x200000c4

08003a08 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003a12:	4b32      	ldr	r3, [pc, #200]	@ (8003adc <prvAddCurrentTaskToDelayedList+0xd4>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a18:	4b31      	ldr	r3, [pc, #196]	@ (8003ae0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	3304      	adds	r3, #4
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fe fc40 	bl	80022a4 <uxListRemove>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10b      	bne.n	8003a42 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003a2a:	4b2d      	ldr	r3, [pc, #180]	@ (8003ae0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a30:	2201      	movs	r2, #1
 8003a32:	fa02 f303 	lsl.w	r3, r2, r3
 8003a36:	43da      	mvns	r2, r3
 8003a38:	4b2a      	ldr	r3, [pc, #168]	@ (8003ae4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	4a29      	ldr	r2, [pc, #164]	@ (8003ae4 <prvAddCurrentTaskToDelayedList+0xdc>)
 8003a40:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a48:	d110      	bne.n	8003a6c <prvAddCurrentTaskToDelayedList+0x64>
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00d      	beq.n	8003a6c <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003a50:	4b23      	ldr	r3, [pc, #140]	@ (8003ae0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	211b      	movs	r1, #27
 8003a56:	4618      	mov	r0, r3
 8003a58:	f002 feee 	bl	8006838 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a5c:	4b20      	ldr	r3, [pc, #128]	@ (8003ae0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	3304      	adds	r3, #4
 8003a62:	4619      	mov	r1, r3
 8003a64:	4820      	ldr	r0, [pc, #128]	@ (8003ae8 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003a66:	f7fe fbc0 	bl	80021ea <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003a6a:	e032      	b.n	8003ad2 <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4413      	add	r3, r2
 8003a72:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003a74:	4b1a      	ldr	r3, [pc, #104]	@ (8003ae0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003a7c:	68ba      	ldr	r2, [r7, #8]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d20f      	bcs.n	8003aa4 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003a84:	4b16      	ldr	r3, [pc, #88]	@ (8003ae0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2104      	movs	r1, #4
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f002 fed4 	bl	8006838 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003a90:	4b16      	ldr	r3, [pc, #88]	@ (8003aec <prvAddCurrentTaskToDelayedList+0xe4>)
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	4b12      	ldr	r3, [pc, #72]	@ (8003ae0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	3304      	adds	r3, #4
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	f7fe fbc8 	bl	8002232 <vListInsert>
}
 8003aa2:	e016      	b.n	8003ad2 <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8003ae0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2104      	movs	r1, #4
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f002 fec4 	bl	8006838 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8003af0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae0 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	3304      	adds	r3, #4
 8003aba:	4619      	mov	r1, r3
 8003abc:	4610      	mov	r0, r2
 8003abe:	f7fe fbb8 	bl	8002232 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003ac2:	4b0c      	ldr	r3, [pc, #48]	@ (8003af4 <prvAddCurrentTaskToDelayedList+0xec>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d202      	bcs.n	8003ad2 <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003acc:	4a09      	ldr	r2, [pc, #36]	@ (8003af4 <prvAddCurrentTaskToDelayedList+0xec>)
 8003ace:	68bb      	ldr	r3, [r7, #8]
 8003ad0:	6013      	str	r3, [r2, #0]
}
 8003ad2:	bf00      	nop
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	2000019c 	.word	0x2000019c
 8003ae0:	200000c0 	.word	0x200000c0
 8003ae4:	200001a0 	.word	0x200001a0
 8003ae8:	20000184 	.word	0x20000184
 8003aec:	20000154 	.word	0x20000154
 8003af0:	20000150 	.word	0x20000150
 8003af4:	200001b8 	.word	0x200001b8

08003af8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003b02:	f000 fae1 	bl	80040c8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003b06:	4b12      	ldr	r3, [pc, #72]	@ (8003b50 <xTimerCreateTimerTask+0x58>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d00b      	beq.n	8003b26 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003b0e:	4b11      	ldr	r3, [pc, #68]	@ (8003b54 <xTimerCreateTimerTask+0x5c>)
 8003b10:	9301      	str	r3, [sp, #4]
 8003b12:	2302      	movs	r3, #2
 8003b14:	9300      	str	r3, [sp, #0]
 8003b16:	2300      	movs	r3, #0
 8003b18:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003b1c:	490e      	ldr	r1, [pc, #56]	@ (8003b58 <xTimerCreateTimerTask+0x60>)
 8003b1e:	480f      	ldr	r0, [pc, #60]	@ (8003b5c <xTimerCreateTimerTask+0x64>)
 8003b20:	f7ff f924 	bl	8002d6c <xTaskCreate>
 8003b24:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d10b      	bne.n	8003b44 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8003b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b30:	f383 8811 	msr	BASEPRI, r3
 8003b34:	f3bf 8f6f 	isb	sy
 8003b38:	f3bf 8f4f 	dsb	sy
 8003b3c:	603b      	str	r3, [r7, #0]
    }
 8003b3e:	bf00      	nop
 8003b40:	bf00      	nop
 8003b42:	e7fd      	b.n	8003b40 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003b44:	687b      	ldr	r3, [r7, #4]
    }
 8003b46:	4618      	mov	r0, r3
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	200001f4 	.word	0x200001f4
 8003b54:	200001f8 	.word	0x200001f8
 8003b58:	08006ca8 	.word	0x08006ca8
 8003b5c:	08003c99 	.word	0x08003c99

08003b60 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b08a      	sub	sp, #40	@ 0x28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
 8003b6c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d10b      	bne.n	8003b90 <xTimerGenericCommand+0x30>
        __asm volatile
 8003b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b7c:	f383 8811 	msr	BASEPRI, r3
 8003b80:	f3bf 8f6f 	isb	sy
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	623b      	str	r3, [r7, #32]
    }
 8003b8a:	bf00      	nop
 8003b8c:	bf00      	nop
 8003b8e:	e7fd      	b.n	8003b8c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003b90:	4b19      	ldr	r3, [pc, #100]	@ (8003bf8 <xTimerGenericCommand+0x98>)
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d02a      	beq.n	8003bee <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	2b05      	cmp	r3, #5
 8003ba8:	dc18      	bgt.n	8003bdc <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003baa:	f7ff fe8d 	bl	80038c8 <xTaskGetSchedulerState>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d109      	bne.n	8003bc8 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003bb4:	4b10      	ldr	r3, [pc, #64]	@ (8003bf8 <xTimerGenericCommand+0x98>)
 8003bb6:	6818      	ldr	r0, [r3, #0]
 8003bb8:	f107 0114 	add.w	r1, r7, #20
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bc0:	f7fe fc82 	bl	80024c8 <xQueueGenericSend>
 8003bc4:	6278      	str	r0, [r7, #36]	@ 0x24
 8003bc6:	e012      	b.n	8003bee <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf8 <xTimerGenericCommand+0x98>)
 8003bca:	6818      	ldr	r0, [r3, #0]
 8003bcc:	f107 0114 	add.w	r1, r7, #20
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f7fe fc78 	bl	80024c8 <xQueueGenericSend>
 8003bd8:	6278      	str	r0, [r7, #36]	@ 0x24
 8003bda:	e008      	b.n	8003bee <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003bdc:	4b06      	ldr	r3, [pc, #24]	@ (8003bf8 <xTimerGenericCommand+0x98>)
 8003bde:	6818      	ldr	r0, [r3, #0]
 8003be0:	f107 0114 	add.w	r1, r7, #20
 8003be4:	2300      	movs	r3, #0
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	f7fe fd80 	bl	80026ec <xQueueGenericSendFromISR>
 8003bec:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3728      	adds	r7, #40	@ 0x28
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	200001f4 	.word	0x200001f4

08003bfc <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b088      	sub	sp, #32
 8003c00:	af02      	add	r7, sp, #8
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c06:	4b23      	ldr	r3, [pc, #140]	@ (8003c94 <prvProcessExpiredTimer+0x98>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	3304      	adds	r3, #4
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7fe fb45 	bl	80022a4 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d023      	beq.n	8003c70 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	699a      	ldr	r2, [r3, #24]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	18d1      	adds	r1, r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	6978      	ldr	r0, [r7, #20]
 8003c36:	f000 f8d5 	bl	8003de4 <prvInsertTimerInActiveList>
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d020      	beq.n	8003c82 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c40:	2300      	movs	r3, #0
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	2300      	movs	r3, #0
 8003c46:	687a      	ldr	r2, [r7, #4]
 8003c48:	2100      	movs	r1, #0
 8003c4a:	6978      	ldr	r0, [r7, #20]
 8003c4c:	f7ff ff88 	bl	8003b60 <xTimerGenericCommand>
 8003c50:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d114      	bne.n	8003c82 <prvProcessExpiredTimer+0x86>
        __asm volatile
 8003c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c5c:	f383 8811 	msr	BASEPRI, r3
 8003c60:	f3bf 8f6f 	isb	sy
 8003c64:	f3bf 8f4f 	dsb	sy
 8003c68:	60fb      	str	r3, [r7, #12]
    }
 8003c6a:	bf00      	nop
 8003c6c:	bf00      	nop
 8003c6e:	e7fd      	b.n	8003c6c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c76:	f023 0301 	bic.w	r3, r3, #1
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	6978      	ldr	r0, [r7, #20]
 8003c88:	4798      	blx	r3
    }
 8003c8a:	bf00      	nop
 8003c8c:	3718      	adds	r7, #24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	200001ec 	.word	0x200001ec

08003c98 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ca0:	f107 0308 	add.w	r3, r7, #8
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 f859 	bl	8003d5c <prvGetNextExpireTime>
 8003caa:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	4619      	mov	r1, r3
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 f805 	bl	8003cc0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003cb6:	f000 f8d7 	bl	8003e68 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003cba:	bf00      	nop
 8003cbc:	e7f0      	b.n	8003ca0 <prvTimerTask+0x8>
	...

08003cc0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b084      	sub	sp, #16
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
 8003cc8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003cca:	f7ff fa41 	bl	8003150 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003cce:	f107 0308 	add.w	r3, r7, #8
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f000 f866 	bl	8003da4 <prvSampleTimeNow>
 8003cd8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d130      	bne.n	8003d42 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10a      	bne.n	8003cfc <prvProcessTimerOrBlockTask+0x3c>
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d806      	bhi.n	8003cfc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003cee:	f7ff fa3d 	bl	800316c <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003cf2:	68f9      	ldr	r1, [r7, #12]
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f7ff ff81 	bl	8003bfc <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003cfa:	e024      	b.n	8003d46 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d008      	beq.n	8003d14 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003d02:	4b13      	ldr	r3, [pc, #76]	@ (8003d50 <prvProcessTimerOrBlockTask+0x90>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <prvProcessTimerOrBlockTask+0x50>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e000      	b.n	8003d12 <prvProcessTimerOrBlockTask+0x52>
 8003d10:	2300      	movs	r3, #0
 8003d12:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003d14:	4b0f      	ldr	r3, [pc, #60]	@ (8003d54 <prvProcessTimerOrBlockTask+0x94>)
 8003d16:	6818      	ldr	r0, [r3, #0]
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	4619      	mov	r1, r3
 8003d22:	f7fe ffef 	bl	8002d04 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003d26:	f7ff fa21 	bl	800316c <xTaskResumeAll>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d10a      	bne.n	8003d46 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003d30:	4b09      	ldr	r3, [pc, #36]	@ (8003d58 <prvProcessTimerOrBlockTask+0x98>)
 8003d32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	f3bf 8f6f 	isb	sy
    }
 8003d40:	e001      	b.n	8003d46 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003d42:	f7ff fa13 	bl	800316c <xTaskResumeAll>
    }
 8003d46:	bf00      	nop
 8003d48:	3710      	adds	r7, #16
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	200001f0 	.word	0x200001f0
 8003d54:	200001f4 	.word	0x200001f4
 8003d58:	e000ed04 	.word	0xe000ed04

08003d5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003d5c:	b480      	push	{r7}
 8003d5e:	b085      	sub	sp, #20
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003d64:	4b0e      	ldr	r3, [pc, #56]	@ (8003da0 <prvGetNextExpireTime+0x44>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <prvGetNextExpireTime+0x16>
 8003d6e:	2201      	movs	r2, #1
 8003d70:	e000      	b.n	8003d74 <prvGetNextExpireTime+0x18>
 8003d72:	2200      	movs	r2, #0
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d105      	bne.n	8003d8c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d80:	4b07      	ldr	r3, [pc, #28]	@ (8003da0 <prvGetNextExpireTime+0x44>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	60fb      	str	r3, [r7, #12]
 8003d8a:	e001      	b.n	8003d90 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003d90:	68fb      	ldr	r3, [r7, #12]
    }
 8003d92:	4618      	mov	r0, r3
 8003d94:	3714      	adds	r7, #20
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	200001ec 	.word	0x200001ec

08003da4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003dac:	f7ff fa72 	bl	8003294 <xTaskGetTickCount>
 8003db0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003db2:	4b0b      	ldr	r3, [pc, #44]	@ (8003de0 <prvSampleTimeNow+0x3c>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d205      	bcs.n	8003dc8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003dbc:	f000 f91e 	bl	8003ffc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]
 8003dc6:	e002      	b.n	8003dce <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003dce:	4a04      	ldr	r2, [pc, #16]	@ (8003de0 <prvSampleTimeNow+0x3c>)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
    }
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	200001fc 	.word	0x200001fc

08003de4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
 8003df0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003df2:	2300      	movs	r3, #0
 8003df4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d812      	bhi.n	8003e30 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	1ad2      	subs	r2, r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	699b      	ldr	r3, [r3, #24]
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d302      	bcc.n	8003e1e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	e01b      	b.n	8003e56 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003e1e:	4b10      	ldr	r3, [pc, #64]	@ (8003e60 <prvInsertTimerInActiveList+0x7c>)
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	3304      	adds	r3, #4
 8003e26:	4619      	mov	r1, r3
 8003e28:	4610      	mov	r0, r2
 8003e2a:	f7fe fa02 	bl	8002232 <vListInsert>
 8003e2e:	e012      	b.n	8003e56 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d206      	bcs.n	8003e46 <prvInsertTimerInActiveList+0x62>
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d302      	bcc.n	8003e46 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003e40:	2301      	movs	r3, #1
 8003e42:	617b      	str	r3, [r7, #20]
 8003e44:	e007      	b.n	8003e56 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003e46:	4b07      	ldr	r3, [pc, #28]	@ (8003e64 <prvInsertTimerInActiveList+0x80>)
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	4619      	mov	r1, r3
 8003e50:	4610      	mov	r0, r2
 8003e52:	f7fe f9ee 	bl	8002232 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003e56:	697b      	ldr	r3, [r7, #20]
    }
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3718      	adds	r7, #24
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	200001f0 	.word	0x200001f0
 8003e64:	200001ec 	.word	0x200001ec

08003e68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b08c      	sub	sp, #48	@ 0x30
 8003e6c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003e6e:	e0b2      	b.n	8003fd6 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f2c0 80af 	blt.w	8003fd6 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d004      	beq.n	8003e8e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e86:	3304      	adds	r3, #4
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7fe fa0b 	bl	80022a4 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003e8e:	1d3b      	adds	r3, r7, #4
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff ff87 	bl	8003da4 <prvSampleTimeNow>
 8003e96:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	2b09      	cmp	r3, #9
 8003e9c:	f200 8098 	bhi.w	8003fd0 <prvProcessReceivedCommands+0x168>
 8003ea0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ea8 <prvProcessReceivedCommands+0x40>)
 8003ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea6:	bf00      	nop
 8003ea8:	08003ed1 	.word	0x08003ed1
 8003eac:	08003ed1 	.word	0x08003ed1
 8003eb0:	08003ed1 	.word	0x08003ed1
 8003eb4:	08003f47 	.word	0x08003f47
 8003eb8:	08003f5b 	.word	0x08003f5b
 8003ebc:	08003fa7 	.word	0x08003fa7
 8003ec0:	08003ed1 	.word	0x08003ed1
 8003ec4:	08003ed1 	.word	0x08003ed1
 8003ec8:	08003f47 	.word	0x08003f47
 8003ecc:	08003f5b 	.word	0x08003f5b
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ed6:	f043 0301 	orr.w	r3, r3, #1
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ede:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003ee2:	68fa      	ldr	r2, [r7, #12]
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	18d1      	adds	r1, r2, r3
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	6a3a      	ldr	r2, [r7, #32]
 8003eee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ef0:	f7ff ff78 	bl	8003de4 <prvInsertTimerInActiveList>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d06c      	beq.n	8003fd4 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003efc:	6a1b      	ldr	r3, [r3, #32]
 8003efe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f00:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d061      	beq.n	8003fd4 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	441a      	add	r2, r3
 8003f18:	2300      	movs	r3, #0
 8003f1a:	9300      	str	r3, [sp, #0]
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	2100      	movs	r1, #0
 8003f20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f22:	f7ff fe1d 	bl	8003b60 <xTimerGenericCommand>
 8003f26:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d152      	bne.n	8003fd4 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 8003f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f32:	f383 8811 	msr	BASEPRI, r3
 8003f36:	f3bf 8f6f 	isb	sy
 8003f3a:	f3bf 8f4f 	dsb	sy
 8003f3e:	61bb      	str	r3, [r7, #24]
    }
 8003f40:	bf00      	nop
 8003f42:	bf00      	nop
 8003f44:	e7fd      	b.n	8003f42 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f4c:	f023 0301 	bic.w	r3, r3, #1
 8003f50:	b2da      	uxtb	r2, r3
 8003f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f54:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003f58:	e03d      	b.n	8003fd6 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f60:	f043 0301 	orr.w	r3, r3, #1
 8003f64:	b2da      	uxtb	r2, r3
 8003f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f68:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f70:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10b      	bne.n	8003f92 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 8003f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f7e:	f383 8811 	msr	BASEPRI, r3
 8003f82:	f3bf 8f6f 	isb	sy
 8003f86:	f3bf 8f4f 	dsb	sy
 8003f8a:	617b      	str	r3, [r7, #20]
    }
 8003f8c:	bf00      	nop
 8003f8e:	bf00      	nop
 8003f90:	e7fd      	b.n	8003f8e <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	699a      	ldr	r2, [r3, #24]
 8003f96:	6a3b      	ldr	r3, [r7, #32]
 8003f98:	18d1      	adds	r1, r2, r3
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	6a3a      	ldr	r2, [r7, #32]
 8003f9e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003fa0:	f7ff ff20 	bl	8003de4 <prvInsertTimerInActiveList>
                        break;
 8003fa4:	e017      	b.n	8003fd6 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fac:	f003 0302 	and.w	r3, r3, #2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d103      	bne.n	8003fbc <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8003fb4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003fb6:	f000 fc85 	bl	80048c4 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003fba:	e00c      	b.n	8003fd6 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fbe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fc2:	f023 0301 	bic.w	r3, r3, #1
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003fce:	e002      	b.n	8003fd6 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003fd0:	bf00      	nop
 8003fd2:	e000      	b.n	8003fd6 <prvProcessReceivedCommands+0x16e>
                        break;
 8003fd4:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003fd6:	4b08      	ldr	r3, [pc, #32]	@ (8003ff8 <prvProcessReceivedCommands+0x190>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f107 0108 	add.w	r1, r7, #8
 8003fde:	2200      	movs	r2, #0
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fe fc45 	bl	8002870 <xQueueReceive>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f47f af41 	bne.w	8003e70 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003fee:	bf00      	nop
 8003ff0:	bf00      	nop
 8003ff2:	3728      	adds	r7, #40	@ 0x28
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	200001f4 	.word	0x200001f4

08003ffc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b088      	sub	sp, #32
 8004000:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004002:	e049      	b.n	8004098 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004004:	4b2e      	ldr	r3, [pc, #184]	@ (80040c0 <prvSwitchTimerLists+0xc4>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	68db      	ldr	r3, [r3, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800400e:	4b2c      	ldr	r3, [pc, #176]	@ (80040c0 <prvSwitchTimerLists+0xc4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	68db      	ldr	r3, [r3, #12]
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	3304      	adds	r3, #4
 800401c:	4618      	mov	r0, r3
 800401e:	f7fe f941 	bl	80022a4 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004030:	f003 0304 	and.w	r3, r3, #4
 8004034:	2b00      	cmp	r3, #0
 8004036:	d02f      	beq.n	8004098 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	699b      	ldr	r3, [r3, #24]
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	4413      	add	r3, r2
 8004040:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	429a      	cmp	r2, r3
 8004048:	d90e      	bls.n	8004068 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004056:	4b1a      	ldr	r3, [pc, #104]	@ (80040c0 <prvSwitchTimerLists+0xc4>)
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	3304      	adds	r3, #4
 800405e:	4619      	mov	r1, r3
 8004060:	4610      	mov	r0, r2
 8004062:	f7fe f8e6 	bl	8002232 <vListInsert>
 8004066:	e017      	b.n	8004098 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004068:	2300      	movs	r3, #0
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	2300      	movs	r3, #0
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	2100      	movs	r1, #0
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f7ff fd74 	bl	8003b60 <xTimerGenericCommand>
 8004078:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10b      	bne.n	8004098 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8004080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004084:	f383 8811 	msr	BASEPRI, r3
 8004088:	f3bf 8f6f 	isb	sy
 800408c:	f3bf 8f4f 	dsb	sy
 8004090:	603b      	str	r3, [r7, #0]
    }
 8004092:	bf00      	nop
 8004094:	bf00      	nop
 8004096:	e7fd      	b.n	8004094 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004098:	4b09      	ldr	r3, [pc, #36]	@ (80040c0 <prvSwitchTimerLists+0xc4>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1b0      	bne.n	8004004 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80040a2:	4b07      	ldr	r3, [pc, #28]	@ (80040c0 <prvSwitchTimerLists+0xc4>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80040a8:	4b06      	ldr	r3, [pc, #24]	@ (80040c4 <prvSwitchTimerLists+0xc8>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a04      	ldr	r2, [pc, #16]	@ (80040c0 <prvSwitchTimerLists+0xc4>)
 80040ae:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80040b0:	4a04      	ldr	r2, [pc, #16]	@ (80040c4 <prvSwitchTimerLists+0xc8>)
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	6013      	str	r3, [r2, #0]
    }
 80040b6:	bf00      	nop
 80040b8:	3718      	adds	r7, #24
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	200001ec 	.word	0x200001ec
 80040c4:	200001f0 	.word	0x200001f0

080040c8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80040cc:	f000 f9e6 	bl	800449c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80040d0:	4b12      	ldr	r3, [pc, #72]	@ (800411c <prvCheckForValidListAndQueue+0x54>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d11d      	bne.n	8004114 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80040d8:	4811      	ldr	r0, [pc, #68]	@ (8004120 <prvCheckForValidListAndQueue+0x58>)
 80040da:	f7fe f859 	bl	8002190 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80040de:	4811      	ldr	r0, [pc, #68]	@ (8004124 <prvCheckForValidListAndQueue+0x5c>)
 80040e0:	f7fe f856 	bl	8002190 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80040e4:	4b10      	ldr	r3, [pc, #64]	@ (8004128 <prvCheckForValidListAndQueue+0x60>)
 80040e6:	4a0e      	ldr	r2, [pc, #56]	@ (8004120 <prvCheckForValidListAndQueue+0x58>)
 80040e8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80040ea:	4b10      	ldr	r3, [pc, #64]	@ (800412c <prvCheckForValidListAndQueue+0x64>)
 80040ec:	4a0d      	ldr	r2, [pc, #52]	@ (8004124 <prvCheckForValidListAndQueue+0x5c>)
 80040ee:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80040f0:	2200      	movs	r2, #0
 80040f2:	210c      	movs	r1, #12
 80040f4:	200a      	movs	r0, #10
 80040f6:	f7fe f95b 	bl	80023b0 <xQueueGenericCreate>
 80040fa:	4603      	mov	r3, r0
 80040fc:	4a07      	ldr	r2, [pc, #28]	@ (800411c <prvCheckForValidListAndQueue+0x54>)
 80040fe:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004100:	4b06      	ldr	r3, [pc, #24]	@ (800411c <prvCheckForValidListAndQueue+0x54>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004108:	4b04      	ldr	r3, [pc, #16]	@ (800411c <prvCheckForValidListAndQueue+0x54>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4908      	ldr	r1, [pc, #32]	@ (8004130 <prvCheckForValidListAndQueue+0x68>)
 800410e:	4618      	mov	r0, r3
 8004110:	f7fe fdc6 	bl	8002ca0 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004114:	f000 f9f4 	bl	8004500 <vPortExitCritical>
    }
 8004118:	bf00      	nop
 800411a:	bd80      	pop	{r7, pc}
 800411c:	200001f4 	.word	0x200001f4
 8004120:	200001c4 	.word	0x200001c4
 8004124:	200001d8 	.word	0x200001d8
 8004128:	200001ec 	.word	0x200001ec
 800412c:	200001f0 	.word	0x200001f0
 8004130:	08006cb0 	.word	0x08006cb0

08004134 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	60b9      	str	r1, [r7, #8]
 800413e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	3b04      	subs	r3, #4
 8004144:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800414c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	3b04      	subs	r3, #4
 8004152:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	f023 0201 	bic.w	r2, r3, #1
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	3b04      	subs	r3, #4
 8004162:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004164:	4a0c      	ldr	r2, [pc, #48]	@ (8004198 <pxPortInitialiseStack+0x64>)
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3b14      	subs	r3, #20
 800416e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	3b04      	subs	r3, #4
 800417a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f06f 0202 	mvn.w	r2, #2
 8004182:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	3b20      	subs	r3, #32
 8004188:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800418a:	68fb      	ldr	r3, [r7, #12]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	0800419d 	.word	0x0800419d

0800419c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80041a2:	2300      	movs	r3, #0
 80041a4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80041a6:	4b13      	ldr	r3, [pc, #76]	@ (80041f4 <prvTaskExitError+0x58>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ae:	d00b      	beq.n	80041c8 <prvTaskExitError+0x2c>
        __asm volatile
 80041b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	60fb      	str	r3, [r7, #12]
    }
 80041c2:	bf00      	nop
 80041c4:	bf00      	nop
 80041c6:	e7fd      	b.n	80041c4 <prvTaskExitError+0x28>
        __asm volatile
 80041c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041cc:	f383 8811 	msr	BASEPRI, r3
 80041d0:	f3bf 8f6f 	isb	sy
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	60bb      	str	r3, [r7, #8]
    }
 80041da:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80041dc:	bf00      	nop
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0fc      	beq.n	80041de <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80041e4:	bf00      	nop
 80041e6:	bf00      	nop
 80041e8:	3714      	adds	r7, #20
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
 80041f2:	bf00      	nop
 80041f4:	2000000c 	.word	0x2000000c
	...

08004200 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004200:	4b07      	ldr	r3, [pc, #28]	@ (8004220 <pxCurrentTCBConst2>)
 8004202:	6819      	ldr	r1, [r3, #0]
 8004204:	6808      	ldr	r0, [r1, #0]
 8004206:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800420a:	f380 8809 	msr	PSP, r0
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f04f 0000 	mov.w	r0, #0
 8004216:	f380 8811 	msr	BASEPRI, r0
 800421a:	4770      	bx	lr
 800421c:	f3af 8000 	nop.w

08004220 <pxCurrentTCBConst2>:
 8004220:	200000c0 	.word	0x200000c0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004224:	bf00      	nop
 8004226:	bf00      	nop

08004228 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004228:	4808      	ldr	r0, [pc, #32]	@ (800424c <prvPortStartFirstTask+0x24>)
 800422a:	6800      	ldr	r0, [r0, #0]
 800422c:	6800      	ldr	r0, [r0, #0]
 800422e:	f380 8808 	msr	MSP, r0
 8004232:	f04f 0000 	mov.w	r0, #0
 8004236:	f380 8814 	msr	CONTROL, r0
 800423a:	b662      	cpsie	i
 800423c:	b661      	cpsie	f
 800423e:	f3bf 8f4f 	dsb	sy
 8004242:	f3bf 8f6f 	isb	sy
 8004246:	df00      	svc	0
 8004248:	bf00      	nop
 800424a:	0000      	.short	0x0000
 800424c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004250:	bf00      	nop
 8004252:	bf00      	nop

08004254 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800425a:	4b47      	ldr	r3, [pc, #284]	@ (8004378 <xPortStartScheduler+0x124>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a47      	ldr	r2, [pc, #284]	@ (800437c <xPortStartScheduler+0x128>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d10b      	bne.n	800427c <xPortStartScheduler+0x28>
        __asm volatile
 8004264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004268:	f383 8811 	msr	BASEPRI, r3
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	60fb      	str	r3, [r7, #12]
    }
 8004276:	bf00      	nop
 8004278:	bf00      	nop
 800427a:	e7fd      	b.n	8004278 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800427c:	4b3e      	ldr	r3, [pc, #248]	@ (8004378 <xPortStartScheduler+0x124>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a3f      	ldr	r2, [pc, #252]	@ (8004380 <xPortStartScheduler+0x12c>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d10b      	bne.n	800429e <xPortStartScheduler+0x4a>
        __asm volatile
 8004286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800428a:	f383 8811 	msr	BASEPRI, r3
 800428e:	f3bf 8f6f 	isb	sy
 8004292:	f3bf 8f4f 	dsb	sy
 8004296:	613b      	str	r3, [r7, #16]
    }
 8004298:	bf00      	nop
 800429a:	bf00      	nop
 800429c:	e7fd      	b.n	800429a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800429e:	4b39      	ldr	r3, [pc, #228]	@ (8004384 <xPortStartScheduler+0x130>)
 80042a0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	22ff      	movs	r2, #255	@ 0xff
 80042ae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	b2db      	uxtb	r3, r3
 80042bc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80042c0:	b2da      	uxtb	r2, r3
 80042c2:	4b31      	ldr	r3, [pc, #196]	@ (8004388 <xPortStartScheduler+0x134>)
 80042c4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80042c6:	4b31      	ldr	r3, [pc, #196]	@ (800438c <xPortStartScheduler+0x138>)
 80042c8:	2207      	movs	r2, #7
 80042ca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042cc:	e009      	b.n	80042e2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80042ce:	4b2f      	ldr	r3, [pc, #188]	@ (800438c <xPortStartScheduler+0x138>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	4a2d      	ldr	r2, [pc, #180]	@ (800438c <xPortStartScheduler+0x138>)
 80042d6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80042d8:	78fb      	ldrb	r3, [r7, #3]
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	005b      	lsls	r3, r3, #1
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80042e2:	78fb      	ldrb	r3, [r7, #3]
 80042e4:	b2db      	uxtb	r3, r3
 80042e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ea:	2b80      	cmp	r3, #128	@ 0x80
 80042ec:	d0ef      	beq.n	80042ce <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80042ee:	4b27      	ldr	r3, [pc, #156]	@ (800438c <xPortStartScheduler+0x138>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f1c3 0307 	rsb	r3, r3, #7
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d00b      	beq.n	8004312 <xPortStartScheduler+0xbe>
        __asm volatile
 80042fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042fe:	f383 8811 	msr	BASEPRI, r3
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	60bb      	str	r3, [r7, #8]
    }
 800430c:	bf00      	nop
 800430e:	bf00      	nop
 8004310:	e7fd      	b.n	800430e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004312:	4b1e      	ldr	r3, [pc, #120]	@ (800438c <xPortStartScheduler+0x138>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	021b      	lsls	r3, r3, #8
 8004318:	4a1c      	ldr	r2, [pc, #112]	@ (800438c <xPortStartScheduler+0x138>)
 800431a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800431c:	4b1b      	ldr	r3, [pc, #108]	@ (800438c <xPortStartScheduler+0x138>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004324:	4a19      	ldr	r2, [pc, #100]	@ (800438c <xPortStartScheduler+0x138>)
 8004326:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	b2da      	uxtb	r2, r3
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004330:	4b17      	ldr	r3, [pc, #92]	@ (8004390 <xPortStartScheduler+0x13c>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a16      	ldr	r2, [pc, #88]	@ (8004390 <xPortStartScheduler+0x13c>)
 8004336:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800433a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800433c:	4b14      	ldr	r3, [pc, #80]	@ (8004390 <xPortStartScheduler+0x13c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a13      	ldr	r2, [pc, #76]	@ (8004390 <xPortStartScheduler+0x13c>)
 8004342:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004346:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004348:	f000 f968 	bl	800461c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800434c:	4b11      	ldr	r3, [pc, #68]	@ (8004394 <xPortStartScheduler+0x140>)
 800434e:	2200      	movs	r2, #0
 8004350:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004352:	f000 f987 	bl	8004664 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004356:	4b10      	ldr	r3, [pc, #64]	@ (8004398 <xPortStartScheduler+0x144>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a0f      	ldr	r2, [pc, #60]	@ (8004398 <xPortStartScheduler+0x144>)
 800435c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004360:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004362:	f7ff ff61 	bl	8004228 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004366:	f7ff f851 	bl	800340c <vTaskSwitchContext>
    prvTaskExitError();
 800436a:	f7ff ff17 	bl	800419c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800436e:	2300      	movs	r3, #0
}
 8004370:	4618      	mov	r0, r3
 8004372:	3718      	adds	r7, #24
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	e000ed00 	.word	0xe000ed00
 800437c:	410fc271 	.word	0x410fc271
 8004380:	410fc270 	.word	0x410fc270
 8004384:	e000e400 	.word	0xe000e400
 8004388:	20000200 	.word	0x20000200
 800438c:	20000204 	.word	0x20000204
 8004390:	e000ed20 	.word	0xe000ed20
 8004394:	2000000c 	.word	0x2000000c
 8004398:	e000ef34 	.word	0xe000ef34

0800439c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 800439c:	b480      	push	{r7}
 800439e:	b087      	sub	sp, #28
 80043a0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80043a2:	4b38      	ldr	r3, [pc, #224]	@ (8004484 <vInitPrioGroupValue+0xe8>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a38      	ldr	r2, [pc, #224]	@ (8004488 <vInitPrioGroupValue+0xec>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d10b      	bne.n	80043c4 <vInitPrioGroupValue+0x28>
        __asm volatile
 80043ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043b0:	f383 8811 	msr	BASEPRI, r3
 80043b4:	f3bf 8f6f 	isb	sy
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	60fb      	str	r3, [r7, #12]
    }
 80043be:	bf00      	nop
 80043c0:	bf00      	nop
 80043c2:	e7fd      	b.n	80043c0 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80043c4:	4b2f      	ldr	r3, [pc, #188]	@ (8004484 <vInitPrioGroupValue+0xe8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a30      	ldr	r2, [pc, #192]	@ (800448c <vInitPrioGroupValue+0xf0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d10b      	bne.n	80043e6 <vInitPrioGroupValue+0x4a>
        __asm volatile
 80043ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	613b      	str	r3, [r7, #16]
    }
 80043e0:	bf00      	nop
 80043e2:	bf00      	nop
 80043e4:	e7fd      	b.n	80043e2 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80043e6:	4b2a      	ldr	r3, [pc, #168]	@ (8004490 <vInitPrioGroupValue+0xf4>)
 80043e8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	22ff      	movs	r2, #255	@ 0xff
 80043f6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	b2db      	uxtb	r3, r3
 80043fe:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	b2db      	uxtb	r3, r3
 8004404:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004408:	b2da      	uxtb	r2, r3
 800440a:	4b22      	ldr	r3, [pc, #136]	@ (8004494 <vInitPrioGroupValue+0xf8>)
 800440c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800440e:	4b22      	ldr	r3, [pc, #136]	@ (8004498 <vInitPrioGroupValue+0xfc>)
 8004410:	2207      	movs	r2, #7
 8004412:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004414:	e009      	b.n	800442a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8004416:	4b20      	ldr	r3, [pc, #128]	@ (8004498 <vInitPrioGroupValue+0xfc>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3b01      	subs	r3, #1
 800441c:	4a1e      	ldr	r2, [pc, #120]	@ (8004498 <vInitPrioGroupValue+0xfc>)
 800441e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004420:	78fb      	ldrb	r3, [r7, #3]
 8004422:	b2db      	uxtb	r3, r3
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	b2db      	uxtb	r3, r3
 8004428:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800442a:	78fb      	ldrb	r3, [r7, #3]
 800442c:	b2db      	uxtb	r3, r3
 800442e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004432:	2b80      	cmp	r3, #128	@ 0x80
 8004434:	d0ef      	beq.n	8004416 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004436:	4b18      	ldr	r3, [pc, #96]	@ (8004498 <vInitPrioGroupValue+0xfc>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f1c3 0307 	rsb	r3, r3, #7
 800443e:	2b04      	cmp	r3, #4
 8004440:	d00b      	beq.n	800445a <vInitPrioGroupValue+0xbe>
        __asm volatile
 8004442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004446:	f383 8811 	msr	BASEPRI, r3
 800444a:	f3bf 8f6f 	isb	sy
 800444e:	f3bf 8f4f 	dsb	sy
 8004452:	60bb      	str	r3, [r7, #8]
    }
 8004454:	bf00      	nop
 8004456:	bf00      	nop
 8004458:	e7fd      	b.n	8004456 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800445a:	4b0f      	ldr	r3, [pc, #60]	@ (8004498 <vInitPrioGroupValue+0xfc>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	021b      	lsls	r3, r3, #8
 8004460:	4a0d      	ldr	r2, [pc, #52]	@ (8004498 <vInitPrioGroupValue+0xfc>)
 8004462:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004464:	4b0c      	ldr	r3, [pc, #48]	@ (8004498 <vInitPrioGroupValue+0xfc>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800446c:	4a0a      	ldr	r2, [pc, #40]	@ (8004498 <vInitPrioGroupValue+0xfc>)
 800446e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	b2da      	uxtb	r2, r3
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004478:	bf00      	nop
 800447a:	371c      	adds	r7, #28
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	e000ed00 	.word	0xe000ed00
 8004488:	410fc271 	.word	0x410fc271
 800448c:	410fc270 	.word	0x410fc270
 8004490:	e000e400 	.word	0xe000e400
 8004494:	20000200 	.word	0x20000200
 8004498:	20000204 	.word	0x20000204

0800449c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
        __asm volatile
 80044a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a6:	f383 8811 	msr	BASEPRI, r3
 80044aa:	f3bf 8f6f 	isb	sy
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	607b      	str	r3, [r7, #4]
    }
 80044b4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80044b6:	4b10      	ldr	r3, [pc, #64]	@ (80044f8 <vPortEnterCritical+0x5c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3301      	adds	r3, #1
 80044bc:	4a0e      	ldr	r2, [pc, #56]	@ (80044f8 <vPortEnterCritical+0x5c>)
 80044be:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80044c0:	4b0d      	ldr	r3, [pc, #52]	@ (80044f8 <vPortEnterCritical+0x5c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d110      	bne.n	80044ea <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80044c8:	4b0c      	ldr	r3, [pc, #48]	@ (80044fc <vPortEnterCritical+0x60>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00b      	beq.n	80044ea <vPortEnterCritical+0x4e>
        __asm volatile
 80044d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	603b      	str	r3, [r7, #0]
    }
 80044e4:	bf00      	nop
 80044e6:	bf00      	nop
 80044e8:	e7fd      	b.n	80044e6 <vPortEnterCritical+0x4a>
    }
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	2000000c 	.word	0x2000000c
 80044fc:	e000ed04 	.word	0xe000ed04

08004500 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004506:	4b12      	ldr	r3, [pc, #72]	@ (8004550 <vPortExitCritical+0x50>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10b      	bne.n	8004526 <vPortExitCritical+0x26>
        __asm volatile
 800450e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	607b      	str	r3, [r7, #4]
    }
 8004520:	bf00      	nop
 8004522:	bf00      	nop
 8004524:	e7fd      	b.n	8004522 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004526:	4b0a      	ldr	r3, [pc, #40]	@ (8004550 <vPortExitCritical+0x50>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3b01      	subs	r3, #1
 800452c:	4a08      	ldr	r2, [pc, #32]	@ (8004550 <vPortExitCritical+0x50>)
 800452e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004530:	4b07      	ldr	r3, [pc, #28]	@ (8004550 <vPortExitCritical+0x50>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d105      	bne.n	8004544 <vPortExitCritical+0x44>
 8004538:	2300      	movs	r3, #0
 800453a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	f383 8811 	msr	BASEPRI, r3
    }
 8004542:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	2000000c 	.word	0x2000000c
	...

08004560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004560:	f3ef 8009 	mrs	r0, PSP
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	4b15      	ldr	r3, [pc, #84]	@ (80045c0 <pxCurrentTCBConst>)
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	f01e 0f10 	tst.w	lr, #16
 8004570:	bf08      	it	eq
 8004572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800457a:	6010      	str	r0, [r2, #0]
 800457c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004580:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004584:	f380 8811 	msr	BASEPRI, r0
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f7fe ff3c 	bl	800340c <vTaskSwitchContext>
 8004594:	f04f 0000 	mov.w	r0, #0
 8004598:	f380 8811 	msr	BASEPRI, r0
 800459c:	bc09      	pop	{r0, r3}
 800459e:	6819      	ldr	r1, [r3, #0]
 80045a0:	6808      	ldr	r0, [r1, #0]
 80045a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045a6:	f01e 0f10 	tst.w	lr, #16
 80045aa:	bf08      	it	eq
 80045ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80045b0:	f380 8809 	msr	PSP, r0
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	f3af 8000 	nop.w

080045c0 <pxCurrentTCBConst>:
 80045c0:	200000c0 	.word	0x200000c0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80045c4:	bf00      	nop
 80045c6:	bf00      	nop

080045c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
        __asm volatile
 80045ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d2:	f383 8811 	msr	BASEPRI, r3
 80045d6:	f3bf 8f6f 	isb	sy
 80045da:	f3bf 8f4f 	dsb	sy
 80045de:	607b      	str	r3, [r7, #4]
    }
 80045e0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80045e2:	f001 ffcd 	bl	8006580 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80045e6:	f7fe fe77 	bl	80032d8 <xTaskIncrementTick>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d006      	beq.n	80045fe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80045f0:	f002 f824 	bl	800663c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80045f4:	4b08      	ldr	r3, [pc, #32]	@ (8004618 <SysTick_Handler+0x50>)
 80045f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	e001      	b.n	8004602 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80045fe:	f002 f801 	bl	8006604 <SEGGER_SYSVIEW_RecordExitISR>
 8004602:	2300      	movs	r3, #0
 8004604:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	f383 8811 	msr	BASEPRI, r3
    }
 800460c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800460e:	bf00      	nop
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	e000ed04 	.word	0xe000ed04

0800461c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004620:	4b0b      	ldr	r3, [pc, #44]	@ (8004650 <vPortSetupTimerInterrupt+0x34>)
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004626:	4b0b      	ldr	r3, [pc, #44]	@ (8004654 <vPortSetupTimerInterrupt+0x38>)
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800462c:	4b0a      	ldr	r3, [pc, #40]	@ (8004658 <vPortSetupTimerInterrupt+0x3c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a0a      	ldr	r2, [pc, #40]	@ (800465c <vPortSetupTimerInterrupt+0x40>)
 8004632:	fba2 2303 	umull	r2, r3, r2, r3
 8004636:	099b      	lsrs	r3, r3, #6
 8004638:	4a09      	ldr	r2, [pc, #36]	@ (8004660 <vPortSetupTimerInterrupt+0x44>)
 800463a:	3b01      	subs	r3, #1
 800463c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800463e:	4b04      	ldr	r3, [pc, #16]	@ (8004650 <vPortSetupTimerInterrupt+0x34>)
 8004640:	2207      	movs	r2, #7
 8004642:	601a      	str	r2, [r3, #0]
}
 8004644:	bf00      	nop
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	e000e010 	.word	0xe000e010
 8004654:	e000e018 	.word	0xe000e018
 8004658:	20000000 	.word	0x20000000
 800465c:	10624dd3 	.word	0x10624dd3
 8004660:	e000e014 	.word	0xe000e014

08004664 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004664:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004674 <vPortEnableVFP+0x10>
 8004668:	6801      	ldr	r1, [r0, #0]
 800466a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800466e:	6001      	str	r1, [r0, #0]
 8004670:	4770      	bx	lr
 8004672:	0000      	.short	0x0000
 8004674:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004678:	bf00      	nop
 800467a:	bf00      	nop

0800467c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004682:	f3ef 8305 	mrs	r3, IPSR
 8004686:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2b0f      	cmp	r3, #15
 800468c:	d915      	bls.n	80046ba <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800468e:	4a18      	ldr	r2, [pc, #96]	@ (80046f0 <vPortValidateInterruptPriority+0x74>)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4413      	add	r3, r2
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004698:	4b16      	ldr	r3, [pc, #88]	@ (80046f4 <vPortValidateInterruptPriority+0x78>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	7afa      	ldrb	r2, [r7, #11]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d20b      	bcs.n	80046ba <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 80046a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	607b      	str	r3, [r7, #4]
    }
 80046b4:	bf00      	nop
 80046b6:	bf00      	nop
 80046b8:	e7fd      	b.n	80046b6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80046ba:	4b0f      	ldr	r3, [pc, #60]	@ (80046f8 <vPortValidateInterruptPriority+0x7c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80046c2:	4b0e      	ldr	r3, [pc, #56]	@ (80046fc <vPortValidateInterruptPriority+0x80>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d90b      	bls.n	80046e2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 80046ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	603b      	str	r3, [r7, #0]
    }
 80046dc:	bf00      	nop
 80046de:	bf00      	nop
 80046e0:	e7fd      	b.n	80046de <vPortValidateInterruptPriority+0x62>
    }
 80046e2:	bf00      	nop
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	e000e3f0 	.word	0xe000e3f0
 80046f4:	20000200 	.word	0x20000200
 80046f8:	e000ed0c 	.word	0xe000ed0c
 80046fc:	20000204 	.word	0x20000204

08004700 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b08a      	sub	sp, #40	@ 0x28
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004708:	2300      	movs	r3, #0
 800470a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800470c:	f7fe fd20 	bl	8003150 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004710:	4b66      	ldr	r3, [pc, #408]	@ (80048ac <pvPortMalloc+0x1ac>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004718:	f000 f938 	bl	800498c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800471c:	4b64      	ldr	r3, [pc, #400]	@ (80048b0 <pvPortMalloc+0x1b0>)
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4013      	ands	r3, r2
 8004724:	2b00      	cmp	r3, #0
 8004726:	f040 80a9 	bne.w	800487c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d02e      	beq.n	800478e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004730:	2208      	movs	r2, #8
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	429a      	cmp	r2, r3
 800473a:	d228      	bcs.n	800478e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 800473c:	2208      	movs	r2, #8
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4413      	add	r3, r2
 8004742:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	2b00      	cmp	r3, #0
 800474c:	d022      	beq.n	8004794 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f023 0307 	bic.w	r3, r3, #7
 8004754:	3308      	adds	r3, #8
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	429a      	cmp	r2, r3
 800475a:	d215      	bcs.n	8004788 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f023 0307 	bic.w	r3, r3, #7
 8004762:	3308      	adds	r3, #8
 8004764:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	2b00      	cmp	r3, #0
 800476e:	d011      	beq.n	8004794 <pvPortMalloc+0x94>
        __asm volatile
 8004770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004774:	f383 8811 	msr	BASEPRI, r3
 8004778:	f3bf 8f6f 	isb	sy
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	617b      	str	r3, [r7, #20]
    }
 8004782:	bf00      	nop
 8004784:	bf00      	nop
 8004786:	e7fd      	b.n	8004784 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004788:	2300      	movs	r3, #0
 800478a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800478c:	e002      	b.n	8004794 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800478e:	2300      	movs	r3, #0
 8004790:	607b      	str	r3, [r7, #4]
 8004792:	e000      	b.n	8004796 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004794:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d06f      	beq.n	800487c <pvPortMalloc+0x17c>
 800479c:	4b45      	ldr	r3, [pc, #276]	@ (80048b4 <pvPortMalloc+0x1b4>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d86a      	bhi.n	800487c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80047a6:	4b44      	ldr	r3, [pc, #272]	@ (80048b8 <pvPortMalloc+0x1b8>)
 80047a8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80047aa:	4b43      	ldr	r3, [pc, #268]	@ (80048b8 <pvPortMalloc+0x1b8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047b0:	e004      	b.n	80047bc <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 80047b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80047b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d903      	bls.n	80047ce <pvPortMalloc+0xce>
 80047c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1f1      	bne.n	80047b2 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80047ce:	4b37      	ldr	r3, [pc, #220]	@ (80048ac <pvPortMalloc+0x1ac>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d051      	beq.n	800487c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2208      	movs	r2, #8
 80047de:	4413      	add	r3, r2
 80047e0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80047e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	1ad2      	subs	r2, r2, r3
 80047f2:	2308      	movs	r3, #8
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d920      	bls.n	800483c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80047fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4413      	add	r3, r2
 8004800:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00b      	beq.n	8004824 <pvPortMalloc+0x124>
        __asm volatile
 800480c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004810:	f383 8811 	msr	BASEPRI, r3
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	613b      	str	r3, [r7, #16]
    }
 800481e:	bf00      	nop
 8004820:	bf00      	nop
 8004822:	e7fd      	b.n	8004820 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	1ad2      	subs	r2, r2, r3
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004836:	69b8      	ldr	r0, [r7, #24]
 8004838:	f000 f90a 	bl	8004a50 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800483c:	4b1d      	ldr	r3, [pc, #116]	@ (80048b4 <pvPortMalloc+0x1b4>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	4a1b      	ldr	r2, [pc, #108]	@ (80048b4 <pvPortMalloc+0x1b4>)
 8004848:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800484a:	4b1a      	ldr	r3, [pc, #104]	@ (80048b4 <pvPortMalloc+0x1b4>)
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	4b1b      	ldr	r3, [pc, #108]	@ (80048bc <pvPortMalloc+0x1bc>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d203      	bcs.n	800485e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004856:	4b17      	ldr	r3, [pc, #92]	@ (80048b4 <pvPortMalloc+0x1b4>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a18      	ldr	r2, [pc, #96]	@ (80048bc <pvPortMalloc+0x1bc>)
 800485c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800485e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	4b13      	ldr	r3, [pc, #76]	@ (80048b0 <pvPortMalloc+0x1b0>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	431a      	orrs	r2, r3
 8004868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800486c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486e:	2200      	movs	r2, #0
 8004870:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004872:	4b13      	ldr	r3, [pc, #76]	@ (80048c0 <pvPortMalloc+0x1c0>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	3301      	adds	r3, #1
 8004878:	4a11      	ldr	r2, [pc, #68]	@ (80048c0 <pvPortMalloc+0x1c0>)
 800487a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800487c:	f7fe fc76 	bl	800316c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00b      	beq.n	80048a2 <pvPortMalloc+0x1a2>
        __asm volatile
 800488a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	60fb      	str	r3, [r7, #12]
    }
 800489c:	bf00      	nop
 800489e:	bf00      	nop
 80048a0:	e7fd      	b.n	800489e <pvPortMalloc+0x19e>
    return pvReturn;
 80048a2:	69fb      	ldr	r3, [r7, #28]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3728      	adds	r7, #40	@ 0x28
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	20012e10 	.word	0x20012e10
 80048b0:	20012e24 	.word	0x20012e24
 80048b4:	20012e14 	.word	0x20012e14
 80048b8:	20012e08 	.word	0x20012e08
 80048bc:	20012e18 	.word	0x20012e18
 80048c0:	20012e1c 	.word	0x20012e1c

080048c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d04f      	beq.n	8004976 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80048d6:	2308      	movs	r3, #8
 80048d8:	425b      	negs	r3, r3
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	4413      	add	r3, r2
 80048de:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	4b25      	ldr	r3, [pc, #148]	@ (8004980 <vPortFree+0xbc>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4013      	ands	r3, r2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10b      	bne.n	800490a <vPortFree+0x46>
        __asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	60fb      	str	r3, [r7, #12]
    }
 8004904:	bf00      	nop
 8004906:	bf00      	nop
 8004908:	e7fd      	b.n	8004906 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00b      	beq.n	800492a <vPortFree+0x66>
        __asm volatile
 8004912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	60bb      	str	r3, [r7, #8]
    }
 8004924:	bf00      	nop
 8004926:	bf00      	nop
 8004928:	e7fd      	b.n	8004926 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	4b14      	ldr	r3, [pc, #80]	@ (8004980 <vPortFree+0xbc>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4013      	ands	r3, r2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d01e      	beq.n	8004976 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d11a      	bne.n	8004976 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	4b0e      	ldr	r3, [pc, #56]	@ (8004980 <vPortFree+0xbc>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	43db      	mvns	r3, r3
 800494a:	401a      	ands	r2, r3
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004950:	f7fe fbfe 	bl	8003150 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	4b0a      	ldr	r3, [pc, #40]	@ (8004984 <vPortFree+0xc0>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4413      	add	r3, r2
 800495e:	4a09      	ldr	r2, [pc, #36]	@ (8004984 <vPortFree+0xc0>)
 8004960:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004962:	6938      	ldr	r0, [r7, #16]
 8004964:	f000 f874 	bl	8004a50 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004968:	4b07      	ldr	r3, [pc, #28]	@ (8004988 <vPortFree+0xc4>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3301      	adds	r3, #1
 800496e:	4a06      	ldr	r2, [pc, #24]	@ (8004988 <vPortFree+0xc4>)
 8004970:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004972:	f7fe fbfb 	bl	800316c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004976:	bf00      	nop
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	20012e24 	.word	0x20012e24
 8004984:	20012e14 	.word	0x20012e14
 8004988:	20012e20 	.word	0x20012e20

0800498c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004992:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8004996:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004998:	4b27      	ldr	r3, [pc, #156]	@ (8004a38 <prvHeapInit+0xac>)
 800499a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00c      	beq.n	80049c0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	3307      	adds	r3, #7
 80049aa:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f023 0307 	bic.w	r3, r3, #7
 80049b2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	4a1f      	ldr	r2, [pc, #124]	@ (8004a38 <prvHeapInit+0xac>)
 80049bc:	4413      	add	r3, r2
 80049be:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80049c4:	4a1d      	ldr	r2, [pc, #116]	@ (8004a3c <prvHeapInit+0xb0>)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80049ca:	4b1c      	ldr	r3, [pc, #112]	@ (8004a3c <prvHeapInit+0xb0>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	4413      	add	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80049d8:	2208      	movs	r2, #8
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	1a9b      	subs	r3, r3, r2
 80049de:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 0307 	bic.w	r3, r3, #7
 80049e6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4a15      	ldr	r2, [pc, #84]	@ (8004a40 <prvHeapInit+0xb4>)
 80049ec:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80049ee:	4b14      	ldr	r3, [pc, #80]	@ (8004a40 <prvHeapInit+0xb4>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2200      	movs	r2, #0
 80049f4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80049f6:	4b12      	ldr	r3, [pc, #72]	@ (8004a40 <prvHeapInit+0xb4>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	1ad2      	subs	r2, r2, r3
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a40 <prvHeapInit+0xb4>)
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	4a0a      	ldr	r2, [pc, #40]	@ (8004a44 <prvHeapInit+0xb8>)
 8004a1a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	4a09      	ldr	r2, [pc, #36]	@ (8004a48 <prvHeapInit+0xbc>)
 8004a22:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a24:	4b09      	ldr	r3, [pc, #36]	@ (8004a4c <prvHeapInit+0xc0>)
 8004a26:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004a2a:	601a      	str	r2, [r3, #0]
}
 8004a2c:	bf00      	nop
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	20000208 	.word	0x20000208
 8004a3c:	20012e08 	.word	0x20012e08
 8004a40:	20012e10 	.word	0x20012e10
 8004a44:	20012e18 	.word	0x20012e18
 8004a48:	20012e14 	.word	0x20012e14
 8004a4c:	20012e24 	.word	0x20012e24

08004a50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a58:	4b28      	ldr	r3, [pc, #160]	@ (8004afc <prvInsertBlockIntoFreeList+0xac>)
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	e002      	b.n	8004a64 <prvInsertBlockIntoFreeList+0x14>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d8f7      	bhi.n	8004a5e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	4413      	add	r3, r2
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d108      	bne.n	8004a92 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	441a      	add	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	441a      	add	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d118      	bne.n	8004ad8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	4b15      	ldr	r3, [pc, #84]	@ (8004b00 <prvInsertBlockIntoFreeList+0xb0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d00d      	beq.n	8004ace <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	441a      	add	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	e008      	b.n	8004ae0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ace:	4b0c      	ldr	r3, [pc, #48]	@ (8004b00 <prvInsertBlockIntoFreeList+0xb0>)
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	e003      	b.n	8004ae0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d002      	beq.n	8004aee <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004aee:	bf00      	nop
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	20012e08 	.word	0x20012e08
 8004b00:	20012e10 	.word	0x20012e10

08004b04 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004b08:	4803      	ldr	r0, [pc, #12]	@ (8004b18 <_cbSendSystemDesc+0x14>)
 8004b0a:	f001 fce3 	bl	80064d4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004b0e:	4803      	ldr	r0, [pc, #12]	@ (8004b1c <_cbSendSystemDesc+0x18>)
 8004b10:	f001 fce0 	bl	80064d4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004b14:	bf00      	nop
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	08006cb8 	.word	0x08006cb8
 8004b1c:	08006cec 	.word	0x08006cec

08004b20 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004b24:	4b06      	ldr	r3, [pc, #24]	@ (8004b40 <SEGGER_SYSVIEW_Conf+0x20>)
 8004b26:	6818      	ldr	r0, [r3, #0]
 8004b28:	4b05      	ldr	r3, [pc, #20]	@ (8004b40 <SEGGER_SYSVIEW_Conf+0x20>)
 8004b2a:	6819      	ldr	r1, [r3, #0]
 8004b2c:	4b05      	ldr	r3, [pc, #20]	@ (8004b44 <SEGGER_SYSVIEW_Conf+0x24>)
 8004b2e:	4a06      	ldr	r2, [pc, #24]	@ (8004b48 <SEGGER_SYSVIEW_Conf+0x28>)
 8004b30:	f001 f84c 	bl	8005bcc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004b34:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004b38:	f001 f88c 	bl	8005c54 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004b3c:	bf00      	nop
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	20000000 	.word	0x20000000
 8004b44:	08004b05 	.word	0x08004b05
 8004b48:	08006d84 	.word	0x08006d84

08004b4c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004b52:	2300      	movs	r3, #0
 8004b54:	607b      	str	r3, [r7, #4]
 8004b56:	e033      	b.n	8004bc0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004b58:	491e      	ldr	r1, [pc, #120]	@ (8004bd4 <_cbSendTaskList+0x88>)
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	440b      	add	r3, r1
 8004b66:	6818      	ldr	r0, [r3, #0]
 8004b68:	491a      	ldr	r1, [pc, #104]	@ (8004bd4 <_cbSendTaskList+0x88>)
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	3304      	adds	r3, #4
 8004b78:	6819      	ldr	r1, [r3, #0]
 8004b7a:	4c16      	ldr	r4, [pc, #88]	@ (8004bd4 <_cbSendTaskList+0x88>)
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4423      	add	r3, r4
 8004b88:	3308      	adds	r3, #8
 8004b8a:	681c      	ldr	r4, [r3, #0]
 8004b8c:	4d11      	ldr	r5, [pc, #68]	@ (8004bd4 <_cbSendTaskList+0x88>)
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	4613      	mov	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	442b      	add	r3, r5
 8004b9a:	330c      	adds	r3, #12
 8004b9c:	681d      	ldr	r5, [r3, #0]
 8004b9e:	4e0d      	ldr	r6, [pc, #52]	@ (8004bd4 <_cbSendTaskList+0x88>)
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4433      	add	r3, r6
 8004bac:	3310      	adds	r3, #16
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	462b      	mov	r3, r5
 8004bb4:	4622      	mov	r2, r4
 8004bb6:	f000 f8bd 	bl	8004d34 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	607b      	str	r3, [r7, #4]
 8004bc0:	4b05      	ldr	r3, [pc, #20]	@ (8004bd8 <_cbSendTaskList+0x8c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d3c6      	bcc.n	8004b58 <_cbSendTaskList+0xc>
  }
}
 8004bca:	bf00      	nop
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bd4:	20012e28 	.word	0x20012e28
 8004bd8:	20012ec8 	.word	0x20012ec8

08004bdc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004be0:	b082      	sub	sp, #8
 8004be2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004be4:	f7fe fb66 	bl	80032b4 <xTaskGetTickCountFromISR>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2200      	movs	r2, #0
 8004bec:	469a      	mov	sl, r3
 8004bee:	4693      	mov	fp, r2
 8004bf0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004bf4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	f04f 0a00 	mov.w	sl, #0
 8004c00:	f04f 0b00 	mov.w	fp, #0
 8004c04:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004c08:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004c0c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004c10:	4652      	mov	r2, sl
 8004c12:	465b      	mov	r3, fp
 8004c14:	1a14      	subs	r4, r2, r0
 8004c16:	eb63 0501 	sbc.w	r5, r3, r1
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	00ab      	lsls	r3, r5, #2
 8004c24:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004c28:	00a2      	lsls	r2, r4, #2
 8004c2a:	4614      	mov	r4, r2
 8004c2c:	461d      	mov	r5, r3
 8004c2e:	eb14 0800 	adds.w	r8, r4, r0
 8004c32:	eb45 0901 	adc.w	r9, r5, r1
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	f04f 0300 	mov.w	r3, #0
 8004c3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c4a:	4690      	mov	r8, r2
 8004c4c:	4699      	mov	r9, r3
 8004c4e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004c52:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004c56:	4610      	mov	r0, r2
 8004c58:	4619      	mov	r1, r3
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004c64 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
 8004c70:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004c72:	2205      	movs	r2, #5
 8004c74:	492b      	ldr	r1, [pc, #172]	@ (8004d24 <SYSVIEW_AddTask+0xc0>)
 8004c76:	68b8      	ldr	r0, [r7, #8]
 8004c78:	f001 ffb4 	bl	8006be4 <memcmp>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d04b      	beq.n	8004d1a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004c82:	4b29      	ldr	r3, [pc, #164]	@ (8004d28 <SYSVIEW_AddTask+0xc4>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b07      	cmp	r3, #7
 8004c88:	d903      	bls.n	8004c92 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004c8a:	4828      	ldr	r0, [pc, #160]	@ (8004d2c <SYSVIEW_AddTask+0xc8>)
 8004c8c:	f001 ff20 	bl	8006ad0 <SEGGER_SYSVIEW_Warn>
    return;
 8004c90:	e044      	b.n	8004d1c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004c92:	4b25      	ldr	r3, [pc, #148]	@ (8004d28 <SYSVIEW_AddTask+0xc4>)
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	4926      	ldr	r1, [pc, #152]	@ (8004d30 <SYSVIEW_AddTask+0xcc>)
 8004c98:	4613      	mov	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	440b      	add	r3, r1
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004ca6:	4b20      	ldr	r3, [pc, #128]	@ (8004d28 <SYSVIEW_AddTask+0xc4>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	4921      	ldr	r1, [pc, #132]	@ (8004d30 <SYSVIEW_AddTask+0xcc>)
 8004cac:	4613      	mov	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	440b      	add	r3, r1
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8004d28 <SYSVIEW_AddTask+0xc4>)
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	491b      	ldr	r1, [pc, #108]	@ (8004d30 <SYSVIEW_AddTask+0xcc>)
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	440b      	add	r3, r1
 8004ccc:	3308      	adds	r3, #8
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004cd2:	4b15      	ldr	r3, [pc, #84]	@ (8004d28 <SYSVIEW_AddTask+0xc4>)
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	4916      	ldr	r1, [pc, #88]	@ (8004d30 <SYSVIEW_AddTask+0xcc>)
 8004cd8:	4613      	mov	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	440b      	add	r3, r1
 8004ce2:	330c      	adds	r3, #12
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8004d28 <SYSVIEW_AddTask+0xc4>)
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	4910      	ldr	r1, [pc, #64]	@ (8004d30 <SYSVIEW_AddTask+0xcc>)
 8004cee:	4613      	mov	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	440b      	add	r3, r1
 8004cf8:	3310      	adds	r3, #16
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8004d28 <SYSVIEW_AddTask+0xc4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	3301      	adds	r3, #1
 8004d04:	4a08      	ldr	r2, [pc, #32]	@ (8004d28 <SYSVIEW_AddTask+0xc4>)
 8004d06:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	68b9      	ldr	r1, [r7, #8]
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 f80e 	bl	8004d34 <SYSVIEW_SendTaskInfo>
 8004d18:	e000      	b.n	8004d1c <SYSVIEW_AddTask+0xb8>
    return;
 8004d1a:	bf00      	nop

}
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	08006cfc 	.word	0x08006cfc
 8004d28:	20012ec8 	.word	0x20012ec8
 8004d2c:	08006d04 	.word	0x08006d04
 8004d30:	20012e28 	.word	0x20012e28

08004d34 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b08a      	sub	sp, #40	@ 0x28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
 8004d40:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004d42:	f107 0314 	add.w	r3, r7, #20
 8004d46:	2214      	movs	r2, #20
 8004d48:	2100      	movs	r1, #0
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f001 ff5a 	bl	8006c04 <memset>
  TaskInfo.TaskID     = TaskID;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d62:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004d64:	f107 0314 	add.w	r3, r7, #20
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f001 fabb 	bl	80062e4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004d6e:	bf00      	nop
 8004d70:	3728      	adds	r7, #40	@ 0x28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <__NVIC_EnableIRQ>:
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	4603      	mov	r3, r0
 8004d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	db0b      	blt.n	8004da2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d8a:	79fb      	ldrb	r3, [r7, #7]
 8004d8c:	f003 021f 	and.w	r2, r3, #31
 8004d90:	4907      	ldr	r1, [pc, #28]	@ (8004db0 <__NVIC_EnableIRQ+0x38>)
 8004d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d96:	095b      	lsrs	r3, r3, #5
 8004d98:	2001      	movs	r0, #1
 8004d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8004d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	e000e100 	.word	0xe000e100

08004db4 <__NVIC_SetPriority>:
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	4603      	mov	r3, r0
 8004dbc:	6039      	str	r1, [r7, #0]
 8004dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	db0a      	blt.n	8004dde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	490c      	ldr	r1, [pc, #48]	@ (8004e00 <__NVIC_SetPriority+0x4c>)
 8004dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd2:	0112      	lsls	r2, r2, #4
 8004dd4:	b2d2      	uxtb	r2, r2
 8004dd6:	440b      	add	r3, r1
 8004dd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004ddc:	e00a      	b.n	8004df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	4908      	ldr	r1, [pc, #32]	@ (8004e04 <__NVIC_SetPriority+0x50>)
 8004de4:	79fb      	ldrb	r3, [r7, #7]
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	3b04      	subs	r3, #4
 8004dec:	0112      	lsls	r2, r2, #4
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	440b      	add	r3, r1
 8004df2:	761a      	strb	r2, [r3, #24]
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	e000e100 	.word	0xe000e100
 8004e04:	e000ed00 	.word	0xe000ed00

08004e08 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004e0e:	f001 febb 	bl	8006b88 <SEGGER_SYSVIEW_IsStarted>
 8004e12:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004e1a:	f001 f8e7 	bl	8005fec <SEGGER_SYSVIEW_Start>
  }
}
 8004e1e:	bf00      	nop
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
	...

08004e28 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004e32:	4b0c      	ldr	r3, [pc, #48]	@ (8004e64 <_cbOnUARTRx+0x3c>)
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	d806      	bhi.n	8004e48 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e64 <_cbOnUARTRx+0x3c>)
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	4b08      	ldr	r3, [pc, #32]	@ (8004e64 <_cbOnUARTRx+0x3c>)
 8004e44:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004e46:	e009      	b.n	8004e5c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004e48:	f7ff ffde 	bl	8004e08 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004e4c:	4b05      	ldr	r3, [pc, #20]	@ (8004e64 <_cbOnUARTRx+0x3c>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	4618      	mov	r0, r3
 8004e52:	1dfb      	adds	r3, r7, #7
 8004e54:	2201      	movs	r2, #1
 8004e56:	4619      	mov	r1, r3
 8004e58:	f000 fb9a 	bl	8005590 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004e5c:	bf00      	nop
}
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	20000010 	.word	0x20000010

08004e68 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004e70:	4b14      	ldr	r3, [pc, #80]	@ (8004ec4 <_cbOnUARTTx+0x5c>)
 8004e72:	785b      	ldrb	r3, [r3, #1]
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	d80f      	bhi.n	8004e98 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004e78:	4b12      	ldr	r3, [pc, #72]	@ (8004ec4 <_cbOnUARTTx+0x5c>)
 8004e7a:	785b      	ldrb	r3, [r3, #1]
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	4b12      	ldr	r3, [pc, #72]	@ (8004ec8 <_cbOnUARTTx+0x60>)
 8004e80:	5c9a      	ldrb	r2, [r3, r2]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004e86:	4b0f      	ldr	r3, [pc, #60]	@ (8004ec4 <_cbOnUARTTx+0x5c>)
 8004e88:	785b      	ldrb	r3, [r3, #1]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec4 <_cbOnUARTTx+0x5c>)
 8004e90:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004e92:	2301      	movs	r3, #1
 8004e94:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004e96:	e00f      	b.n	8004eb8 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004e98:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec4 <_cbOnUARTTx+0x5c>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 fa19 	bl	80052d8 <SEGGER_RTT_ReadUpBufferNoLock>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	da02      	bge.n	8004eb6 <_cbOnUARTTx+0x4e>
    r = 0;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	e000      	b.n	8004eb8 <_cbOnUARTTx+0x50>
  }
Done:
 8004eb6:	bf00      	nop
  return r;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20000010 	.word	0x20000010
 8004ec8:	08006d8c 	.word	0x08006d8c

08004ecc <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004ed4:	4a04      	ldr	r2, [pc, #16]	@ (8004ee8 <SEGGER_UART_init+0x1c>)
 8004ed6:	4905      	ldr	r1, [pc, #20]	@ (8004eec <SEGGER_UART_init+0x20>)
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 f863 	bl	8004fa4 <HIF_UART_Init>
}
 8004ede:	bf00      	nop
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	08004e29 	.word	0x08004e29
 8004eec:	08004e69 	.word	0x08004e69

08004ef0 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8004f70 <USART2_IRQHandler+0x80>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f003 0320 	and.w	r3, r3, #32
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d011      	beq.n	8004f2a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004f06:	4b1b      	ldr	r3, [pc, #108]	@ (8004f74 <USART2_IRQHandler+0x84>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f003 030b 	and.w	r3, r3, #11
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d108      	bne.n	8004f2a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004f18:	4b17      	ldr	r3, [pc, #92]	@ (8004f78 <USART2_IRQHandler+0x88>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d004      	beq.n	8004f2a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004f20:	4b15      	ldr	r3, [pc, #84]	@ (8004f78 <USART2_IRQHandler+0x88>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	79fa      	ldrb	r2, [r7, #7]
 8004f26:	4610      	mov	r0, r2
 8004f28:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d01a      	beq.n	8004f6a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004f34:	4b11      	ldr	r3, [pc, #68]	@ (8004f7c <USART2_IRQHandler+0x8c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d015      	beq.n	8004f68 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f7c <USART2_IRQHandler+0x8c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	1dfa      	adds	r2, r7, #7
 8004f42:	4610      	mov	r0, r2
 8004f44:	4798      	blx	r3
 8004f46:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d106      	bne.n	8004f5c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f80 <USART2_IRQHandler+0x90>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a0b      	ldr	r2, [pc, #44]	@ (8004f80 <USART2_IRQHandler+0x90>)
 8004f54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	e006      	b.n	8004f6a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004f5c:	4b04      	ldr	r3, [pc, #16]	@ (8004f70 <USART2_IRQHandler+0x80>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004f60:	79fa      	ldrb	r2, [r7, #7]
 8004f62:	4b04      	ldr	r3, [pc, #16]	@ (8004f74 <USART2_IRQHandler+0x84>)
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	e000      	b.n	8004f6a <USART2_IRQHandler+0x7a>
      return;
 8004f68:	bf00      	nop
    }
  }
}
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40004400 	.word	0x40004400
 8004f74:	40004404 	.word	0x40004404
 8004f78:	20012ecc 	.word	0x20012ecc
 8004f7c:	20012ed0 	.word	0x20012ed0
 8004f80:	4000440c 	.word	0x4000440c

08004f84 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004f84:	b480      	push	{r7}
 8004f86:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004f88:	4b05      	ldr	r3, [pc, #20]	@ (8004fa0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a04      	ldr	r2, [pc, #16]	@ (8004fa0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f92:	6013      	str	r3, [r2, #0]
}
 8004f94:	bf00      	nop
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	4000440c 	.word	0x4000440c

08004fa4 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004fb0:	4b2e      	ldr	r3, [pc, #184]	@ (800506c <HIF_UART_Init+0xc8>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a2d      	ldr	r2, [pc, #180]	@ (800506c <HIF_UART_Init+0xc8>)
 8004fb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fba:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004fbc:	4b2c      	ldr	r3, [pc, #176]	@ (8005070 <HIF_UART_Init+0xcc>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a2b      	ldr	r2, [pc, #172]	@ (8005070 <HIF_UART_Init+0xcc>)
 8004fc2:	f043 0301 	orr.w	r3, r3, #1
 8004fc6:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8005074 <HIF_UART_Init+0xd0>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fd4:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8004fdc:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004fde:	4a25      	ldr	r2, [pc, #148]	@ (8005074 <HIF_UART_Init+0xd0>)
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004fe4:	4b24      	ldr	r3, [pc, #144]	@ (8005078 <HIF_UART_Init+0xd4>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ff0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8004ff8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004ffa:	4a1f      	ldr	r2, [pc, #124]	@ (8005078 <HIF_UART_Init+0xd4>)
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005000:	4b1e      	ldr	r3, [pc, #120]	@ (800507c <HIF_UART_Init+0xd8>)
 8005002:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 8005006:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8005008:	4b1d      	ldr	r3, [pc, #116]	@ (8005080 <HIF_UART_Init+0xdc>)
 800500a:	2200      	movs	r2, #0
 800500c:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800500e:	4b1d      	ldr	r3, [pc, #116]	@ (8005084 <HIF_UART_Init+0xe0>)
 8005010:	2280      	movs	r2, #128	@ 0x80
 8005012:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800501a:	4a1b      	ldr	r2, [pc, #108]	@ (8005088 <HIF_UART_Init+0xe4>)
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005022:	3301      	adds	r3, #1
 8005024:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	085b      	lsrs	r3, r3, #1
 800502a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005032:	d302      	bcc.n	800503a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005034:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8005038:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d004      	beq.n	800504a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	4a11      	ldr	r2, [pc, #68]	@ (800508c <HIF_UART_Init+0xe8>)
 8005046:	b29b      	uxth	r3, r3
 8005048:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800504a:	4a11      	ldr	r2, [pc, #68]	@ (8005090 <HIF_UART_Init+0xec>)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005050:	4a10      	ldr	r2, [pc, #64]	@ (8005094 <HIF_UART_Init+0xf0>)
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8005056:	2106      	movs	r1, #6
 8005058:	2026      	movs	r0, #38	@ 0x26
 800505a:	f7ff feab 	bl	8004db4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800505e:	2026      	movs	r0, #38	@ 0x26
 8005060:	f7ff fe8a 	bl	8004d78 <__NVIC_EnableIRQ>
}
 8005064:	bf00      	nop
 8005066:	3718      	adds	r7, #24
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	40023840 	.word	0x40023840
 8005070:	40023830 	.word	0x40023830
 8005074:	40020020 	.word	0x40020020
 8005078:	40020000 	.word	0x40020000
 800507c:	4000440c 	.word	0x4000440c
 8005080:	40004410 	.word	0x40004410
 8005084:	40004414 	.word	0x40004414
 8005088:	0501bd00 	.word	0x0501bd00
 800508c:	40004408 	.word	0x40004408
 8005090:	20012ecc 	.word	0x20012ecc
 8005094:	20012ed0 	.word	0x20012ed0

08005098 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800509e:	4b25      	ldr	r3, [pc, #148]	@ (8005134 <_DoInit+0x9c>)
 80050a0:	603b      	str	r3, [r7, #0]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2203      	movs	r2, #3
 80050a6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	2203      	movs	r2, #3
 80050ac:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	4a21      	ldr	r2, [pc, #132]	@ (8005138 <_DoInit+0xa0>)
 80050b2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	4a21      	ldr	r2, [pc, #132]	@ (800513c <_DoInit+0xa4>)
 80050b8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80050c0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2200      	movs	r2, #0
 80050c6:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	2200      	movs	r2, #0
 80050cc:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2200      	movs	r2, #0
 80050d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	4a18      	ldr	r2, [pc, #96]	@ (8005138 <_DoInit+0xa0>)
 80050d8:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	4a18      	ldr	r2, [pc, #96]	@ (8005140 <_DoInit+0xa8>)
 80050de:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2210      	movs	r2, #16
 80050e4:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2200      	movs	r2, #0
 80050ea:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2200      	movs	r2, #0
 80050f0:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2200      	movs	r2, #0
 80050f6:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80050f8:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80050fc:	2300      	movs	r3, #0
 80050fe:	607b      	str	r3, [r7, #4]
 8005100:	e00c      	b.n	800511c <_DoInit+0x84>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f1c3 030f 	rsb	r3, r3, #15
 8005108:	4a0e      	ldr	r2, [pc, #56]	@ (8005144 <_DoInit+0xac>)
 800510a:	5cd1      	ldrb	r1, [r2, r3]
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4413      	add	r3, r2
 8005112:	460a      	mov	r2, r1
 8005114:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	3301      	adds	r3, #1
 800511a:	607b      	str	r3, [r7, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b0f      	cmp	r3, #15
 8005120:	d9ef      	bls.n	8005102 <_DoInit+0x6a>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005122:	f3bf 8f5f 	dmb	sy
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	20012ed4 	.word	0x20012ed4
 8005138:	08006d54 	.word	0x08006d54
 800513c:	20012f7c 	.word	0x20012f7c
 8005140:	2001337c 	.word	0x2001337c
 8005144:	08006d90 	.word	0x08006d90

08005148 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005148:	b580      	push	{r7, lr}
 800514a:	b08a      	sub	sp, #40	@ 0x28
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005154:	2300      	movs	r3, #0
 8005156:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	429a      	cmp	r2, r3
 800516a:	d905      	bls.n	8005178 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	3b01      	subs	r3, #1
 8005174:	627b      	str	r3, [r7, #36]	@ 0x24
 8005176:	e007      	b.n	8005188 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	69b9      	ldr	r1, [r7, #24]
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	1acb      	subs	r3, r1, r3
 8005182:	4413      	add	r3, r2
 8005184:	3b01      	subs	r3, #1
 8005186:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005192:	4293      	cmp	r3, r2
 8005194:	bf28      	it	cs
 8005196:	4613      	movcs	r3, r2
 8005198:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800519a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4293      	cmp	r3, r2
 80051a0:	bf28      	it	cs
 80051a2:	4613      	movcs	r3, r2
 80051a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	4413      	add	r3, r2
 80051ae:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80051b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051b2:	68b9      	ldr	r1, [r7, #8]
 80051b4:	6978      	ldr	r0, [r7, #20]
 80051b6:	f001 fd51 	bl	8006c5c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80051ba:	6a3a      	ldr	r2, [r7, #32]
 80051bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051be:	4413      	add	r3, r2
 80051c0:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c6:	4413      	add	r3, r2
 80051c8:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80051d2:	69fa      	ldr	r2, [r7, #28]
 80051d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d6:	4413      	add	r3, r2
 80051d8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	69fa      	ldr	r2, [r7, #28]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d101      	bne.n	80051e8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80051e4:	2300      	movs	r3, #0
 80051e6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80051e8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	69fa      	ldr	r2, [r7, #28]
 80051f0:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1b2      	bne.n	800515e <_WriteBlocking+0x16>
  return NumBytesWritten;
 80051f8:	6a3b      	ldr	r3, [r7, #32]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3728      	adds	r7, #40	@ 0x28
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005202:	b580      	push	{r7, lr}
 8005204:	b088      	sub	sp, #32
 8005206:	af00      	add	r7, sp, #0
 8005208:	60f8      	str	r0, [r7, #12]
 800520a:	60b9      	str	r1, [r7, #8]
 800520c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	429a      	cmp	r2, r3
 8005224:	d911      	bls.n	800524a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	4413      	add	r3, r2
 800522e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	68b9      	ldr	r1, [r7, #8]
 8005234:	6938      	ldr	r0, [r7, #16]
 8005236:	f001 fd11 	bl	8006c5c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800523a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800523e:	69fa      	ldr	r2, [r7, #28]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	441a      	add	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005248:	e01f      	b.n	800528a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	4413      	add	r3, r2
 8005256:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	68b9      	ldr	r1, [r7, #8]
 800525c:	6938      	ldr	r0, [r7, #16]
 800525e:	f001 fcfd 	bl	8006c5c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	4413      	add	r3, r2
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	4619      	mov	r1, r3
 800527a:	6938      	ldr	r0, [r7, #16]
 800527c:	f001 fcee 	bl	8006c5c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005280:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	60da      	str	r2, [r3, #12]
}
 800528a:	bf00      	nop
 800528c:	3720      	adds	r7, #32
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005292:	b480      	push	{r7}
 8005294:	b087      	sub	sp, #28
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d808      	bhi.n	80052c0 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	689a      	ldr	r2, [r3, #8]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	1ad2      	subs	r2, r2, r3
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	4413      	add	r3, r2
 80052ba:	3b01      	subs	r3, #1
 80052bc:	617b      	str	r3, [r7, #20]
 80052be:	e004      	b.n	80052ca <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	3b01      	subs	r3, #1
 80052c8:	617b      	str	r3, [r7, #20]
  }
  return r;
 80052ca:	697b      	ldr	r3, [r7, #20]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	371c      	adds	r7, #28
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80052d8:	b580      	push	{r7, lr}
 80052da:	b08c      	sub	sp, #48	@ 0x30
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80052e4:	4b3e      	ldr	r3, [pc, #248]	@ (80053e0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80052e6:	623b      	str	r3, [r7, #32]
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80052f2:	f7ff fed1 	bl	8005098 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	4613      	mov	r3, r2
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	4413      	add	r3, r2
 8005300:	00db      	lsls	r3, r3, #3
 8005302:	4a37      	ldr	r2, [pc, #220]	@ (80053e0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005304:	4413      	add	r3, r2
 8005306:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005318:	2300      	movs	r3, #0
 800531a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800531c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	429a      	cmp	r2, r3
 8005322:	d92b      	bls.n	800537c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4293      	cmp	r3, r2
 8005334:	bf28      	it	cs
 8005336:	4613      	movcs	r3, r2
 8005338:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005340:	4413      	add	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	6939      	ldr	r1, [r7, #16]
 8005348:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800534a:	f001 fc87 	bl	8006c5c <memcpy>
    NumBytesRead += NumBytesRem;
 800534e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	4413      	add	r3, r2
 8005354:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	4413      	add	r3, r2
 800535c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005366:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	4413      	add	r3, r2
 800536c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005374:	429a      	cmp	r2, r3
 8005376:	d101      	bne.n	800537c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005378:	2300      	movs	r3, #0
 800537a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4293      	cmp	r3, r2
 800538a:	bf28      	it	cs
 800538c:	4613      	movcs	r3, r2
 800538e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d019      	beq.n	80053ca <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539c:	4413      	add	r3, r2
 800539e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	6939      	ldr	r1, [r7, #16]
 80053a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80053a6:	f001 fc59 	bl	8006c5c <memcpy>
    NumBytesRead += NumBytesRem;
 80053aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	4413      	add	r3, r2
 80053b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80053b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	4413      	add	r3, r2
 80053b8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80053c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	4413      	add	r3, r2
 80053c8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80053ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053d4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80053d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3730      	adds	r7, #48	@ 0x30
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	20012ed4 	.word	0x20012ed4

080053e4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08c      	sub	sp, #48	@ 0x30
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80053f0:	4b3e      	ldr	r3, [pc, #248]	@ (80054ec <SEGGER_RTT_ReadNoLock+0x108>)
 80053f2:	623b      	str	r3, [r7, #32]
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <SEGGER_RTT_ReadNoLock+0x1e>
 80053fe:	f7ff fe4b 	bl	8005098 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	4613      	mov	r3, r2
 8005406:	005b      	lsls	r3, r3, #1
 8005408:	4413      	add	r3, r2
 800540a:	00db      	lsls	r3, r3, #3
 800540c:	3360      	adds	r3, #96	@ 0x60
 800540e:	4a37      	ldr	r2, [pc, #220]	@ (80054ec <SEGGER_RTT_ReadNoLock+0x108>)
 8005410:	4413      	add	r3, r2
 8005412:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005424:	2300      	movs	r3, #0
 8005426:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005428:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	429a      	cmp	r2, r3
 800542e:	d92b      	bls.n	8005488 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	689a      	ldr	r2, [r3, #8]
 8005434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4293      	cmp	r3, r2
 8005440:	bf28      	it	cs
 8005442:	4613      	movcs	r3, r2
 8005444:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544c:	4413      	add	r3, r2
 800544e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	6939      	ldr	r1, [r7, #16]
 8005454:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005456:	f001 fc01 	bl	8006c5c <memcpy>
    NumBytesRead += NumBytesRem;
 800545a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	4413      	add	r3, r2
 8005460:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	4413      	add	r3, r2
 8005468:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005472:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	4413      	add	r3, r2
 8005478:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005480:	429a      	cmp	r2, r3
 8005482:	d101      	bne.n	8005488 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005484:	2300      	movs	r3, #0
 8005486:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4293      	cmp	r3, r2
 8005496:	bf28      	it	cs
 8005498:	4613      	movcs	r3, r2
 800549a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d019      	beq.n	80054d6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a8:	4413      	add	r3, r2
 80054aa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	6939      	ldr	r1, [r7, #16]
 80054b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80054b2:	f001 fbd3 	bl	8006c5c <memcpy>
    NumBytesRead += NumBytesRem;
 80054b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	4413      	add	r3, r2
 80054bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80054be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	4413      	add	r3, r2
 80054c4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80054ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	4413      	add	r3, r2
 80054d4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80054d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d002      	beq.n	80054e2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054e0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80054e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3730      	adds	r7, #48	@ 0x30
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	20012ed4 	.word	0x20012ed4

080054f0 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b088      	sub	sp, #32
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	4613      	mov	r3, r2
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	4413      	add	r3, r2
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	3360      	adds	r3, #96	@ 0x60
 800550c:	4a1f      	ldr	r2, [pc, #124]	@ (800558c <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800550e:	4413      	add	r3, r2
 8005510:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	2b02      	cmp	r3, #2
 8005518:	d029      	beq.n	800556e <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800551a:	2b02      	cmp	r3, #2
 800551c:	d82e      	bhi.n	800557c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800551e:	2b00      	cmp	r3, #0
 8005520:	d002      	beq.n	8005528 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005522:	2b01      	cmp	r3, #1
 8005524:	d013      	beq.n	800554e <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005526:	e029      	b.n	800557c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005528:	6978      	ldr	r0, [r7, #20]
 800552a:	f7ff feb2 	bl	8005292 <_GetAvailWriteSpace>
 800552e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	429a      	cmp	r2, r3
 8005536:	d202      	bcs.n	800553e <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005538:	2300      	movs	r3, #0
 800553a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800553c:	e021      	b.n	8005582 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	69b9      	ldr	r1, [r7, #24]
 8005546:	6978      	ldr	r0, [r7, #20]
 8005548:	f7ff fe5b 	bl	8005202 <_WriteNoCheck>
    break;
 800554c:	e019      	b.n	8005582 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800554e:	6978      	ldr	r0, [r7, #20]
 8005550:	f7ff fe9f 	bl	8005292 <_GetAvailWriteSpace>
 8005554:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	4293      	cmp	r3, r2
 800555c:	bf28      	it	cs
 800555e:	4613      	movcs	r3, r2
 8005560:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005562:	69fa      	ldr	r2, [r7, #28]
 8005564:	69b9      	ldr	r1, [r7, #24]
 8005566:	6978      	ldr	r0, [r7, #20]
 8005568:	f7ff fe4b 	bl	8005202 <_WriteNoCheck>
    break;
 800556c:	e009      	b.n	8005582 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	69b9      	ldr	r1, [r7, #24]
 8005572:	6978      	ldr	r0, [r7, #20]
 8005574:	f7ff fde8 	bl	8005148 <_WriteBlocking>
 8005578:	61f8      	str	r0, [r7, #28]
    break;
 800557a:	e002      	b.n	8005582 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 800557c:	2300      	movs	r3, #0
 800557e:	61fb      	str	r3, [r7, #28]
    break;
 8005580:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005582:	69fb      	ldr	r3, [r7, #28]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3720      	adds	r7, #32
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	20012ed4 	.word	0x20012ed4

08005590 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005590:	b580      	push	{r7, lr}
 8005592:	b088      	sub	sp, #32
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800559c:	4b0e      	ldr	r3, [pc, #56]	@ (80055d8 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800559e:	61fb      	str	r3, [r7, #28]
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <SEGGER_RTT_WriteDownBuffer+0x1e>
 80055aa:	f7ff fd75 	bl	8005098 <_DoInit>
  SEGGER_RTT_LOCK();
 80055ae:	f3ef 8311 	mrs	r3, BASEPRI
 80055b2:	f04f 0120 	mov.w	r1, #32
 80055b6:	f381 8811 	msr	BASEPRI, r1
 80055ba:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	68b9      	ldr	r1, [r7, #8]
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f7ff ff95 	bl	80054f0 <SEGGER_RTT_WriteDownBufferNoLock>
 80055c6:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80055ce:	697b      	ldr	r3, [r7, #20]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3720      	adds	r7, #32
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	20012ed4 	.word	0x20012ed4

080055dc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80055dc:	b580      	push	{r7, lr}
 80055de:	b088      	sub	sp, #32
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
 80055e8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80055ea:	4b3d      	ldr	r3, [pc, #244]	@ (80056e0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80055ec:	61bb      	str	r3, [r7, #24]
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <SEGGER_RTT_AllocUpBuffer+0x20>
 80055f8:	f7ff fd4e 	bl	8005098 <_DoInit>
  SEGGER_RTT_LOCK();
 80055fc:	f3ef 8311 	mrs	r3, BASEPRI
 8005600:	f04f 0120 	mov.w	r1, #32
 8005604:	f381 8811 	msr	BASEPRI, r1
 8005608:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800560a:	4b35      	ldr	r3, [pc, #212]	@ (80056e0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800560c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800560e:	2300      	movs	r3, #0
 8005610:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005612:	6939      	ldr	r1, [r7, #16]
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	1c5a      	adds	r2, r3, #1
 8005618:	4613      	mov	r3, r2
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	4413      	add	r3, r2
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	440b      	add	r3, r1
 8005622:	3304      	adds	r3, #4
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d008      	beq.n	800563c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	3301      	adds	r3, #1
 800562e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	69fa      	ldr	r2, [r7, #28]
 8005636:	429a      	cmp	r2, r3
 8005638:	dbeb      	blt.n	8005612 <SEGGER_RTT_AllocUpBuffer+0x36>
 800563a:	e000      	b.n	800563e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800563c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	69fa      	ldr	r2, [r7, #28]
 8005644:	429a      	cmp	r2, r3
 8005646:	da3f      	bge.n	80056c8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005648:	6939      	ldr	r1, [r7, #16]
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	4613      	mov	r3, r2
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	4413      	add	r3, r2
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	440b      	add	r3, r1
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800565c:	6939      	ldr	r1, [r7, #16]
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	1c5a      	adds	r2, r3, #1
 8005662:	4613      	mov	r3, r2
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	4413      	add	r3, r2
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	440b      	add	r3, r1
 800566c:	3304      	adds	r3, #4
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005672:	6939      	ldr	r1, [r7, #16]
 8005674:	69fa      	ldr	r2, [r7, #28]
 8005676:	4613      	mov	r3, r2
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	4413      	add	r3, r2
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	440b      	add	r3, r1
 8005680:	3320      	adds	r3, #32
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005686:	6939      	ldr	r1, [r7, #16]
 8005688:	69fa      	ldr	r2, [r7, #28]
 800568a:	4613      	mov	r3, r2
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	4413      	add	r3, r2
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	440b      	add	r3, r1
 8005694:	3328      	adds	r3, #40	@ 0x28
 8005696:	2200      	movs	r2, #0
 8005698:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800569a:	6939      	ldr	r1, [r7, #16]
 800569c:	69fa      	ldr	r2, [r7, #28]
 800569e:	4613      	mov	r3, r2
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	4413      	add	r3, r2
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	440b      	add	r3, r1
 80056a8:	3324      	adds	r3, #36	@ 0x24
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80056ae:	6939      	ldr	r1, [r7, #16]
 80056b0:	69fa      	ldr	r2, [r7, #28]
 80056b2:	4613      	mov	r3, r2
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	4413      	add	r3, r2
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	440b      	add	r3, r1
 80056bc:	332c      	adds	r3, #44	@ 0x2c
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80056c2:	f3bf 8f5f 	dmb	sy
 80056c6:	e002      	b.n	80056ce <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80056c8:	f04f 33ff 	mov.w	r3, #4294967295
 80056cc:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80056d4:	69fb      	ldr	r3, [r7, #28]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3720      	adds	r7, #32
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	20012ed4 	.word	0x20012ed4

080056e4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b08a      	sub	sp, #40	@ 0x28
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
 80056f0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80056f2:	4b21      	ldr	r3, [pc, #132]	@ (8005778 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80056f4:	623b      	str	r3, [r7, #32]
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005700:	f7ff fcca 	bl	8005098 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005704:	4b1c      	ldr	r3, [pc, #112]	@ (8005778 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005706:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2b02      	cmp	r3, #2
 800570c:	d82c      	bhi.n	8005768 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800570e:	f3ef 8311 	mrs	r3, BASEPRI
 8005712:	f04f 0120 	mov.w	r1, #32
 8005716:	f381 8811 	msr	BASEPRI, r1
 800571a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4613      	mov	r3, r2
 8005720:	005b      	lsls	r3, r3, #1
 8005722:	4413      	add	r3, r2
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	3360      	adds	r3, #96	@ 0x60
 8005728:	69fa      	ldr	r2, [r7, #28]
 800572a:	4413      	add	r3, r2
 800572c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00e      	beq.n	8005752 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	2200      	movs	r2, #0
 800574a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	2200      	movs	r2, #0
 8005750:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005756:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005758:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005762:	2300      	movs	r3, #0
 8005764:	627b      	str	r3, [r7, #36]	@ 0x24
 8005766:	e002      	b.n	800576e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005768:	f04f 33ff 	mov.w	r3, #4294967295
 800576c:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 800576e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005770:	4618      	mov	r0, r3
 8005772:	3728      	adds	r7, #40	@ 0x28
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	20012ed4 	.word	0x20012ed4

0800577c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800577c:	b480      	push	{r7}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005788:	2300      	movs	r3, #0
 800578a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00f      	beq.n	80057b2 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8005792:	e002      	b.n	800579a <_EncodeStr+0x1e>
      Len++;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	3301      	adds	r3, #1
 8005798:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	4413      	add	r3, r2
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1f6      	bne.n	8005794 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d901      	bls.n	80057b2 <_EncodeStr+0x36>
      Len = Limit;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	2bfe      	cmp	r3, #254	@ 0xfe
 80057b6:	d806      	bhi.n	80057c6 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	60fa      	str	r2, [r7, #12]
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	701a      	strb	r2, [r3, #0]
 80057c4:	e011      	b.n	80057ea <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	1c5a      	adds	r2, r3, #1
 80057ca:	60fa      	str	r2, [r7, #12]
 80057cc:	22ff      	movs	r2, #255	@ 0xff
 80057ce:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	60fa      	str	r2, [r7, #12]
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	b2d2      	uxtb	r2, r2
 80057da:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	0a19      	lsrs	r1, r3, #8
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	1c5a      	adds	r2, r3, #1
 80057e4:	60fa      	str	r2, [r7, #12]
 80057e6:	b2ca      	uxtb	r2, r1
 80057e8:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80057ea:	2300      	movs	r3, #0
 80057ec:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80057ee:	e00a      	b.n	8005806 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	1c53      	adds	r3, r2, #1
 80057f4:	60bb      	str	r3, [r7, #8]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	1c59      	adds	r1, r3, #1
 80057fa:	60f9      	str	r1, [r7, #12]
 80057fc:	7812      	ldrb	r2, [r2, #0]
 80057fe:	701a      	strb	r2, [r3, #0]
    n++;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	3301      	adds	r3, #1
 8005804:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	429a      	cmp	r2, r3
 800580c:	d3f0      	bcc.n	80057f0 <_EncodeStr+0x74>
  }
  return pPayload;
 800580e:	68fb      	ldr	r3, [r7, #12]
}
 8005810:	4618      	mov	r0, r3
 8005812:	371c      	adds	r7, #28
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	3304      	adds	r3, #4
}
 8005828:	4618      	mov	r0, r3
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800583a:	4b35      	ldr	r3, [pc, #212]	@ (8005910 <_HandleIncomingPacket+0xdc>)
 800583c:	7e1b      	ldrb	r3, [r3, #24]
 800583e:	4618      	mov	r0, r3
 8005840:	1cfb      	adds	r3, r7, #3
 8005842:	2201      	movs	r2, #1
 8005844:	4619      	mov	r1, r3
 8005846:	f7ff fdcd 	bl	80053e4 <SEGGER_RTT_ReadNoLock>
 800584a:	4603      	mov	r3, r0
 800584c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	dd59      	ble.n	8005908 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8005854:	78fb      	ldrb	r3, [r7, #3]
 8005856:	2b80      	cmp	r3, #128	@ 0x80
 8005858:	d032      	beq.n	80058c0 <_HandleIncomingPacket+0x8c>
 800585a:	2b80      	cmp	r3, #128	@ 0x80
 800585c:	dc42      	bgt.n	80058e4 <_HandleIncomingPacket+0xb0>
 800585e:	2b07      	cmp	r3, #7
 8005860:	dc16      	bgt.n	8005890 <_HandleIncomingPacket+0x5c>
 8005862:	2b00      	cmp	r3, #0
 8005864:	dd3e      	ble.n	80058e4 <_HandleIncomingPacket+0xb0>
 8005866:	3b01      	subs	r3, #1
 8005868:	2b06      	cmp	r3, #6
 800586a:	d83b      	bhi.n	80058e4 <_HandleIncomingPacket+0xb0>
 800586c:	a201      	add	r2, pc, #4	@ (adr r2, 8005874 <_HandleIncomingPacket+0x40>)
 800586e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005872:	bf00      	nop
 8005874:	08005897 	.word	0x08005897
 8005878:	0800589d 	.word	0x0800589d
 800587c:	080058a3 	.word	0x080058a3
 8005880:	080058a9 	.word	0x080058a9
 8005884:	080058af 	.word	0x080058af
 8005888:	080058b5 	.word	0x080058b5
 800588c:	080058bb 	.word	0x080058bb
 8005890:	2b7f      	cmp	r3, #127	@ 0x7f
 8005892:	d034      	beq.n	80058fe <_HandleIncomingPacket+0xca>
 8005894:	e026      	b.n	80058e4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005896:	f000 fba9 	bl	8005fec <SEGGER_SYSVIEW_Start>
      break;
 800589a:	e035      	b.n	8005908 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800589c:	f000 fc62 	bl	8006164 <SEGGER_SYSVIEW_Stop>
      break;
 80058a0:	e032      	b.n	8005908 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80058a2:	f000 fe3b 	bl	800651c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80058a6:	e02f      	b.n	8005908 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80058a8:	f000 fe00 	bl	80064ac <SEGGER_SYSVIEW_SendTaskList>
      break;
 80058ac:	e02c      	b.n	8005908 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80058ae:	f000 fc7f 	bl	80061b0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80058b2:	e029      	b.n	8005908 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80058b4:	f001 f8ce 	bl	8006a54 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80058b8:	e026      	b.n	8005908 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80058ba:	f001 f8ad 	bl	8006a18 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80058be:	e023      	b.n	8005908 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80058c0:	4b13      	ldr	r3, [pc, #76]	@ (8005910 <_HandleIncomingPacket+0xdc>)
 80058c2:	7e1b      	ldrb	r3, [r3, #24]
 80058c4:	4618      	mov	r0, r3
 80058c6:	1cfb      	adds	r3, r7, #3
 80058c8:	2201      	movs	r2, #1
 80058ca:	4619      	mov	r1, r3
 80058cc:	f7ff fd8a 	bl	80053e4 <SEGGER_RTT_ReadNoLock>
 80058d0:	4603      	mov	r3, r0
 80058d2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	dd13      	ble.n	8005902 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80058da:	78fb      	ldrb	r3, [r7, #3]
 80058dc:	4618      	mov	r0, r3
 80058de:	f001 f81b 	bl	8006918 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80058e2:	e00e      	b.n	8005902 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80058e4:	78fb      	ldrb	r3, [r7, #3]
 80058e6:	b25b      	sxtb	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	da0c      	bge.n	8005906 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80058ec:	4b08      	ldr	r3, [pc, #32]	@ (8005910 <_HandleIncomingPacket+0xdc>)
 80058ee:	7e1b      	ldrb	r3, [r3, #24]
 80058f0:	4618      	mov	r0, r3
 80058f2:	1cfb      	adds	r3, r7, #3
 80058f4:	2201      	movs	r2, #1
 80058f6:	4619      	mov	r1, r3
 80058f8:	f7ff fd74 	bl	80053e4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80058fc:	e003      	b.n	8005906 <_HandleIncomingPacket+0xd2>
      break;
 80058fe:	bf00      	nop
 8005900:	e002      	b.n	8005908 <_HandleIncomingPacket+0xd4>
      break;
 8005902:	bf00      	nop
 8005904:	e000      	b.n	8005908 <_HandleIncomingPacket+0xd4>
      break;
 8005906:	bf00      	nop
    }
  }
}
 8005908:	bf00      	nop
 800590a:	3708      	adds	r7, #8
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	20014394 	.word	0x20014394

08005914 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005914:	b580      	push	{r7, lr}
 8005916:	b08c      	sub	sp, #48	@ 0x30
 8005918:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800591a:	2301      	movs	r3, #1
 800591c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800591e:	1d3b      	adds	r3, r7, #4
 8005920:	3301      	adds	r3, #1
 8005922:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005928:	4b32      	ldr	r3, [pc, #200]	@ (80059f4 <_TrySendOverflowPacket+0xe0>)
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800592e:	e00b      	b.n	8005948 <_TrySendOverflowPacket+0x34>
 8005930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005932:	b2da      	uxtb	r2, r3
 8005934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005936:	1c59      	adds	r1, r3, #1
 8005938:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800593a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800593e:	b2d2      	uxtb	r2, r2
 8005940:	701a      	strb	r2, [r3, #0]
 8005942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005944:	09db      	lsrs	r3, r3, #7
 8005946:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800594a:	2b7f      	cmp	r3, #127	@ 0x7f
 800594c:	d8f0      	bhi.n	8005930 <_TrySendOverflowPacket+0x1c>
 800594e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005950:	1c5a      	adds	r2, r3, #1
 8005952:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005954:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005956:	b2d2      	uxtb	r2, r2
 8005958:	701a      	strb	r2, [r3, #0]
 800595a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800595c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800595e:	4b26      	ldr	r3, [pc, #152]	@ (80059f8 <_TrySendOverflowPacket+0xe4>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005964:	4b23      	ldr	r3, [pc, #140]	@ (80059f4 <_TrySendOverflowPacket+0xe0>)
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	627b      	str	r3, [r7, #36]	@ 0x24
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	623b      	str	r3, [r7, #32]
 8005976:	e00b      	b.n	8005990 <_TrySendOverflowPacket+0x7c>
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	b2da      	uxtb	r2, r3
 800597c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597e:	1c59      	adds	r1, r3, #1
 8005980:	6279      	str	r1, [r7, #36]	@ 0x24
 8005982:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005986:	b2d2      	uxtb	r2, r2
 8005988:	701a      	strb	r2, [r3, #0]
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	09db      	lsrs	r3, r3, #7
 800598e:	623b      	str	r3, [r7, #32]
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	2b7f      	cmp	r3, #127	@ 0x7f
 8005994:	d8f0      	bhi.n	8005978 <_TrySendOverflowPacket+0x64>
 8005996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005998:	1c5a      	adds	r2, r3, #1
 800599a:	627a      	str	r2, [r7, #36]	@ 0x24
 800599c:	6a3a      	ldr	r2, [r7, #32]
 800599e:	b2d2      	uxtb	r2, r2
 80059a0:	701a      	strb	r2, [r3, #0]
 80059a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80059a6:	4b13      	ldr	r3, [pc, #76]	@ (80059f4 <_TrySendOverflowPacket+0xe0>)
 80059a8:	785b      	ldrb	r3, [r3, #1]
 80059aa:	4618      	mov	r0, r3
 80059ac:	1d3b      	adds	r3, r7, #4
 80059ae:	69fa      	ldr	r2, [r7, #28]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	461a      	mov	r2, r3
 80059b4:	1d3b      	adds	r3, r7, #4
 80059b6:	4619      	mov	r1, r3
 80059b8:	f7fa fc2a 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80059bc:	4603      	mov	r3, r0
 80059be:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80059c0:	f7ff fae0 	bl	8004f84 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d009      	beq.n	80059de <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80059ca:	4a0a      	ldr	r2, [pc, #40]	@ (80059f4 <_TrySendOverflowPacket+0xe0>)
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80059d0:	4b08      	ldr	r3, [pc, #32]	@ (80059f4 <_TrySendOverflowPacket+0xe0>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	3b01      	subs	r3, #1
 80059d6:	b2da      	uxtb	r2, r3
 80059d8:	4b06      	ldr	r3, [pc, #24]	@ (80059f4 <_TrySendOverflowPacket+0xe0>)
 80059da:	701a      	strb	r2, [r3, #0]
 80059dc:	e004      	b.n	80059e8 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80059de:	4b05      	ldr	r3, [pc, #20]	@ (80059f4 <_TrySendOverflowPacket+0xe0>)
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	3301      	adds	r3, #1
 80059e4:	4a03      	ldr	r2, [pc, #12]	@ (80059f4 <_TrySendOverflowPacket+0xe0>)
 80059e6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80059e8:	693b      	ldr	r3, [r7, #16]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3730      	adds	r7, #48	@ 0x30
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	20014394 	.word	0x20014394
 80059f8:	e0001004 	.word	0xe0001004

080059fc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b08a      	sub	sp, #40	@ 0x28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005a08:	4b6d      	ldr	r3, [pc, #436]	@ (8005bc0 <_SendPacket+0x1c4>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d010      	beq.n	8005a32 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005a10:	4b6b      	ldr	r3, [pc, #428]	@ (8005bc0 <_SendPacket+0x1c4>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f000 80a5 	beq.w	8005b64 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005a1a:	4b69      	ldr	r3, [pc, #420]	@ (8005bc0 <_SendPacket+0x1c4>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d109      	bne.n	8005a36 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005a22:	f7ff ff77 	bl	8005914 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005a26:	4b66      	ldr	r3, [pc, #408]	@ (8005bc0 <_SendPacket+0x1c4>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	f040 809c 	bne.w	8005b68 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005a30:	e001      	b.n	8005a36 <_SendPacket+0x3a>
    goto Send;
 8005a32:	bf00      	nop
 8005a34:	e000      	b.n	8005a38 <_SendPacket+0x3c>
Send:
 8005a36:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b1f      	cmp	r3, #31
 8005a3c:	d809      	bhi.n	8005a52 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005a3e:	4b60      	ldr	r3, [pc, #384]	@ (8005bc0 <_SendPacket+0x1c4>)
 8005a40:	69da      	ldr	r2, [r3, #28]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	fa22 f303 	lsr.w	r3, r2, r3
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f040 808d 	bne.w	8005b6c <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b17      	cmp	r3, #23
 8005a56:	d807      	bhi.n	8005a68 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	701a      	strb	r2, [r3, #0]
 8005a66:	e03d      	b.n	8005ae4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a74:	d912      	bls.n	8005a9c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	09da      	lsrs	r2, r3, #7
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	60fb      	str	r3, [r7, #12]
 8005a80:	b2d2      	uxtb	r2, r2
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	3a01      	subs	r2, #1
 8005a8e:	60fa      	str	r2, [r7, #12]
 8005a90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	701a      	strb	r2, [r3, #0]
 8005a9a:	e006      	b.n	8005aaa <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2b7f      	cmp	r3, #127	@ 0x7f
 8005aae:	d912      	bls.n	8005ad6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	09da      	lsrs	r2, r3, #7
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	60fb      	str	r3, [r7, #12]
 8005aba:	b2d2      	uxtb	r2, r2
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	3a01      	subs	r2, #1
 8005ac8:	60fa      	str	r2, [r7, #12]
 8005aca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	701a      	strb	r2, [r3, #0]
 8005ad4:	e006      	b.n	8005ae4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	60fb      	str	r3, [r7, #12]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005ae4:	4b37      	ldr	r3, [pc, #220]	@ (8005bc4 <_SendPacket+0x1c8>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005aea:	4b35      	ldr	r3, [pc, #212]	@ (8005bc0 <_SendPacket+0x1c4>)
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	623b      	str	r3, [r7, #32]
 8005afc:	e00b      	b.n	8005b16 <_SendPacket+0x11a>
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b04:	1c59      	adds	r1, r3, #1
 8005b06:	6279      	str	r1, [r7, #36]	@ 0x24
 8005b08:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b0c:	b2d2      	uxtb	r2, r2
 8005b0e:	701a      	strb	r2, [r3, #0]
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	09db      	lsrs	r3, r3, #7
 8005b14:	623b      	str	r3, [r7, #32]
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b1a:	d8f0      	bhi.n	8005afe <_SendPacket+0x102>
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1e:	1c5a      	adds	r2, r3, #1
 8005b20:	627a      	str	r2, [r7, #36]	@ 0x24
 8005b22:	6a3a      	ldr	r2, [r7, #32]
 8005b24:	b2d2      	uxtb	r2, r2
 8005b26:	701a      	strb	r2, [r3, #0]
 8005b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005b2c:	4b24      	ldr	r3, [pc, #144]	@ (8005bc0 <_SendPacket+0x1c4>)
 8005b2e:	785b      	ldrb	r3, [r3, #1]
 8005b30:	4618      	mov	r0, r3
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	461a      	mov	r2, r3
 8005b3a:	68f9      	ldr	r1, [r7, #12]
 8005b3c:	f7fa fb68 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005b40:	4603      	mov	r3, r0
 8005b42:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005b44:	f7ff fa1e 	bl	8004f84 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005b4e:	4a1c      	ldr	r2, [pc, #112]	@ (8005bc0 <_SendPacket+0x1c4>)
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	60d3      	str	r3, [r2, #12]
 8005b54:	e00b      	b.n	8005b6e <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005b56:	4b1a      	ldr	r3, [pc, #104]	@ (8005bc0 <_SendPacket+0x1c4>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	4b18      	ldr	r3, [pc, #96]	@ (8005bc0 <_SendPacket+0x1c4>)
 8005b60:	701a      	strb	r2, [r3, #0]
 8005b62:	e004      	b.n	8005b6e <_SendPacket+0x172>
    goto SendDone;
 8005b64:	bf00      	nop
 8005b66:	e002      	b.n	8005b6e <_SendPacket+0x172>
      goto SendDone;
 8005b68:	bf00      	nop
 8005b6a:	e000      	b.n	8005b6e <_SendPacket+0x172>
      goto SendDone;
 8005b6c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005b6e:	4b14      	ldr	r3, [pc, #80]	@ (8005bc0 <_SendPacket+0x1c4>)
 8005b70:	7e1b      	ldrb	r3, [r3, #24]
 8005b72:	4619      	mov	r1, r3
 8005b74:	4a14      	ldr	r2, [pc, #80]	@ (8005bc8 <_SendPacket+0x1cc>)
 8005b76:	460b      	mov	r3, r1
 8005b78:	005b      	lsls	r3, r3, #1
 8005b7a:	440b      	add	r3, r1
 8005b7c:	00db      	lsls	r3, r3, #3
 8005b7e:	4413      	add	r3, r2
 8005b80:	336c      	adds	r3, #108	@ 0x6c
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	4b0e      	ldr	r3, [pc, #56]	@ (8005bc0 <_SendPacket+0x1c4>)
 8005b86:	7e1b      	ldrb	r3, [r3, #24]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	490f      	ldr	r1, [pc, #60]	@ (8005bc8 <_SendPacket+0x1cc>)
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	005b      	lsls	r3, r3, #1
 8005b90:	4403      	add	r3, r0
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	440b      	add	r3, r1
 8005b96:	3370      	adds	r3, #112	@ 0x70
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d00b      	beq.n	8005bb6 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005b9e:	4b08      	ldr	r3, [pc, #32]	@ (8005bc0 <_SendPacket+0x1c4>)
 8005ba0:	789b      	ldrb	r3, [r3, #2]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d107      	bne.n	8005bb6 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005ba6:	4b06      	ldr	r3, [pc, #24]	@ (8005bc0 <_SendPacket+0x1c4>)
 8005ba8:	2201      	movs	r2, #1
 8005baa:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005bac:	f7ff fe42 	bl	8005834 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005bb0:	4b03      	ldr	r3, [pc, #12]	@ (8005bc0 <_SendPacket+0x1c4>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005bb6:	bf00      	nop
 8005bb8:	3728      	adds	r7, #40	@ 0x28
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	20014394 	.word	0x20014394
 8005bc4:	e0001004 	.word	0xe0001004
 8005bc8:	20012ed4 	.word	0x20012ed4

08005bcc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b086      	sub	sp, #24
 8005bd0:	af02      	add	r7, sp, #8
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
 8005bd8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005bda:	2300      	movs	r3, #0
 8005bdc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005be0:	4917      	ldr	r1, [pc, #92]	@ (8005c40 <SEGGER_SYSVIEW_Init+0x74>)
 8005be2:	4818      	ldr	r0, [pc, #96]	@ (8005c44 <SEGGER_SYSVIEW_Init+0x78>)
 8005be4:	f7ff fcfa 	bl	80055dc <SEGGER_RTT_AllocUpBuffer>
 8005be8:	4603      	mov	r3, r0
 8005bea:	b2da      	uxtb	r2, r3
 8005bec:	4b16      	ldr	r3, [pc, #88]	@ (8005c48 <SEGGER_SYSVIEW_Init+0x7c>)
 8005bee:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005bf0:	4b15      	ldr	r3, [pc, #84]	@ (8005c48 <SEGGER_SYSVIEW_Init+0x7c>)
 8005bf2:	785a      	ldrb	r2, [r3, #1]
 8005bf4:	4b14      	ldr	r3, [pc, #80]	@ (8005c48 <SEGGER_SYSVIEW_Init+0x7c>)
 8005bf6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005bf8:	4b13      	ldr	r3, [pc, #76]	@ (8005c48 <SEGGER_SYSVIEW_Init+0x7c>)
 8005bfa:	7e1b      	ldrb	r3, [r3, #24]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	2300      	movs	r3, #0
 8005c00:	9300      	str	r3, [sp, #0]
 8005c02:	2308      	movs	r3, #8
 8005c04:	4a11      	ldr	r2, [pc, #68]	@ (8005c4c <SEGGER_SYSVIEW_Init+0x80>)
 8005c06:	490f      	ldr	r1, [pc, #60]	@ (8005c44 <SEGGER_SYSVIEW_Init+0x78>)
 8005c08:	f7ff fd6c 	bl	80056e4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005c0c:	4b0e      	ldr	r3, [pc, #56]	@ (8005c48 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005c12:	4b0f      	ldr	r3, [pc, #60]	@ (8005c50 <SEGGER_SYSVIEW_Init+0x84>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a0c      	ldr	r2, [pc, #48]	@ (8005c48 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c18:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005c1a:	4a0b      	ldr	r2, [pc, #44]	@ (8005c48 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005c20:	4a09      	ldr	r2, [pc, #36]	@ (8005c48 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005c26:	4a08      	ldr	r2, [pc, #32]	@ (8005c48 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005c2c:	4a06      	ldr	r2, [pc, #24]	@ (8005c48 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005c32:	4b05      	ldr	r3, [pc, #20]	@ (8005c48 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005c38:	bf00      	nop
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	2001338c 	.word	0x2001338c
 8005c44:	08006d60 	.word	0x08006d60
 8005c48:	20014394 	.word	0x20014394
 8005c4c:	2001438c 	.word	0x2001438c
 8005c50:	e0001004 	.word	0xe0001004

08005c54 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005c5c:	4a04      	ldr	r2, [pc, #16]	@ (8005c70 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6113      	str	r3, [r2, #16]
}
 8005c62:	bf00      	nop
 8005c64:	370c      	adds	r7, #12
 8005c66:	46bd      	mov	sp, r7
 8005c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop
 8005c70:	20014394 	.word	0x20014394

08005c74 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005c7c:	f3ef 8311 	mrs	r3, BASEPRI
 8005c80:	f04f 0120 	mov.w	r1, #32
 8005c84:	f381 8811 	msr	BASEPRI, r1
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	4808      	ldr	r0, [pc, #32]	@ (8005cac <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005c8c:	f7ff fdc6 	bl	800581c <_PreparePacket>
 8005c90:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005c92:	687a      	ldr	r2, [r7, #4]
 8005c94:	68b9      	ldr	r1, [r7, #8]
 8005c96:	68b8      	ldr	r0, [r7, #8]
 8005c98:	f7ff feb0 	bl	80059fc <_SendPacket>
  RECORD_END();
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f383 8811 	msr	BASEPRI, r3
}
 8005ca2:	bf00      	nop
 8005ca4:	3710      	adds	r7, #16
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	200143c4 	.word	0x200143c4

08005cb0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b088      	sub	sp, #32
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005cba:	f3ef 8311 	mrs	r3, BASEPRI
 8005cbe:	f04f 0120 	mov.w	r1, #32
 8005cc2:	f381 8811 	msr	BASEPRI, r1
 8005cc6:	617b      	str	r3, [r7, #20]
 8005cc8:	4816      	ldr	r0, [pc, #88]	@ (8005d24 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005cca:	f7ff fda7 	bl	800581c <_PreparePacket>
 8005cce:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	61fb      	str	r3, [r7, #28]
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	61bb      	str	r3, [r7, #24]
 8005cdc:	e00b      	b.n	8005cf6 <SEGGER_SYSVIEW_RecordU32+0x46>
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	1c59      	adds	r1, r3, #1
 8005ce6:	61f9      	str	r1, [r7, #28]
 8005ce8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005cec:	b2d2      	uxtb	r2, r2
 8005cee:	701a      	strb	r2, [r3, #0]
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	09db      	lsrs	r3, r3, #7
 8005cf4:	61bb      	str	r3, [r7, #24]
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cfa:	d8f0      	bhi.n	8005cde <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	1c5a      	adds	r2, r3, #1
 8005d00:	61fa      	str	r2, [r7, #28]
 8005d02:	69ba      	ldr	r2, [r7, #24]
 8005d04:	b2d2      	uxtb	r2, r2
 8005d06:	701a      	strb	r2, [r3, #0]
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	68f9      	ldr	r1, [r7, #12]
 8005d10:	6938      	ldr	r0, [r7, #16]
 8005d12:	f7ff fe73 	bl	80059fc <_SendPacket>
  RECORD_END();
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f383 8811 	msr	BASEPRI, r3
}
 8005d1c:	bf00      	nop
 8005d1e:	3720      	adds	r7, #32
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}
 8005d24:	200143c4 	.word	0x200143c4

08005d28 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b08c      	sub	sp, #48	@ 0x30
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005d34:	f3ef 8311 	mrs	r3, BASEPRI
 8005d38:	f04f 0120 	mov.w	r1, #32
 8005d3c:	f381 8811 	msr	BASEPRI, r1
 8005d40:	61fb      	str	r3, [r7, #28]
 8005d42:	4825      	ldr	r0, [pc, #148]	@ (8005dd8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005d44:	f7ff fd6a 	bl	800581c <_PreparePacket>
 8005d48:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d56:	e00b      	b.n	8005d70 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d5e:	1c59      	adds	r1, r3, #1
 8005d60:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005d62:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d66:	b2d2      	uxtb	r2, r2
 8005d68:	701a      	strb	r2, [r3, #0]
 8005d6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d6c:	09db      	lsrs	r3, r3, #7
 8005d6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d72:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d74:	d8f0      	bhi.n	8005d58 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d7e:	b2d2      	uxtb	r2, r2
 8005d80:	701a      	strb	r2, [r3, #0]
 8005d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d84:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	623b      	str	r3, [r7, #32]
 8005d8e:	e00b      	b.n	8005da8 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005d90:	6a3b      	ldr	r3, [r7, #32]
 8005d92:	b2da      	uxtb	r2, r3
 8005d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d96:	1c59      	adds	r1, r3, #1
 8005d98:	6279      	str	r1, [r7, #36]	@ 0x24
 8005d9a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d9e:	b2d2      	uxtb	r2, r2
 8005da0:	701a      	strb	r2, [r3, #0]
 8005da2:	6a3b      	ldr	r3, [r7, #32]
 8005da4:	09db      	lsrs	r3, r3, #7
 8005da6:	623b      	str	r3, [r7, #32]
 8005da8:	6a3b      	ldr	r3, [r7, #32]
 8005daa:	2b7f      	cmp	r3, #127	@ 0x7f
 8005dac:	d8f0      	bhi.n	8005d90 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db0:	1c5a      	adds	r2, r3, #1
 8005db2:	627a      	str	r2, [r7, #36]	@ 0x24
 8005db4:	6a3a      	ldr	r2, [r7, #32]
 8005db6:	b2d2      	uxtb	r2, r2
 8005db8:	701a      	strb	r2, [r3, #0]
 8005dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbc:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	6979      	ldr	r1, [r7, #20]
 8005dc2:	69b8      	ldr	r0, [r7, #24]
 8005dc4:	f7ff fe1a 	bl	80059fc <_SendPacket>
  RECORD_END();
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	f383 8811 	msr	BASEPRI, r3
}
 8005dce:	bf00      	nop
 8005dd0:	3730      	adds	r7, #48	@ 0x30
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	200143c4 	.word	0x200143c4

08005ddc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b08e      	sub	sp, #56	@ 0x38
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
 8005de8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005dea:	f3ef 8311 	mrs	r3, BASEPRI
 8005dee:	f04f 0120 	mov.w	r1, #32
 8005df2:	f381 8811 	msr	BASEPRI, r1
 8005df6:	61fb      	str	r3, [r7, #28]
 8005df8:	4832      	ldr	r0, [pc, #200]	@ (8005ec4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005dfa:	f7ff fd0f 	bl	800581c <_PreparePacket>
 8005dfe:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e0c:	e00b      	b.n	8005e26 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e14:	1c59      	adds	r1, r3, #1
 8005e16:	6379      	str	r1, [r7, #52]	@ 0x34
 8005e18:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e1c:	b2d2      	uxtb	r2, r2
 8005e1e:	701a      	strb	r2, [r3, #0]
 8005e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e22:	09db      	lsrs	r3, r3, #7
 8005e24:	633b      	str	r3, [r7, #48]	@ 0x30
 8005e26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e28:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e2a:	d8f0      	bhi.n	8005e0e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005e2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e2e:	1c5a      	adds	r2, r3, #1
 8005e30:	637a      	str	r2, [r7, #52]	@ 0x34
 8005e32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e34:	b2d2      	uxtb	r2, r2
 8005e36:	701a      	strb	r2, [r3, #0]
 8005e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e3a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005e3c:	697b      	ldr	r3, [r7, #20]
 8005e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e44:	e00b      	b.n	8005e5e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e48:	b2da      	uxtb	r2, r3
 8005e4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e4c:	1c59      	adds	r1, r3, #1
 8005e4e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005e50:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e54:	b2d2      	uxtb	r2, r2
 8005e56:	701a      	strb	r2, [r3, #0]
 8005e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5a:	09db      	lsrs	r3, r3, #7
 8005e5c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e60:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e62:	d8f0      	bhi.n	8005e46 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e66:	1c5a      	adds	r2, r3, #1
 8005e68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e6c:	b2d2      	uxtb	r2, r2
 8005e6e:	701a      	strb	r2, [r3, #0]
 8005e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e72:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	623b      	str	r3, [r7, #32]
 8005e7c:	e00b      	b.n	8005e96 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
 8005e80:	b2da      	uxtb	r2, r3
 8005e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e84:	1c59      	adds	r1, r3, #1
 8005e86:	6279      	str	r1, [r7, #36]	@ 0x24
 8005e88:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e8c:	b2d2      	uxtb	r2, r2
 8005e8e:	701a      	strb	r2, [r3, #0]
 8005e90:	6a3b      	ldr	r3, [r7, #32]
 8005e92:	09db      	lsrs	r3, r3, #7
 8005e94:	623b      	str	r3, [r7, #32]
 8005e96:	6a3b      	ldr	r3, [r7, #32]
 8005e98:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e9a:	d8f0      	bhi.n	8005e7e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e9e:	1c5a      	adds	r2, r3, #1
 8005ea0:	627a      	str	r2, [r7, #36]	@ 0x24
 8005ea2:	6a3a      	ldr	r2, [r7, #32]
 8005ea4:	b2d2      	uxtb	r2, r2
 8005ea6:	701a      	strb	r2, [r3, #0]
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eaa:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	6979      	ldr	r1, [r7, #20]
 8005eb0:	69b8      	ldr	r0, [r7, #24]
 8005eb2:	f7ff fda3 	bl	80059fc <_SendPacket>
  RECORD_END();
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	f383 8811 	msr	BASEPRI, r3
}
 8005ebc:	bf00      	nop
 8005ebe:	3738      	adds	r7, #56	@ 0x38
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	200143c4 	.word	0x200143c4

08005ec8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b090      	sub	sp, #64	@ 0x40
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
 8005ed4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ed6:	f3ef 8311 	mrs	r3, BASEPRI
 8005eda:	f04f 0120 	mov.w	r1, #32
 8005ede:	f381 8811 	msr	BASEPRI, r1
 8005ee2:	61fb      	str	r3, [r7, #28]
 8005ee4:	4840      	ldr	r0, [pc, #256]	@ (8005fe8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005ee6:	f7ff fc99 	bl	800581c <_PreparePacket>
 8005eea:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ef8:	e00b      	b.n	8005f12 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f00:	1c59      	adds	r1, r3, #1
 8005f02:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005f04:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f08:	b2d2      	uxtb	r2, r2
 8005f0a:	701a      	strb	r2, [r3, #0]
 8005f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f0e:	09db      	lsrs	r3, r3, #7
 8005f10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f14:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f16:	d8f0      	bhi.n	8005efa <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f1a:	1c5a      	adds	r2, r3, #1
 8005f1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005f1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f20:	b2d2      	uxtb	r2, r2
 8005f22:	701a      	strb	r2, [r3, #0]
 8005f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f26:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f30:	e00b      	b.n	8005f4a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f38:	1c59      	adds	r1, r3, #1
 8005f3a:	6379      	str	r1, [r7, #52]	@ 0x34
 8005f3c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f40:	b2d2      	uxtb	r2, r2
 8005f42:	701a      	strb	r2, [r3, #0]
 8005f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f46:	09db      	lsrs	r3, r3, #7
 8005f48:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f4e:	d8f0      	bhi.n	8005f32 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005f50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	637a      	str	r2, [r7, #52]	@ 0x34
 8005f56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f58:	b2d2      	uxtb	r2, r2
 8005f5a:	701a      	strb	r2, [r3, #0]
 8005f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f5e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f68:	e00b      	b.n	8005f82 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f6c:	b2da      	uxtb	r2, r3
 8005f6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f70:	1c59      	adds	r1, r3, #1
 8005f72:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005f74:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f78:	b2d2      	uxtb	r2, r2
 8005f7a:	701a      	strb	r2, [r3, #0]
 8005f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f7e:	09db      	lsrs	r3, r3, #7
 8005f80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f84:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f86:	d8f0      	bhi.n	8005f6a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005f88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f8a:	1c5a      	adds	r2, r3, #1
 8005f8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005f8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f90:	b2d2      	uxtb	r2, r2
 8005f92:	701a      	strb	r2, [r3, #0]
 8005f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f96:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f9c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f9e:	623b      	str	r3, [r7, #32]
 8005fa0:	e00b      	b.n	8005fba <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005fa2:	6a3b      	ldr	r3, [r7, #32]
 8005fa4:	b2da      	uxtb	r2, r3
 8005fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa8:	1c59      	adds	r1, r3, #1
 8005faa:	6279      	str	r1, [r7, #36]	@ 0x24
 8005fac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005fb0:	b2d2      	uxtb	r2, r2
 8005fb2:	701a      	strb	r2, [r3, #0]
 8005fb4:	6a3b      	ldr	r3, [r7, #32]
 8005fb6:	09db      	lsrs	r3, r3, #7
 8005fb8:	623b      	str	r3, [r7, #32]
 8005fba:	6a3b      	ldr	r3, [r7, #32]
 8005fbc:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fbe:	d8f0      	bhi.n	8005fa2 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc2:	1c5a      	adds	r2, r3, #1
 8005fc4:	627a      	str	r2, [r7, #36]	@ 0x24
 8005fc6:	6a3a      	ldr	r2, [r7, #32]
 8005fc8:	b2d2      	uxtb	r2, r2
 8005fca:	701a      	strb	r2, [r3, #0]
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fce:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	6979      	ldr	r1, [r7, #20]
 8005fd4:	69b8      	ldr	r0, [r7, #24]
 8005fd6:	f7ff fd11 	bl	80059fc <_SendPacket>
  RECORD_END();
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	f383 8811 	msr	BASEPRI, r3
}
 8005fe0:	bf00      	nop
 8005fe2:	3740      	adds	r7, #64	@ 0x40
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	200143c4 	.word	0x200143c4

08005fec <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b08c      	sub	sp, #48	@ 0x30
 8005ff0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005ff2:	4b59      	ldr	r3, [pc, #356]	@ (8006158 <SEGGER_SYSVIEW_Start+0x16c>)
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005ff8:	f3ef 8311 	mrs	r3, BASEPRI
 8005ffc:	f04f 0120 	mov.w	r1, #32
 8006000:	f381 8811 	msr	BASEPRI, r1
 8006004:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006006:	4b54      	ldr	r3, [pc, #336]	@ (8006158 <SEGGER_SYSVIEW_Start+0x16c>)
 8006008:	785b      	ldrb	r3, [r3, #1]
 800600a:	220a      	movs	r2, #10
 800600c:	4953      	ldr	r1, [pc, #332]	@ (800615c <SEGGER_SYSVIEW_Start+0x170>)
 800600e:	4618      	mov	r0, r3
 8006010:	f7fa f8fe 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800601a:	f7fe ffb3 	bl	8004f84 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800601e:	200a      	movs	r0, #10
 8006020:	f7ff fe28 	bl	8005c74 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006024:	f3ef 8311 	mrs	r3, BASEPRI
 8006028:	f04f 0120 	mov.w	r1, #32
 800602c:	f381 8811 	msr	BASEPRI, r1
 8006030:	60bb      	str	r3, [r7, #8]
 8006032:	484b      	ldr	r0, [pc, #300]	@ (8006160 <SEGGER_SYSVIEW_Start+0x174>)
 8006034:	f7ff fbf2 	bl	800581c <_PreparePacket>
 8006038:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006042:	4b45      	ldr	r3, [pc, #276]	@ (8006158 <SEGGER_SYSVIEW_Start+0x16c>)
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006048:	e00b      	b.n	8006062 <SEGGER_SYSVIEW_Start+0x76>
 800604a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800604c:	b2da      	uxtb	r2, r3
 800604e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006050:	1c59      	adds	r1, r3, #1
 8006052:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006054:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006058:	b2d2      	uxtb	r2, r2
 800605a:	701a      	strb	r2, [r3, #0]
 800605c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800605e:	09db      	lsrs	r3, r3, #7
 8006060:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006064:	2b7f      	cmp	r3, #127	@ 0x7f
 8006066:	d8f0      	bhi.n	800604a <SEGGER_SYSVIEW_Start+0x5e>
 8006068:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800606e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006070:	b2d2      	uxtb	r2, r2
 8006072:	701a      	strb	r2, [r3, #0]
 8006074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006076:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	627b      	str	r3, [r7, #36]	@ 0x24
 800607c:	4b36      	ldr	r3, [pc, #216]	@ (8006158 <SEGGER_SYSVIEW_Start+0x16c>)
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	623b      	str	r3, [r7, #32]
 8006082:	e00b      	b.n	800609c <SEGGER_SYSVIEW_Start+0xb0>
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	b2da      	uxtb	r2, r3
 8006088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608a:	1c59      	adds	r1, r3, #1
 800608c:	6279      	str	r1, [r7, #36]	@ 0x24
 800608e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006092:	b2d2      	uxtb	r2, r2
 8006094:	701a      	strb	r2, [r3, #0]
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	09db      	lsrs	r3, r3, #7
 800609a:	623b      	str	r3, [r7, #32]
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	2b7f      	cmp	r3, #127	@ 0x7f
 80060a0:	d8f0      	bhi.n	8006084 <SEGGER_SYSVIEW_Start+0x98>
 80060a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a4:	1c5a      	adds	r2, r3, #1
 80060a6:	627a      	str	r2, [r7, #36]	@ 0x24
 80060a8:	6a3a      	ldr	r2, [r7, #32]
 80060aa:	b2d2      	uxtb	r2, r2
 80060ac:	701a      	strb	r2, [r3, #0]
 80060ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	61fb      	str	r3, [r7, #28]
 80060b6:	4b28      	ldr	r3, [pc, #160]	@ (8006158 <SEGGER_SYSVIEW_Start+0x16c>)
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	61bb      	str	r3, [r7, #24]
 80060bc:	e00b      	b.n	80060d6 <SEGGER_SYSVIEW_Start+0xea>
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	1c59      	adds	r1, r3, #1
 80060c6:	61f9      	str	r1, [r7, #28]
 80060c8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060cc:	b2d2      	uxtb	r2, r2
 80060ce:	701a      	strb	r2, [r3, #0]
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	09db      	lsrs	r3, r3, #7
 80060d4:	61bb      	str	r3, [r7, #24]
 80060d6:	69bb      	ldr	r3, [r7, #24]
 80060d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80060da:	d8f0      	bhi.n	80060be <SEGGER_SYSVIEW_Start+0xd2>
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	1c5a      	adds	r2, r3, #1
 80060e0:	61fa      	str	r2, [r7, #28]
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	b2d2      	uxtb	r2, r2
 80060e6:	701a      	strb	r2, [r3, #0]
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	617b      	str	r3, [r7, #20]
 80060f0:	2300      	movs	r3, #0
 80060f2:	613b      	str	r3, [r7, #16]
 80060f4:	e00b      	b.n	800610e <SEGGER_SYSVIEW_Start+0x122>
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	b2da      	uxtb	r2, r3
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	1c59      	adds	r1, r3, #1
 80060fe:	6179      	str	r1, [r7, #20]
 8006100:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006104:	b2d2      	uxtb	r2, r2
 8006106:	701a      	strb	r2, [r3, #0]
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	09db      	lsrs	r3, r3, #7
 800610c:	613b      	str	r3, [r7, #16]
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	2b7f      	cmp	r3, #127	@ 0x7f
 8006112:	d8f0      	bhi.n	80060f6 <SEGGER_SYSVIEW_Start+0x10a>
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	1c5a      	adds	r2, r3, #1
 8006118:	617a      	str	r2, [r7, #20]
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	b2d2      	uxtb	r2, r2
 800611e:	701a      	strb	r2, [r3, #0]
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006124:	2218      	movs	r2, #24
 8006126:	6839      	ldr	r1, [r7, #0]
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f7ff fc67 	bl	80059fc <_SendPacket>
      RECORD_END();
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006134:	4b08      	ldr	r3, [pc, #32]	@ (8006158 <SEGGER_SYSVIEW_Start+0x16c>)
 8006136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006138:	2b00      	cmp	r3, #0
 800613a:	d002      	beq.n	8006142 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 800613c:	4b06      	ldr	r3, [pc, #24]	@ (8006158 <SEGGER_SYSVIEW_Start+0x16c>)
 800613e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006140:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006142:	f000 f9eb 	bl	800651c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006146:	f000 f9b1 	bl	80064ac <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800614a:	f000 fc83 	bl	8006a54 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800614e:	bf00      	nop
 8006150:	3730      	adds	r7, #48	@ 0x30
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	20014394 	.word	0x20014394
 800615c:	08006da4 	.word	0x08006da4
 8006160:	200143c4 	.word	0x200143c4

08006164 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800616a:	f3ef 8311 	mrs	r3, BASEPRI
 800616e:	f04f 0120 	mov.w	r1, #32
 8006172:	f381 8811 	msr	BASEPRI, r1
 8006176:	607b      	str	r3, [r7, #4]
 8006178:	480b      	ldr	r0, [pc, #44]	@ (80061a8 <SEGGER_SYSVIEW_Stop+0x44>)
 800617a:	f7ff fb4f 	bl	800581c <_PreparePacket>
 800617e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006180:	4b0a      	ldr	r3, [pc, #40]	@ (80061ac <SEGGER_SYSVIEW_Stop+0x48>)
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d007      	beq.n	8006198 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006188:	220b      	movs	r2, #11
 800618a:	6839      	ldr	r1, [r7, #0]
 800618c:	6838      	ldr	r0, [r7, #0]
 800618e:	f7ff fc35 	bl	80059fc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006192:	4b06      	ldr	r3, [pc, #24]	@ (80061ac <SEGGER_SYSVIEW_Stop+0x48>)
 8006194:	2200      	movs	r2, #0
 8006196:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	f383 8811 	msr	BASEPRI, r3
}
 800619e:	bf00      	nop
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	200143c4 	.word	0x200143c4
 80061ac:	20014394 	.word	0x20014394

080061b0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b08c      	sub	sp, #48	@ 0x30
 80061b4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80061b6:	f3ef 8311 	mrs	r3, BASEPRI
 80061ba:	f04f 0120 	mov.w	r1, #32
 80061be:	f381 8811 	msr	BASEPRI, r1
 80061c2:	60fb      	str	r3, [r7, #12]
 80061c4:	4845      	ldr	r0, [pc, #276]	@ (80062dc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80061c6:	f7ff fb29 	bl	800581c <_PreparePacket>
 80061ca:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061d4:	4b42      	ldr	r3, [pc, #264]	@ (80062e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061da:	e00b      	b.n	80061f4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80061dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061de:	b2da      	uxtb	r2, r3
 80061e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e2:	1c59      	adds	r1, r3, #1
 80061e4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80061e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061ea:	b2d2      	uxtb	r2, r2
 80061ec:	701a      	strb	r2, [r3, #0]
 80061ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f0:	09db      	lsrs	r3, r3, #7
 80061f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80061f8:	d8f0      	bhi.n	80061dc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80061fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061fc:	1c5a      	adds	r2, r3, #1
 80061fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006200:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006202:	b2d2      	uxtb	r2, r2
 8006204:	701a      	strb	r2, [r3, #0]
 8006206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006208:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	627b      	str	r3, [r7, #36]	@ 0x24
 800620e:	4b34      	ldr	r3, [pc, #208]	@ (80062e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	623b      	str	r3, [r7, #32]
 8006214:	e00b      	b.n	800622e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	b2da      	uxtb	r2, r3
 800621a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621c:	1c59      	adds	r1, r3, #1
 800621e:	6279      	str	r1, [r7, #36]	@ 0x24
 8006220:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006224:	b2d2      	uxtb	r2, r2
 8006226:	701a      	strb	r2, [r3, #0]
 8006228:	6a3b      	ldr	r3, [r7, #32]
 800622a:	09db      	lsrs	r3, r3, #7
 800622c:	623b      	str	r3, [r7, #32]
 800622e:	6a3b      	ldr	r3, [r7, #32]
 8006230:	2b7f      	cmp	r3, #127	@ 0x7f
 8006232:	d8f0      	bhi.n	8006216 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006236:	1c5a      	adds	r2, r3, #1
 8006238:	627a      	str	r2, [r7, #36]	@ 0x24
 800623a:	6a3a      	ldr	r2, [r7, #32]
 800623c:	b2d2      	uxtb	r2, r2
 800623e:	701a      	strb	r2, [r3, #0]
 8006240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006242:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	61fb      	str	r3, [r7, #28]
 8006248:	4b25      	ldr	r3, [pc, #148]	@ (80062e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	61bb      	str	r3, [r7, #24]
 800624e:	e00b      	b.n	8006268 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	b2da      	uxtb	r2, r3
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	1c59      	adds	r1, r3, #1
 8006258:	61f9      	str	r1, [r7, #28]
 800625a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800625e:	b2d2      	uxtb	r2, r2
 8006260:	701a      	strb	r2, [r3, #0]
 8006262:	69bb      	ldr	r3, [r7, #24]
 8006264:	09db      	lsrs	r3, r3, #7
 8006266:	61bb      	str	r3, [r7, #24]
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	2b7f      	cmp	r3, #127	@ 0x7f
 800626c:	d8f0      	bhi.n	8006250 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	1c5a      	adds	r2, r3, #1
 8006272:	61fa      	str	r2, [r7, #28]
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	b2d2      	uxtb	r2, r2
 8006278:	701a      	strb	r2, [r3, #0]
 800627a:	69fb      	ldr	r3, [r7, #28]
 800627c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	617b      	str	r3, [r7, #20]
 8006282:	2300      	movs	r3, #0
 8006284:	613b      	str	r3, [r7, #16]
 8006286:	e00b      	b.n	80062a0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	b2da      	uxtb	r2, r3
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	1c59      	adds	r1, r3, #1
 8006290:	6179      	str	r1, [r7, #20]
 8006292:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006296:	b2d2      	uxtb	r2, r2
 8006298:	701a      	strb	r2, [r3, #0]
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	09db      	lsrs	r3, r3, #7
 800629e:	613b      	str	r3, [r7, #16]
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80062a4:	d8f0      	bhi.n	8006288 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	617a      	str	r2, [r7, #20]
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	b2d2      	uxtb	r2, r2
 80062b0:	701a      	strb	r2, [r3, #0]
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80062b6:	2218      	movs	r2, #24
 80062b8:	6879      	ldr	r1, [r7, #4]
 80062ba:	68b8      	ldr	r0, [r7, #8]
 80062bc:	f7ff fb9e 	bl	80059fc <_SendPacket>
  RECORD_END();
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80062c6:	4b06      	ldr	r3, [pc, #24]	@ (80062e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80062c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d002      	beq.n	80062d4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80062ce:	4b04      	ldr	r3, [pc, #16]	@ (80062e0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80062d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d2:	4798      	blx	r3
  }
}
 80062d4:	bf00      	nop
 80062d6:	3730      	adds	r7, #48	@ 0x30
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	200143c4 	.word	0x200143c4
 80062e0:	20014394 	.word	0x20014394

080062e4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b092      	sub	sp, #72	@ 0x48
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80062ec:	f3ef 8311 	mrs	r3, BASEPRI
 80062f0:	f04f 0120 	mov.w	r1, #32
 80062f4:	f381 8811 	msr	BASEPRI, r1
 80062f8:	617b      	str	r3, [r7, #20]
 80062fa:	486a      	ldr	r0, [pc, #424]	@ (80064a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80062fc:	f7ff fa8e 	bl	800581c <_PreparePacket>
 8006300:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	647b      	str	r3, [r7, #68]	@ 0x44
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	4b66      	ldr	r3, [pc, #408]	@ (80064a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	1ad3      	subs	r3, r2, r3
 8006314:	643b      	str	r3, [r7, #64]	@ 0x40
 8006316:	e00b      	b.n	8006330 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006318:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800631a:	b2da      	uxtb	r2, r3
 800631c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800631e:	1c59      	adds	r1, r3, #1
 8006320:	6479      	str	r1, [r7, #68]	@ 0x44
 8006322:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006326:	b2d2      	uxtb	r2, r2
 8006328:	701a      	strb	r2, [r3, #0]
 800632a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800632c:	09db      	lsrs	r3, r3, #7
 800632e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006330:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006332:	2b7f      	cmp	r3, #127	@ 0x7f
 8006334:	d8f0      	bhi.n	8006318 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006336:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006338:	1c5a      	adds	r2, r3, #1
 800633a:	647a      	str	r2, [r7, #68]	@ 0x44
 800633c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800633e:	b2d2      	uxtb	r2, r2
 8006340:	701a      	strb	r2, [r3, #0]
 8006342:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006344:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	689b      	ldr	r3, [r3, #8]
 800634e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006350:	e00b      	b.n	800636a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006354:	b2da      	uxtb	r2, r3
 8006356:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006358:	1c59      	adds	r1, r3, #1
 800635a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800635c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006366:	09db      	lsrs	r3, r3, #7
 8006368:	63bb      	str	r3, [r7, #56]	@ 0x38
 800636a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800636c:	2b7f      	cmp	r3, #127	@ 0x7f
 800636e:	d8f0      	bhi.n	8006352 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006370:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006372:	1c5a      	adds	r2, r3, #1
 8006374:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006376:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006378:	b2d2      	uxtb	r2, r2
 800637a:	701a      	strb	r2, [r3, #0]
 800637c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800637e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	685b      	ldr	r3, [r3, #4]
 8006384:	2220      	movs	r2, #32
 8006386:	4619      	mov	r1, r3
 8006388:	68f8      	ldr	r0, [r7, #12]
 800638a:	f7ff f9f7 	bl	800577c <_EncodeStr>
 800638e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006390:	2209      	movs	r2, #9
 8006392:	68f9      	ldr	r1, [r7, #12]
 8006394:	6938      	ldr	r0, [r7, #16]
 8006396:	f7ff fb31 	bl	80059fc <_SendPacket>
  //
  pPayload = pPayloadStart;
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	4b40      	ldr	r3, [pc, #256]	@ (80064a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80063ae:	e00b      	b.n	80063c8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80063b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b2:	b2da      	uxtb	r2, r3
 80063b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063b6:	1c59      	adds	r1, r3, #1
 80063b8:	6379      	str	r1, [r7, #52]	@ 0x34
 80063ba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063be:	b2d2      	uxtb	r2, r2
 80063c0:	701a      	strb	r2, [r3, #0]
 80063c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c4:	09db      	lsrs	r3, r3, #7
 80063c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80063c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ca:	2b7f      	cmp	r3, #127	@ 0x7f
 80063cc:	d8f0      	bhi.n	80063b0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80063ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063d0:	1c5a      	adds	r2, r3, #1
 80063d2:	637a      	str	r2, [r7, #52]	@ 0x34
 80063d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063d6:	b2d2      	uxtb	r2, r2
 80063d8:	701a      	strb	r2, [r3, #0]
 80063da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063e8:	e00b      	b.n	8006402 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80063ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063f0:	1c59      	adds	r1, r3, #1
 80063f2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80063f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063f8:	b2d2      	uxtb	r2, r2
 80063fa:	701a      	strb	r2, [r3, #0]
 80063fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063fe:	09db      	lsrs	r3, r3, #7
 8006400:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006404:	2b7f      	cmp	r3, #127	@ 0x7f
 8006406:	d8f0      	bhi.n	80063ea <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006408:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800640a:	1c5a      	adds	r2, r3, #1
 800640c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800640e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006410:	b2d2      	uxtb	r2, r2
 8006412:	701a      	strb	r2, [r3, #0]
 8006414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006416:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	627b      	str	r3, [r7, #36]	@ 0x24
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	691b      	ldr	r3, [r3, #16]
 8006420:	623b      	str	r3, [r7, #32]
 8006422:	e00b      	b.n	800643c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	b2da      	uxtb	r2, r3
 8006428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642a:	1c59      	adds	r1, r3, #1
 800642c:	6279      	str	r1, [r7, #36]	@ 0x24
 800642e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006432:	b2d2      	uxtb	r2, r2
 8006434:	701a      	strb	r2, [r3, #0]
 8006436:	6a3b      	ldr	r3, [r7, #32]
 8006438:	09db      	lsrs	r3, r3, #7
 800643a:	623b      	str	r3, [r7, #32]
 800643c:	6a3b      	ldr	r3, [r7, #32]
 800643e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006440:	d8f0      	bhi.n	8006424 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006444:	1c5a      	adds	r2, r3, #1
 8006446:	627a      	str	r2, [r7, #36]	@ 0x24
 8006448:	6a3a      	ldr	r2, [r7, #32]
 800644a:	b2d2      	uxtb	r2, r2
 800644c:	701a      	strb	r2, [r3, #0]
 800644e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006450:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	61fb      	str	r3, [r7, #28]
 8006456:	2300      	movs	r3, #0
 8006458:	61bb      	str	r3, [r7, #24]
 800645a:	e00b      	b.n	8006474 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800645c:	69bb      	ldr	r3, [r7, #24]
 800645e:	b2da      	uxtb	r2, r3
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	1c59      	adds	r1, r3, #1
 8006464:	61f9      	str	r1, [r7, #28]
 8006466:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800646a:	b2d2      	uxtb	r2, r2
 800646c:	701a      	strb	r2, [r3, #0]
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	09db      	lsrs	r3, r3, #7
 8006472:	61bb      	str	r3, [r7, #24]
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	2b7f      	cmp	r3, #127	@ 0x7f
 8006478:	d8f0      	bhi.n	800645c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	1c5a      	adds	r2, r3, #1
 800647e:	61fa      	str	r2, [r7, #28]
 8006480:	69ba      	ldr	r2, [r7, #24]
 8006482:	b2d2      	uxtb	r2, r2
 8006484:	701a      	strb	r2, [r3, #0]
 8006486:	69fb      	ldr	r3, [r7, #28]
 8006488:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800648a:	2215      	movs	r2, #21
 800648c:	68f9      	ldr	r1, [r7, #12]
 800648e:	6938      	ldr	r0, [r7, #16]
 8006490:	f7ff fab4 	bl	80059fc <_SendPacket>
  RECORD_END();
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	f383 8811 	msr	BASEPRI, r3
}
 800649a:	bf00      	nop
 800649c:	3748      	adds	r7, #72	@ 0x48
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}
 80064a2:	bf00      	nop
 80064a4:	200143c4 	.word	0x200143c4
 80064a8:	20014394 	.word	0x20014394

080064ac <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80064b0:	4b07      	ldr	r3, [pc, #28]	@ (80064d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80064b2:	6a1b      	ldr	r3, [r3, #32]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d008      	beq.n	80064ca <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80064b8:	4b05      	ldr	r3, [pc, #20]	@ (80064d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80064ba:	6a1b      	ldr	r3, [r3, #32]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d003      	beq.n	80064ca <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80064c2:	4b03      	ldr	r3, [pc, #12]	@ (80064d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	4798      	blx	r3
  }
}
 80064ca:	bf00      	nop
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop
 80064d0:	20014394 	.word	0x20014394

080064d4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064dc:	f3ef 8311 	mrs	r3, BASEPRI
 80064e0:	f04f 0120 	mov.w	r1, #32
 80064e4:	f381 8811 	msr	BASEPRI, r1
 80064e8:	617b      	str	r3, [r7, #20]
 80064ea:	480b      	ldr	r0, [pc, #44]	@ (8006518 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80064ec:	f7ff f996 	bl	800581c <_PreparePacket>
 80064f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80064f2:	2280      	movs	r2, #128	@ 0x80
 80064f4:	6879      	ldr	r1, [r7, #4]
 80064f6:	6938      	ldr	r0, [r7, #16]
 80064f8:	f7ff f940 	bl	800577c <_EncodeStr>
 80064fc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80064fe:	220e      	movs	r2, #14
 8006500:	68f9      	ldr	r1, [r7, #12]
 8006502:	6938      	ldr	r0, [r7, #16]
 8006504:	f7ff fa7a 	bl	80059fc <_SendPacket>
  RECORD_END();
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f383 8811 	msr	BASEPRI, r3
}
 800650e:	bf00      	nop
 8006510:	3718      	adds	r7, #24
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	200143c4 	.word	0x200143c4

0800651c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800651c:	b590      	push	{r4, r7, lr}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006522:	4b15      	ldr	r3, [pc, #84]	@ (8006578 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d01a      	beq.n	8006560 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800652a:	4b13      	ldr	r3, [pc, #76]	@ (8006578 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d015      	beq.n	8006560 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006534:	4b10      	ldr	r3, [pc, #64]	@ (8006578 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4798      	blx	r3
 800653c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006540:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006542:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006546:	f04f 0200 	mov.w	r2, #0
 800654a:	f04f 0300 	mov.w	r3, #0
 800654e:	000a      	movs	r2, r1
 8006550:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006552:	4613      	mov	r3, r2
 8006554:	461a      	mov	r2, r3
 8006556:	4621      	mov	r1, r4
 8006558:	200d      	movs	r0, #13
 800655a:	f7ff fbe5 	bl	8005d28 <SEGGER_SYSVIEW_RecordU32x2>
 800655e:	e006      	b.n	800656e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006560:	4b06      	ldr	r3, [pc, #24]	@ (800657c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4619      	mov	r1, r3
 8006566:	200c      	movs	r0, #12
 8006568:	f7ff fba2 	bl	8005cb0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800656c:	bf00      	nop
 800656e:	bf00      	nop
 8006570:	370c      	adds	r7, #12
 8006572:	46bd      	mov	sp, r7
 8006574:	bd90      	pop	{r4, r7, pc}
 8006576:	bf00      	nop
 8006578:	20014394 	.word	0x20014394
 800657c:	e0001004 	.word	0xe0001004

08006580 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006580:	b580      	push	{r7, lr}
 8006582:	b086      	sub	sp, #24
 8006584:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006586:	f3ef 8311 	mrs	r3, BASEPRI
 800658a:	f04f 0120 	mov.w	r1, #32
 800658e:	f381 8811 	msr	BASEPRI, r1
 8006592:	60fb      	str	r3, [r7, #12]
 8006594:	4819      	ldr	r0, [pc, #100]	@ (80065fc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006596:	f7ff f941 	bl	800581c <_PreparePacket>
 800659a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80065a0:	4b17      	ldr	r3, [pc, #92]	@ (8006600 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065a8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	617b      	str	r3, [r7, #20]
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	613b      	str	r3, [r7, #16]
 80065b2:	e00b      	b.n	80065cc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	1c59      	adds	r1, r3, #1
 80065bc:	6179      	str	r1, [r7, #20]
 80065be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065c2:	b2d2      	uxtb	r2, r2
 80065c4:	701a      	strb	r2, [r3, #0]
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	09db      	lsrs	r3, r3, #7
 80065ca:	613b      	str	r3, [r7, #16]
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80065d0:	d8f0      	bhi.n	80065b4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	1c5a      	adds	r2, r3, #1
 80065d6:	617a      	str	r2, [r7, #20]
 80065d8:	693a      	ldr	r2, [r7, #16]
 80065da:	b2d2      	uxtb	r2, r2
 80065dc:	701a      	strb	r2, [r3, #0]
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80065e2:	2202      	movs	r2, #2
 80065e4:	6879      	ldr	r1, [r7, #4]
 80065e6:	68b8      	ldr	r0, [r7, #8]
 80065e8:	f7ff fa08 	bl	80059fc <_SendPacket>
  RECORD_END();
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	f383 8811 	msr	BASEPRI, r3
}
 80065f2:	bf00      	nop
 80065f4:	3718      	adds	r7, #24
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
 80065fa:	bf00      	nop
 80065fc:	200143c4 	.word	0x200143c4
 8006600:	e000ed04 	.word	0xe000ed04

08006604 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800660a:	f3ef 8311 	mrs	r3, BASEPRI
 800660e:	f04f 0120 	mov.w	r1, #32
 8006612:	f381 8811 	msr	BASEPRI, r1
 8006616:	607b      	str	r3, [r7, #4]
 8006618:	4807      	ldr	r0, [pc, #28]	@ (8006638 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800661a:	f7ff f8ff 	bl	800581c <_PreparePacket>
 800661e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006620:	2203      	movs	r2, #3
 8006622:	6839      	ldr	r1, [r7, #0]
 8006624:	6838      	ldr	r0, [r7, #0]
 8006626:	f7ff f9e9 	bl	80059fc <_SendPacket>
  RECORD_END();
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f383 8811 	msr	BASEPRI, r3
}
 8006630:	bf00      	nop
 8006632:	3708      	adds	r7, #8
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	200143c4 	.word	0x200143c4

0800663c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800663c:	b580      	push	{r7, lr}
 800663e:	b082      	sub	sp, #8
 8006640:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006642:	f3ef 8311 	mrs	r3, BASEPRI
 8006646:	f04f 0120 	mov.w	r1, #32
 800664a:	f381 8811 	msr	BASEPRI, r1
 800664e:	607b      	str	r3, [r7, #4]
 8006650:	4807      	ldr	r0, [pc, #28]	@ (8006670 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006652:	f7ff f8e3 	bl	800581c <_PreparePacket>
 8006656:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006658:	2212      	movs	r2, #18
 800665a:	6839      	ldr	r1, [r7, #0]
 800665c:	6838      	ldr	r0, [r7, #0]
 800665e:	f7ff f9cd 	bl	80059fc <_SendPacket>
  RECORD_END();
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f383 8811 	msr	BASEPRI, r3
}
 8006668:	bf00      	nop
 800666a:	3708      	adds	r7, #8
 800666c:	46bd      	mov	sp, r7
 800666e:	bd80      	pop	{r7, pc}
 8006670:	200143c4 	.word	0x200143c4

08006674 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800667a:	f3ef 8311 	mrs	r3, BASEPRI
 800667e:	f04f 0120 	mov.w	r1, #32
 8006682:	f381 8811 	msr	BASEPRI, r1
 8006686:	607b      	str	r3, [r7, #4]
 8006688:	4807      	ldr	r0, [pc, #28]	@ (80066a8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800668a:	f7ff f8c7 	bl	800581c <_PreparePacket>
 800668e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006690:	2211      	movs	r2, #17
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	6838      	ldr	r0, [r7, #0]
 8006696:	f7ff f9b1 	bl	80059fc <_SendPacket>
  RECORD_END();
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f383 8811 	msr	BASEPRI, r3
}
 80066a0:	bf00      	nop
 80066a2:	3708      	adds	r7, #8
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	200143c4 	.word	0x200143c4

080066ac <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b088      	sub	sp, #32
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80066b4:	f3ef 8311 	mrs	r3, BASEPRI
 80066b8:	f04f 0120 	mov.w	r1, #32
 80066bc:	f381 8811 	msr	BASEPRI, r1
 80066c0:	617b      	str	r3, [r7, #20]
 80066c2:	4819      	ldr	r0, [pc, #100]	@ (8006728 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80066c4:	f7ff f8aa 	bl	800581c <_PreparePacket>
 80066c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80066ce:	4b17      	ldr	r3, [pc, #92]	@ (800672c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	687a      	ldr	r2, [r7, #4]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	61fb      	str	r3, [r7, #28]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	61bb      	str	r3, [r7, #24]
 80066e0:	e00b      	b.n	80066fa <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80066e2:	69bb      	ldr	r3, [r7, #24]
 80066e4:	b2da      	uxtb	r2, r3
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	1c59      	adds	r1, r3, #1
 80066ea:	61f9      	str	r1, [r7, #28]
 80066ec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066f0:	b2d2      	uxtb	r2, r2
 80066f2:	701a      	strb	r2, [r3, #0]
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	09db      	lsrs	r3, r3, #7
 80066f8:	61bb      	str	r3, [r7, #24]
 80066fa:	69bb      	ldr	r3, [r7, #24]
 80066fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80066fe:	d8f0      	bhi.n	80066e2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006700:	69fb      	ldr	r3, [r7, #28]
 8006702:	1c5a      	adds	r2, r3, #1
 8006704:	61fa      	str	r2, [r7, #28]
 8006706:	69ba      	ldr	r2, [r7, #24]
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	701a      	strb	r2, [r3, #0]
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006710:	2208      	movs	r2, #8
 8006712:	68f9      	ldr	r1, [r7, #12]
 8006714:	6938      	ldr	r0, [r7, #16]
 8006716:	f7ff f971 	bl	80059fc <_SendPacket>
  RECORD_END();
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	f383 8811 	msr	BASEPRI, r3
}
 8006720:	bf00      	nop
 8006722:	3720      	adds	r7, #32
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}
 8006728:	200143c4 	.word	0x200143c4
 800672c:	20014394 	.word	0x20014394

08006730 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006730:	b580      	push	{r7, lr}
 8006732:	b088      	sub	sp, #32
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006738:	f3ef 8311 	mrs	r3, BASEPRI
 800673c:	f04f 0120 	mov.w	r1, #32
 8006740:	f381 8811 	msr	BASEPRI, r1
 8006744:	617b      	str	r3, [r7, #20]
 8006746:	4819      	ldr	r0, [pc, #100]	@ (80067ac <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006748:	f7ff f868 	bl	800581c <_PreparePacket>
 800674c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006752:	4b17      	ldr	r3, [pc, #92]	@ (80067b0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	61fb      	str	r3, [r7, #28]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	61bb      	str	r3, [r7, #24]
 8006764:	e00b      	b.n	800677e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	b2da      	uxtb	r2, r3
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	1c59      	adds	r1, r3, #1
 800676e:	61f9      	str	r1, [r7, #28]
 8006770:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006774:	b2d2      	uxtb	r2, r2
 8006776:	701a      	strb	r2, [r3, #0]
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	09db      	lsrs	r3, r3, #7
 800677c:	61bb      	str	r3, [r7, #24]
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	2b7f      	cmp	r3, #127	@ 0x7f
 8006782:	d8f0      	bhi.n	8006766 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	1c5a      	adds	r2, r3, #1
 8006788:	61fa      	str	r2, [r7, #28]
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	b2d2      	uxtb	r2, r2
 800678e:	701a      	strb	r2, [r3, #0]
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006794:	2204      	movs	r2, #4
 8006796:	68f9      	ldr	r1, [r7, #12]
 8006798:	6938      	ldr	r0, [r7, #16]
 800679a:	f7ff f92f 	bl	80059fc <_SendPacket>
  RECORD_END();
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f383 8811 	msr	BASEPRI, r3
}
 80067a4:	bf00      	nop
 80067a6:	3720      	adds	r7, #32
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	200143c4 	.word	0x200143c4
 80067b0:	20014394 	.word	0x20014394

080067b4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b088      	sub	sp, #32
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80067bc:	f3ef 8311 	mrs	r3, BASEPRI
 80067c0:	f04f 0120 	mov.w	r1, #32
 80067c4:	f381 8811 	msr	BASEPRI, r1
 80067c8:	617b      	str	r3, [r7, #20]
 80067ca:	4819      	ldr	r0, [pc, #100]	@ (8006830 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80067cc:	f7ff f826 	bl	800581c <_PreparePacket>
 80067d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80067d6:	4b17      	ldr	r3, [pc, #92]	@ (8006834 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	61fb      	str	r3, [r7, #28]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	61bb      	str	r3, [r7, #24]
 80067e8:	e00b      	b.n	8006802 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	1c59      	adds	r1, r3, #1
 80067f2:	61f9      	str	r1, [r7, #28]
 80067f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067f8:	b2d2      	uxtb	r2, r2
 80067fa:	701a      	strb	r2, [r3, #0]
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	09db      	lsrs	r3, r3, #7
 8006800:	61bb      	str	r3, [r7, #24]
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	2b7f      	cmp	r3, #127	@ 0x7f
 8006806:	d8f0      	bhi.n	80067ea <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	61fa      	str	r2, [r7, #28]
 800680e:	69ba      	ldr	r2, [r7, #24]
 8006810:	b2d2      	uxtb	r2, r2
 8006812:	701a      	strb	r2, [r3, #0]
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006818:	2206      	movs	r2, #6
 800681a:	68f9      	ldr	r1, [r7, #12]
 800681c:	6938      	ldr	r0, [r7, #16]
 800681e:	f7ff f8ed 	bl	80059fc <_SendPacket>
  RECORD_END();
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f383 8811 	msr	BASEPRI, r3
}
 8006828:	bf00      	nop
 800682a:	3720      	adds	r7, #32
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	200143c4 	.word	0x200143c4
 8006834:	20014394 	.word	0x20014394

08006838 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006838:	b580      	push	{r7, lr}
 800683a:	b08a      	sub	sp, #40	@ 0x28
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006842:	f3ef 8311 	mrs	r3, BASEPRI
 8006846:	f04f 0120 	mov.w	r1, #32
 800684a:	f381 8811 	msr	BASEPRI, r1
 800684e:	617b      	str	r3, [r7, #20]
 8006850:	4827      	ldr	r0, [pc, #156]	@ (80068f0 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006852:	f7fe ffe3 	bl	800581c <_PreparePacket>
 8006856:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800685c:	4b25      	ldr	r3, [pc, #148]	@ (80068f4 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800685e:	691b      	ldr	r3, [r3, #16]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	627b      	str	r3, [r7, #36]	@ 0x24
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	623b      	str	r3, [r7, #32]
 800686e:	e00b      	b.n	8006888 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	b2da      	uxtb	r2, r3
 8006874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006876:	1c59      	adds	r1, r3, #1
 8006878:	6279      	str	r1, [r7, #36]	@ 0x24
 800687a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800687e:	b2d2      	uxtb	r2, r2
 8006880:	701a      	strb	r2, [r3, #0]
 8006882:	6a3b      	ldr	r3, [r7, #32]
 8006884:	09db      	lsrs	r3, r3, #7
 8006886:	623b      	str	r3, [r7, #32]
 8006888:	6a3b      	ldr	r3, [r7, #32]
 800688a:	2b7f      	cmp	r3, #127	@ 0x7f
 800688c:	d8f0      	bhi.n	8006870 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800688e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006890:	1c5a      	adds	r2, r3, #1
 8006892:	627a      	str	r2, [r7, #36]	@ 0x24
 8006894:	6a3a      	ldr	r2, [r7, #32]
 8006896:	b2d2      	uxtb	r2, r2
 8006898:	701a      	strb	r2, [r3, #0]
 800689a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800689c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	61fb      	str	r3, [r7, #28]
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	61bb      	str	r3, [r7, #24]
 80068a6:	e00b      	b.n	80068c0 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	1c59      	adds	r1, r3, #1
 80068b0:	61f9      	str	r1, [r7, #28]
 80068b2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068b6:	b2d2      	uxtb	r2, r2
 80068b8:	701a      	strb	r2, [r3, #0]
 80068ba:	69bb      	ldr	r3, [r7, #24]
 80068bc:	09db      	lsrs	r3, r3, #7
 80068be:	61bb      	str	r3, [r7, #24]
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	2b7f      	cmp	r3, #127	@ 0x7f
 80068c4:	d8f0      	bhi.n	80068a8 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80068c6:	69fb      	ldr	r3, [r7, #28]
 80068c8:	1c5a      	adds	r2, r3, #1
 80068ca:	61fa      	str	r2, [r7, #28]
 80068cc:	69ba      	ldr	r2, [r7, #24]
 80068ce:	b2d2      	uxtb	r2, r2
 80068d0:	701a      	strb	r2, [r3, #0]
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80068d6:	2207      	movs	r2, #7
 80068d8:	68f9      	ldr	r1, [r7, #12]
 80068da:	6938      	ldr	r0, [r7, #16]
 80068dc:	f7ff f88e 	bl	80059fc <_SendPacket>
  RECORD_END();
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f383 8811 	msr	BASEPRI, r3
}
 80068e6:	bf00      	nop
 80068e8:	3728      	adds	r7, #40	@ 0x28
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	200143c4 	.word	0x200143c4
 80068f4:	20014394 	.word	0x20014394

080068f8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006900:	4b04      	ldr	r3, [pc, #16]	@ (8006914 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006902:	691b      	ldr	r3, [r3, #16]
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	1ad3      	subs	r3, r2, r3
}
 8006908:	4618      	mov	r0, r3
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	20014394 	.word	0x20014394

08006918 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006918:	b580      	push	{r7, lr}
 800691a:	b08c      	sub	sp, #48	@ 0x30
 800691c:	af00      	add	r7, sp, #0
 800691e:	4603      	mov	r3, r0
 8006920:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006922:	4b3b      	ldr	r3, [pc, #236]	@ (8006a10 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d06d      	beq.n	8006a06 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800692a:	4b39      	ldr	r3, [pc, #228]	@ (8006a10 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006930:	2300      	movs	r3, #0
 8006932:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006934:	e008      	b.n	8006948 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006938:	691b      	ldr	r3, [r3, #16]
 800693a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800693c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800693e:	2b00      	cmp	r3, #0
 8006940:	d007      	beq.n	8006952 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006944:	3301      	adds	r3, #1
 8006946:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006948:	79fb      	ldrb	r3, [r7, #7]
 800694a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800694c:	429a      	cmp	r2, r3
 800694e:	d3f2      	bcc.n	8006936 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006950:	e000      	b.n	8006954 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006952:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006956:	2b00      	cmp	r3, #0
 8006958:	d055      	beq.n	8006a06 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800695a:	f3ef 8311 	mrs	r3, BASEPRI
 800695e:	f04f 0120 	mov.w	r1, #32
 8006962:	f381 8811 	msr	BASEPRI, r1
 8006966:	617b      	str	r3, [r7, #20]
 8006968:	482a      	ldr	r0, [pc, #168]	@ (8006a14 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800696a:	f7fe ff57 	bl	800581c <_PreparePacket>
 800696e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	627b      	str	r3, [r7, #36]	@ 0x24
 8006978:	79fb      	ldrb	r3, [r7, #7]
 800697a:	623b      	str	r3, [r7, #32]
 800697c:	e00b      	b.n	8006996 <SEGGER_SYSVIEW_SendModule+0x7e>
 800697e:	6a3b      	ldr	r3, [r7, #32]
 8006980:	b2da      	uxtb	r2, r3
 8006982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006984:	1c59      	adds	r1, r3, #1
 8006986:	6279      	str	r1, [r7, #36]	@ 0x24
 8006988:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800698c:	b2d2      	uxtb	r2, r2
 800698e:	701a      	strb	r2, [r3, #0]
 8006990:	6a3b      	ldr	r3, [r7, #32]
 8006992:	09db      	lsrs	r3, r3, #7
 8006994:	623b      	str	r3, [r7, #32]
 8006996:	6a3b      	ldr	r3, [r7, #32]
 8006998:	2b7f      	cmp	r3, #127	@ 0x7f
 800699a:	d8f0      	bhi.n	800697e <SEGGER_SYSVIEW_SendModule+0x66>
 800699c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800699e:	1c5a      	adds	r2, r3, #1
 80069a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80069a2:	6a3a      	ldr	r2, [r7, #32]
 80069a4:	b2d2      	uxtb	r2, r2
 80069a6:	701a      	strb	r2, [r3, #0]
 80069a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069aa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	61fb      	str	r3, [r7, #28]
 80069b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	61bb      	str	r3, [r7, #24]
 80069b6:	e00b      	b.n	80069d0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	b2da      	uxtb	r2, r3
 80069bc:	69fb      	ldr	r3, [r7, #28]
 80069be:	1c59      	adds	r1, r3, #1
 80069c0:	61f9      	str	r1, [r7, #28]
 80069c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069c6:	b2d2      	uxtb	r2, r2
 80069c8:	701a      	strb	r2, [r3, #0]
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	09db      	lsrs	r3, r3, #7
 80069ce:	61bb      	str	r3, [r7, #24]
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80069d4:	d8f0      	bhi.n	80069b8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	1c5a      	adds	r2, r3, #1
 80069da:	61fa      	str	r2, [r7, #28]
 80069dc:	69ba      	ldr	r2, [r7, #24]
 80069de:	b2d2      	uxtb	r2, r2
 80069e0:	701a      	strb	r2, [r3, #0]
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80069e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2280      	movs	r2, #128	@ 0x80
 80069ec:	4619      	mov	r1, r3
 80069ee:	68f8      	ldr	r0, [r7, #12]
 80069f0:	f7fe fec4 	bl	800577c <_EncodeStr>
 80069f4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80069f6:	2216      	movs	r2, #22
 80069f8:	68f9      	ldr	r1, [r7, #12]
 80069fa:	6938      	ldr	r0, [r7, #16]
 80069fc:	f7fe fffe 	bl	80059fc <_SendPacket>
      RECORD_END();
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006a06:	bf00      	nop
 8006a08:	3730      	adds	r7, #48	@ 0x30
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop
 8006a10:	200143bc 	.word	0x200143bc
 8006a14:	200143c4 	.word	0x200143c4

08006a18 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8006a50 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00f      	beq.n	8006a46 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006a26:	4b0a      	ldr	r3, [pc, #40]	@ (8006a50 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d002      	beq.n	8006a3a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1f2      	bne.n	8006a2c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006a46:	bf00      	nop
 8006a48:	3708      	adds	r7, #8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	200143bc 	.word	0x200143bc

08006a54 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b086      	sub	sp, #24
 8006a58:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006a5a:	f3ef 8311 	mrs	r3, BASEPRI
 8006a5e:	f04f 0120 	mov.w	r1, #32
 8006a62:	f381 8811 	msr	BASEPRI, r1
 8006a66:	60fb      	str	r3, [r7, #12]
 8006a68:	4817      	ldr	r0, [pc, #92]	@ (8006ac8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006a6a:	f7fe fed7 	bl	800581c <_PreparePacket>
 8006a6e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	617b      	str	r3, [r7, #20]
 8006a78:	4b14      	ldr	r3, [pc, #80]	@ (8006acc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	613b      	str	r3, [r7, #16]
 8006a7e:	e00b      	b.n	8006a98 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	1c59      	adds	r1, r3, #1
 8006a88:	6179      	str	r1, [r7, #20]
 8006a8a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a8e:	b2d2      	uxtb	r2, r2
 8006a90:	701a      	strb	r2, [r3, #0]
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	09db      	lsrs	r3, r3, #7
 8006a96:	613b      	str	r3, [r7, #16]
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a9c:	d8f0      	bhi.n	8006a80 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	1c5a      	adds	r2, r3, #1
 8006aa2:	617a      	str	r2, [r7, #20]
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	b2d2      	uxtb	r2, r2
 8006aa8:	701a      	strb	r2, [r3, #0]
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006aae:	221b      	movs	r2, #27
 8006ab0:	6879      	ldr	r1, [r7, #4]
 8006ab2:	68b8      	ldr	r0, [r7, #8]
 8006ab4:	f7fe ffa2 	bl	80059fc <_SendPacket>
  RECORD_END();
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f383 8811 	msr	BASEPRI, r3
}
 8006abe:	bf00      	nop
 8006ac0:	3718      	adds	r7, #24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	200143c4 	.word	0x200143c4
 8006acc:	200143c0 	.word	0x200143c0

08006ad0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b08a      	sub	sp, #40	@ 0x28
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ad8:	f3ef 8311 	mrs	r3, BASEPRI
 8006adc:	f04f 0120 	mov.w	r1, #32
 8006ae0:	f381 8811 	msr	BASEPRI, r1
 8006ae4:	617b      	str	r3, [r7, #20]
 8006ae6:	4827      	ldr	r0, [pc, #156]	@ (8006b84 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006ae8:	f7fe fe98 	bl	800581c <_PreparePacket>
 8006aec:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006aee:	2280      	movs	r2, #128	@ 0x80
 8006af0:	6879      	ldr	r1, [r7, #4]
 8006af2:	6938      	ldr	r0, [r7, #16]
 8006af4:	f7fe fe42 	bl	800577c <_EncodeStr>
 8006af8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8006afe:	2301      	movs	r3, #1
 8006b00:	623b      	str	r3, [r7, #32]
 8006b02:	e00b      	b.n	8006b1c <SEGGER_SYSVIEW_Warn+0x4c>
 8006b04:	6a3b      	ldr	r3, [r7, #32]
 8006b06:	b2da      	uxtb	r2, r3
 8006b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0a:	1c59      	adds	r1, r3, #1
 8006b0c:	6279      	str	r1, [r7, #36]	@ 0x24
 8006b0e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b12:	b2d2      	uxtb	r2, r2
 8006b14:	701a      	strb	r2, [r3, #0]
 8006b16:	6a3b      	ldr	r3, [r7, #32]
 8006b18:	09db      	lsrs	r3, r3, #7
 8006b1a:	623b      	str	r3, [r7, #32]
 8006b1c:	6a3b      	ldr	r3, [r7, #32]
 8006b1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b20:	d8f0      	bhi.n	8006b04 <SEGGER_SYSVIEW_Warn+0x34>
 8006b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b24:	1c5a      	adds	r2, r3, #1
 8006b26:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b28:	6a3a      	ldr	r2, [r7, #32]
 8006b2a:	b2d2      	uxtb	r2, r2
 8006b2c:	701a      	strb	r2, [r3, #0]
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b30:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	61fb      	str	r3, [r7, #28]
 8006b36:	2300      	movs	r3, #0
 8006b38:	61bb      	str	r3, [r7, #24]
 8006b3a:	e00b      	b.n	8006b54 <SEGGER_SYSVIEW_Warn+0x84>
 8006b3c:	69bb      	ldr	r3, [r7, #24]
 8006b3e:	b2da      	uxtb	r2, r3
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	1c59      	adds	r1, r3, #1
 8006b44:	61f9      	str	r1, [r7, #28]
 8006b46:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b4a:	b2d2      	uxtb	r2, r2
 8006b4c:	701a      	strb	r2, [r3, #0]
 8006b4e:	69bb      	ldr	r3, [r7, #24]
 8006b50:	09db      	lsrs	r3, r3, #7
 8006b52:	61bb      	str	r3, [r7, #24]
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b58:	d8f0      	bhi.n	8006b3c <SEGGER_SYSVIEW_Warn+0x6c>
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	1c5a      	adds	r2, r3, #1
 8006b5e:	61fa      	str	r2, [r7, #28]
 8006b60:	69ba      	ldr	r2, [r7, #24]
 8006b62:	b2d2      	uxtb	r2, r2
 8006b64:	701a      	strb	r2, [r3, #0]
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006b6a:	221a      	movs	r2, #26
 8006b6c:	68f9      	ldr	r1, [r7, #12]
 8006b6e:	6938      	ldr	r0, [r7, #16]
 8006b70:	f7fe ff44 	bl	80059fc <_SendPacket>
  RECORD_END();
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	f383 8811 	msr	BASEPRI, r3
}
 8006b7a:	bf00      	nop
 8006b7c:	3728      	adds	r7, #40	@ 0x28
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	200143c4 	.word	0x200143c4

08006b88 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006b8c:	4b13      	ldr	r3, [pc, #76]	@ (8006bdc <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006b8e:	7e1b      	ldrb	r3, [r3, #24]
 8006b90:	4619      	mov	r1, r3
 8006b92:	4a13      	ldr	r2, [pc, #76]	@ (8006be0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006b94:	460b      	mov	r3, r1
 8006b96:	005b      	lsls	r3, r3, #1
 8006b98:	440b      	add	r3, r1
 8006b9a:	00db      	lsls	r3, r3, #3
 8006b9c:	4413      	add	r3, r2
 8006b9e:	336c      	adds	r3, #108	@ 0x6c
 8006ba0:	681a      	ldr	r2, [r3, #0]
 8006ba2:	4b0e      	ldr	r3, [pc, #56]	@ (8006bdc <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006ba4:	7e1b      	ldrb	r3, [r3, #24]
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	490d      	ldr	r1, [pc, #52]	@ (8006be0 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006baa:	4603      	mov	r3, r0
 8006bac:	005b      	lsls	r3, r3, #1
 8006bae:	4403      	add	r3, r0
 8006bb0:	00db      	lsls	r3, r3, #3
 8006bb2:	440b      	add	r3, r1
 8006bb4:	3370      	adds	r3, #112	@ 0x70
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d00b      	beq.n	8006bd4 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006bbc:	4b07      	ldr	r3, [pc, #28]	@ (8006bdc <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006bbe:	789b      	ldrb	r3, [r3, #2]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d107      	bne.n	8006bd4 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006bc4:	4b05      	ldr	r3, [pc, #20]	@ (8006bdc <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006bca:	f7fe fe33 	bl	8005834 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006bce:	4b03      	ldr	r3, [pc, #12]	@ (8006bdc <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006bd4:	4b01      	ldr	r3, [pc, #4]	@ (8006bdc <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006bd6:	781b      	ldrb	r3, [r3, #0]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	20014394 	.word	0x20014394
 8006be0:	20012ed4 	.word	0x20012ed4

08006be4 <memcmp>:
 8006be4:	b510      	push	{r4, lr}
 8006be6:	3901      	subs	r1, #1
 8006be8:	4402      	add	r2, r0
 8006bea:	4290      	cmp	r0, r2
 8006bec:	d101      	bne.n	8006bf2 <memcmp+0xe>
 8006bee:	2000      	movs	r0, #0
 8006bf0:	e005      	b.n	8006bfe <memcmp+0x1a>
 8006bf2:	7803      	ldrb	r3, [r0, #0]
 8006bf4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006bf8:	42a3      	cmp	r3, r4
 8006bfa:	d001      	beq.n	8006c00 <memcmp+0x1c>
 8006bfc:	1b18      	subs	r0, r3, r4
 8006bfe:	bd10      	pop	{r4, pc}
 8006c00:	3001      	adds	r0, #1
 8006c02:	e7f2      	b.n	8006bea <memcmp+0x6>

08006c04 <memset>:
 8006c04:	4402      	add	r2, r0
 8006c06:	4603      	mov	r3, r0
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d100      	bne.n	8006c0e <memset+0xa>
 8006c0c:	4770      	bx	lr
 8006c0e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c12:	e7f9      	b.n	8006c08 <memset+0x4>

08006c14 <__libc_init_array>:
 8006c14:	b570      	push	{r4, r5, r6, lr}
 8006c16:	4d0d      	ldr	r5, [pc, #52]	@ (8006c4c <__libc_init_array+0x38>)
 8006c18:	4c0d      	ldr	r4, [pc, #52]	@ (8006c50 <__libc_init_array+0x3c>)
 8006c1a:	1b64      	subs	r4, r4, r5
 8006c1c:	10a4      	asrs	r4, r4, #2
 8006c1e:	2600      	movs	r6, #0
 8006c20:	42a6      	cmp	r6, r4
 8006c22:	d109      	bne.n	8006c38 <__libc_init_array+0x24>
 8006c24:	4d0b      	ldr	r5, [pc, #44]	@ (8006c54 <__libc_init_array+0x40>)
 8006c26:	4c0c      	ldr	r4, [pc, #48]	@ (8006c58 <__libc_init_array+0x44>)
 8006c28:	f000 f826 	bl	8006c78 <_init>
 8006c2c:	1b64      	subs	r4, r4, r5
 8006c2e:	10a4      	asrs	r4, r4, #2
 8006c30:	2600      	movs	r6, #0
 8006c32:	42a6      	cmp	r6, r4
 8006c34:	d105      	bne.n	8006c42 <__libc_init_array+0x2e>
 8006c36:	bd70      	pop	{r4, r5, r6, pc}
 8006c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c3c:	4798      	blx	r3
 8006c3e:	3601      	adds	r6, #1
 8006c40:	e7ee      	b.n	8006c20 <__libc_init_array+0xc>
 8006c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c46:	4798      	blx	r3
 8006c48:	3601      	adds	r6, #1
 8006c4a:	e7f2      	b.n	8006c32 <__libc_init_array+0x1e>
 8006c4c:	08006db8 	.word	0x08006db8
 8006c50:	08006db8 	.word	0x08006db8
 8006c54:	08006db8 	.word	0x08006db8
 8006c58:	08006dbc 	.word	0x08006dbc

08006c5c <memcpy>:
 8006c5c:	440a      	add	r2, r1
 8006c5e:	4291      	cmp	r1, r2
 8006c60:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c64:	d100      	bne.n	8006c68 <memcpy+0xc>
 8006c66:	4770      	bx	lr
 8006c68:	b510      	push	{r4, lr}
 8006c6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c72:	4291      	cmp	r1, r2
 8006c74:	d1f9      	bne.n	8006c6a <memcpy+0xe>
 8006c76:	bd10      	pop	{r4, pc}

08006c78 <_init>:
 8006c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c7a:	bf00      	nop
 8006c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c7e:	bc08      	pop	{r3}
 8006c80:	469e      	mov	lr, r3
 8006c82:	4770      	bx	lr

08006c84 <_fini>:
 8006c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c86:	bf00      	nop
 8006c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c8a:	bc08      	pop	{r3}
 8006c8c:	469e      	mov	lr, r3
 8006c8e:	4770      	bx	lr
