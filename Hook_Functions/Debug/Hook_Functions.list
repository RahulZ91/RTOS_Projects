
Hook_Functions.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c30  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08002e00  08002e00  00003e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e3c  08002e3c  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002e3c  08002e3c  00003e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e44  08002e44  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e44  08002e44  00003e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e48  08002e48  00003e48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002e4c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000684  2000000c  08002e58  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000690  08002e58  00004690  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bd70  00000000  00000000  0000403c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f57  00000000  00000000  0000fdac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  00011d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000089a  00000000  00000000  00012878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021128  00000000  00000000  00013112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dfb8  00000000  00000000  0003423a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2dc1  00000000  00000000  000421f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114fb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e20  00000000  00000000  00114ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a5  00000000  00000000  00117e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000000c 	.word	0x2000000c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002de8 	.word	0x08002de8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000010 	.word	0x20000010
 800020c:	08002de8 	.word	0x08002de8

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	200000c4 	.word	0x200000c4

080002a4 <__aeabi_uldivmod>:
 80002a4:	b953      	cbnz	r3, 80002bc <__aeabi_uldivmod+0x18>
 80002a6:	b94a      	cbnz	r2, 80002bc <__aeabi_uldivmod+0x18>
 80002a8:	2900      	cmp	r1, #0
 80002aa:	bf08      	it	eq
 80002ac:	2800      	cmpeq	r0, #0
 80002ae:	bf1c      	itt	ne
 80002b0:	f04f 31ff 	movne.w	r1, #4294967295
 80002b4:	f04f 30ff 	movne.w	r0, #4294967295
 80002b8:	f000 b988 	b.w	80005cc <__aeabi_idiv0>
 80002bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c4:	f000 f806 	bl	80002d4 <__udivmoddi4>
 80002c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002d0:	b004      	add	sp, #16
 80002d2:	4770      	bx	lr

080002d4 <__udivmoddi4>:
 80002d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d8:	9d08      	ldr	r5, [sp, #32]
 80002da:	468e      	mov	lr, r1
 80002dc:	4604      	mov	r4, r0
 80002de:	4688      	mov	r8, r1
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d14a      	bne.n	800037a <__udivmoddi4+0xa6>
 80002e4:	428a      	cmp	r2, r1
 80002e6:	4617      	mov	r7, r2
 80002e8:	d962      	bls.n	80003b0 <__udivmoddi4+0xdc>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	b14e      	cbz	r6, 8000304 <__udivmoddi4+0x30>
 80002f0:	f1c6 0320 	rsb	r3, r6, #32
 80002f4:	fa01 f806 	lsl.w	r8, r1, r6
 80002f8:	fa20 f303 	lsr.w	r3, r0, r3
 80002fc:	40b7      	lsls	r7, r6
 80002fe:	ea43 0808 	orr.w	r8, r3, r8
 8000302:	40b4      	lsls	r4, r6
 8000304:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000310:	0c23      	lsrs	r3, r4, #16
 8000312:	fb0e 8811 	mls	r8, lr, r1, r8
 8000316:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800031a:	fb01 f20c 	mul.w	r2, r1, ip
 800031e:	429a      	cmp	r2, r3
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x62>
 8000322:	18fb      	adds	r3, r7, r3
 8000324:	f101 30ff 	add.w	r0, r1, #4294967295
 8000328:	f080 80ea 	bcs.w	8000500 <__udivmoddi4+0x22c>
 800032c:	429a      	cmp	r2, r3
 800032e:	f240 80e7 	bls.w	8000500 <__udivmoddi4+0x22c>
 8000332:	3902      	subs	r1, #2
 8000334:	443b      	add	r3, r7
 8000336:	1a9a      	subs	r2, r3, r2
 8000338:	b2a3      	uxth	r3, r4
 800033a:	fbb2 f0fe 	udiv	r0, r2, lr
 800033e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb00 fc0c 	mul.w	ip, r0, ip
 800034a:	459c      	cmp	ip, r3
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x8e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	f080 80d6 	bcs.w	8000504 <__udivmoddi4+0x230>
 8000358:	459c      	cmp	ip, r3
 800035a:	f240 80d3 	bls.w	8000504 <__udivmoddi4+0x230>
 800035e:	443b      	add	r3, r7
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000366:	eba3 030c 	sub.w	r3, r3, ip
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa2>
 800036e:	40f3      	lsrs	r3, r6
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xb6>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb0>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa2>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x14c>
 8000392:	4573      	cmp	r3, lr
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xc8>
 8000396:	4282      	cmp	r2, r0
 8000398:	f200 8105 	bhi.w	80005a6 <__udivmoddi4+0x2d2>
 800039c:	1a84      	subs	r4, r0, r2
 800039e:	eb6e 0203 	sbc.w	r2, lr, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	4690      	mov	r8, r2
 80003a6:	2d00      	cmp	r5, #0
 80003a8:	d0e5      	beq.n	8000376 <__udivmoddi4+0xa2>
 80003aa:	e9c5 4800 	strd	r4, r8, [r5]
 80003ae:	e7e2      	b.n	8000376 <__udivmoddi4+0xa2>
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f000 8090 	beq.w	80004d6 <__udivmoddi4+0x202>
 80003b6:	fab2 f682 	clz	r6, r2
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f040 80a4 	bne.w	8000508 <__udivmoddi4+0x234>
 80003c0:	1a8a      	subs	r2, r1, r2
 80003c2:	0c03      	lsrs	r3, r0, #16
 80003c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c8:	b280      	uxth	r0, r0
 80003ca:	b2bc      	uxth	r4, r7
 80003cc:	2101      	movs	r1, #1
 80003ce:	fbb2 fcfe 	udiv	ip, r2, lr
 80003d2:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003da:	fb04 f20c 	mul.w	r2, r4, ip
 80003de:	429a      	cmp	r2, r3
 80003e0:	d907      	bls.n	80003f2 <__udivmoddi4+0x11e>
 80003e2:	18fb      	adds	r3, r7, r3
 80003e4:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e8:	d202      	bcs.n	80003f0 <__udivmoddi4+0x11c>
 80003ea:	429a      	cmp	r2, r3
 80003ec:	f200 80e0 	bhi.w	80005b0 <__udivmoddi4+0x2dc>
 80003f0:	46c4      	mov	ip, r8
 80003f2:	1a9b      	subs	r3, r3, r2
 80003f4:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f8:	fb0e 3312 	mls	r3, lr, r2, r3
 80003fc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000400:	fb02 f404 	mul.w	r4, r2, r4
 8000404:	429c      	cmp	r4, r3
 8000406:	d907      	bls.n	8000418 <__udivmoddi4+0x144>
 8000408:	18fb      	adds	r3, r7, r3
 800040a:	f102 30ff 	add.w	r0, r2, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x142>
 8000410:	429c      	cmp	r4, r3
 8000412:	f200 80ca 	bhi.w	80005aa <__udivmoddi4+0x2d6>
 8000416:	4602      	mov	r2, r0
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x98>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa0e f401 	lsl.w	r4, lr, r1
 8000430:	fa20 f306 	lsr.w	r3, r0, r6
 8000434:	fa2e fe06 	lsr.w	lr, lr, r6
 8000438:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800043c:	4323      	orrs	r3, r4
 800043e:	fa00 f801 	lsl.w	r8, r0, r1
 8000442:	fa1f fc87 	uxth.w	ip, r7
 8000446:	fbbe f0f9 	udiv	r0, lr, r9
 800044a:	0c1c      	lsrs	r4, r3, #16
 800044c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000450:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000454:	fb00 fe0c 	mul.w	lr, r0, ip
 8000458:	45a6      	cmp	lr, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d909      	bls.n	8000474 <__udivmoddi4+0x1a0>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f100 3aff 	add.w	sl, r0, #4294967295
 8000466:	f080 809c 	bcs.w	80005a2 <__udivmoddi4+0x2ce>
 800046a:	45a6      	cmp	lr, r4
 800046c:	f240 8099 	bls.w	80005a2 <__udivmoddi4+0x2ce>
 8000470:	3802      	subs	r0, #2
 8000472:	443c      	add	r4, r7
 8000474:	eba4 040e 	sub.w	r4, r4, lr
 8000478:	fa1f fe83 	uxth.w	lr, r3
 800047c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000480:	fb09 4413 	mls	r4, r9, r3, r4
 8000484:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000488:	fb03 fc0c 	mul.w	ip, r3, ip
 800048c:	45a4      	cmp	ip, r4
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1ce>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f103 3eff 	add.w	lr, r3, #4294967295
 8000496:	f080 8082 	bcs.w	800059e <__udivmoddi4+0x2ca>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d97f      	bls.n	800059e <__udivmoddi4+0x2ca>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a6:	eba4 040c 	sub.w	r4, r4, ip
 80004aa:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ae:	4564      	cmp	r4, ip
 80004b0:	4673      	mov	r3, lr
 80004b2:	46e1      	mov	r9, ip
 80004b4:	d362      	bcc.n	800057c <__udivmoddi4+0x2a8>
 80004b6:	d05f      	beq.n	8000578 <__udivmoddi4+0x2a4>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x1fe>
 80004ba:	ebb8 0203 	subs.w	r2, r8, r3
 80004be:	eb64 0409 	sbc.w	r4, r4, r9
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	fa22 f301 	lsr.w	r3, r2, r1
 80004ca:	431e      	orrs	r6, r3
 80004cc:	40cc      	lsrs	r4, r1
 80004ce:	e9c5 6400 	strd	r6, r4, [r5]
 80004d2:	2100      	movs	r1, #0
 80004d4:	e74f      	b.n	8000376 <__udivmoddi4+0xa2>
 80004d6:	fbb1 fcf2 	udiv	ip, r1, r2
 80004da:	0c01      	lsrs	r1, r0, #16
 80004dc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004e0:	b280      	uxth	r0, r0
 80004e2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e6:	463b      	mov	r3, r7
 80004e8:	4638      	mov	r0, r7
 80004ea:	463c      	mov	r4, r7
 80004ec:	46b8      	mov	r8, r7
 80004ee:	46be      	mov	lr, r7
 80004f0:	2620      	movs	r6, #32
 80004f2:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f6:	eba2 0208 	sub.w	r2, r2, r8
 80004fa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fe:	e766      	b.n	80003ce <__udivmoddi4+0xfa>
 8000500:	4601      	mov	r1, r0
 8000502:	e718      	b.n	8000336 <__udivmoddi4+0x62>
 8000504:	4610      	mov	r0, r2
 8000506:	e72c      	b.n	8000362 <__udivmoddi4+0x8e>
 8000508:	f1c6 0220 	rsb	r2, r6, #32
 800050c:	fa2e f302 	lsr.w	r3, lr, r2
 8000510:	40b7      	lsls	r7, r6
 8000512:	40b1      	lsls	r1, r6
 8000514:	fa20 f202 	lsr.w	r2, r0, r2
 8000518:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800051c:	430a      	orrs	r2, r1
 800051e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000522:	b2bc      	uxth	r4, r7
 8000524:	fb0e 3318 	mls	r3, lr, r8, r3
 8000528:	0c11      	lsrs	r1, r2, #16
 800052a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052e:	fb08 f904 	mul.w	r9, r8, r4
 8000532:	40b0      	lsls	r0, r6
 8000534:	4589      	cmp	r9, r1
 8000536:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800053a:	b280      	uxth	r0, r0
 800053c:	d93e      	bls.n	80005bc <__udivmoddi4+0x2e8>
 800053e:	1879      	adds	r1, r7, r1
 8000540:	f108 3cff 	add.w	ip, r8, #4294967295
 8000544:	d201      	bcs.n	800054a <__udivmoddi4+0x276>
 8000546:	4589      	cmp	r9, r1
 8000548:	d81f      	bhi.n	800058a <__udivmoddi4+0x2b6>
 800054a:	eba1 0109 	sub.w	r1, r1, r9
 800054e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000552:	fb09 f804 	mul.w	r8, r9, r4
 8000556:	fb0e 1119 	mls	r1, lr, r9, r1
 800055a:	b292      	uxth	r2, r2
 800055c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000560:	4542      	cmp	r2, r8
 8000562:	d229      	bcs.n	80005b8 <__udivmoddi4+0x2e4>
 8000564:	18ba      	adds	r2, r7, r2
 8000566:	f109 31ff 	add.w	r1, r9, #4294967295
 800056a:	d2c4      	bcs.n	80004f6 <__udivmoddi4+0x222>
 800056c:	4542      	cmp	r2, r8
 800056e:	d2c2      	bcs.n	80004f6 <__udivmoddi4+0x222>
 8000570:	f1a9 0102 	sub.w	r1, r9, #2
 8000574:	443a      	add	r2, r7
 8000576:	e7be      	b.n	80004f6 <__udivmoddi4+0x222>
 8000578:	45f0      	cmp	r8, lr
 800057a:	d29d      	bcs.n	80004b8 <__udivmoddi4+0x1e4>
 800057c:	ebbe 0302 	subs.w	r3, lr, r2
 8000580:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000584:	3801      	subs	r0, #1
 8000586:	46e1      	mov	r9, ip
 8000588:	e796      	b.n	80004b8 <__udivmoddi4+0x1e4>
 800058a:	eba7 0909 	sub.w	r9, r7, r9
 800058e:	4449      	add	r1, r9
 8000590:	f1a8 0c02 	sub.w	ip, r8, #2
 8000594:	fbb1 f9fe 	udiv	r9, r1, lr
 8000598:	fb09 f804 	mul.w	r8, r9, r4
 800059c:	e7db      	b.n	8000556 <__udivmoddi4+0x282>
 800059e:	4673      	mov	r3, lr
 80005a0:	e77f      	b.n	80004a2 <__udivmoddi4+0x1ce>
 80005a2:	4650      	mov	r0, sl
 80005a4:	e766      	b.n	8000474 <__udivmoddi4+0x1a0>
 80005a6:	4608      	mov	r0, r1
 80005a8:	e6fd      	b.n	80003a6 <__udivmoddi4+0xd2>
 80005aa:	443b      	add	r3, r7
 80005ac:	3a02      	subs	r2, #2
 80005ae:	e733      	b.n	8000418 <__udivmoddi4+0x144>
 80005b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b4:	443b      	add	r3, r7
 80005b6:	e71c      	b.n	80003f2 <__udivmoddi4+0x11e>
 80005b8:	4649      	mov	r1, r9
 80005ba:	e79c      	b.n	80004f6 <__udivmoddi4+0x222>
 80005bc:	eba1 0109 	sub.w	r1, r1, r9
 80005c0:	46c4      	mov	ip, r8
 80005c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c6:	fb09 f804 	mul.w	r8, r9, r4
 80005ca:	e7c4      	b.n	8000556 <__udivmoddi4+0x282>

080005cc <__aeabi_idiv0>:
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d4:	f000 f978 	bl	80008c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d8:	f000 f804 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005dc:	f000 f870 	bl	80006c0 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <main+0x10>

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	@ 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2234      	movs	r2, #52	@ 0x34
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f002 fbbe 	bl	8002d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b2a      	ldr	r3, [pc, #168]	@ (80006b8 <SystemClock_Config+0xd4>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000610:	4a29      	ldr	r2, [pc, #164]	@ (80006b8 <SystemClock_Config+0xd4>)
 8000612:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000616:	6413      	str	r3, [r2, #64]	@ 0x40
 8000618:	4b27      	ldr	r3, [pc, #156]	@ (80006b8 <SystemClock_Config+0xd4>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800061c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000624:	2300      	movs	r3, #0
 8000626:	603b      	str	r3, [r7, #0]
 8000628:	4b24      	ldr	r3, [pc, #144]	@ (80006bc <SystemClock_Config+0xd8>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000630:	4a22      	ldr	r2, [pc, #136]	@ (80006bc <SystemClock_Config+0xd8>)
 8000632:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b20      	ldr	r3, [pc, #128]	@ (80006bc <SystemClock_Config+0xd8>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000640:	603b      	str	r3, [r7, #0]
 8000642:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000644:	2302      	movs	r3, #2
 8000646:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000648:	2301      	movs	r3, #1
 800064a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800064c:	2310      	movs	r3, #16
 800064e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000650:	2302      	movs	r3, #2
 8000652:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000654:	2300      	movs	r3, #0
 8000656:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000658:	2310      	movs	r3, #16
 800065a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800065c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000660:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000662:	2304      	movs	r3, #4
 8000664:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000666:	2302      	movs	r3, #2
 8000668:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800066a:	2302      	movs	r3, #2
 800066c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	4618      	mov	r0, r3
 8000674:	f000 ff30 	bl	80014d8 <HAL_RCC_OscConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800067e:	f000 f89d 	bl	80007bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000682:	230f      	movs	r3, #15
 8000684:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000686:	2302      	movs	r3, #2
 8000688:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068a:	2300      	movs	r3, #0
 800068c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800068e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000692:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	2102      	movs	r1, #2
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 fc04 	bl	8000eac <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xca>
  {
    Error_Handler();
 80006aa:	f000 f887 	bl	80007bc <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3750      	adds	r7, #80	@ 0x50
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	40023800 	.word	0x40023800
 80006bc:	40007000 	.word	0x40007000

080006c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08a      	sub	sp, #40	@ 0x28
 80006c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c6:	f107 0314 	add.w	r3, r7, #20
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
 80006d2:	60da      	str	r2, [r3, #12]
 80006d4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]
 80006da:	4b35      	ldr	r3, [pc, #212]	@ (80007b0 <MX_GPIO_Init+0xf0>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006de:	4a34      	ldr	r2, [pc, #208]	@ (80007b0 <MX_GPIO_Init+0xf0>)
 80006e0:	f043 0304 	orr.w	r3, r3, #4
 80006e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e6:	4b32      	ldr	r3, [pc, #200]	@ (80007b0 <MX_GPIO_Init+0xf0>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	f003 0304 	and.w	r3, r3, #4
 80006ee:	613b      	str	r3, [r7, #16]
 80006f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	4b2e      	ldr	r3, [pc, #184]	@ (80007b0 <MX_GPIO_Init+0xf0>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fa:	4a2d      	ldr	r2, [pc, #180]	@ (80007b0 <MX_GPIO_Init+0xf0>)
 80006fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000700:	6313      	str	r3, [r2, #48]	@ 0x30
 8000702:	4b2b      	ldr	r3, [pc, #172]	@ (80007b0 <MX_GPIO_Init+0xf0>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070e:	2300      	movs	r3, #0
 8000710:	60bb      	str	r3, [r7, #8]
 8000712:	4b27      	ldr	r3, [pc, #156]	@ (80007b0 <MX_GPIO_Init+0xf0>)
 8000714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000716:	4a26      	ldr	r2, [pc, #152]	@ (80007b0 <MX_GPIO_Init+0xf0>)
 8000718:	f043 0301 	orr.w	r3, r3, #1
 800071c:	6313      	str	r3, [r2, #48]	@ 0x30
 800071e:	4b24      	ldr	r3, [pc, #144]	@ (80007b0 <MX_GPIO_Init+0xf0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	f003 0301 	and.w	r3, r3, #1
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	4b20      	ldr	r3, [pc, #128]	@ (80007b0 <MX_GPIO_Init+0xf0>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000732:	4a1f      	ldr	r2, [pc, #124]	@ (80007b0 <MX_GPIO_Init+0xf0>)
 8000734:	f043 0302 	orr.w	r3, r3, #2
 8000738:	6313      	str	r3, [r2, #48]	@ 0x30
 800073a:	4b1d      	ldr	r3, [pc, #116]	@ (80007b0 <MX_GPIO_Init+0xf0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	f003 0302 	and.w	r3, r3, #2
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000746:	2200      	movs	r2, #0
 8000748:	2120      	movs	r1, #32
 800074a:	481a      	ldr	r0, [pc, #104]	@ (80007b4 <MX_GPIO_Init+0xf4>)
 800074c:	f000 fb94 	bl	8000e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000750:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000756:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800075a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4619      	mov	r1, r3
 8000766:	4814      	ldr	r0, [pc, #80]	@ (80007b8 <MX_GPIO_Init+0xf8>)
 8000768:	f000 f9f2 	bl	8000b50 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800076c:	230c      	movs	r3, #12
 800076e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000770:	2302      	movs	r3, #2
 8000772:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000778:	2303      	movs	r3, #3
 800077a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800077c:	2307      	movs	r3, #7
 800077e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000780:	f107 0314 	add.w	r3, r7, #20
 8000784:	4619      	mov	r1, r3
 8000786:	480b      	ldr	r0, [pc, #44]	@ (80007b4 <MX_GPIO_Init+0xf4>)
 8000788:	f000 f9e2 	bl	8000b50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800078c:	2320      	movs	r3, #32
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	4804      	ldr	r0, [pc, #16]	@ (80007b4 <MX_GPIO_Init+0xf4>)
 80007a4:	f000 f9d4 	bl	8000b50 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007a8:	bf00      	nop
 80007aa:	3728      	adds	r7, #40	@ 0x28
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	40023800 	.word	0x40023800
 80007b4:	40020000 	.word	0x40020000
 80007b8:	40020800 	.word	0x40020800

080007bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c0:	b672      	cpsid	i
}
 80007c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <Error_Handler+0x8>

080007c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	607b      	str	r3, [r7, #4]
 80007d2:	4b10      	ldr	r3, [pc, #64]	@ (8000814 <HAL_MspInit+0x4c>)
 80007d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007d6:	4a0f      	ldr	r2, [pc, #60]	@ (8000814 <HAL_MspInit+0x4c>)
 80007d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80007dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80007de:	4b0d      	ldr	r3, [pc, #52]	@ (8000814 <HAL_MspInit+0x4c>)
 80007e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	603b      	str	r3, [r7, #0]
 80007ee:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <HAL_MspInit+0x4c>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f2:	4a08      	ldr	r2, [pc, #32]	@ (8000814 <HAL_MspInit+0x4c>)
 80007f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80007fa:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <HAL_MspInit+0x4c>)
 80007fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000802:	603b      	str	r3, [r7, #0]
 8000804:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000806:	2007      	movs	r0, #7
 8000808:	f000 f96e 	bl	8000ae8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080c:	bf00      	nop
 800080e:	3708      	adds	r7, #8
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40023800 	.word	0x40023800

08000818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800081c:	bf00      	nop
 800081e:	e7fd      	b.n	800081c <NMI_Handler+0x4>

08000820 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000824:	bf00      	nop
 8000826:	e7fd      	b.n	8000824 <HardFault_Handler+0x4>

08000828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800082c:	bf00      	nop
 800082e:	e7fd      	b.n	800082c <MemManage_Handler+0x4>

08000830 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000834:	bf00      	nop
 8000836:	e7fd      	b.n	8000834 <BusFault_Handler+0x4>

08000838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <UsageFault_Handler+0x4>

08000840 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
	...

08000850 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000854:	4b06      	ldr	r3, [pc, #24]	@ (8000870 <SystemInit+0x20>)
 8000856:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800085a:	4a05      	ldr	r2, [pc, #20]	@ (8000870 <SystemInit+0x20>)
 800085c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000860:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000864:	bf00      	nop
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000874:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000878:	f7ff ffea 	bl	8000850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800087c:	480c      	ldr	r0, [pc, #48]	@ (80008b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800087e:	490d      	ldr	r1, [pc, #52]	@ (80008b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000880:	4a0d      	ldr	r2, [pc, #52]	@ (80008b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000884:	e002      	b.n	800088c <LoopCopyDataInit>

08000886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088a:	3304      	adds	r3, #4

0800088c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800088c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000890:	d3f9      	bcc.n	8000886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000892:	4a0a      	ldr	r2, [pc, #40]	@ (80008bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000894:	4c0a      	ldr	r4, [pc, #40]	@ (80008c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000898:	e001      	b.n	800089e <LoopFillZerobss>

0800089a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800089c:	3204      	adds	r2, #4

0800089e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a0:	d3fb      	bcc.n	800089a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80008a2:	f002 fa6f 	bl	8002d84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008a6:	f7ff fe93 	bl	80005d0 <main>
  bx  lr    
 80008aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80008ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008b8:	08002e4c 	.word	0x08002e4c
  ldr r2, =_sbss
 80008bc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008c0:	20000690 	.word	0x20000690

080008c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008c4:	e7fe      	b.n	80008c4 <ADC_IRQHandler>
	...

080008c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008cc:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <HAL_Init+0x40>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000908 <HAL_Init+0x40>)
 80008d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000908 <HAL_Init+0x40>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000908 <HAL_Init+0x40>)
 80008de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008e4:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <HAL_Init+0x40>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a07      	ldr	r2, [pc, #28]	@ (8000908 <HAL_Init+0x40>)
 80008ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008f0:	2003      	movs	r0, #3
 80008f2:	f000 f8f9 	bl	8000ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008f6:	2000      	movs	r0, #0
 80008f8:	f000 f808 	bl	800090c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008fc:	f7ff ff64 	bl	80007c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	40023c00 	.word	0x40023c00

0800090c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000914:	4b12      	ldr	r3, [pc, #72]	@ (8000960 <HAL_InitTick+0x54>)
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	4b12      	ldr	r3, [pc, #72]	@ (8000964 <HAL_InitTick+0x58>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	4619      	mov	r1, r3
 800091e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000922:	fbb3 f3f1 	udiv	r3, r3, r1
 8000926:	fbb2 f3f3 	udiv	r3, r2, r3
 800092a:	4618      	mov	r0, r3
 800092c:	f000 f903 	bl	8000b36 <HAL_SYSTICK_Config>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000936:	2301      	movs	r3, #1
 8000938:	e00e      	b.n	8000958 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2b0f      	cmp	r3, #15
 800093e:	d80a      	bhi.n	8000956 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000940:	2200      	movs	r2, #0
 8000942:	6879      	ldr	r1, [r7, #4]
 8000944:	f04f 30ff 	mov.w	r0, #4294967295
 8000948:	f000 f8d9 	bl	8000afe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800094c:	4a06      	ldr	r2, [pc, #24]	@ (8000968 <HAL_InitTick+0x5c>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000952:	2300      	movs	r3, #0
 8000954:	e000      	b.n	8000958 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000956:	2301      	movs	r3, #1
}
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	20000000 	.word	0x20000000
 8000964:	20000008 	.word	0x20000008
 8000968:	20000004 	.word	0x20000004

0800096c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0
  return uwTick;
 8000970:	4b03      	ldr	r3, [pc, #12]	@ (8000980 <HAL_GetTick+0x14>)
 8000972:	681b      	ldr	r3, [r3, #0]
}
 8000974:	4618      	mov	r0, r3
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	20000028 	.word	0x20000028

08000984 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	f003 0307 	and.w	r3, r3, #7
 8000992:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000994:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <__NVIC_SetPriorityGrouping+0x44>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009a0:	4013      	ands	r3, r2
 80009a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009b6:	4a04      	ldr	r2, [pc, #16]	@ (80009c8 <__NVIC_SetPriorityGrouping+0x44>)
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	60d3      	str	r3, [r2, #12]
}
 80009bc:	bf00      	nop
 80009be:	3714      	adds	r7, #20
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	e000ed00 	.word	0xe000ed00

080009cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009d0:	4b04      	ldr	r3, [pc, #16]	@ (80009e4 <__NVIC_GetPriorityGrouping+0x18>)
 80009d2:	68db      	ldr	r3, [r3, #12]
 80009d4:	0a1b      	lsrs	r3, r3, #8
 80009d6:	f003 0307 	and.w	r3, r3, #7
}
 80009da:	4618      	mov	r0, r3
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	4603      	mov	r3, r0
 80009f0:	6039      	str	r1, [r7, #0]
 80009f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	db0a      	blt.n	8000a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009fc:	683b      	ldr	r3, [r7, #0]
 80009fe:	b2da      	uxtb	r2, r3
 8000a00:	490c      	ldr	r1, [pc, #48]	@ (8000a34 <__NVIC_SetPriority+0x4c>)
 8000a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a06:	0112      	lsls	r2, r2, #4
 8000a08:	b2d2      	uxtb	r2, r2
 8000a0a:	440b      	add	r3, r1
 8000a0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a10:	e00a      	b.n	8000a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	4908      	ldr	r1, [pc, #32]	@ (8000a38 <__NVIC_SetPriority+0x50>)
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	f003 030f 	and.w	r3, r3, #15
 8000a1e:	3b04      	subs	r3, #4
 8000a20:	0112      	lsls	r2, r2, #4
 8000a22:	b2d2      	uxtb	r2, r2
 8000a24:	440b      	add	r3, r1
 8000a26:	761a      	strb	r2, [r3, #24]
}
 8000a28:	bf00      	nop
 8000a2a:	370c      	adds	r7, #12
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	e000e100 	.word	0xe000e100
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b089      	sub	sp, #36	@ 0x24
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	60b9      	str	r1, [r7, #8]
 8000a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a50:	69fb      	ldr	r3, [r7, #28]
 8000a52:	f1c3 0307 	rsb	r3, r3, #7
 8000a56:	2b04      	cmp	r3, #4
 8000a58:	bf28      	it	cs
 8000a5a:	2304      	movcs	r3, #4
 8000a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a5e:	69fb      	ldr	r3, [r7, #28]
 8000a60:	3304      	adds	r3, #4
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d902      	bls.n	8000a6c <NVIC_EncodePriority+0x30>
 8000a66:	69fb      	ldr	r3, [r7, #28]
 8000a68:	3b03      	subs	r3, #3
 8000a6a:	e000      	b.n	8000a6e <NVIC_EncodePriority+0x32>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a70:	f04f 32ff 	mov.w	r2, #4294967295
 8000a74:	69bb      	ldr	r3, [r7, #24]
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	43da      	mvns	r2, r3
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	401a      	ands	r2, r3
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a84:	f04f 31ff 	mov.w	r1, #4294967295
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a8e:	43d9      	mvns	r1, r3
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a94:	4313      	orrs	r3, r2
         );
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3724      	adds	r7, #36	@ 0x24
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
	...

08000aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ab4:	d301      	bcc.n	8000aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	e00f      	b.n	8000ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae4 <SysTick_Config+0x40>)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	3b01      	subs	r3, #1
 8000ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ac2:	210f      	movs	r1, #15
 8000ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac8:	f7ff ff8e 	bl	80009e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000acc:	4b05      	ldr	r3, [pc, #20]	@ (8000ae4 <SysTick_Config+0x40>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ad2:	4b04      	ldr	r3, [pc, #16]	@ (8000ae4 <SysTick_Config+0x40>)
 8000ad4:	2207      	movs	r2, #7
 8000ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ad8:	2300      	movs	r3, #0
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	e000e010 	.word	0xe000e010

08000ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b082      	sub	sp, #8
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000af0:	6878      	ldr	r0, [r7, #4]
 8000af2:	f7ff ff47 	bl	8000984 <__NVIC_SetPriorityGrouping>
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b086      	sub	sp, #24
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	4603      	mov	r3, r0
 8000b06:	60b9      	str	r1, [r7, #8]
 8000b08:	607a      	str	r2, [r7, #4]
 8000b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b10:	f7ff ff5c 	bl	80009cc <__NVIC_GetPriorityGrouping>
 8000b14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b16:	687a      	ldr	r2, [r7, #4]
 8000b18:	68b9      	ldr	r1, [r7, #8]
 8000b1a:	6978      	ldr	r0, [r7, #20]
 8000b1c:	f7ff ff8e 	bl	8000a3c <NVIC_EncodePriority>
 8000b20:	4602      	mov	r2, r0
 8000b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b26:	4611      	mov	r1, r2
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f7ff ff5d 	bl	80009e8 <__NVIC_SetPriority>
}
 8000b2e:	bf00      	nop
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f7ff ffb0 	bl	8000aa4 <SysTick_Config>
 8000b44:	4603      	mov	r3, r0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
	...

08000b50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b089      	sub	sp, #36	@ 0x24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
 8000b6a:	e165      	b.n	8000e38 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	697a      	ldr	r2, [r7, #20]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b80:	693a      	ldr	r2, [r7, #16]
 8000b82:	697b      	ldr	r3, [r7, #20]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	f040 8154 	bne.w	8000e32 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	f003 0303 	and.w	r3, r3, #3
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d005      	beq.n	8000ba2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b9e:	2b02      	cmp	r3, #2
 8000ba0:	d130      	bne.n	8000c04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ba8:	69fb      	ldr	r3, [r7, #28]
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	2203      	movs	r2, #3
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	69ba      	ldr	r2, [r7, #24]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	68da      	ldr	r2, [r3, #12]
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	005b      	lsls	r3, r3, #1
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	69ba      	ldr	r2, [r7, #24]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	69ba      	ldr	r2, [r7, #24]
 8000bd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bd8:	2201      	movs	r2, #1
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000be0:	43db      	mvns	r3, r3
 8000be2:	69ba      	ldr	r2, [r7, #24]
 8000be4:	4013      	ands	r3, r2
 8000be6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	091b      	lsrs	r3, r3, #4
 8000bee:	f003 0201 	and.w	r2, r3, #1
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	69ba      	ldr	r2, [r7, #24]
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	69ba      	ldr	r2, [r7, #24]
 8000c02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f003 0303 	and.w	r3, r3, #3
 8000c0c:	2b03      	cmp	r3, #3
 8000c0e:	d017      	beq.n	8000c40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	2203      	movs	r2, #3
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	43db      	mvns	r3, r3
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	4013      	ands	r3, r2
 8000c26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	689a      	ldr	r2, [r3, #8]
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	69ba      	ldr	r2, [r7, #24]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	69ba      	ldr	r2, [r7, #24]
 8000c3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f003 0303 	and.w	r3, r3, #3
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d123      	bne.n	8000c94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	08da      	lsrs	r2, r3, #3
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	3208      	adds	r2, #8
 8000c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	f003 0307 	and.w	r3, r3, #7
 8000c60:	009b      	lsls	r3, r3, #2
 8000c62:	220f      	movs	r2, #15
 8000c64:	fa02 f303 	lsl.w	r3, r2, r3
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	69ba      	ldr	r2, [r7, #24]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	691a      	ldr	r2, [r3, #16]
 8000c74:	69fb      	ldr	r3, [r7, #28]
 8000c76:	f003 0307 	and.w	r3, r3, #7
 8000c7a:	009b      	lsls	r3, r3, #2
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	69ba      	ldr	r2, [r7, #24]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	08da      	lsrs	r2, r3, #3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3208      	adds	r2, #8
 8000c8e:	69b9      	ldr	r1, [r7, #24]
 8000c90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	f003 0203 	and.w	r2, r3, #3
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	005b      	lsls	r3, r3, #1
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	f000 80ae 	beq.w	8000e32 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	4b5d      	ldr	r3, [pc, #372]	@ (8000e50 <HAL_GPIO_Init+0x300>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cde:	4a5c      	ldr	r2, [pc, #368]	@ (8000e50 <HAL_GPIO_Init+0x300>)
 8000ce0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ce4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ce6:	4b5a      	ldr	r3, [pc, #360]	@ (8000e50 <HAL_GPIO_Init+0x300>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cee:	60fb      	str	r3, [r7, #12]
 8000cf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cf2:	4a58      	ldr	r2, [pc, #352]	@ (8000e54 <HAL_GPIO_Init+0x304>)
 8000cf4:	69fb      	ldr	r3, [r7, #28]
 8000cf6:	089b      	lsrs	r3, r3, #2
 8000cf8:	3302      	adds	r3, #2
 8000cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	f003 0303 	and.w	r3, r3, #3
 8000d06:	009b      	lsls	r3, r3, #2
 8000d08:	220f      	movs	r2, #15
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	69ba      	ldr	r2, [r7, #24]
 8000d12:	4013      	ands	r3, r2
 8000d14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4a4f      	ldr	r2, [pc, #316]	@ (8000e58 <HAL_GPIO_Init+0x308>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d025      	beq.n	8000d6a <HAL_GPIO_Init+0x21a>
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	4a4e      	ldr	r2, [pc, #312]	@ (8000e5c <HAL_GPIO_Init+0x30c>)
 8000d22:	4293      	cmp	r3, r2
 8000d24:	d01f      	beq.n	8000d66 <HAL_GPIO_Init+0x216>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4a4d      	ldr	r2, [pc, #308]	@ (8000e60 <HAL_GPIO_Init+0x310>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d019      	beq.n	8000d62 <HAL_GPIO_Init+0x212>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	4a4c      	ldr	r2, [pc, #304]	@ (8000e64 <HAL_GPIO_Init+0x314>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d013      	beq.n	8000d5e <HAL_GPIO_Init+0x20e>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4a4b      	ldr	r2, [pc, #300]	@ (8000e68 <HAL_GPIO_Init+0x318>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d00d      	beq.n	8000d5a <HAL_GPIO_Init+0x20a>
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a4a      	ldr	r2, [pc, #296]	@ (8000e6c <HAL_GPIO_Init+0x31c>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d007      	beq.n	8000d56 <HAL_GPIO_Init+0x206>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a49      	ldr	r2, [pc, #292]	@ (8000e70 <HAL_GPIO_Init+0x320>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d101      	bne.n	8000d52 <HAL_GPIO_Init+0x202>
 8000d4e:	2306      	movs	r3, #6
 8000d50:	e00c      	b.n	8000d6c <HAL_GPIO_Init+0x21c>
 8000d52:	2307      	movs	r3, #7
 8000d54:	e00a      	b.n	8000d6c <HAL_GPIO_Init+0x21c>
 8000d56:	2305      	movs	r3, #5
 8000d58:	e008      	b.n	8000d6c <HAL_GPIO_Init+0x21c>
 8000d5a:	2304      	movs	r3, #4
 8000d5c:	e006      	b.n	8000d6c <HAL_GPIO_Init+0x21c>
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e004      	b.n	8000d6c <HAL_GPIO_Init+0x21c>
 8000d62:	2302      	movs	r3, #2
 8000d64:	e002      	b.n	8000d6c <HAL_GPIO_Init+0x21c>
 8000d66:	2301      	movs	r3, #1
 8000d68:	e000      	b.n	8000d6c <HAL_GPIO_Init+0x21c>
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	69fa      	ldr	r2, [r7, #28]
 8000d6e:	f002 0203 	and.w	r2, r2, #3
 8000d72:	0092      	lsls	r2, r2, #2
 8000d74:	4093      	lsls	r3, r2
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d7c:	4935      	ldr	r1, [pc, #212]	@ (8000e54 <HAL_GPIO_Init+0x304>)
 8000d7e:	69fb      	ldr	r3, [r7, #28]
 8000d80:	089b      	lsrs	r3, r3, #2
 8000d82:	3302      	adds	r3, #2
 8000d84:	69ba      	ldr	r2, [r7, #24]
 8000d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d8a:	4b3a      	ldr	r3, [pc, #232]	@ (8000e74 <HAL_GPIO_Init+0x324>)
 8000d8c:	689b      	ldr	r3, [r3, #8]
 8000d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d003      	beq.n	8000dae <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000dae:	4a31      	ldr	r2, [pc, #196]	@ (8000e74 <HAL_GPIO_Init+0x324>)
 8000db0:	69bb      	ldr	r3, [r7, #24]
 8000db2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000db4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e74 <HAL_GPIO_Init+0x324>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d003      	beq.n	8000dd8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000dd0:	69ba      	ldr	r2, [r7, #24]
 8000dd2:	693b      	ldr	r3, [r7, #16]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dd8:	4a26      	ldr	r2, [pc, #152]	@ (8000e74 <HAL_GPIO_Init+0x324>)
 8000dda:	69bb      	ldr	r3, [r7, #24]
 8000ddc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000dde:	4b25      	ldr	r3, [pc, #148]	@ (8000e74 <HAL_GPIO_Init+0x324>)
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e02:	4a1c      	ldr	r2, [pc, #112]	@ (8000e74 <HAL_GPIO_Init+0x324>)
 8000e04:	69bb      	ldr	r3, [r7, #24]
 8000e06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e08:	4b1a      	ldr	r3, [pc, #104]	@ (8000e74 <HAL_GPIO_Init+0x324>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	43db      	mvns	r3, r3
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	4013      	ands	r3, r2
 8000e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d003      	beq.n	8000e2c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	4313      	orrs	r3, r2
 8000e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e2c:	4a11      	ldr	r2, [pc, #68]	@ (8000e74 <HAL_GPIO_Init+0x324>)
 8000e2e:	69bb      	ldr	r3, [r7, #24]
 8000e30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3301      	adds	r3, #1
 8000e36:	61fb      	str	r3, [r7, #28]
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	2b0f      	cmp	r3, #15
 8000e3c:	f67f ae96 	bls.w	8000b6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e40:	bf00      	nop
 8000e42:	bf00      	nop
 8000e44:	3724      	adds	r7, #36	@ 0x24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40013800 	.word	0x40013800
 8000e58:	40020000 	.word	0x40020000
 8000e5c:	40020400 	.word	0x40020400
 8000e60:	40020800 	.word	0x40020800
 8000e64:	40020c00 	.word	0x40020c00
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40021400 	.word	0x40021400
 8000e70:	40021800 	.word	0x40021800
 8000e74:	40013c00 	.word	0x40013c00

08000e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	460b      	mov	r3, r1
 8000e82:	807b      	strh	r3, [r7, #2]
 8000e84:	4613      	mov	r3, r2
 8000e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e88:	787b      	ldrb	r3, [r7, #1]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e8e:	887a      	ldrh	r2, [r7, #2]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000e94:	e003      	b.n	8000e9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000e96:	887b      	ldrh	r3, [r7, #2]
 8000e98:	041a      	lsls	r2, r3, #16
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	619a      	str	r2, [r3, #24]
}
 8000e9e:	bf00      	nop
 8000ea0:	370c      	adds	r7, #12
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
	...

08000eac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d101      	bne.n	8000ec0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	e0cc      	b.n	800105a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000ec0:	4b68      	ldr	r3, [pc, #416]	@ (8001064 <HAL_RCC_ClockConfig+0x1b8>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	f003 030f 	and.w	r3, r3, #15
 8000ec8:	683a      	ldr	r2, [r7, #0]
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d90c      	bls.n	8000ee8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ece:	4b65      	ldr	r3, [pc, #404]	@ (8001064 <HAL_RCC_ClockConfig+0x1b8>)
 8000ed0:	683a      	ldr	r2, [r7, #0]
 8000ed2:	b2d2      	uxtb	r2, r2
 8000ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000ed6:	4b63      	ldr	r3, [pc, #396]	@ (8001064 <HAL_RCC_ClockConfig+0x1b8>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f003 030f 	and.w	r3, r3, #15
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d001      	beq.n	8000ee8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e0b8      	b.n	800105a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d020      	beq.n	8000f36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 0304 	and.w	r3, r3, #4
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d005      	beq.n	8000f0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f00:	4b59      	ldr	r3, [pc, #356]	@ (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	4a58      	ldr	r2, [pc, #352]	@ (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 8000f06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8000f0a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f003 0308 	and.w	r3, r3, #8
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d005      	beq.n	8000f24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f18:	4b53      	ldr	r3, [pc, #332]	@ (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 8000f1a:	689b      	ldr	r3, [r3, #8]
 8000f1c:	4a52      	ldr	r2, [pc, #328]	@ (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 8000f1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8000f22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f24:	4b50      	ldr	r3, [pc, #320]	@ (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 8000f26:	689b      	ldr	r3, [r3, #8]
 8000f28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	494d      	ldr	r1, [pc, #308]	@ (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 8000f32:	4313      	orrs	r3, r2
 8000f34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d044      	beq.n	8000fcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d107      	bne.n	8000f5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f4a:	4b47      	ldr	r3, [pc, #284]	@ (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d119      	bne.n	8000f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e07f      	b.n	800105a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d003      	beq.n	8000f6a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f66:	2b03      	cmp	r3, #3
 8000f68:	d107      	bne.n	8000f7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f6a:	4b3f      	ldr	r3, [pc, #252]	@ (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d109      	bne.n	8000f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e06f      	b.n	800105a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f7a:	4b3b      	ldr	r3, [pc, #236]	@ (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d101      	bne.n	8000f8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
 8000f88:	e067      	b.n	800105a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f8a:	4b37      	ldr	r3, [pc, #220]	@ (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f023 0203 	bic.w	r2, r3, #3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	685b      	ldr	r3, [r3, #4]
 8000f96:	4934      	ldr	r1, [pc, #208]	@ (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000f9c:	f7ff fce6 	bl	800096c <HAL_GetTick>
 8000fa0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fa2:	e00a      	b.n	8000fba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000fa4:	f7ff fce2 	bl	800096c <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d901      	bls.n	8000fba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8000fb6:	2303      	movs	r3, #3
 8000fb8:	e04f      	b.n	800105a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000fba:	4b2b      	ldr	r3, [pc, #172]	@ (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	f003 020c 	and.w	r2, r3, #12
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d1eb      	bne.n	8000fa4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000fcc:	4b25      	ldr	r3, [pc, #148]	@ (8001064 <HAL_RCC_ClockConfig+0x1b8>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f003 030f 	and.w	r3, r3, #15
 8000fd4:	683a      	ldr	r2, [r7, #0]
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d20c      	bcs.n	8000ff4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000fda:	4b22      	ldr	r3, [pc, #136]	@ (8001064 <HAL_RCC_ClockConfig+0x1b8>)
 8000fdc:	683a      	ldr	r2, [r7, #0]
 8000fde:	b2d2      	uxtb	r2, r2
 8000fe0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fe2:	4b20      	ldr	r3, [pc, #128]	@ (8001064 <HAL_RCC_ClockConfig+0x1b8>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f003 030f 	and.w	r3, r3, #15
 8000fea:	683a      	ldr	r2, [r7, #0]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	d001      	beq.n	8000ff4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e032      	b.n	800105a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f003 0304 	and.w	r3, r3, #4
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d008      	beq.n	8001012 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001000:	4b19      	ldr	r3, [pc, #100]	@ (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	4916      	ldr	r1, [pc, #88]	@ (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 800100e:	4313      	orrs	r3, r2
 8001010:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0308 	and.w	r3, r3, #8
 800101a:	2b00      	cmp	r3, #0
 800101c:	d009      	beq.n	8001032 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800101e:	4b12      	ldr	r3, [pc, #72]	@ (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 8001020:	689b      	ldr	r3, [r3, #8]
 8001022:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	490e      	ldr	r1, [pc, #56]	@ (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 800102e:	4313      	orrs	r3, r2
 8001030:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001032:	f000 f821 	bl	8001078 <HAL_RCC_GetSysClockFreq>
 8001036:	4602      	mov	r2, r0
 8001038:	4b0b      	ldr	r3, [pc, #44]	@ (8001068 <HAL_RCC_ClockConfig+0x1bc>)
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	091b      	lsrs	r3, r3, #4
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	490a      	ldr	r1, [pc, #40]	@ (800106c <HAL_RCC_ClockConfig+0x1c0>)
 8001044:	5ccb      	ldrb	r3, [r1, r3]
 8001046:	fa22 f303 	lsr.w	r3, r2, r3
 800104a:	4a09      	ldr	r2, [pc, #36]	@ (8001070 <HAL_RCC_ClockConfig+0x1c4>)
 800104c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800104e:	4b09      	ldr	r3, [pc, #36]	@ (8001074 <HAL_RCC_ClockConfig+0x1c8>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4618      	mov	r0, r3
 8001054:	f7ff fc5a 	bl	800090c <HAL_InitTick>

  return HAL_OK;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40023c00 	.word	0x40023c00
 8001068:	40023800 	.word	0x40023800
 800106c:	08002e0c 	.word	0x08002e0c
 8001070:	20000000 	.word	0x20000000
 8001074:	20000004 	.word	0x20000004

08001078 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800107c:	b0ae      	sub	sp, #184	@ 0xb8
 800107e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001080:	2300      	movs	r3, #0
 8001082:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001086:	2300      	movs	r3, #0
 8001088:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800108c:	2300      	movs	r3, #0
 800108e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001092:	2300      	movs	r3, #0
 8001094:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001098:	2300      	movs	r3, #0
 800109a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800109e:	4bcb      	ldr	r3, [pc, #812]	@ (80013cc <HAL_RCC_GetSysClockFreq+0x354>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f003 030c 	and.w	r3, r3, #12
 80010a6:	2b0c      	cmp	r3, #12
 80010a8:	f200 8206 	bhi.w	80014b8 <HAL_RCC_GetSysClockFreq+0x440>
 80010ac:	a201      	add	r2, pc, #4	@ (adr r2, 80010b4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80010ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b2:	bf00      	nop
 80010b4:	080010e9 	.word	0x080010e9
 80010b8:	080014b9 	.word	0x080014b9
 80010bc:	080014b9 	.word	0x080014b9
 80010c0:	080014b9 	.word	0x080014b9
 80010c4:	080010f1 	.word	0x080010f1
 80010c8:	080014b9 	.word	0x080014b9
 80010cc:	080014b9 	.word	0x080014b9
 80010d0:	080014b9 	.word	0x080014b9
 80010d4:	080010f9 	.word	0x080010f9
 80010d8:	080014b9 	.word	0x080014b9
 80010dc:	080014b9 	.word	0x080014b9
 80010e0:	080014b9 	.word	0x080014b9
 80010e4:	080012e9 	.word	0x080012e9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80010e8:	4bb9      	ldr	r3, [pc, #740]	@ (80013d0 <HAL_RCC_GetSysClockFreq+0x358>)
 80010ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80010ee:	e1e7      	b.n	80014c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80010f0:	4bb8      	ldr	r3, [pc, #736]	@ (80013d4 <HAL_RCC_GetSysClockFreq+0x35c>)
 80010f2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80010f6:	e1e3      	b.n	80014c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80010f8:	4bb4      	ldr	r3, [pc, #720]	@ (80013cc <HAL_RCC_GetSysClockFreq+0x354>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001100:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001104:	4bb1      	ldr	r3, [pc, #708]	@ (80013cc <HAL_RCC_GetSysClockFreq+0x354>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800110c:	2b00      	cmp	r3, #0
 800110e:	d071      	beq.n	80011f4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001110:	4bae      	ldr	r3, [pc, #696]	@ (80013cc <HAL_RCC_GetSysClockFreq+0x354>)
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	099b      	lsrs	r3, r3, #6
 8001116:	2200      	movs	r2, #0
 8001118:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800111c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001120:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001128:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800112c:	2300      	movs	r3, #0
 800112e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001132:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001136:	4622      	mov	r2, r4
 8001138:	462b      	mov	r3, r5
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	f04f 0100 	mov.w	r1, #0
 8001142:	0159      	lsls	r1, r3, #5
 8001144:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001148:	0150      	lsls	r0, r2, #5
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4621      	mov	r1, r4
 8001150:	1a51      	subs	r1, r2, r1
 8001152:	6439      	str	r1, [r7, #64]	@ 0x40
 8001154:	4629      	mov	r1, r5
 8001156:	eb63 0301 	sbc.w	r3, r3, r1
 800115a:	647b      	str	r3, [r7, #68]	@ 0x44
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	f04f 0300 	mov.w	r3, #0
 8001164:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001168:	4649      	mov	r1, r9
 800116a:	018b      	lsls	r3, r1, #6
 800116c:	4641      	mov	r1, r8
 800116e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001172:	4641      	mov	r1, r8
 8001174:	018a      	lsls	r2, r1, #6
 8001176:	4641      	mov	r1, r8
 8001178:	1a51      	subs	r1, r2, r1
 800117a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800117c:	4649      	mov	r1, r9
 800117e:	eb63 0301 	sbc.w	r3, r3, r1
 8001182:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	f04f 0300 	mov.w	r3, #0
 800118c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001190:	4649      	mov	r1, r9
 8001192:	00cb      	lsls	r3, r1, #3
 8001194:	4641      	mov	r1, r8
 8001196:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800119a:	4641      	mov	r1, r8
 800119c:	00ca      	lsls	r2, r1, #3
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	4603      	mov	r3, r0
 80011a4:	4622      	mov	r2, r4
 80011a6:	189b      	adds	r3, r3, r2
 80011a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80011aa:	462b      	mov	r3, r5
 80011ac:	460a      	mov	r2, r1
 80011ae:	eb42 0303 	adc.w	r3, r2, r3
 80011b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80011b4:	f04f 0200 	mov.w	r2, #0
 80011b8:	f04f 0300 	mov.w	r3, #0
 80011bc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80011c0:	4629      	mov	r1, r5
 80011c2:	024b      	lsls	r3, r1, #9
 80011c4:	4621      	mov	r1, r4
 80011c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80011ca:	4621      	mov	r1, r4
 80011cc:	024a      	lsls	r2, r1, #9
 80011ce:	4610      	mov	r0, r2
 80011d0:	4619      	mov	r1, r3
 80011d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80011d6:	2200      	movs	r2, #0
 80011d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80011dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80011e0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80011e4:	f7ff f85e 	bl	80002a4 <__aeabi_uldivmod>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4613      	mov	r3, r2
 80011ee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80011f2:	e067      	b.n	80012c4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80011f4:	4b75      	ldr	r3, [pc, #468]	@ (80013cc <HAL_RCC_GetSysClockFreq+0x354>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	099b      	lsrs	r3, r3, #6
 80011fa:	2200      	movs	r2, #0
 80011fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001200:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001204:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800120c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800120e:	2300      	movs	r3, #0
 8001210:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001212:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001216:	4622      	mov	r2, r4
 8001218:	462b      	mov	r3, r5
 800121a:	f04f 0000 	mov.w	r0, #0
 800121e:	f04f 0100 	mov.w	r1, #0
 8001222:	0159      	lsls	r1, r3, #5
 8001224:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001228:	0150      	lsls	r0, r2, #5
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	4621      	mov	r1, r4
 8001230:	1a51      	subs	r1, r2, r1
 8001232:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001234:	4629      	mov	r1, r5
 8001236:	eb63 0301 	sbc.w	r3, r3, r1
 800123a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800123c:	f04f 0200 	mov.w	r2, #0
 8001240:	f04f 0300 	mov.w	r3, #0
 8001244:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001248:	4649      	mov	r1, r9
 800124a:	018b      	lsls	r3, r1, #6
 800124c:	4641      	mov	r1, r8
 800124e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001252:	4641      	mov	r1, r8
 8001254:	018a      	lsls	r2, r1, #6
 8001256:	4641      	mov	r1, r8
 8001258:	ebb2 0a01 	subs.w	sl, r2, r1
 800125c:	4649      	mov	r1, r9
 800125e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001262:	f04f 0200 	mov.w	r2, #0
 8001266:	f04f 0300 	mov.w	r3, #0
 800126a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800126e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001272:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001276:	4692      	mov	sl, r2
 8001278:	469b      	mov	fp, r3
 800127a:	4623      	mov	r3, r4
 800127c:	eb1a 0303 	adds.w	r3, sl, r3
 8001280:	623b      	str	r3, [r7, #32]
 8001282:	462b      	mov	r3, r5
 8001284:	eb4b 0303 	adc.w	r3, fp, r3
 8001288:	627b      	str	r3, [r7, #36]	@ 0x24
 800128a:	f04f 0200 	mov.w	r2, #0
 800128e:	f04f 0300 	mov.w	r3, #0
 8001292:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001296:	4629      	mov	r1, r5
 8001298:	028b      	lsls	r3, r1, #10
 800129a:	4621      	mov	r1, r4
 800129c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80012a0:	4621      	mov	r1, r4
 80012a2:	028a      	lsls	r2, r1, #10
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80012ac:	2200      	movs	r2, #0
 80012ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80012b0:	677a      	str	r2, [r7, #116]	@ 0x74
 80012b2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80012b6:	f7fe fff5 	bl	80002a4 <__aeabi_uldivmod>
 80012ba:	4602      	mov	r2, r0
 80012bc:	460b      	mov	r3, r1
 80012be:	4613      	mov	r3, r2
 80012c0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80012c4:	4b41      	ldr	r3, [pc, #260]	@ (80013cc <HAL_RCC_GetSysClockFreq+0x354>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	0c1b      	lsrs	r3, r3, #16
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	3301      	adds	r3, #1
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80012d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80012da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80012de:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80012e6:	e0eb      	b.n	80014c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012e8:	4b38      	ldr	r3, [pc, #224]	@ (80013cc <HAL_RCC_GetSysClockFreq+0x354>)
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80012f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012f4:	4b35      	ldr	r3, [pc, #212]	@ (80013cc <HAL_RCC_GetSysClockFreq+0x354>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d06b      	beq.n	80013d8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001300:	4b32      	ldr	r3, [pc, #200]	@ (80013cc <HAL_RCC_GetSysClockFreq+0x354>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	099b      	lsrs	r3, r3, #6
 8001306:	2200      	movs	r2, #0
 8001308:	66bb      	str	r3, [r7, #104]	@ 0x68
 800130a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800130c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800130e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001312:	663b      	str	r3, [r7, #96]	@ 0x60
 8001314:	2300      	movs	r3, #0
 8001316:	667b      	str	r3, [r7, #100]	@ 0x64
 8001318:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800131c:	4622      	mov	r2, r4
 800131e:	462b      	mov	r3, r5
 8001320:	f04f 0000 	mov.w	r0, #0
 8001324:	f04f 0100 	mov.w	r1, #0
 8001328:	0159      	lsls	r1, r3, #5
 800132a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800132e:	0150      	lsls	r0, r2, #5
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4621      	mov	r1, r4
 8001336:	1a51      	subs	r1, r2, r1
 8001338:	61b9      	str	r1, [r7, #24]
 800133a:	4629      	mov	r1, r5
 800133c:	eb63 0301 	sbc.w	r3, r3, r1
 8001340:	61fb      	str	r3, [r7, #28]
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	f04f 0300 	mov.w	r3, #0
 800134a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800134e:	4659      	mov	r1, fp
 8001350:	018b      	lsls	r3, r1, #6
 8001352:	4651      	mov	r1, sl
 8001354:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001358:	4651      	mov	r1, sl
 800135a:	018a      	lsls	r2, r1, #6
 800135c:	4651      	mov	r1, sl
 800135e:	ebb2 0801 	subs.w	r8, r2, r1
 8001362:	4659      	mov	r1, fp
 8001364:	eb63 0901 	sbc.w	r9, r3, r1
 8001368:	f04f 0200 	mov.w	r2, #0
 800136c:	f04f 0300 	mov.w	r3, #0
 8001370:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001374:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001378:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800137c:	4690      	mov	r8, r2
 800137e:	4699      	mov	r9, r3
 8001380:	4623      	mov	r3, r4
 8001382:	eb18 0303 	adds.w	r3, r8, r3
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	462b      	mov	r3, r5
 800138a:	eb49 0303 	adc.w	r3, r9, r3
 800138e:	617b      	str	r3, [r7, #20]
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800139c:	4629      	mov	r1, r5
 800139e:	024b      	lsls	r3, r1, #9
 80013a0:	4621      	mov	r1, r4
 80013a2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80013a6:	4621      	mov	r1, r4
 80013a8:	024a      	lsls	r2, r1, #9
 80013aa:	4610      	mov	r0, r2
 80013ac:	4619      	mov	r1, r3
 80013ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80013b2:	2200      	movs	r2, #0
 80013b4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80013b6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80013b8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80013bc:	f7fe ff72 	bl	80002a4 <__aeabi_uldivmod>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4613      	mov	r3, r2
 80013c6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80013ca:	e065      	b.n	8001498 <HAL_RCC_GetSysClockFreq+0x420>
 80013cc:	40023800 	.word	0x40023800
 80013d0:	00f42400 	.word	0x00f42400
 80013d4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013d8:	4b3d      	ldr	r3, [pc, #244]	@ (80014d0 <HAL_RCC_GetSysClockFreq+0x458>)
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	099b      	lsrs	r3, r3, #6
 80013de:	2200      	movs	r2, #0
 80013e0:	4618      	mov	r0, r3
 80013e2:	4611      	mov	r1, r2
 80013e4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80013e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80013ea:	2300      	movs	r3, #0
 80013ec:	657b      	str	r3, [r7, #84]	@ 0x54
 80013ee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80013f2:	4642      	mov	r2, r8
 80013f4:	464b      	mov	r3, r9
 80013f6:	f04f 0000 	mov.w	r0, #0
 80013fa:	f04f 0100 	mov.w	r1, #0
 80013fe:	0159      	lsls	r1, r3, #5
 8001400:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001404:	0150      	lsls	r0, r2, #5
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4641      	mov	r1, r8
 800140c:	1a51      	subs	r1, r2, r1
 800140e:	60b9      	str	r1, [r7, #8]
 8001410:	4649      	mov	r1, r9
 8001412:	eb63 0301 	sbc.w	r3, r3, r1
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	f04f 0200 	mov.w	r2, #0
 800141c:	f04f 0300 	mov.w	r3, #0
 8001420:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001424:	4659      	mov	r1, fp
 8001426:	018b      	lsls	r3, r1, #6
 8001428:	4651      	mov	r1, sl
 800142a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800142e:	4651      	mov	r1, sl
 8001430:	018a      	lsls	r2, r1, #6
 8001432:	4651      	mov	r1, sl
 8001434:	1a54      	subs	r4, r2, r1
 8001436:	4659      	mov	r1, fp
 8001438:	eb63 0501 	sbc.w	r5, r3, r1
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	f04f 0300 	mov.w	r3, #0
 8001444:	00eb      	lsls	r3, r5, #3
 8001446:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800144a:	00e2      	lsls	r2, r4, #3
 800144c:	4614      	mov	r4, r2
 800144e:	461d      	mov	r5, r3
 8001450:	4643      	mov	r3, r8
 8001452:	18e3      	adds	r3, r4, r3
 8001454:	603b      	str	r3, [r7, #0]
 8001456:	464b      	mov	r3, r9
 8001458:	eb45 0303 	adc.w	r3, r5, r3
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	e9d7 4500 	ldrd	r4, r5, [r7]
 800146a:	4629      	mov	r1, r5
 800146c:	028b      	lsls	r3, r1, #10
 800146e:	4621      	mov	r1, r4
 8001470:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001474:	4621      	mov	r1, r4
 8001476:	028a      	lsls	r2, r1, #10
 8001478:	4610      	mov	r0, r2
 800147a:	4619      	mov	r1, r3
 800147c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001480:	2200      	movs	r2, #0
 8001482:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001484:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001486:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800148a:	f7fe ff0b 	bl	80002a4 <__aeabi_uldivmod>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4613      	mov	r3, r2
 8001494:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001498:	4b0d      	ldr	r3, [pc, #52]	@ (80014d0 <HAL_RCC_GetSysClockFreq+0x458>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	0f1b      	lsrs	r3, r3, #28
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80014a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80014aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80014ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80014b6:	e003      	b.n	80014c0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80014b8:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80014ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80014be:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	37b8      	adds	r7, #184	@ 0xb8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014ce:	bf00      	nop
 80014d0:	40023800 	.word	0x40023800
 80014d4:	00f42400 	.word	0x00f42400

080014d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e28d      	b.n	8001a06 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f000 8083 	beq.w	80015fe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80014f8:	4b94      	ldr	r3, [pc, #592]	@ (800174c <HAL_RCC_OscConfig+0x274>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 030c 	and.w	r3, r3, #12
 8001500:	2b04      	cmp	r3, #4
 8001502:	d019      	beq.n	8001538 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001504:	4b91      	ldr	r3, [pc, #580]	@ (800174c <HAL_RCC_OscConfig+0x274>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	f003 030c 	and.w	r3, r3, #12
        || \
 800150c:	2b08      	cmp	r3, #8
 800150e:	d106      	bne.n	800151e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001510:	4b8e      	ldr	r3, [pc, #568]	@ (800174c <HAL_RCC_OscConfig+0x274>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001518:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800151c:	d00c      	beq.n	8001538 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800151e:	4b8b      	ldr	r3, [pc, #556]	@ (800174c <HAL_RCC_OscConfig+0x274>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001526:	2b0c      	cmp	r3, #12
 8001528:	d112      	bne.n	8001550 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800152a:	4b88      	ldr	r3, [pc, #544]	@ (800174c <HAL_RCC_OscConfig+0x274>)
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001532:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001536:	d10b      	bne.n	8001550 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001538:	4b84      	ldr	r3, [pc, #528]	@ (800174c <HAL_RCC_OscConfig+0x274>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d05b      	beq.n	80015fc <HAL_RCC_OscConfig+0x124>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d157      	bne.n	80015fc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e25a      	b.n	8001a06 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001558:	d106      	bne.n	8001568 <HAL_RCC_OscConfig+0x90>
 800155a:	4b7c      	ldr	r3, [pc, #496]	@ (800174c <HAL_RCC_OscConfig+0x274>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a7b      	ldr	r2, [pc, #492]	@ (800174c <HAL_RCC_OscConfig+0x274>)
 8001560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	e01d      	b.n	80015a4 <HAL_RCC_OscConfig+0xcc>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001570:	d10c      	bne.n	800158c <HAL_RCC_OscConfig+0xb4>
 8001572:	4b76      	ldr	r3, [pc, #472]	@ (800174c <HAL_RCC_OscConfig+0x274>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a75      	ldr	r2, [pc, #468]	@ (800174c <HAL_RCC_OscConfig+0x274>)
 8001578:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800157c:	6013      	str	r3, [r2, #0]
 800157e:	4b73      	ldr	r3, [pc, #460]	@ (800174c <HAL_RCC_OscConfig+0x274>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a72      	ldr	r2, [pc, #456]	@ (800174c <HAL_RCC_OscConfig+0x274>)
 8001584:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	e00b      	b.n	80015a4 <HAL_RCC_OscConfig+0xcc>
 800158c:	4b6f      	ldr	r3, [pc, #444]	@ (800174c <HAL_RCC_OscConfig+0x274>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a6e      	ldr	r2, [pc, #440]	@ (800174c <HAL_RCC_OscConfig+0x274>)
 8001592:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	4b6c      	ldr	r3, [pc, #432]	@ (800174c <HAL_RCC_OscConfig+0x274>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a6b      	ldr	r2, [pc, #428]	@ (800174c <HAL_RCC_OscConfig+0x274>)
 800159e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d013      	beq.n	80015d4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ac:	f7ff f9de 	bl	800096c <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015b4:	f7ff f9da 	bl	800096c <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b64      	cmp	r3, #100	@ 0x64
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e21f      	b.n	8001a06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015c6:	4b61      	ldr	r3, [pc, #388]	@ (800174c <HAL_RCC_OscConfig+0x274>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0f0      	beq.n	80015b4 <HAL_RCC_OscConfig+0xdc>
 80015d2:	e014      	b.n	80015fe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d4:	f7ff f9ca 	bl	800096c <HAL_GetTick>
 80015d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015da:	e008      	b.n	80015ee <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015dc:	f7ff f9c6 	bl	800096c <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	2b64      	cmp	r3, #100	@ 0x64
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e20b      	b.n	8001a06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015ee:	4b57      	ldr	r3, [pc, #348]	@ (800174c <HAL_RCC_OscConfig+0x274>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1f0      	bne.n	80015dc <HAL_RCC_OscConfig+0x104>
 80015fa:	e000      	b.n	80015fe <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d06f      	beq.n	80016ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800160a:	4b50      	ldr	r3, [pc, #320]	@ (800174c <HAL_RCC_OscConfig+0x274>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 030c 	and.w	r3, r3, #12
 8001612:	2b00      	cmp	r3, #0
 8001614:	d017      	beq.n	8001646 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001616:	4b4d      	ldr	r3, [pc, #308]	@ (800174c <HAL_RCC_OscConfig+0x274>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 030c 	and.w	r3, r3, #12
        || \
 800161e:	2b08      	cmp	r3, #8
 8001620:	d105      	bne.n	800162e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001622:	4b4a      	ldr	r3, [pc, #296]	@ (800174c <HAL_RCC_OscConfig+0x274>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800162a:	2b00      	cmp	r3, #0
 800162c:	d00b      	beq.n	8001646 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800162e:	4b47      	ldr	r3, [pc, #284]	@ (800174c <HAL_RCC_OscConfig+0x274>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001636:	2b0c      	cmp	r3, #12
 8001638:	d11c      	bne.n	8001674 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800163a:	4b44      	ldr	r3, [pc, #272]	@ (800174c <HAL_RCC_OscConfig+0x274>)
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d116      	bne.n	8001674 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001646:	4b41      	ldr	r3, [pc, #260]	@ (800174c <HAL_RCC_OscConfig+0x274>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d005      	beq.n	800165e <HAL_RCC_OscConfig+0x186>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68db      	ldr	r3, [r3, #12]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d001      	beq.n	800165e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e1d3      	b.n	8001a06 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165e:	4b3b      	ldr	r3, [pc, #236]	@ (800174c <HAL_RCC_OscConfig+0x274>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	4937      	ldr	r1, [pc, #220]	@ (800174c <HAL_RCC_OscConfig+0x274>)
 800166e:	4313      	orrs	r3, r2
 8001670:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001672:	e03a      	b.n	80016ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	68db      	ldr	r3, [r3, #12]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d020      	beq.n	80016be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800167c:	4b34      	ldr	r3, [pc, #208]	@ (8001750 <HAL_RCC_OscConfig+0x278>)
 800167e:	2201      	movs	r2, #1
 8001680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001682:	f7ff f973 	bl	800096c <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800168a:	f7ff f96f 	bl	800096c <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e1b4      	b.n	8001a06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800169c:	4b2b      	ldr	r3, [pc, #172]	@ (800174c <HAL_RCC_OscConfig+0x274>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0f0      	beq.n	800168a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a8:	4b28      	ldr	r3, [pc, #160]	@ (800174c <HAL_RCC_OscConfig+0x274>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	691b      	ldr	r3, [r3, #16]
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	4925      	ldr	r1, [pc, #148]	@ (800174c <HAL_RCC_OscConfig+0x274>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	600b      	str	r3, [r1, #0]
 80016bc:	e015      	b.n	80016ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016be:	4b24      	ldr	r3, [pc, #144]	@ (8001750 <HAL_RCC_OscConfig+0x278>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c4:	f7ff f952 	bl	800096c <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016ca:	e008      	b.n	80016de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016cc:	f7ff f94e 	bl	800096c <HAL_GetTick>
 80016d0:	4602      	mov	r2, r0
 80016d2:	693b      	ldr	r3, [r7, #16]
 80016d4:	1ad3      	subs	r3, r2, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d901      	bls.n	80016de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80016da:	2303      	movs	r3, #3
 80016dc:	e193      	b.n	8001a06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016de:	4b1b      	ldr	r3, [pc, #108]	@ (800174c <HAL_RCC_OscConfig+0x274>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1f0      	bne.n	80016cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d036      	beq.n	8001764 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	695b      	ldr	r3, [r3, #20]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d016      	beq.n	800172c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016fe:	4b15      	ldr	r3, [pc, #84]	@ (8001754 <HAL_RCC_OscConfig+0x27c>)
 8001700:	2201      	movs	r2, #1
 8001702:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001704:	f7ff f932 	bl	800096c <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800170c:	f7ff f92e 	bl	800096c <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e173      	b.n	8001a06 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800171e:	4b0b      	ldr	r3, [pc, #44]	@ (800174c <HAL_RCC_OscConfig+0x274>)
 8001720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0x234>
 800172a:	e01b      	b.n	8001764 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800172c:	4b09      	ldr	r3, [pc, #36]	@ (8001754 <HAL_RCC_OscConfig+0x27c>)
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001732:	f7ff f91b 	bl	800096c <HAL_GetTick>
 8001736:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001738:	e00e      	b.n	8001758 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800173a:	f7ff f917 	bl	800096c <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b02      	cmp	r3, #2
 8001746:	d907      	bls.n	8001758 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e15c      	b.n	8001a06 <HAL_RCC_OscConfig+0x52e>
 800174c:	40023800 	.word	0x40023800
 8001750:	42470000 	.word	0x42470000
 8001754:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001758:	4b8a      	ldr	r3, [pc, #552]	@ (8001984 <HAL_RCC_OscConfig+0x4ac>)
 800175a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1ea      	bne.n	800173a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	2b00      	cmp	r3, #0
 800176e:	f000 8097 	beq.w	80018a0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001772:	2300      	movs	r3, #0
 8001774:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001776:	4b83      	ldr	r3, [pc, #524]	@ (8001984 <HAL_RCC_OscConfig+0x4ac>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d10f      	bne.n	80017a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	4b7f      	ldr	r3, [pc, #508]	@ (8001984 <HAL_RCC_OscConfig+0x4ac>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	4a7e      	ldr	r2, [pc, #504]	@ (8001984 <HAL_RCC_OscConfig+0x4ac>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001790:	6413      	str	r3, [r2, #64]	@ 0x40
 8001792:	4b7c      	ldr	r3, [pc, #496]	@ (8001984 <HAL_RCC_OscConfig+0x4ac>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800179e:	2301      	movs	r3, #1
 80017a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a2:	4b79      	ldr	r3, [pc, #484]	@ (8001988 <HAL_RCC_OscConfig+0x4b0>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d118      	bne.n	80017e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ae:	4b76      	ldr	r3, [pc, #472]	@ (8001988 <HAL_RCC_OscConfig+0x4b0>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a75      	ldr	r2, [pc, #468]	@ (8001988 <HAL_RCC_OscConfig+0x4b0>)
 80017b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ba:	f7ff f8d7 	bl	800096c <HAL_GetTick>
 80017be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017c2:	f7ff f8d3 	bl	800096c <HAL_GetTick>
 80017c6:	4602      	mov	r2, r0
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e118      	b.n	8001a06 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d4:	4b6c      	ldr	r3, [pc, #432]	@ (8001988 <HAL_RCC_OscConfig+0x4b0>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d0f0      	beq.n	80017c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d106      	bne.n	80017f6 <HAL_RCC_OscConfig+0x31e>
 80017e8:	4b66      	ldr	r3, [pc, #408]	@ (8001984 <HAL_RCC_OscConfig+0x4ac>)
 80017ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017ec:	4a65      	ldr	r2, [pc, #404]	@ (8001984 <HAL_RCC_OscConfig+0x4ac>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80017f4:	e01c      	b.n	8001830 <HAL_RCC_OscConfig+0x358>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	2b05      	cmp	r3, #5
 80017fc:	d10c      	bne.n	8001818 <HAL_RCC_OscConfig+0x340>
 80017fe:	4b61      	ldr	r3, [pc, #388]	@ (8001984 <HAL_RCC_OscConfig+0x4ac>)
 8001800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001802:	4a60      	ldr	r2, [pc, #384]	@ (8001984 <HAL_RCC_OscConfig+0x4ac>)
 8001804:	f043 0304 	orr.w	r3, r3, #4
 8001808:	6713      	str	r3, [r2, #112]	@ 0x70
 800180a:	4b5e      	ldr	r3, [pc, #376]	@ (8001984 <HAL_RCC_OscConfig+0x4ac>)
 800180c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800180e:	4a5d      	ldr	r2, [pc, #372]	@ (8001984 <HAL_RCC_OscConfig+0x4ac>)
 8001810:	f043 0301 	orr.w	r3, r3, #1
 8001814:	6713      	str	r3, [r2, #112]	@ 0x70
 8001816:	e00b      	b.n	8001830 <HAL_RCC_OscConfig+0x358>
 8001818:	4b5a      	ldr	r3, [pc, #360]	@ (8001984 <HAL_RCC_OscConfig+0x4ac>)
 800181a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800181c:	4a59      	ldr	r2, [pc, #356]	@ (8001984 <HAL_RCC_OscConfig+0x4ac>)
 800181e:	f023 0301 	bic.w	r3, r3, #1
 8001822:	6713      	str	r3, [r2, #112]	@ 0x70
 8001824:	4b57      	ldr	r3, [pc, #348]	@ (8001984 <HAL_RCC_OscConfig+0x4ac>)
 8001826:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001828:	4a56      	ldr	r2, [pc, #344]	@ (8001984 <HAL_RCC_OscConfig+0x4ac>)
 800182a:	f023 0304 	bic.w	r3, r3, #4
 800182e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d015      	beq.n	8001864 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001838:	f7ff f898 	bl	800096c <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800183e:	e00a      	b.n	8001856 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001840:	f7ff f894 	bl	800096c <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800184e:	4293      	cmp	r3, r2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e0d7      	b.n	8001a06 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001856:	4b4b      	ldr	r3, [pc, #300]	@ (8001984 <HAL_RCC_OscConfig+0x4ac>)
 8001858:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d0ee      	beq.n	8001840 <HAL_RCC_OscConfig+0x368>
 8001862:	e014      	b.n	800188e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001864:	f7ff f882 	bl	800096c <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800186a:	e00a      	b.n	8001882 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800186c:	f7ff f87e 	bl	800096c <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	f241 3288 	movw	r2, #5000	@ 0x1388
 800187a:	4293      	cmp	r3, r2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e0c1      	b.n	8001a06 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001882:	4b40      	ldr	r3, [pc, #256]	@ (8001984 <HAL_RCC_OscConfig+0x4ac>)
 8001884:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001886:	f003 0302 	and.w	r3, r3, #2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1ee      	bne.n	800186c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800188e:	7dfb      	ldrb	r3, [r7, #23]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d105      	bne.n	80018a0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001894:	4b3b      	ldr	r3, [pc, #236]	@ (8001984 <HAL_RCC_OscConfig+0x4ac>)
 8001896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001898:	4a3a      	ldr	r2, [pc, #232]	@ (8001984 <HAL_RCC_OscConfig+0x4ac>)
 800189a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800189e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	699b      	ldr	r3, [r3, #24]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 80ad 	beq.w	8001a04 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018aa:	4b36      	ldr	r3, [pc, #216]	@ (8001984 <HAL_RCC_OscConfig+0x4ac>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f003 030c 	and.w	r3, r3, #12
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d060      	beq.n	8001978 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	699b      	ldr	r3, [r3, #24]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d145      	bne.n	800194a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018be:	4b33      	ldr	r3, [pc, #204]	@ (800198c <HAL_RCC_OscConfig+0x4b4>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c4:	f7ff f852 	bl	800096c <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018cc:	f7ff f84e 	bl	800096c <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e093      	b.n	8001a06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018de:	4b29      	ldr	r3, [pc, #164]	@ (8001984 <HAL_RCC_OscConfig+0x4ac>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d1f0      	bne.n	80018cc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69da      	ldr	r2, [r3, #28]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	431a      	orrs	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f8:	019b      	lsls	r3, r3, #6
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001900:	085b      	lsrs	r3, r3, #1
 8001902:	3b01      	subs	r3, #1
 8001904:	041b      	lsls	r3, r3, #16
 8001906:	431a      	orrs	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190c:	061b      	lsls	r3, r3, #24
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001914:	071b      	lsls	r3, r3, #28
 8001916:	491b      	ldr	r1, [pc, #108]	@ (8001984 <HAL_RCC_OscConfig+0x4ac>)
 8001918:	4313      	orrs	r3, r2
 800191a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800191c:	4b1b      	ldr	r3, [pc, #108]	@ (800198c <HAL_RCC_OscConfig+0x4b4>)
 800191e:	2201      	movs	r2, #1
 8001920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001922:	f7ff f823 	bl	800096c <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800192a:	f7ff f81f 	bl	800096c <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e064      	b.n	8001a06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800193c:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <HAL_RCC_OscConfig+0x4ac>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0f0      	beq.n	800192a <HAL_RCC_OscConfig+0x452>
 8001948:	e05c      	b.n	8001a04 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800194a:	4b10      	ldr	r3, [pc, #64]	@ (800198c <HAL_RCC_OscConfig+0x4b4>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7ff f80c 	bl	800096c <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001958:	f7ff f808 	bl	800096c <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e04d      	b.n	8001a06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196a:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <HAL_RCC_OscConfig+0x4ac>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x480>
 8001976:	e045      	b.n	8001a04 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	2b01      	cmp	r3, #1
 800197e:	d107      	bne.n	8001990 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e040      	b.n	8001a06 <HAL_RCC_OscConfig+0x52e>
 8001984:	40023800 	.word	0x40023800
 8001988:	40007000 	.word	0x40007000
 800198c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001990:	4b1f      	ldr	r3, [pc, #124]	@ (8001a10 <HAL_RCC_OscConfig+0x538>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d030      	beq.n	8001a00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d129      	bne.n	8001a00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d122      	bne.n	8001a00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019ba:	68fa      	ldr	r2, [r7, #12]
 80019bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80019c0:	4013      	ands	r3, r2
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d119      	bne.n	8001a00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019d6:	085b      	lsrs	r3, r3, #1
 80019d8:	3b01      	subs	r3, #1
 80019da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019dc:	429a      	cmp	r2, r3
 80019de:	d10f      	bne.n	8001a00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d107      	bne.n	8001a00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d001      	beq.n	8001a04 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e000      	b.n	8001a06 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023800 	.word	0x40023800

08001a14 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	1c5a      	adds	r2, r3, #1
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	601a      	str	r2, [r3, #0]
}
 8001a50:	bf00      	nop
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6892      	ldr	r2, [r2, #8]
 8001a72:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	6852      	ldr	r2, [r2, #4]
 8001a7c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d103      	bne.n	8001a90 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	1e5a      	subs	r2, r3, #1
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr

08001ab0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001aba:	4b41      	ldr	r3, [pc, #260]	@ (8001bc0 <xTaskIncrementTick+0x110>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d174      	bne.n	8001bac <xTaskIncrementTick+0xfc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001ac2:	4b40      	ldr	r3, [pc, #256]	@ (8001bc4 <xTaskIncrementTick+0x114>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001aca:	4a3e      	ldr	r2, [pc, #248]	@ (8001bc4 <xTaskIncrementTick+0x114>)
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d121      	bne.n	8001b1a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001ad6:	4b3c      	ldr	r3, [pc, #240]	@ (8001bc8 <xTaskIncrementTick+0x118>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d00b      	beq.n	8001af8 <xTaskIncrementTick+0x48>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ae4:	f383 8811 	msr	BASEPRI, r3
 8001ae8:	f3bf 8f6f 	isb	sy
 8001aec:	f3bf 8f4f 	dsb	sy
 8001af0:	603b      	str	r3, [r7, #0]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001af2:	bf00      	nop
 8001af4:	bf00      	nop
 8001af6:	e7fd      	b.n	8001af4 <xTaskIncrementTick+0x44>
 8001af8:	4b33      	ldr	r3, [pc, #204]	@ (8001bc8 <xTaskIncrementTick+0x118>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	4b33      	ldr	r3, [pc, #204]	@ (8001bcc <xTaskIncrementTick+0x11c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a31      	ldr	r2, [pc, #196]	@ (8001bc8 <xTaskIncrementTick+0x118>)
 8001b04:	6013      	str	r3, [r2, #0]
 8001b06:	4a31      	ldr	r2, [pc, #196]	@ (8001bcc <xTaskIncrementTick+0x11c>)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	4b30      	ldr	r3, [pc, #192]	@ (8001bd0 <xTaskIncrementTick+0x120>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	3301      	adds	r3, #1
 8001b12:	4a2f      	ldr	r2, [pc, #188]	@ (8001bd0 <xTaskIncrementTick+0x120>)
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	f000 f8cf 	bl	8001cb8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001b1a:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd4 <xTaskIncrementTick+0x124>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d348      	bcc.n	8001bb6 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001b24:	4b28      	ldr	r3, [pc, #160]	@ (8001bc8 <xTaskIncrementTick+0x118>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d104      	bne.n	8001b38 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b2e:	4b29      	ldr	r3, [pc, #164]	@ (8001bd4 <xTaskIncrementTick+0x124>)
 8001b30:	f04f 32ff 	mov.w	r2, #4294967295
 8001b34:	601a      	str	r2, [r3, #0]
                    break;
 8001b36:	e03e      	b.n	8001bb6 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001b38:	4b23      	ldr	r3, [pc, #140]	@ (8001bc8 <xTaskIncrementTick+0x118>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d203      	bcs.n	8001b58 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8001b50:	4a20      	ldr	r2, [pc, #128]	@ (8001bd4 <xTaskIncrementTick+0x124>)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001b56:	e02e      	b.n	8001bb6 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff ff7d 	bl	8001a5c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d004      	beq.n	8001b74 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	3318      	adds	r3, #24
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff ff74 	bl	8001a5c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 ffde 	bl	8002b38 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b80:	2201      	movs	r2, #1
 8001b82:	409a      	lsls	r2, r3
 8001b84:	4b14      	ldr	r3, [pc, #80]	@ (8001bd8 <xTaskIncrementTick+0x128>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	4a13      	ldr	r2, [pc, #76]	@ (8001bd8 <xTaskIncrementTick+0x128>)
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b92:	4613      	mov	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	4413      	add	r3, r2
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4a10      	ldr	r2, [pc, #64]	@ (8001bdc <xTaskIncrementTick+0x12c>)
 8001b9c:	441a      	add	r2, r3
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	f7ff ff35 	bl	8001a14 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001baa:	e7bb      	b.n	8001b24 <xTaskIncrementTick+0x74>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8001bac:	4b0c      	ldr	r3, [pc, #48]	@ (8001be0 <xTaskIncrementTick+0x130>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	4a0b      	ldr	r2, [pc, #44]	@ (8001be0 <xTaskIncrementTick+0x130>)
 8001bb4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8001bb6:	697b      	ldr	r3, [r7, #20]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	200000b8 	.word	0x200000b8
 8001bc4:	2000009c 	.word	0x2000009c
 8001bc8:	20000094 	.word	0x20000094
 8001bcc:	20000098 	.word	0x20000098
 8001bd0:	200000ac 	.word	0x200000ac
 8001bd4:	200000b0 	.word	0x200000b0
 8001bd8:	200000a0 	.word	0x200000a0
 8001bdc:	20000030 	.word	0x20000030
 8001be0:	200000a4 	.word	0x200000a4

08001be4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001bea:	4b2d      	ldr	r3, [pc, #180]	@ (8001ca0 <vTaskSwitchContext+0xbc>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d003      	beq.n	8001bfa <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8001bf2:	4b2c      	ldr	r3, [pc, #176]	@ (8001ca4 <vTaskSwitchContext+0xc0>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8001bf8:	e04e      	b.n	8001c98 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8001bfa:	4b2a      	ldr	r3, [pc, #168]	@ (8001ca4 <vTaskSwitchContext+0xc0>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001c00:	4b29      	ldr	r3, [pc, #164]	@ (8001ca8 <vTaskSwitchContext+0xc4>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	fab3 f383 	clz	r3, r3
 8001c0c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8001c0e:	7afb      	ldrb	r3, [r7, #11]
 8001c10:	f1c3 031f 	rsb	r3, r3, #31
 8001c14:	617b      	str	r3, [r7, #20]
 8001c16:	4925      	ldr	r1, [pc, #148]	@ (8001cac <vTaskSwitchContext+0xc8>)
 8001c18:	697a      	ldr	r2, [r7, #20]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	440b      	add	r3, r1
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d10b      	bne.n	8001c42 <vTaskSwitchContext+0x5e>
        __asm volatile
 8001c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c2e:	f383 8811 	msr	BASEPRI, r3
 8001c32:	f3bf 8f6f 	isb	sy
 8001c36:	f3bf 8f4f 	dsb	sy
 8001c3a:	607b      	str	r3, [r7, #4]
    }
 8001c3c:	bf00      	nop
 8001c3e:	bf00      	nop
 8001c40:	e7fd      	b.n	8001c3e <vTaskSwitchContext+0x5a>
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	4613      	mov	r3, r2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	4413      	add	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4a17      	ldr	r2, [pc, #92]	@ (8001cac <vTaskSwitchContext+0xc8>)
 8001c4e:	4413      	add	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	685a      	ldr	r2, [r3, #4]
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	605a      	str	r2, [r3, #4]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	685a      	ldr	r2, [r3, #4]
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	3308      	adds	r3, #8
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d104      	bne.n	8001c72 <vTaskSwitchContext+0x8e>
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	4a0d      	ldr	r2, [pc, #52]	@ (8001cb0 <vTaskSwitchContext+0xcc>)
 8001c7a:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb0 <vTaskSwitchContext+0xcc>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	4b0c      	ldr	r3, [pc, #48]	@ (8001cb4 <vTaskSwitchContext+0xd0>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d102      	bne.n	8001c8e <vTaskSwitchContext+0xaa>
 8001c88:	f000 fef8 	bl	8002a7c <SEGGER_SYSVIEW_OnIdle>
}
 8001c8c:	e004      	b.n	8001c98 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8001c8e:	4b08      	ldr	r3, [pc, #32]	@ (8001cb0 <vTaskSwitchContext+0xcc>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f000 ff0e 	bl	8002ab4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8001c98:	bf00      	nop
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	200000b8 	.word	0x200000b8
 8001ca4:	200000a8 	.word	0x200000a8
 8001ca8:	200000a0 	.word	0x200000a0
 8001cac:	20000030 	.word	0x20000030
 8001cb0:	2000002c 	.word	0x2000002c
 8001cb4:	200000b4 	.word	0x200000b4

08001cb8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce8 <prvResetNextTaskUnblockTime+0x30>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d104      	bne.n	8001cd0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8001cc6:	4b09      	ldr	r3, [pc, #36]	@ (8001cec <prvResetNextTaskUnblockTime+0x34>)
 8001cc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ccc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8001cce:	e005      	b.n	8001cdc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8001cd0:	4b05      	ldr	r3, [pc, #20]	@ (8001ce8 <prvResetNextTaskUnblockTime+0x30>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a04      	ldr	r2, [pc, #16]	@ (8001cec <prvResetNextTaskUnblockTime+0x34>)
 8001cda:	6013      	str	r3, [r2, #0]
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000094 	.word	0x20000094
 8001cec:	200000b0 	.word	0x200000b0

08001cf0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8001cf0:	4b07      	ldr	r3, [pc, #28]	@ (8001d10 <pxCurrentTCBConst2>)
 8001cf2:	6819      	ldr	r1, [r3, #0]
 8001cf4:	6808      	ldr	r0, [r1, #0]
 8001cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cfa:	f380 8809 	msr	PSP, r0
 8001cfe:	f3bf 8f6f 	isb	sy
 8001d02:	f04f 0000 	mov.w	r0, #0
 8001d06:	f380 8811 	msr	BASEPRI, r0
 8001d0a:	4770      	bx	lr
 8001d0c:	f3af 8000 	nop.w

08001d10 <pxCurrentTCBConst2>:
 8001d10:	2000002c 	.word	0x2000002c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
	...

08001d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001d20:	f3ef 8009 	mrs	r0, PSP
 8001d24:	f3bf 8f6f 	isb	sy
 8001d28:	4b15      	ldr	r3, [pc, #84]	@ (8001d80 <pxCurrentTCBConst>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	f01e 0f10 	tst.w	lr, #16
 8001d30:	bf08      	it	eq
 8001d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d3a:	6010      	str	r0, [r2, #0]
 8001d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001d40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8001d44:	f380 8811 	msr	BASEPRI, r0
 8001d48:	f3bf 8f4f 	dsb	sy
 8001d4c:	f3bf 8f6f 	isb	sy
 8001d50:	f7ff ff48 	bl	8001be4 <vTaskSwitchContext>
 8001d54:	f04f 0000 	mov.w	r0, #0
 8001d58:	f380 8811 	msr	BASEPRI, r0
 8001d5c:	bc09      	pop	{r0, r3}
 8001d5e:	6819      	ldr	r1, [r3, #0]
 8001d60:	6808      	ldr	r0, [r1, #0]
 8001d62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d66:	f01e 0f10 	tst.w	lr, #16
 8001d6a:	bf08      	it	eq
 8001d6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001d70:	f380 8809 	msr	PSP, r0
 8001d74:	f3bf 8f6f 	isb	sy
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	f3af 8000 	nop.w

08001d80 <pxCurrentTCBConst>:
 8001d80:	2000002c 	.word	0x2000002c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop

08001d88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
        __asm volatile
 8001d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d92:	f383 8811 	msr	BASEPRI, r3
 8001d96:	f3bf 8f6f 	isb	sy
 8001d9a:	f3bf 8f4f 	dsb	sy
 8001d9e:	607b      	str	r3, [r7, #4]
    }
 8001da0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8001da2:	f000 fdf1 	bl	8002988 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8001da6:	f7ff fe83 	bl	8001ab0 <xTaskIncrementTick>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d006      	beq.n	8001dbe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8001db0:	f000 fe48 	bl	8002a44 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001db4:	4b08      	ldr	r3, [pc, #32]	@ (8001dd8 <SysTick_Handler+0x50>)
 8001db6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001dba:	601a      	str	r2, [r3, #0]
 8001dbc:	e001      	b.n	8001dc2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8001dbe:	f000 fe25 	bl	8002a0c <SEGGER_SYSVIEW_RecordExitISR>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8001dcc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	e000ed04 	.word	0xe000ed04

08001ddc <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8001de2:	4b1e      	ldr	r3, [pc, #120]	@ (8001e5c <USART2_IRQHandler+0x80>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f003 0320 	and.w	r3, r3, #32
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d011      	beq.n	8001e16 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8001df2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e60 <USART2_IRQHandler+0x84>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	f003 030b 	and.w	r3, r3, #11
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d108      	bne.n	8001e16 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8001e04:	4b17      	ldr	r3, [pc, #92]	@ (8001e64 <USART2_IRQHandler+0x88>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d004      	beq.n	8001e16 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8001e0c:	4b15      	ldr	r3, [pc, #84]	@ (8001e64 <USART2_IRQHandler+0x88>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	79fa      	ldrb	r2, [r7, #7]
 8001e12:	4610      	mov	r0, r2
 8001e14:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d01a      	beq.n	8001e56 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8001e20:	4b11      	ldr	r3, [pc, #68]	@ (8001e68 <USART2_IRQHandler+0x8c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d015      	beq.n	8001e54 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8001e28:	4b0f      	ldr	r3, [pc, #60]	@ (8001e68 <USART2_IRQHandler+0x8c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	1dfa      	adds	r2, r7, #7
 8001e2e:	4610      	mov	r0, r2
 8001e30:	4798      	blx	r3
 8001e32:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d106      	bne.n	8001e48 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e6c <USART2_IRQHandler+0x90>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a0b      	ldr	r2, [pc, #44]	@ (8001e6c <USART2_IRQHandler+0x90>)
 8001e40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	e006      	b.n	8001e56 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8001e48:	4b04      	ldr	r3, [pc, #16]	@ (8001e5c <USART2_IRQHandler+0x80>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8001e4c:	79fa      	ldrb	r2, [r7, #7]
 8001e4e:	4b04      	ldr	r3, [pc, #16]	@ (8001e60 <USART2_IRQHandler+0x84>)
 8001e50:	601a      	str	r2, [r3, #0]
 8001e52:	e000      	b.n	8001e56 <USART2_IRQHandler+0x7a>
      return;
 8001e54:	bf00      	nop
    }
  }
}
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40004400 	.word	0x40004400
 8001e60:	40004404 	.word	0x40004404
 8001e64:	200000bc 	.word	0x200000bc
 8001e68:	200000c0 	.word	0x200000c0
 8001e6c:	4000440c 	.word	0x4000440c

08001e70 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8001e74:	4b05      	ldr	r3, [pc, #20]	@ (8001e8c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a04      	ldr	r2, [pc, #16]	@ (8001e8c <HIF_UART_EnableTXEInterrupt+0x1c>)
 8001e7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e7e:	6013      	str	r3, [r2, #0]
}
 8001e80:	bf00      	nop
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	4000440c 	.word	0x4000440c

08001e90 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8001e90:	b480      	push	{r7}
 8001e92:	b083      	sub	sp, #12
 8001e94:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8001e96:	4b25      	ldr	r3, [pc, #148]	@ (8001f2c <_DoInit+0x9c>)
 8001e98:	603b      	str	r3, [r7, #0]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	2203      	movs	r2, #3
 8001e9e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	4a21      	ldr	r2, [pc, #132]	@ (8001f30 <_DoInit+0xa0>)
 8001eaa:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	4a21      	ldr	r2, [pc, #132]	@ (8001f34 <_DoInit+0xa4>)
 8001eb0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001eb8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	4a18      	ldr	r2, [pc, #96]	@ (8001f30 <_DoInit+0xa0>)
 8001ed0:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	4a18      	ldr	r2, [pc, #96]	@ (8001f38 <_DoInit+0xa8>)
 8001ed6:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	2210      	movs	r2, #16
 8001edc:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	2200      	movs	r2, #0
 8001eee:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8001ef0:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	607b      	str	r3, [r7, #4]
 8001ef8:	e00c      	b.n	8001f14 <_DoInit+0x84>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f1c3 030f 	rsb	r3, r3, #15
 8001f00:	4a0e      	ldr	r2, [pc, #56]	@ (8001f3c <_DoInit+0xac>)
 8001f02:	5cd1      	ldrb	r1, [r2, r3]
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4413      	add	r3, r2
 8001f0a:	460a      	mov	r2, r1
 8001f0c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	3301      	adds	r3, #1
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b0f      	cmp	r3, #15
 8001f18:	d9ef      	bls.n	8001efa <_DoInit+0x6a>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8001f1a:	f3bf 8f5f 	dmb	sy
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	200000c4 	.word	0x200000c4
 8001f30:	08002e00 	.word	0x08002e00
 8001f34:	2000016c 	.word	0x2000016c
 8001f38:	2000056c 	.word	0x2000056c
 8001f3c:	08002e1c 	.word	0x08002e1c

08001f40 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08c      	sub	sp, #48	@ 0x30
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8001f4c:	4b3e      	ldr	r3, [pc, #248]	@ (8002048 <SEGGER_RTT_ReadNoLock+0x108>)
 8001f4e:	623b      	str	r3, [r7, #32]
 8001f50:	6a3b      	ldr	r3, [r7, #32]
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <SEGGER_RTT_ReadNoLock+0x1e>
 8001f5a:	f7ff ff99 	bl	8001e90 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	4613      	mov	r3, r2
 8001f62:	005b      	lsls	r3, r3, #1
 8001f64:	4413      	add	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	3360      	adds	r3, #96	@ 0x60
 8001f6a:	4a37      	ldr	r2, [pc, #220]	@ (8002048 <SEGGER_RTT_ReadNoLock+0x108>)
 8001f6c:	4413      	add	r3, r2
 8001f6e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8001f80:	2300      	movs	r3, #0
 8001f82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8001f84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d92b      	bls.n	8001fe4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001f96:	697a      	ldr	r2, [r7, #20]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	bf28      	it	cs
 8001f9e:	4613      	movcs	r3, r2
 8001fa0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	685a      	ldr	r2, [r3, #4]
 8001fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fa8:	4413      	add	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	6939      	ldr	r1, [r7, #16]
 8001fb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001fb2:	f000 ff0b 	bl	8002dcc <memcpy>
    NumBytesRead += NumBytesRem;
 8001fb6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	4413      	add	r3, r2
 8001fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8001fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8001fce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d101      	bne.n	8001fe4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	bf28      	it	cs
 8001ff4:	4613      	movcs	r3, r2
 8001ff6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d019      	beq.n	8002032 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002004:	4413      	add	r3, r2
 8002006:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8002008:	697a      	ldr	r2, [r7, #20]
 800200a:	6939      	ldr	r1, [r7, #16]
 800200c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800200e:	f000 fedd 	bl	8002dcc <memcpy>
    NumBytesRead += NumBytesRem;
 8002012:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	4413      	add	r3, r2
 8002018:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800201a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	4413      	add	r3, r2
 8002020:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800202a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800202c:	697b      	ldr	r3, [r7, #20]
 800202e:	4413      	add	r3, r2
 8002030:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8002032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002034:	2b00      	cmp	r3, #0
 8002036:	d002      	beq.n	800203e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800203c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800203e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8002040:	4618      	mov	r0, r3
 8002042:	3730      	adds	r7, #48	@ 0x30
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	200000c4 	.word	0x200000c4

0800204c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800204c:	b480      	push	{r7}
 800204e:	b087      	sub	sp, #28
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00f      	beq.n	8002082 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8002062:	e002      	b.n	800206a <_EncodeStr+0x1e>
      Len++;
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	3301      	adds	r3, #1
 8002068:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800206a:	68ba      	ldr	r2, [r7, #8]
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4413      	add	r3, r2
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1f6      	bne.n	8002064 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	429a      	cmp	r2, r3
 800207c:	d901      	bls.n	8002082 <_EncodeStr+0x36>
      Len = Limit;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	2bfe      	cmp	r3, #254	@ 0xfe
 8002086:	d806      	bhi.n	8002096 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	1c5a      	adds	r2, r3, #1
 800208c:	60fa      	str	r2, [r7, #12]
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	701a      	strb	r2, [r3, #0]
 8002094:	e011      	b.n	80020ba <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1c5a      	adds	r2, r3, #1
 800209a:	60fa      	str	r2, [r7, #12]
 800209c:	22ff      	movs	r2, #255	@ 0xff
 800209e:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	1c5a      	adds	r2, r3, #1
 80020a4:	60fa      	str	r2, [r7, #12]
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	0a19      	lsrs	r1, r3, #8
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	1c5a      	adds	r2, r3, #1
 80020b4:	60fa      	str	r2, [r7, #12]
 80020b6:	b2ca      	uxtb	r2, r1
 80020b8:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80020be:	e00a      	b.n	80020d6 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	1c53      	adds	r3, r2, #1
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	1c59      	adds	r1, r3, #1
 80020ca:	60f9      	str	r1, [r7, #12]
 80020cc:	7812      	ldrb	r2, [r2, #0]
 80020ce:	701a      	strb	r2, [r3, #0]
    n++;
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	3301      	adds	r3, #1
 80020d4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80020d6:	697a      	ldr	r2, [r7, #20]
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d3f0      	bcc.n	80020c0 <_EncodeStr+0x74>
  }
  return pPayload;
 80020de:	68fb      	ldr	r3, [r7, #12]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	371c      	adds	r7, #28
 80020e4:	46bd      	mov	sp, r7
 80020e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ea:	4770      	bx	lr

080020ec <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3304      	adds	r3, #4
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800210a:	4b35      	ldr	r3, [pc, #212]	@ (80021e0 <_HandleIncomingPacket+0xdc>)
 800210c:	7e1b      	ldrb	r3, [r3, #24]
 800210e:	4618      	mov	r0, r3
 8002110:	1cfb      	adds	r3, r7, #3
 8002112:	2201      	movs	r2, #1
 8002114:	4619      	mov	r1, r3
 8002116:	f7ff ff13 	bl	8001f40 <SEGGER_RTT_ReadNoLock>
 800211a:	4603      	mov	r3, r0
 800211c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	dd59      	ble.n	80021d8 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	2b80      	cmp	r3, #128	@ 0x80
 8002128:	d032      	beq.n	8002190 <_HandleIncomingPacket+0x8c>
 800212a:	2b80      	cmp	r3, #128	@ 0x80
 800212c:	dc42      	bgt.n	80021b4 <_HandleIncomingPacket+0xb0>
 800212e:	2b07      	cmp	r3, #7
 8002130:	dc16      	bgt.n	8002160 <_HandleIncomingPacket+0x5c>
 8002132:	2b00      	cmp	r3, #0
 8002134:	dd3e      	ble.n	80021b4 <_HandleIncomingPacket+0xb0>
 8002136:	3b01      	subs	r3, #1
 8002138:	2b06      	cmp	r3, #6
 800213a:	d83b      	bhi.n	80021b4 <_HandleIncomingPacket+0xb0>
 800213c:	a201      	add	r2, pc, #4	@ (adr r2, 8002144 <_HandleIncomingPacket+0x40>)
 800213e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002142:	bf00      	nop
 8002144:	08002167 	.word	0x08002167
 8002148:	0800216d 	.word	0x0800216d
 800214c:	08002173 	.word	0x08002173
 8002150:	08002179 	.word	0x08002179
 8002154:	0800217f 	.word	0x0800217f
 8002158:	08002185 	.word	0x08002185
 800215c:	0800218b 	.word	0x0800218b
 8002160:	2b7f      	cmp	r3, #127	@ 0x7f
 8002162:	d034      	beq.n	80021ce <_HandleIncomingPacket+0xca>
 8002164:	e026      	b.n	80021b4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8002166:	f000 fa4d 	bl	8002604 <SEGGER_SYSVIEW_Start>
      break;
 800216a:	e035      	b.n	80021d8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800216c:	f000 fb06 	bl	800277c <SEGGER_SYSVIEW_Stop>
      break;
 8002170:	e032      	b.n	80021d8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8002172:	f000 fbd7 	bl	8002924 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8002176:	e02f      	b.n	80021d8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8002178:	f000 fbc0 	bl	80028fc <SEGGER_SYSVIEW_SendTaskList>
      break;
 800217c:	e02c      	b.n	80021d8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800217e:	f000 fb23 	bl	80027c8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8002182:	e029      	b.n	80021d8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8002184:	f000 fdb8 	bl	8002cf8 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8002188:	e026      	b.n	80021d8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800218a:	f000 fd97 	bl	8002cbc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800218e:	e023      	b.n	80021d8 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8002190:	4b13      	ldr	r3, [pc, #76]	@ (80021e0 <_HandleIncomingPacket+0xdc>)
 8002192:	7e1b      	ldrb	r3, [r3, #24]
 8002194:	4618      	mov	r0, r3
 8002196:	1cfb      	adds	r3, r7, #3
 8002198:	2201      	movs	r2, #1
 800219a:	4619      	mov	r1, r3
 800219c:	f7ff fed0 	bl	8001f40 <SEGGER_RTT_ReadNoLock>
 80021a0:	4603      	mov	r3, r0
 80021a2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	dd13      	ble.n	80021d2 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f000 fd05 	bl	8002bbc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80021b2:	e00e      	b.n	80021d2 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80021b4:	78fb      	ldrb	r3, [r7, #3]
 80021b6:	b25b      	sxtb	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	da0c      	bge.n	80021d6 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80021bc:	4b08      	ldr	r3, [pc, #32]	@ (80021e0 <_HandleIncomingPacket+0xdc>)
 80021be:	7e1b      	ldrb	r3, [r3, #24]
 80021c0:	4618      	mov	r0, r3
 80021c2:	1cfb      	adds	r3, r7, #3
 80021c4:	2201      	movs	r2, #1
 80021c6:	4619      	mov	r1, r3
 80021c8:	f7ff feba 	bl	8001f40 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80021cc:	e003      	b.n	80021d6 <_HandleIncomingPacket+0xd2>
      break;
 80021ce:	bf00      	nop
 80021d0:	e002      	b.n	80021d8 <_HandleIncomingPacket+0xd4>
      break;
 80021d2:	bf00      	nop
 80021d4:	e000      	b.n	80021d8 <_HandleIncomingPacket+0xd4>
      break;
 80021d6:	bf00      	nop
    }
  }
}
 80021d8:	bf00      	nop
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	2000057c 	.word	0x2000057c

080021e4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b08c      	sub	sp, #48	@ 0x30
 80021e8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80021ea:	2301      	movs	r3, #1
 80021ec:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80021ee:	1d3b      	adds	r3, r7, #4
 80021f0:	3301      	adds	r3, #1
 80021f2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021f8:	4b32      	ldr	r3, [pc, #200]	@ (80022c4 <_TrySendOverflowPacket+0xe0>)
 80021fa:	695b      	ldr	r3, [r3, #20]
 80021fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021fe:	e00b      	b.n	8002218 <_TrySendOverflowPacket+0x34>
 8002200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002202:	b2da      	uxtb	r2, r3
 8002204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002206:	1c59      	adds	r1, r3, #1
 8002208:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800220a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800220e:	b2d2      	uxtb	r2, r2
 8002210:	701a      	strb	r2, [r3, #0]
 8002212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002214:	09db      	lsrs	r3, r3, #7
 8002216:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800221a:	2b7f      	cmp	r3, #127	@ 0x7f
 800221c:	d8f0      	bhi.n	8002200 <_TrySendOverflowPacket+0x1c>
 800221e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002224:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	701a      	strb	r2, [r3, #0]
 800222a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800222c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800222e:	4b26      	ldr	r3, [pc, #152]	@ (80022c8 <_TrySendOverflowPacket+0xe4>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8002234:	4b23      	ldr	r3, [pc, #140]	@ (80022c4 <_TrySendOverflowPacket+0xe0>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	627b      	str	r3, [r7, #36]	@ 0x24
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	623b      	str	r3, [r7, #32]
 8002246:	e00b      	b.n	8002260 <_TrySendOverflowPacket+0x7c>
 8002248:	6a3b      	ldr	r3, [r7, #32]
 800224a:	b2da      	uxtb	r2, r3
 800224c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224e:	1c59      	adds	r1, r3, #1
 8002250:	6279      	str	r1, [r7, #36]	@ 0x24
 8002252:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002256:	b2d2      	uxtb	r2, r2
 8002258:	701a      	strb	r2, [r3, #0]
 800225a:	6a3b      	ldr	r3, [r7, #32]
 800225c:	09db      	lsrs	r3, r3, #7
 800225e:	623b      	str	r3, [r7, #32]
 8002260:	6a3b      	ldr	r3, [r7, #32]
 8002262:	2b7f      	cmp	r3, #127	@ 0x7f
 8002264:	d8f0      	bhi.n	8002248 <_TrySendOverflowPacket+0x64>
 8002266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002268:	1c5a      	adds	r2, r3, #1
 800226a:	627a      	str	r2, [r7, #36]	@ 0x24
 800226c:	6a3a      	ldr	r2, [r7, #32]
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	701a      	strb	r2, [r3, #0]
 8002272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002274:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8002276:	4b13      	ldr	r3, [pc, #76]	@ (80022c4 <_TrySendOverflowPacket+0xe0>)
 8002278:	785b      	ldrb	r3, [r3, #1]
 800227a:	4618      	mov	r0, r3
 800227c:	1d3b      	adds	r3, r7, #4
 800227e:	69fa      	ldr	r2, [r7, #28]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	461a      	mov	r2, r3
 8002284:	1d3b      	adds	r3, r7, #4
 8002286:	4619      	mov	r1, r3
 8002288:	f7fd ffc2 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800228c:	4603      	mov	r3, r0
 800228e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8002290:	f7ff fdee 	bl	8001e70 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d009      	beq.n	80022ae <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800229a:	4a0a      	ldr	r2, [pc, #40]	@ (80022c4 <_TrySendOverflowPacket+0xe0>)
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80022a0:	4b08      	ldr	r3, [pc, #32]	@ (80022c4 <_TrySendOverflowPacket+0xe0>)
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	3b01      	subs	r3, #1
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	4b06      	ldr	r3, [pc, #24]	@ (80022c4 <_TrySendOverflowPacket+0xe0>)
 80022aa:	701a      	strb	r2, [r3, #0]
 80022ac:	e004      	b.n	80022b8 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80022ae:	4b05      	ldr	r3, [pc, #20]	@ (80022c4 <_TrySendOverflowPacket+0xe0>)
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	3301      	adds	r3, #1
 80022b4:	4a03      	ldr	r2, [pc, #12]	@ (80022c4 <_TrySendOverflowPacket+0xe0>)
 80022b6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80022b8:	693b      	ldr	r3, [r7, #16]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3730      	adds	r7, #48	@ 0x30
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	2000057c 	.word	0x2000057c
 80022c8:	e0001004 	.word	0xe0001004

080022cc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b08a      	sub	sp, #40	@ 0x28
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80022d8:	4b6d      	ldr	r3, [pc, #436]	@ (8002490 <_SendPacket+0x1c4>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d010      	beq.n	8002302 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80022e0:	4b6b      	ldr	r3, [pc, #428]	@ (8002490 <_SendPacket+0x1c4>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 80a5 	beq.w	8002434 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80022ea:	4b69      	ldr	r3, [pc, #420]	@ (8002490 <_SendPacket+0x1c4>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d109      	bne.n	8002306 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80022f2:	f7ff ff77 	bl	80021e4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80022f6:	4b66      	ldr	r3, [pc, #408]	@ (8002490 <_SendPacket+0x1c4>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	f040 809c 	bne.w	8002438 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8002300:	e001      	b.n	8002306 <_SendPacket+0x3a>
    goto Send;
 8002302:	bf00      	nop
 8002304:	e000      	b.n	8002308 <_SendPacket+0x3c>
Send:
 8002306:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b1f      	cmp	r3, #31
 800230c:	d809      	bhi.n	8002322 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800230e:	4b60      	ldr	r3, [pc, #384]	@ (8002490 <_SendPacket+0x1c4>)
 8002310:	69da      	ldr	r2, [r3, #28]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	fa22 f303 	lsr.w	r3, r2, r3
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	f040 808d 	bne.w	800243c <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b17      	cmp	r3, #23
 8002326:	d807      	bhi.n	8002338 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	3b01      	subs	r3, #1
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	b2da      	uxtb	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	701a      	strb	r2, [r3, #0]
 8002336:	e03d      	b.n	80023b4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	2b7f      	cmp	r3, #127	@ 0x7f
 8002344:	d912      	bls.n	800236c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	09da      	lsrs	r2, r3, #7
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	3b01      	subs	r3, #1
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	b2db      	uxtb	r3, r3
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	3a01      	subs	r2, #1
 800235e:	60fa      	str	r2, [r7, #12]
 8002360:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002364:	b2da      	uxtb	r2, r3
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	701a      	strb	r2, [r3, #0]
 800236a:	e006      	b.n	800237a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	3b01      	subs	r3, #1
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	b2da      	uxtb	r2, r3
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b7f      	cmp	r3, #127	@ 0x7f
 800237e:	d912      	bls.n	80023a6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	09da      	lsrs	r2, r3, #7
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	3b01      	subs	r3, #1
 8002388:	60fb      	str	r3, [r7, #12]
 800238a:	b2d2      	uxtb	r2, r2
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	b2db      	uxtb	r3, r3
 8002394:	68fa      	ldr	r2, [r7, #12]
 8002396:	3a01      	subs	r2, #1
 8002398:	60fa      	str	r2, [r7, #12]
 800239a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800239e:	b2da      	uxtb	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	701a      	strb	r2, [r3, #0]
 80023a4:	e006      	b.n	80023b4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	3b01      	subs	r3, #1
 80023aa:	60fb      	str	r3, [r7, #12]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80023b4:	4b37      	ldr	r3, [pc, #220]	@ (8002494 <_SendPacket+0x1c8>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80023ba:	4b35      	ldr	r3, [pc, #212]	@ (8002490 <_SendPacket+0x1c4>)
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	623b      	str	r3, [r7, #32]
 80023cc:	e00b      	b.n	80023e6 <_SendPacket+0x11a>
 80023ce:	6a3b      	ldr	r3, [r7, #32]
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d4:	1c59      	adds	r1, r3, #1
 80023d6:	6279      	str	r1, [r7, #36]	@ 0x24
 80023d8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80023dc:	b2d2      	uxtb	r2, r2
 80023de:	701a      	strb	r2, [r3, #0]
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	09db      	lsrs	r3, r3, #7
 80023e4:	623b      	str	r3, [r7, #32]
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80023ea:	d8f0      	bhi.n	80023ce <_SendPacket+0x102>
 80023ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	627a      	str	r2, [r7, #36]	@ 0x24
 80023f2:	6a3a      	ldr	r2, [r7, #32]
 80023f4:	b2d2      	uxtb	r2, r2
 80023f6:	701a      	strb	r2, [r3, #0]
 80023f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fa:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80023fc:	4b24      	ldr	r3, [pc, #144]	@ (8002490 <_SendPacket+0x1c4>)
 80023fe:	785b      	ldrb	r3, [r3, #1]
 8002400:	4618      	mov	r0, r3
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	1ad3      	subs	r3, r2, r3
 8002408:	461a      	mov	r2, r3
 800240a:	68f9      	ldr	r1, [r7, #12]
 800240c:	f7fd ff00 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8002410:	4603      	mov	r3, r0
 8002412:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8002414:	f7ff fd2c 	bl	8001e70 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800241e:	4a1c      	ldr	r2, [pc, #112]	@ (8002490 <_SendPacket+0x1c4>)
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	60d3      	str	r3, [r2, #12]
 8002424:	e00b      	b.n	800243e <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8002426:	4b1a      	ldr	r3, [pc, #104]	@ (8002490 <_SendPacket+0x1c4>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	3301      	adds	r3, #1
 800242c:	b2da      	uxtb	r2, r3
 800242e:	4b18      	ldr	r3, [pc, #96]	@ (8002490 <_SendPacket+0x1c4>)
 8002430:	701a      	strb	r2, [r3, #0]
 8002432:	e004      	b.n	800243e <_SendPacket+0x172>
    goto SendDone;
 8002434:	bf00      	nop
 8002436:	e002      	b.n	800243e <_SendPacket+0x172>
      goto SendDone;
 8002438:	bf00      	nop
 800243a:	e000      	b.n	800243e <_SendPacket+0x172>
      goto SendDone;
 800243c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800243e:	4b14      	ldr	r3, [pc, #80]	@ (8002490 <_SendPacket+0x1c4>)
 8002440:	7e1b      	ldrb	r3, [r3, #24]
 8002442:	4619      	mov	r1, r3
 8002444:	4a14      	ldr	r2, [pc, #80]	@ (8002498 <_SendPacket+0x1cc>)
 8002446:	460b      	mov	r3, r1
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	440b      	add	r3, r1
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	4413      	add	r3, r2
 8002450:	336c      	adds	r3, #108	@ 0x6c
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4b0e      	ldr	r3, [pc, #56]	@ (8002490 <_SendPacket+0x1c4>)
 8002456:	7e1b      	ldrb	r3, [r3, #24]
 8002458:	4618      	mov	r0, r3
 800245a:	490f      	ldr	r1, [pc, #60]	@ (8002498 <_SendPacket+0x1cc>)
 800245c:	4603      	mov	r3, r0
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	4403      	add	r3, r0
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	440b      	add	r3, r1
 8002466:	3370      	adds	r3, #112	@ 0x70
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	429a      	cmp	r2, r3
 800246c:	d00b      	beq.n	8002486 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800246e:	4b08      	ldr	r3, [pc, #32]	@ (8002490 <_SendPacket+0x1c4>)
 8002470:	789b      	ldrb	r3, [r3, #2]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d107      	bne.n	8002486 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8002476:	4b06      	ldr	r3, [pc, #24]	@ (8002490 <_SendPacket+0x1c4>)
 8002478:	2201      	movs	r2, #1
 800247a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800247c:	f7ff fe42 	bl	8002104 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8002480:	4b03      	ldr	r3, [pc, #12]	@ (8002490 <_SendPacket+0x1c4>)
 8002482:	2200      	movs	r2, #0
 8002484:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8002486:	bf00      	nop
 8002488:	3728      	adds	r7, #40	@ 0x28
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	2000057c 	.word	0x2000057c
 8002494:	e0001004 	.word	0xe0001004
 8002498:	200000c4 	.word	0x200000c4

0800249c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800249c:	b580      	push	{r7, lr}
 800249e:	b084      	sub	sp, #16
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80024a4:	f3ef 8311 	mrs	r3, BASEPRI
 80024a8:	f04f 0120 	mov.w	r1, #32
 80024ac:	f381 8811 	msr	BASEPRI, r1
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	4808      	ldr	r0, [pc, #32]	@ (80024d4 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80024b4:	f7ff fe1a 	bl	80020ec <_PreparePacket>
 80024b8:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	68b9      	ldr	r1, [r7, #8]
 80024be:	68b8      	ldr	r0, [r7, #8]
 80024c0:	f7ff ff04 	bl	80022cc <_SendPacket>
  RECORD_END();
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f383 8811 	msr	BASEPRI, r3
}
 80024ca:	bf00      	nop
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	200005ac 	.word	0x200005ac

080024d8 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80024d8:	b580      	push	{r7, lr}
 80024da:	b088      	sub	sp, #32
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80024e2:	f3ef 8311 	mrs	r3, BASEPRI
 80024e6:	f04f 0120 	mov.w	r1, #32
 80024ea:	f381 8811 	msr	BASEPRI, r1
 80024ee:	617b      	str	r3, [r7, #20]
 80024f0:	4816      	ldr	r0, [pc, #88]	@ (800254c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80024f2:	f7ff fdfb 	bl	80020ec <_PreparePacket>
 80024f6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	61fb      	str	r3, [r7, #28]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	61bb      	str	r3, [r7, #24]
 8002504:	e00b      	b.n	800251e <SEGGER_SYSVIEW_RecordU32+0x46>
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	b2da      	uxtb	r2, r3
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	1c59      	adds	r1, r3, #1
 800250e:	61f9      	str	r1, [r7, #28]
 8002510:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002514:	b2d2      	uxtb	r2, r2
 8002516:	701a      	strb	r2, [r3, #0]
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	09db      	lsrs	r3, r3, #7
 800251c:	61bb      	str	r3, [r7, #24]
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	2b7f      	cmp	r3, #127	@ 0x7f
 8002522:	d8f0      	bhi.n	8002506 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	1c5a      	adds	r2, r3, #1
 8002528:	61fa      	str	r2, [r7, #28]
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	701a      	strb	r2, [r3, #0]
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	68f9      	ldr	r1, [r7, #12]
 8002538:	6938      	ldr	r0, [r7, #16]
 800253a:	f7ff fec7 	bl	80022cc <_SendPacket>
  RECORD_END();
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f383 8811 	msr	BASEPRI, r3
}
 8002544:	bf00      	nop
 8002546:	3720      	adds	r7, #32
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	200005ac 	.word	0x200005ac

08002550 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8002550:	b580      	push	{r7, lr}
 8002552:	b08c      	sub	sp, #48	@ 0x30
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800255c:	f3ef 8311 	mrs	r3, BASEPRI
 8002560:	f04f 0120 	mov.w	r1, #32
 8002564:	f381 8811 	msr	BASEPRI, r1
 8002568:	61fb      	str	r3, [r7, #28]
 800256a:	4825      	ldr	r0, [pc, #148]	@ (8002600 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800256c:	f7ff fdbe 	bl	80020ec <_PreparePacket>
 8002570:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800257e:	e00b      	b.n	8002598 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8002580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002582:	b2da      	uxtb	r2, r3
 8002584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002586:	1c59      	adds	r1, r3, #1
 8002588:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800258a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800258e:	b2d2      	uxtb	r2, r2
 8002590:	701a      	strb	r2, [r3, #0]
 8002592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002594:	09db      	lsrs	r3, r3, #7
 8002596:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800259a:	2b7f      	cmp	r3, #127	@ 0x7f
 800259c:	d8f0      	bhi.n	8002580 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800259e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025a0:	1c5a      	adds	r2, r3, #1
 80025a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80025a6:	b2d2      	uxtb	r2, r2
 80025a8:	701a      	strb	r2, [r3, #0]
 80025aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025ac:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	623b      	str	r3, [r7, #32]
 80025b6:	e00b      	b.n	80025d0 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80025b8:	6a3b      	ldr	r3, [r7, #32]
 80025ba:	b2da      	uxtb	r2, r3
 80025bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025be:	1c59      	adds	r1, r3, #1
 80025c0:	6279      	str	r1, [r7, #36]	@ 0x24
 80025c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80025c6:	b2d2      	uxtb	r2, r2
 80025c8:	701a      	strb	r2, [r3, #0]
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	09db      	lsrs	r3, r3, #7
 80025ce:	623b      	str	r3, [r7, #32]
 80025d0:	6a3b      	ldr	r3, [r7, #32]
 80025d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80025d4:	d8f0      	bhi.n	80025b8 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80025d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d8:	1c5a      	adds	r2, r3, #1
 80025da:	627a      	str	r2, [r7, #36]	@ 0x24
 80025dc:	6a3a      	ldr	r2, [r7, #32]
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	701a      	strb	r2, [r3, #0]
 80025e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	6979      	ldr	r1, [r7, #20]
 80025ea:	69b8      	ldr	r0, [r7, #24]
 80025ec:	f7ff fe6e 	bl	80022cc <_SendPacket>
  RECORD_END();
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	f383 8811 	msr	BASEPRI, r3
}
 80025f6:	bf00      	nop
 80025f8:	3730      	adds	r7, #48	@ 0x30
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	200005ac 	.word	0x200005ac

08002604 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8002604:	b580      	push	{r7, lr}
 8002606:	b08c      	sub	sp, #48	@ 0x30
 8002608:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800260a:	4b59      	ldr	r3, [pc, #356]	@ (8002770 <SEGGER_SYSVIEW_Start+0x16c>)
 800260c:	2201      	movs	r2, #1
 800260e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8002610:	f3ef 8311 	mrs	r3, BASEPRI
 8002614:	f04f 0120 	mov.w	r1, #32
 8002618:	f381 8811 	msr	BASEPRI, r1
 800261c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800261e:	4b54      	ldr	r3, [pc, #336]	@ (8002770 <SEGGER_SYSVIEW_Start+0x16c>)
 8002620:	785b      	ldrb	r3, [r3, #1]
 8002622:	220a      	movs	r2, #10
 8002624:	4953      	ldr	r1, [pc, #332]	@ (8002774 <SEGGER_SYSVIEW_Start+0x170>)
 8002626:	4618      	mov	r0, r3
 8002628:	f7fd fdf2 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8002632:	f7ff fc1d 	bl	8001e70 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8002636:	200a      	movs	r0, #10
 8002638:	f7ff ff30 	bl	800249c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800263c:	f3ef 8311 	mrs	r3, BASEPRI
 8002640:	f04f 0120 	mov.w	r1, #32
 8002644:	f381 8811 	msr	BASEPRI, r1
 8002648:	60bb      	str	r3, [r7, #8]
 800264a:	484b      	ldr	r0, [pc, #300]	@ (8002778 <SEGGER_SYSVIEW_Start+0x174>)
 800264c:	f7ff fd4e 	bl	80020ec <_PreparePacket>
 8002650:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800265a:	4b45      	ldr	r3, [pc, #276]	@ (8002770 <SEGGER_SYSVIEW_Start+0x16c>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002660:	e00b      	b.n	800267a <SEGGER_SYSVIEW_Start+0x76>
 8002662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002664:	b2da      	uxtb	r2, r3
 8002666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002668:	1c59      	adds	r1, r3, #1
 800266a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800266c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	701a      	strb	r2, [r3, #0]
 8002674:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002676:	09db      	lsrs	r3, r3, #7
 8002678:	62bb      	str	r3, [r7, #40]	@ 0x28
 800267a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800267c:	2b7f      	cmp	r3, #127	@ 0x7f
 800267e:	d8f0      	bhi.n	8002662 <SEGGER_SYSVIEW_Start+0x5e>
 8002680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002682:	1c5a      	adds	r2, r3, #1
 8002684:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002686:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002688:	b2d2      	uxtb	r2, r2
 800268a:	701a      	strb	r2, [r3, #0]
 800268c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800268e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	627b      	str	r3, [r7, #36]	@ 0x24
 8002694:	4b36      	ldr	r3, [pc, #216]	@ (8002770 <SEGGER_SYSVIEW_Start+0x16c>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	623b      	str	r3, [r7, #32]
 800269a:	e00b      	b.n	80026b4 <SEGGER_SYSVIEW_Start+0xb0>
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	b2da      	uxtb	r2, r3
 80026a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a2:	1c59      	adds	r1, r3, #1
 80026a4:	6279      	str	r1, [r7, #36]	@ 0x24
 80026a6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80026aa:	b2d2      	uxtb	r2, r2
 80026ac:	701a      	strb	r2, [r3, #0]
 80026ae:	6a3b      	ldr	r3, [r7, #32]
 80026b0:	09db      	lsrs	r3, r3, #7
 80026b2:	623b      	str	r3, [r7, #32]
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80026b8:	d8f0      	bhi.n	800269c <SEGGER_SYSVIEW_Start+0x98>
 80026ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	627a      	str	r2, [r7, #36]	@ 0x24
 80026c0:	6a3a      	ldr	r2, [r7, #32]
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	701a      	strb	r2, [r3, #0]
 80026c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	61fb      	str	r3, [r7, #28]
 80026ce:	4b28      	ldr	r3, [pc, #160]	@ (8002770 <SEGGER_SYSVIEW_Start+0x16c>)
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	61bb      	str	r3, [r7, #24]
 80026d4:	e00b      	b.n	80026ee <SEGGER_SYSVIEW_Start+0xea>
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	b2da      	uxtb	r2, r3
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	1c59      	adds	r1, r3, #1
 80026de:	61f9      	str	r1, [r7, #28]
 80026e0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80026e4:	b2d2      	uxtb	r2, r2
 80026e6:	701a      	strb	r2, [r3, #0]
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	09db      	lsrs	r3, r3, #7
 80026ec:	61bb      	str	r3, [r7, #24]
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80026f2:	d8f0      	bhi.n	80026d6 <SEGGER_SYSVIEW_Start+0xd2>
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	1c5a      	adds	r2, r3, #1
 80026f8:	61fa      	str	r2, [r7, #28]
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	701a      	strb	r2, [r3, #0]
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	2300      	movs	r3, #0
 800270a:	613b      	str	r3, [r7, #16]
 800270c:	e00b      	b.n	8002726 <SEGGER_SYSVIEW_Start+0x122>
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	b2da      	uxtb	r2, r3
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	1c59      	adds	r1, r3, #1
 8002716:	6179      	str	r1, [r7, #20]
 8002718:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	701a      	strb	r2, [r3, #0]
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	09db      	lsrs	r3, r3, #7
 8002724:	613b      	str	r3, [r7, #16]
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	2b7f      	cmp	r3, #127	@ 0x7f
 800272a:	d8f0      	bhi.n	800270e <SEGGER_SYSVIEW_Start+0x10a>
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	617a      	str	r2, [r7, #20]
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	701a      	strb	r2, [r3, #0]
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800273c:	2218      	movs	r2, #24
 800273e:	6839      	ldr	r1, [r7, #0]
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7ff fdc3 	bl	80022cc <_SendPacket>
      RECORD_END();
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800274c:	4b08      	ldr	r3, [pc, #32]	@ (8002770 <SEGGER_SYSVIEW_Start+0x16c>)
 800274e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002750:	2b00      	cmp	r3, #0
 8002752:	d002      	beq.n	800275a <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8002754:	4b06      	ldr	r3, [pc, #24]	@ (8002770 <SEGGER_SYSVIEW_Start+0x16c>)
 8002756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002758:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800275a:	f000 f8e3 	bl	8002924 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800275e:	f000 f8cd 	bl	80028fc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8002762:	f000 fac9 	bl	8002cf8 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8002766:	bf00      	nop
 8002768:	3730      	adds	r7, #48	@ 0x30
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	2000057c 	.word	0x2000057c
 8002774:	08002e30 	.word	0x08002e30
 8002778:	200005ac 	.word	0x200005ac

0800277c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002782:	f3ef 8311 	mrs	r3, BASEPRI
 8002786:	f04f 0120 	mov.w	r1, #32
 800278a:	f381 8811 	msr	BASEPRI, r1
 800278e:	607b      	str	r3, [r7, #4]
 8002790:	480b      	ldr	r0, [pc, #44]	@ (80027c0 <SEGGER_SYSVIEW_Stop+0x44>)
 8002792:	f7ff fcab 	bl	80020ec <_PreparePacket>
 8002796:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8002798:	4b0a      	ldr	r3, [pc, #40]	@ (80027c4 <SEGGER_SYSVIEW_Stop+0x48>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d007      	beq.n	80027b0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80027a0:	220b      	movs	r2, #11
 80027a2:	6839      	ldr	r1, [r7, #0]
 80027a4:	6838      	ldr	r0, [r7, #0]
 80027a6:	f7ff fd91 	bl	80022cc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80027aa:	4b06      	ldr	r3, [pc, #24]	@ (80027c4 <SEGGER_SYSVIEW_Stop+0x48>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f383 8811 	msr	BASEPRI, r3
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	200005ac 	.word	0x200005ac
 80027c4:	2000057c 	.word	0x2000057c

080027c8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08c      	sub	sp, #48	@ 0x30
 80027cc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80027ce:	f3ef 8311 	mrs	r3, BASEPRI
 80027d2:	f04f 0120 	mov.w	r1, #32
 80027d6:	f381 8811 	msr	BASEPRI, r1
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	4845      	ldr	r0, [pc, #276]	@ (80028f4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80027de:	f7ff fc85 	bl	80020ec <_PreparePacket>
 80027e2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80027e4:	68bb      	ldr	r3, [r7, #8]
 80027e6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80027ec:	4b42      	ldr	r3, [pc, #264]	@ (80028f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027f2:	e00b      	b.n	800280c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80027f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027f6:	b2da      	uxtb	r2, r3
 80027f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027fa:	1c59      	adds	r1, r3, #1
 80027fc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80027fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]
 8002806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002808:	09db      	lsrs	r3, r3, #7
 800280a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800280c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800280e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002810:	d8f0      	bhi.n	80027f4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8002812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002818:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]
 800281e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002820:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	627b      	str	r3, [r7, #36]	@ 0x24
 8002826:	4b34      	ldr	r3, [pc, #208]	@ (80028f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	623b      	str	r3, [r7, #32]
 800282c:	e00b      	b.n	8002846 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800282e:	6a3b      	ldr	r3, [r7, #32]
 8002830:	b2da      	uxtb	r2, r3
 8002832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002834:	1c59      	adds	r1, r3, #1
 8002836:	6279      	str	r1, [r7, #36]	@ 0x24
 8002838:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	701a      	strb	r2, [r3, #0]
 8002840:	6a3b      	ldr	r3, [r7, #32]
 8002842:	09db      	lsrs	r3, r3, #7
 8002844:	623b      	str	r3, [r7, #32]
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	2b7f      	cmp	r3, #127	@ 0x7f
 800284a:	d8f0      	bhi.n	800282e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800284c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	627a      	str	r2, [r7, #36]	@ 0x24
 8002852:	6a3a      	ldr	r2, [r7, #32]
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	701a      	strb	r2, [r3, #0]
 8002858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	61fb      	str	r3, [r7, #28]
 8002860:	4b25      	ldr	r3, [pc, #148]	@ (80028f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	61bb      	str	r3, [r7, #24]
 8002866:	e00b      	b.n	8002880 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8002868:	69bb      	ldr	r3, [r7, #24]
 800286a:	b2da      	uxtb	r2, r3
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	1c59      	adds	r1, r3, #1
 8002870:	61f9      	str	r1, [r7, #28]
 8002872:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002876:	b2d2      	uxtb	r2, r2
 8002878:	701a      	strb	r2, [r3, #0]
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	09db      	lsrs	r3, r3, #7
 800287e:	61bb      	str	r3, [r7, #24]
 8002880:	69bb      	ldr	r3, [r7, #24]
 8002882:	2b7f      	cmp	r3, #127	@ 0x7f
 8002884:	d8f0      	bhi.n	8002868 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	1c5a      	adds	r2, r3, #1
 800288a:	61fa      	str	r2, [r7, #28]
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	b2d2      	uxtb	r2, r2
 8002890:	701a      	strb	r2, [r3, #0]
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	2300      	movs	r3, #0
 800289c:	613b      	str	r3, [r7, #16]
 800289e:	e00b      	b.n	80028b8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	1c59      	adds	r1, r3, #1
 80028a8:	6179      	str	r1, [r7, #20]
 80028aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	701a      	strb	r2, [r3, #0]
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	09db      	lsrs	r3, r3, #7
 80028b6:	613b      	str	r3, [r7, #16]
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80028bc:	d8f0      	bhi.n	80028a0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	617a      	str	r2, [r7, #20]
 80028c4:	693a      	ldr	r2, [r7, #16]
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	701a      	strb	r2, [r3, #0]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80028ce:	2218      	movs	r2, #24
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	68b8      	ldr	r0, [r7, #8]
 80028d4:	f7ff fcfa 	bl	80022cc <_SendPacket>
  RECORD_END();
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80028de:	4b06      	ldr	r3, [pc, #24]	@ (80028f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80028e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d002      	beq.n	80028ec <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80028e6:	4b04      	ldr	r3, [pc, #16]	@ (80028f8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028ea:	4798      	blx	r3
  }
}
 80028ec:	bf00      	nop
 80028ee:	3730      	adds	r7, #48	@ 0x30
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	200005ac 	.word	0x200005ac
 80028f8:	2000057c 	.word	0x2000057c

080028fc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8002900:	4b07      	ldr	r3, [pc, #28]	@ (8002920 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d008      	beq.n	800291a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8002908:	4b05      	ldr	r3, [pc, #20]	@ (8002920 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d003      	beq.n	800291a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8002912:	4b03      	ldr	r3, [pc, #12]	@ (8002920 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	4798      	blx	r3
  }
}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	2000057c 	.word	0x2000057c

08002924 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8002924:	b590      	push	{r4, r7, lr}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800292a:	4b15      	ldr	r3, [pc, #84]	@ (8002980 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800292c:	6a1b      	ldr	r3, [r3, #32]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d01a      	beq.n	8002968 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8002932:	4b13      	ldr	r3, [pc, #76]	@ (8002980 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d015      	beq.n	8002968 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800293c:	4b10      	ldr	r3, [pc, #64]	@ (8002980 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800293e:	6a1b      	ldr	r3, [r3, #32]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4798      	blx	r3
 8002944:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8002948:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800294a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	f04f 0300 	mov.w	r3, #0
 8002956:	000a      	movs	r2, r1
 8002958:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800295a:	4613      	mov	r3, r2
 800295c:	461a      	mov	r2, r3
 800295e:	4621      	mov	r1, r4
 8002960:	200d      	movs	r0, #13
 8002962:	f7ff fdf5 	bl	8002550 <SEGGER_SYSVIEW_RecordU32x2>
 8002966:	e006      	b.n	8002976 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8002968:	4b06      	ldr	r3, [pc, #24]	@ (8002984 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4619      	mov	r1, r3
 800296e:	200c      	movs	r0, #12
 8002970:	f7ff fdb2 	bl	80024d8 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8002974:	bf00      	nop
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	bd90      	pop	{r4, r7, pc}
 800297e:	bf00      	nop
 8002980:	2000057c 	.word	0x2000057c
 8002984:	e0001004 	.word	0xe0001004

08002988 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800298e:	f3ef 8311 	mrs	r3, BASEPRI
 8002992:	f04f 0120 	mov.w	r1, #32
 8002996:	f381 8811 	msr	BASEPRI, r1
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	4819      	ldr	r0, [pc, #100]	@ (8002a04 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800299e:	f7ff fba5 	bl	80020ec <_PreparePacket>
 80029a2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80029a8:	4b17      	ldr	r3, [pc, #92]	@ (8002a08 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029b0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	617b      	str	r3, [r7, #20]
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	e00b      	b.n	80029d4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	b2da      	uxtb	r2, r3
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	1c59      	adds	r1, r3, #1
 80029c4:	6179      	str	r1, [r7, #20]
 80029c6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	701a      	strb	r2, [r3, #0]
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	09db      	lsrs	r3, r3, #7
 80029d2:	613b      	str	r3, [r7, #16]
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80029d8:	d8f0      	bhi.n	80029bc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	617a      	str	r2, [r7, #20]
 80029e0:	693a      	ldr	r2, [r7, #16]
 80029e2:	b2d2      	uxtb	r2, r2
 80029e4:	701a      	strb	r2, [r3, #0]
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80029ea:	2202      	movs	r2, #2
 80029ec:	6879      	ldr	r1, [r7, #4]
 80029ee:	68b8      	ldr	r0, [r7, #8]
 80029f0:	f7ff fc6c 	bl	80022cc <_SendPacket>
  RECORD_END();
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f383 8811 	msr	BASEPRI, r3
}
 80029fa:	bf00      	nop
 80029fc:	3718      	adds	r7, #24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	200005ac 	.word	0x200005ac
 8002a08:	e000ed04 	.word	0xe000ed04

08002a0c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002a12:	f3ef 8311 	mrs	r3, BASEPRI
 8002a16:	f04f 0120 	mov.w	r1, #32
 8002a1a:	f381 8811 	msr	BASEPRI, r1
 8002a1e:	607b      	str	r3, [r7, #4]
 8002a20:	4807      	ldr	r0, [pc, #28]	@ (8002a40 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8002a22:	f7ff fb63 	bl	80020ec <_PreparePacket>
 8002a26:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8002a28:	2203      	movs	r2, #3
 8002a2a:	6839      	ldr	r1, [r7, #0]
 8002a2c:	6838      	ldr	r0, [r7, #0]
 8002a2e:	f7ff fc4d 	bl	80022cc <_SendPacket>
  RECORD_END();
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f383 8811 	msr	BASEPRI, r3
}
 8002a38:	bf00      	nop
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	200005ac 	.word	0x200005ac

08002a44 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002a4a:	f3ef 8311 	mrs	r3, BASEPRI
 8002a4e:	f04f 0120 	mov.w	r1, #32
 8002a52:	f381 8811 	msr	BASEPRI, r1
 8002a56:	607b      	str	r3, [r7, #4]
 8002a58:	4807      	ldr	r0, [pc, #28]	@ (8002a78 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8002a5a:	f7ff fb47 	bl	80020ec <_PreparePacket>
 8002a5e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8002a60:	2212      	movs	r2, #18
 8002a62:	6839      	ldr	r1, [r7, #0]
 8002a64:	6838      	ldr	r0, [r7, #0]
 8002a66:	f7ff fc31 	bl	80022cc <_SendPacket>
  RECORD_END();
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f383 8811 	msr	BASEPRI, r3
}
 8002a70:	bf00      	nop
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	200005ac 	.word	0x200005ac

08002a7c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8002a82:	f3ef 8311 	mrs	r3, BASEPRI
 8002a86:	f04f 0120 	mov.w	r1, #32
 8002a8a:	f381 8811 	msr	BASEPRI, r1
 8002a8e:	607b      	str	r3, [r7, #4]
 8002a90:	4807      	ldr	r0, [pc, #28]	@ (8002ab0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8002a92:	f7ff fb2b 	bl	80020ec <_PreparePacket>
 8002a96:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8002a98:	2211      	movs	r2, #17
 8002a9a:	6839      	ldr	r1, [r7, #0]
 8002a9c:	6838      	ldr	r0, [r7, #0]
 8002a9e:	f7ff fc15 	bl	80022cc <_SendPacket>
  RECORD_END();
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f383 8811 	msr	BASEPRI, r3
}
 8002aa8:	bf00      	nop
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	200005ac 	.word	0x200005ac

08002ab4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002abc:	f3ef 8311 	mrs	r3, BASEPRI
 8002ac0:	f04f 0120 	mov.w	r1, #32
 8002ac4:	f381 8811 	msr	BASEPRI, r1
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	4819      	ldr	r0, [pc, #100]	@ (8002b30 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8002acc:	f7ff fb0e 	bl	80020ec <_PreparePacket>
 8002ad0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002ad6:	4b17      	ldr	r3, [pc, #92]	@ (8002b34 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8002ad8:	691b      	ldr	r3, [r3, #16]
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	61fb      	str	r3, [r7, #28]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	61bb      	str	r3, [r7, #24]
 8002ae8:	e00b      	b.n	8002b02 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	1c59      	adds	r1, r3, #1
 8002af2:	61f9      	str	r1, [r7, #28]
 8002af4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002af8:	b2d2      	uxtb	r2, r2
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	09db      	lsrs	r3, r3, #7
 8002b00:	61bb      	str	r3, [r7, #24]
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b06:	d8f0      	bhi.n	8002aea <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	1c5a      	adds	r2, r3, #1
 8002b0c:	61fa      	str	r2, [r7, #28]
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	b2d2      	uxtb	r2, r2
 8002b12:	701a      	strb	r2, [r3, #0]
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8002b18:	2204      	movs	r2, #4
 8002b1a:	68f9      	ldr	r1, [r7, #12]
 8002b1c:	6938      	ldr	r0, [r7, #16]
 8002b1e:	f7ff fbd5 	bl	80022cc <_SendPacket>
  RECORD_END();
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f383 8811 	msr	BASEPRI, r3
}
 8002b28:	bf00      	nop
 8002b2a:	3720      	adds	r7, #32
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	200005ac 	.word	0x200005ac
 8002b34:	2000057c 	.word	0x2000057c

08002b38 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b088      	sub	sp, #32
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8002b40:	f3ef 8311 	mrs	r3, BASEPRI
 8002b44:	f04f 0120 	mov.w	r1, #32
 8002b48:	f381 8811 	msr	BASEPRI, r1
 8002b4c:	617b      	str	r3, [r7, #20]
 8002b4e:	4819      	ldr	r0, [pc, #100]	@ (8002bb4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8002b50:	f7ff facc 	bl	80020ec <_PreparePacket>
 8002b54:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8002b5a:	4b17      	ldr	r3, [pc, #92]	@ (8002bb8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8002b5c:	691b      	ldr	r3, [r3, #16]
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	61fb      	str	r3, [r7, #28]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	61bb      	str	r3, [r7, #24]
 8002b6c:	e00b      	b.n	8002b86 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	1c59      	adds	r1, r3, #1
 8002b76:	61f9      	str	r1, [r7, #28]
 8002b78:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002b7c:	b2d2      	uxtb	r2, r2
 8002b7e:	701a      	strb	r2, [r3, #0]
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	09db      	lsrs	r3, r3, #7
 8002b84:	61bb      	str	r3, [r7, #24]
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	2b7f      	cmp	r3, #127	@ 0x7f
 8002b8a:	d8f0      	bhi.n	8002b6e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	1c5a      	adds	r2, r3, #1
 8002b90:	61fa      	str	r2, [r7, #28]
 8002b92:	69ba      	ldr	r2, [r7, #24]
 8002b94:	b2d2      	uxtb	r2, r2
 8002b96:	701a      	strb	r2, [r3, #0]
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8002b9c:	2206      	movs	r2, #6
 8002b9e:	68f9      	ldr	r1, [r7, #12]
 8002ba0:	6938      	ldr	r0, [r7, #16]
 8002ba2:	f7ff fb93 	bl	80022cc <_SendPacket>
  RECORD_END();
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f383 8811 	msr	BASEPRI, r3
}
 8002bac:	bf00      	nop
 8002bae:	3720      	adds	r7, #32
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	200005ac 	.word	0x200005ac
 8002bb8:	2000057c 	.word	0x2000057c

08002bbc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b08c      	sub	sp, #48	@ 0x30
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8002bc6:	4b3b      	ldr	r3, [pc, #236]	@ (8002cb4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d06d      	beq.n	8002caa <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8002bce:	4b39      	ldr	r3, [pc, #228]	@ (8002cb4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bd8:	e008      	b.n	8002bec <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8002bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8002be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d007      	beq.n	8002bf6 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8002be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002be8:	3301      	adds	r3, #1
 8002bea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bec:	79fb      	ldrb	r3, [r7, #7]
 8002bee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d3f2      	bcc.n	8002bda <SEGGER_SYSVIEW_SendModule+0x1e>
 8002bf4:	e000      	b.n	8002bf8 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8002bf6:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8002bf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d055      	beq.n	8002caa <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002bfe:	f3ef 8311 	mrs	r3, BASEPRI
 8002c02:	f04f 0120 	mov.w	r1, #32
 8002c06:	f381 8811 	msr	BASEPRI, r1
 8002c0a:	617b      	str	r3, [r7, #20]
 8002c0c:	482a      	ldr	r0, [pc, #168]	@ (8002cb8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8002c0e:	f7ff fa6d 	bl	80020ec <_PreparePacket>
 8002c12:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c1c:	79fb      	ldrb	r3, [r7, #7]
 8002c1e:	623b      	str	r3, [r7, #32]
 8002c20:	e00b      	b.n	8002c3a <SEGGER_SYSVIEW_SendModule+0x7e>
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c28:	1c59      	adds	r1, r3, #1
 8002c2a:	6279      	str	r1, [r7, #36]	@ 0x24
 8002c2c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	701a      	strb	r2, [r3, #0]
 8002c34:	6a3b      	ldr	r3, [r7, #32]
 8002c36:	09db      	lsrs	r3, r3, #7
 8002c38:	623b      	str	r3, [r7, #32]
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c3e:	d8f0      	bhi.n	8002c22 <SEGGER_SYSVIEW_SendModule+0x66>
 8002c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c42:	1c5a      	adds	r2, r3, #1
 8002c44:	627a      	str	r2, [r7, #36]	@ 0x24
 8002c46:	6a3a      	ldr	r2, [r7, #32]
 8002c48:	b2d2      	uxtb	r2, r2
 8002c4a:	701a      	strb	r2, [r3, #0]
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c4e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	61fb      	str	r3, [r7, #28]
 8002c54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	61bb      	str	r3, [r7, #24]
 8002c5a:	e00b      	b.n	8002c74 <SEGGER_SYSVIEW_SendModule+0xb8>
 8002c5c:	69bb      	ldr	r3, [r7, #24]
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	1c59      	adds	r1, r3, #1
 8002c64:	61f9      	str	r1, [r7, #28]
 8002c66:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	701a      	strb	r2, [r3, #0]
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	09db      	lsrs	r3, r3, #7
 8002c72:	61bb      	str	r3, [r7, #24]
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	2b7f      	cmp	r3, #127	@ 0x7f
 8002c78:	d8f0      	bhi.n	8002c5c <SEGGER_SYSVIEW_SendModule+0xa0>
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	1c5a      	adds	r2, r3, #1
 8002c7e:	61fa      	str	r2, [r7, #28]
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	701a      	strb	r2, [r3, #0]
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8002c8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2280      	movs	r2, #128	@ 0x80
 8002c90:	4619      	mov	r1, r3
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f7ff f9da 	bl	800204c <_EncodeStr>
 8002c98:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8002c9a:	2216      	movs	r2, #22
 8002c9c:	68f9      	ldr	r1, [r7, #12]
 8002c9e:	6938      	ldr	r0, [r7, #16]
 8002ca0:	f7ff fb14 	bl	80022cc <_SendPacket>
      RECORD_END();
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8002caa:	bf00      	nop
 8002cac:	3730      	adds	r7, #48	@ 0x30
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	200005a4 	.word	0x200005a4
 8002cb8:	200005ac 	.word	0x200005ac

08002cbc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8002cc2:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00f      	beq.n	8002cea <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8002cca:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf4 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d002      	beq.n	8002cde <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f2      	bne.n	8002cd0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8002cea:	bf00      	nop
 8002cec:	3708      	adds	r7, #8
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	200005a4 	.word	0x200005a4

08002cf8 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b086      	sub	sp, #24
 8002cfc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8002cfe:	f3ef 8311 	mrs	r3, BASEPRI
 8002d02:	f04f 0120 	mov.w	r1, #32
 8002d06:	f381 8811 	msr	BASEPRI, r1
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	4817      	ldr	r0, [pc, #92]	@ (8002d6c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8002d0e:	f7ff f9ed 	bl	80020ec <_PreparePacket>
 8002d12:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	617b      	str	r3, [r7, #20]
 8002d1c:	4b14      	ldr	r3, [pc, #80]	@ (8002d70 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	e00b      	b.n	8002d3c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	1c59      	adds	r1, r3, #1
 8002d2c:	6179      	str	r1, [r7, #20]
 8002d2e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	701a      	strb	r2, [r3, #0]
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	09db      	lsrs	r3, r3, #7
 8002d3a:	613b      	str	r3, [r7, #16]
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002d40:	d8f0      	bhi.n	8002d24 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	617a      	str	r2, [r7, #20]
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	701a      	strb	r2, [r3, #0]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8002d52:	221b      	movs	r2, #27
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	68b8      	ldr	r0, [r7, #8]
 8002d58:	f7ff fab8 	bl	80022cc <_SendPacket>
  RECORD_END();
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f383 8811 	msr	BASEPRI, r3
}
 8002d62:	bf00      	nop
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	200005ac 	.word	0x200005ac
 8002d70:	200005a8 	.word	0x200005a8

08002d74 <memset>:
 8002d74:	4402      	add	r2, r0
 8002d76:	4603      	mov	r3, r0
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d100      	bne.n	8002d7e <memset+0xa>
 8002d7c:	4770      	bx	lr
 8002d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d82:	e7f9      	b.n	8002d78 <memset+0x4>

08002d84 <__libc_init_array>:
 8002d84:	b570      	push	{r4, r5, r6, lr}
 8002d86:	4d0d      	ldr	r5, [pc, #52]	@ (8002dbc <__libc_init_array+0x38>)
 8002d88:	4c0d      	ldr	r4, [pc, #52]	@ (8002dc0 <__libc_init_array+0x3c>)
 8002d8a:	1b64      	subs	r4, r4, r5
 8002d8c:	10a4      	asrs	r4, r4, #2
 8002d8e:	2600      	movs	r6, #0
 8002d90:	42a6      	cmp	r6, r4
 8002d92:	d109      	bne.n	8002da8 <__libc_init_array+0x24>
 8002d94:	4d0b      	ldr	r5, [pc, #44]	@ (8002dc4 <__libc_init_array+0x40>)
 8002d96:	4c0c      	ldr	r4, [pc, #48]	@ (8002dc8 <__libc_init_array+0x44>)
 8002d98:	f000 f826 	bl	8002de8 <_init>
 8002d9c:	1b64      	subs	r4, r4, r5
 8002d9e:	10a4      	asrs	r4, r4, #2
 8002da0:	2600      	movs	r6, #0
 8002da2:	42a6      	cmp	r6, r4
 8002da4:	d105      	bne.n	8002db2 <__libc_init_array+0x2e>
 8002da6:	bd70      	pop	{r4, r5, r6, pc}
 8002da8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dac:	4798      	blx	r3
 8002dae:	3601      	adds	r6, #1
 8002db0:	e7ee      	b.n	8002d90 <__libc_init_array+0xc>
 8002db2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002db6:	4798      	blx	r3
 8002db8:	3601      	adds	r6, #1
 8002dba:	e7f2      	b.n	8002da2 <__libc_init_array+0x1e>
 8002dbc:	08002e44 	.word	0x08002e44
 8002dc0:	08002e44 	.word	0x08002e44
 8002dc4:	08002e44 	.word	0x08002e44
 8002dc8:	08002e48 	.word	0x08002e48

08002dcc <memcpy>:
 8002dcc:	440a      	add	r2, r1
 8002dce:	4291      	cmp	r1, r2
 8002dd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8002dd4:	d100      	bne.n	8002dd8 <memcpy+0xc>
 8002dd6:	4770      	bx	lr
 8002dd8:	b510      	push	{r4, lr}
 8002dda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002dde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002de2:	4291      	cmp	r1, r2
 8002de4:	d1f9      	bne.n	8002dda <memcpy+0xe>
 8002de6:	bd10      	pop	{r4, pc}

08002de8 <_init>:
 8002de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dea:	bf00      	nop
 8002dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dee:	bc08      	pop	{r3}
 8002df0:	469e      	mov	lr, r3
 8002df2:	4770      	bx	lr

08002df4 <_fini>:
 8002df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002df6:	bf00      	nop
 8002df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dfa:	bc08      	pop	{r3}
 8002dfc:	469e      	mov	lr, r3
 8002dfe:	4770      	bx	lr
