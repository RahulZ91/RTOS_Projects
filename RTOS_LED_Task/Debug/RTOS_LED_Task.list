
RTOS_LED_Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ef8  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  080080c8  080080c8  000090c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008250  08008250  0000a068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008250  08008250  00009250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008258  08008258  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008258  08008258  00009258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800825c  0800825c  0000925c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008260  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000145dc  20000068  080082c8  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014644  080082c8  0000a644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014769  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000332f  00000000  00000000  0001e801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  00021b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f31  00000000  00000000  00022ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024e9c  00000000  00000000  00023e29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019500  00000000  00000000  00048cc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dda33  00000000  00000000  000621c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013fbf8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057a4  00000000  00000000  0013fc3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000e8  00000000  00000000  001453e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080080b0 	.word	0x080080b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080080b0 	.word	0x080080b0

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012f24 	.word	0x20012f24
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295
 8000360:	f04f 30ff 	movne.w	r0, #4294967295
 8000364:	f000 b988 	b.w	8000678 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	468e      	mov	lr, r1
 8000388:	4604      	mov	r4, r0
 800038a:	4688      	mov	r8, r1
 800038c:	2b00      	cmp	r3, #0
 800038e:	d14a      	bne.n	8000426 <__udivmoddi4+0xa6>
 8000390:	428a      	cmp	r2, r1
 8000392:	4617      	mov	r7, r2
 8000394:	d962      	bls.n	800045c <__udivmoddi4+0xdc>
 8000396:	fab2 f682 	clz	r6, r2
 800039a:	b14e      	cbz	r6, 80003b0 <__udivmoddi4+0x30>
 800039c:	f1c6 0320 	rsb	r3, r6, #32
 80003a0:	fa01 f806 	lsl.w	r8, r1, r6
 80003a4:	fa20 f303 	lsr.w	r3, r0, r3
 80003a8:	40b7      	lsls	r7, r6
 80003aa:	ea43 0808 	orr.w	r8, r3, r8
 80003ae:	40b4      	lsls	r4, r6
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003bc:	0c23      	lsrs	r3, r4, #16
 80003be:	fb0e 8811 	mls	r8, lr, r1, r8
 80003c2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003c6:	fb01 f20c 	mul.w	r2, r1, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0x62>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f101 30ff 	add.w	r0, r1, #4294967295
 80003d4:	f080 80ea 	bcs.w	80005ac <__udivmoddi4+0x22c>
 80003d8:	429a      	cmp	r2, r3
 80003da:	f240 80e7 	bls.w	80005ac <__udivmoddi4+0x22c>
 80003de:	3902      	subs	r1, #2
 80003e0:	443b      	add	r3, r7
 80003e2:	1a9a      	subs	r2, r3, r2
 80003e4:	b2a3      	uxth	r3, r4
 80003e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003f6:	459c      	cmp	ip, r3
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x8e>
 80003fa:	18fb      	adds	r3, r7, r3
 80003fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000400:	f080 80d6 	bcs.w	80005b0 <__udivmoddi4+0x230>
 8000404:	459c      	cmp	ip, r3
 8000406:	f240 80d3 	bls.w	80005b0 <__udivmoddi4+0x230>
 800040a:	443b      	add	r3, r7
 800040c:	3802      	subs	r0, #2
 800040e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000412:	eba3 030c 	sub.w	r3, r3, ip
 8000416:	2100      	movs	r1, #0
 8000418:	b11d      	cbz	r5, 8000422 <__udivmoddi4+0xa2>
 800041a:	40f3      	lsrs	r3, r6
 800041c:	2200      	movs	r2, #0
 800041e:	e9c5 3200 	strd	r3, r2, [r5]
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	428b      	cmp	r3, r1
 8000428:	d905      	bls.n	8000436 <__udivmoddi4+0xb6>
 800042a:	b10d      	cbz	r5, 8000430 <__udivmoddi4+0xb0>
 800042c:	e9c5 0100 	strd	r0, r1, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	4608      	mov	r0, r1
 8000434:	e7f5      	b.n	8000422 <__udivmoddi4+0xa2>
 8000436:	fab3 f183 	clz	r1, r3
 800043a:	2900      	cmp	r1, #0
 800043c:	d146      	bne.n	80004cc <__udivmoddi4+0x14c>
 800043e:	4573      	cmp	r3, lr
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0xc8>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 8105 	bhi.w	8000652 <__udivmoddi4+0x2d2>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb6e 0203 	sbc.w	r2, lr, r3
 800044e:	2001      	movs	r0, #1
 8000450:	4690      	mov	r8, r2
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0e5      	beq.n	8000422 <__udivmoddi4+0xa2>
 8000456:	e9c5 4800 	strd	r4, r8, [r5]
 800045a:	e7e2      	b.n	8000422 <__udivmoddi4+0xa2>
 800045c:	2a00      	cmp	r2, #0
 800045e:	f000 8090 	beq.w	8000582 <__udivmoddi4+0x202>
 8000462:	fab2 f682 	clz	r6, r2
 8000466:	2e00      	cmp	r6, #0
 8000468:	f040 80a4 	bne.w	80005b4 <__udivmoddi4+0x234>
 800046c:	1a8a      	subs	r2, r1, r2
 800046e:	0c03      	lsrs	r3, r0, #16
 8000470:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000474:	b280      	uxth	r0, r0
 8000476:	b2bc      	uxth	r4, r7
 8000478:	2101      	movs	r1, #1
 800047a:	fbb2 fcfe 	udiv	ip, r2, lr
 800047e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000482:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000486:	fb04 f20c 	mul.w	r2, r4, ip
 800048a:	429a      	cmp	r2, r3
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x11e>
 800048e:	18fb      	adds	r3, r7, r3
 8000490:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000494:	d202      	bcs.n	800049c <__udivmoddi4+0x11c>
 8000496:	429a      	cmp	r2, r3
 8000498:	f200 80e0 	bhi.w	800065c <__udivmoddi4+0x2dc>
 800049c:	46c4      	mov	ip, r8
 800049e:	1a9b      	subs	r3, r3, r2
 80004a0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004a4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004a8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ac:	fb02 f404 	mul.w	r4, r2, r4
 80004b0:	429c      	cmp	r4, r3
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0x144>
 80004b4:	18fb      	adds	r3, r7, r3
 80004b6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0x142>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f200 80ca 	bhi.w	8000656 <__udivmoddi4+0x2d6>
 80004c2:	4602      	mov	r2, r0
 80004c4:	1b1b      	subs	r3, r3, r4
 80004c6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004ca:	e7a5      	b.n	8000418 <__udivmoddi4+0x98>
 80004cc:	f1c1 0620 	rsb	r6, r1, #32
 80004d0:	408b      	lsls	r3, r1
 80004d2:	fa22 f706 	lsr.w	r7, r2, r6
 80004d6:	431f      	orrs	r7, r3
 80004d8:	fa0e f401 	lsl.w	r4, lr, r1
 80004dc:	fa20 f306 	lsr.w	r3, r0, r6
 80004e0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004e4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004e8:	4323      	orrs	r3, r4
 80004ea:	fa00 f801 	lsl.w	r8, r0, r1
 80004ee:	fa1f fc87 	uxth.w	ip, r7
 80004f2:	fbbe f0f9 	udiv	r0, lr, r9
 80004f6:	0c1c      	lsrs	r4, r3, #16
 80004f8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004fc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000500:	fb00 fe0c 	mul.w	lr, r0, ip
 8000504:	45a6      	cmp	lr, r4
 8000506:	fa02 f201 	lsl.w	r2, r2, r1
 800050a:	d909      	bls.n	8000520 <__udivmoddi4+0x1a0>
 800050c:	193c      	adds	r4, r7, r4
 800050e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000512:	f080 809c 	bcs.w	800064e <__udivmoddi4+0x2ce>
 8000516:	45a6      	cmp	lr, r4
 8000518:	f240 8099 	bls.w	800064e <__udivmoddi4+0x2ce>
 800051c:	3802      	subs	r0, #2
 800051e:	443c      	add	r4, r7
 8000520:	eba4 040e 	sub.w	r4, r4, lr
 8000524:	fa1f fe83 	uxth.w	lr, r3
 8000528:	fbb4 f3f9 	udiv	r3, r4, r9
 800052c:	fb09 4413 	mls	r4, r9, r3, r4
 8000530:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000534:	fb03 fc0c 	mul.w	ip, r3, ip
 8000538:	45a4      	cmp	ip, r4
 800053a:	d908      	bls.n	800054e <__udivmoddi4+0x1ce>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000542:	f080 8082 	bcs.w	800064a <__udivmoddi4+0x2ca>
 8000546:	45a4      	cmp	ip, r4
 8000548:	d97f      	bls.n	800064a <__udivmoddi4+0x2ca>
 800054a:	3b02      	subs	r3, #2
 800054c:	443c      	add	r4, r7
 800054e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000552:	eba4 040c 	sub.w	r4, r4, ip
 8000556:	fba0 ec02 	umull	lr, ip, r0, r2
 800055a:	4564      	cmp	r4, ip
 800055c:	4673      	mov	r3, lr
 800055e:	46e1      	mov	r9, ip
 8000560:	d362      	bcc.n	8000628 <__udivmoddi4+0x2a8>
 8000562:	d05f      	beq.n	8000624 <__udivmoddi4+0x2a4>
 8000564:	b15d      	cbz	r5, 800057e <__udivmoddi4+0x1fe>
 8000566:	ebb8 0203 	subs.w	r2, r8, r3
 800056a:	eb64 0409 	sbc.w	r4, r4, r9
 800056e:	fa04 f606 	lsl.w	r6, r4, r6
 8000572:	fa22 f301 	lsr.w	r3, r2, r1
 8000576:	431e      	orrs	r6, r3
 8000578:	40cc      	lsrs	r4, r1
 800057a:	e9c5 6400 	strd	r6, r4, [r5]
 800057e:	2100      	movs	r1, #0
 8000580:	e74f      	b.n	8000422 <__udivmoddi4+0xa2>
 8000582:	fbb1 fcf2 	udiv	ip, r1, r2
 8000586:	0c01      	lsrs	r1, r0, #16
 8000588:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800058c:	b280      	uxth	r0, r0
 800058e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000592:	463b      	mov	r3, r7
 8000594:	4638      	mov	r0, r7
 8000596:	463c      	mov	r4, r7
 8000598:	46b8      	mov	r8, r7
 800059a:	46be      	mov	lr, r7
 800059c:	2620      	movs	r6, #32
 800059e:	fbb1 f1f7 	udiv	r1, r1, r7
 80005a2:	eba2 0208 	sub.w	r2, r2, r8
 80005a6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005aa:	e766      	b.n	800047a <__udivmoddi4+0xfa>
 80005ac:	4601      	mov	r1, r0
 80005ae:	e718      	b.n	80003e2 <__udivmoddi4+0x62>
 80005b0:	4610      	mov	r0, r2
 80005b2:	e72c      	b.n	800040e <__udivmoddi4+0x8e>
 80005b4:	f1c6 0220 	rsb	r2, r6, #32
 80005b8:	fa2e f302 	lsr.w	r3, lr, r2
 80005bc:	40b7      	lsls	r7, r6
 80005be:	40b1      	lsls	r1, r6
 80005c0:	fa20 f202 	lsr.w	r2, r0, r2
 80005c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005c8:	430a      	orrs	r2, r1
 80005ca:	fbb3 f8fe 	udiv	r8, r3, lr
 80005ce:	b2bc      	uxth	r4, r7
 80005d0:	fb0e 3318 	mls	r3, lr, r8, r3
 80005d4:	0c11      	lsrs	r1, r2, #16
 80005d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005da:	fb08 f904 	mul.w	r9, r8, r4
 80005de:	40b0      	lsls	r0, r6
 80005e0:	4589      	cmp	r9, r1
 80005e2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005e6:	b280      	uxth	r0, r0
 80005e8:	d93e      	bls.n	8000668 <__udivmoddi4+0x2e8>
 80005ea:	1879      	adds	r1, r7, r1
 80005ec:	f108 3cff 	add.w	ip, r8, #4294967295
 80005f0:	d201      	bcs.n	80005f6 <__udivmoddi4+0x276>
 80005f2:	4589      	cmp	r9, r1
 80005f4:	d81f      	bhi.n	8000636 <__udivmoddi4+0x2b6>
 80005f6:	eba1 0109 	sub.w	r1, r1, r9
 80005fa:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fe:	fb09 f804 	mul.w	r8, r9, r4
 8000602:	fb0e 1119 	mls	r1, lr, r9, r1
 8000606:	b292      	uxth	r2, r2
 8000608:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800060c:	4542      	cmp	r2, r8
 800060e:	d229      	bcs.n	8000664 <__udivmoddi4+0x2e4>
 8000610:	18ba      	adds	r2, r7, r2
 8000612:	f109 31ff 	add.w	r1, r9, #4294967295
 8000616:	d2c4      	bcs.n	80005a2 <__udivmoddi4+0x222>
 8000618:	4542      	cmp	r2, r8
 800061a:	d2c2      	bcs.n	80005a2 <__udivmoddi4+0x222>
 800061c:	f1a9 0102 	sub.w	r1, r9, #2
 8000620:	443a      	add	r2, r7
 8000622:	e7be      	b.n	80005a2 <__udivmoddi4+0x222>
 8000624:	45f0      	cmp	r8, lr
 8000626:	d29d      	bcs.n	8000564 <__udivmoddi4+0x1e4>
 8000628:	ebbe 0302 	subs.w	r3, lr, r2
 800062c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000630:	3801      	subs	r0, #1
 8000632:	46e1      	mov	r9, ip
 8000634:	e796      	b.n	8000564 <__udivmoddi4+0x1e4>
 8000636:	eba7 0909 	sub.w	r9, r7, r9
 800063a:	4449      	add	r1, r9
 800063c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000640:	fbb1 f9fe 	udiv	r9, r1, lr
 8000644:	fb09 f804 	mul.w	r8, r9, r4
 8000648:	e7db      	b.n	8000602 <__udivmoddi4+0x282>
 800064a:	4673      	mov	r3, lr
 800064c:	e77f      	b.n	800054e <__udivmoddi4+0x1ce>
 800064e:	4650      	mov	r0, sl
 8000650:	e766      	b.n	8000520 <__udivmoddi4+0x1a0>
 8000652:	4608      	mov	r0, r1
 8000654:	e6fd      	b.n	8000452 <__udivmoddi4+0xd2>
 8000656:	443b      	add	r3, r7
 8000658:	3a02      	subs	r2, #2
 800065a:	e733      	b.n	80004c4 <__udivmoddi4+0x144>
 800065c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000660:	443b      	add	r3, r7
 8000662:	e71c      	b.n	800049e <__udivmoddi4+0x11e>
 8000664:	4649      	mov	r1, r9
 8000666:	e79c      	b.n	80005a2 <__udivmoddi4+0x222>
 8000668:	eba1 0109 	sub.w	r1, r1, r9
 800066c:	46c4      	mov	ip, r8
 800066e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000672:	fb09 f804 	mul.w	r8, r9, r4
 8000676:	e7c4      	b.n	8000602 <__udivmoddi4+0x282>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000682:	f000 fa97 	bl	8000bb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000686:	f000 f855 	bl	8000734 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  // Set the 0th bit to 1
  DWT_CTRL |=(1<<0);
 800068a:	4b23      	ldr	r3, [pc, #140]	@ (8000718 <main+0x9c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a22      	ldr	r2, [pc, #136]	@ (8000718 <main+0x9c>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 8000696:	4821      	ldr	r0, [pc, #132]	@ (800071c <main+0xa0>)
 8000698:	f004 fe04 	bl	80052a4 <SEGGER_UART_init>

   SEGGER_SYSVIEW_Conf();
 800069c:	f004 fb70 	bl	8004d80 <SEGGER_SYSVIEW_Conf>

    //SEGGER_SYSVIEW_Start();

    status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 80006a0:	f107 0308 	add.w	r3, r7, #8
 80006a4:	9301      	str	r3, [sp, #4]
 80006a6:	2302      	movs	r3, #2
 80006a8:	9300      	str	r3, [sp, #0]
 80006aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000720 <main+0xa4>)
 80006ac:	22c8      	movs	r2, #200	@ 0xc8
 80006ae:	491d      	ldr	r1, [pc, #116]	@ (8000724 <main+0xa8>)
 80006b0:	481d      	ldr	r0, [pc, #116]	@ (8000728 <main+0xac>)
 80006b2:	f002 fc1f 	bl	8002ef4 <xTaskCreate>
 80006b6:	6178      	str	r0, [r7, #20]

    configASSERT(status == pdPASS);
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d00b      	beq.n	80006d6 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80006be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006c2:	f383 8811 	msr	BASEPRI, r3
 80006c6:	f3bf 8f6f 	isb	sy
 80006ca:	f3bf 8f4f 	dsb	sy
 80006ce:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006d0:	bf00      	nop
 80006d2:	bf00      	nop
 80006d4:	e7fd      	b.n	80006d2 <main+0x56>

    status = xTaskCreate(led_blink, "LED Blink", 200, NULL, 2, &task2_handle);
 80006d6:	1d3b      	adds	r3, r7, #4
 80006d8:	9301      	str	r3, [sp, #4]
 80006da:	2302      	movs	r3, #2
 80006dc:	9300      	str	r3, [sp, #0]
 80006de:	2300      	movs	r3, #0
 80006e0:	22c8      	movs	r2, #200	@ 0xc8
 80006e2:	4912      	ldr	r1, [pc, #72]	@ (800072c <main+0xb0>)
 80006e4:	4812      	ldr	r0, [pc, #72]	@ (8000730 <main+0xb4>)
 80006e6:	f002 fc05 	bl	8002ef4 <xTaskCreate>
 80006ea:	6178      	str	r0, [r7, #20]

    configASSERT(status == pdPASS);
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d00b      	beq.n	800070a <main+0x8e>
        __asm volatile
 80006f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006f6:	f383 8811 	msr	BASEPRI, r3
 80006fa:	f3bf 8f6f 	isb	sy
 80006fe:	f3bf 8f4f 	dsb	sy
 8000702:	60fb      	str	r3, [r7, #12]
    }
 8000704:	bf00      	nop
 8000706:	bf00      	nop
 8000708:	e7fd      	b.n	8000706 <main+0x8a>

    //start the freeRTOS scheduler
    vTaskStartScheduler();
 800070a:	f002 fdf3 	bl	80032f4 <vTaskStartScheduler>
    //if the control comes here, then the launch of the scheduler has failed due to
    //insufficient memory in heap
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800070e:	f000 f87d 	bl	800080c <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000712:	bf00      	nop
 8000714:	e7fd      	b.n	8000712 <main+0x96>
 8000716:	bf00      	nop
 8000718:	e0001000 	.word	0xe0001000
 800071c:	0007a120 	.word	0x0007a120
 8000720:	080080c8 	.word	0x080080c8
 8000724:	080080e0 	.word	0x080080e0
 8000728:	08000909 	.word	0x08000909
 800072c:	080080e8 	.word	0x080080e8
 8000730:	08000945 	.word	0x08000945

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b094      	sub	sp, #80	@ 0x50
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	2234      	movs	r2, #52	@ 0x34
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f007 f82e 	bl	80077a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	f107 0308 	add.w	r3, r7, #8
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000758:	2300      	movs	r3, #0
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	4b29      	ldr	r3, [pc, #164]	@ (8000804 <SystemClock_Config+0xd0>)
 800075e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000760:	4a28      	ldr	r2, [pc, #160]	@ (8000804 <SystemClock_Config+0xd0>)
 8000762:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000766:	6413      	str	r3, [r2, #64]	@ 0x40
 8000768:	4b26      	ldr	r3, [pc, #152]	@ (8000804 <SystemClock_Config+0xd0>)
 800076a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800076c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000774:	2300      	movs	r3, #0
 8000776:	603b      	str	r3, [r7, #0]
 8000778:	4b23      	ldr	r3, [pc, #140]	@ (8000808 <SystemClock_Config+0xd4>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	4a22      	ldr	r2, [pc, #136]	@ (8000808 <SystemClock_Config+0xd4>)
 800077e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000782:	6013      	str	r3, [r2, #0]
 8000784:	4b20      	ldr	r3, [pc, #128]	@ (8000808 <SystemClock_Config+0xd4>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800078c:	603b      	str	r3, [r7, #0]
 800078e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000790:	2302      	movs	r3, #2
 8000792:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000794:	2301      	movs	r3, #1
 8000796:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000798:	2310      	movs	r3, #16
 800079a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800079c:	2302      	movs	r3, #2
 800079e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a0:	2300      	movs	r3, #0
 80007a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007a4:	2308      	movs	r3, #8
 80007a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007a8:	23a8      	movs	r3, #168	@ 0xa8
 80007aa:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007ac:	2302      	movs	r3, #2
 80007ae:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007b8:	f107 031c 	add.w	r3, r7, #28
 80007bc:	4618      	mov	r0, r3
 80007be:	f001 f871 	bl	80018a4 <HAL_RCC_OscConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007c8:	f000 f8e8 	bl	800099c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007cc:	230f      	movs	r3, #15
 80007ce:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d0:	2302      	movs	r3, #2
 80007d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d4:	2300      	movs	r3, #0
 80007d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007d8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007de:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	2105      	movs	r1, #5
 80007ea:	4618      	mov	r0, r3
 80007ec:	f000 fcf2 	bl	80011d4 <HAL_RCC_ClockConfig>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007f6:	f000 f8d1 	bl	800099c <Error_Handler>
  }
}
 80007fa:	bf00      	nop
 80007fc:	3750      	adds	r7, #80	@ 0x50
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	40023800 	.word	0x40023800
 8000808:	40007000 	.word	0x40007000

0800080c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b08a      	sub	sp, #40	@ 0x28
 8000810:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000812:	f107 0314 	add.w	r3, r7, #20
 8000816:	2200      	movs	r2, #0
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	605a      	str	r2, [r3, #4]
 800081c:	609a      	str	r2, [r3, #8]
 800081e:	60da      	str	r2, [r3, #12]
 8000820:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]
 8000826:	4b35      	ldr	r3, [pc, #212]	@ (80008fc <MX_GPIO_Init+0xf0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a34      	ldr	r2, [pc, #208]	@ (80008fc <MX_GPIO_Init+0xf0>)
 800082c:	f043 0304 	orr.w	r3, r3, #4
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b32      	ldr	r3, [pc, #200]	@ (80008fc <MX_GPIO_Init+0xf0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0304 	and.w	r3, r3, #4
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	4b2e      	ldr	r3, [pc, #184]	@ (80008fc <MX_GPIO_Init+0xf0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a2d      	ldr	r2, [pc, #180]	@ (80008fc <MX_GPIO_Init+0xf0>)
 8000848:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b2b      	ldr	r3, [pc, #172]	@ (80008fc <MX_GPIO_Init+0xf0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	4b27      	ldr	r3, [pc, #156]	@ (80008fc <MX_GPIO_Init+0xf0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a26      	ldr	r2, [pc, #152]	@ (80008fc <MX_GPIO_Init+0xf0>)
 8000864:	f043 0301 	orr.w	r3, r3, #1
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b24      	ldr	r3, [pc, #144]	@ (80008fc <MX_GPIO_Init+0xf0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0301 	and.w	r3, r3, #1
 8000872:	60bb      	str	r3, [r7, #8]
 8000874:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	607b      	str	r3, [r7, #4]
 800087a:	4b20      	ldr	r3, [pc, #128]	@ (80008fc <MX_GPIO_Init+0xf0>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	4a1f      	ldr	r2, [pc, #124]	@ (80008fc <MX_GPIO_Init+0xf0>)
 8000880:	f043 0302 	orr.w	r3, r3, #2
 8000884:	6313      	str	r3, [r2, #48]	@ 0x30
 8000886:	4b1d      	ldr	r3, [pc, #116]	@ (80008fc <MX_GPIO_Init+0xf0>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	f003 0302 	and.w	r3, r3, #2
 800088e:	607b      	str	r3, [r7, #4]
 8000890:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2120      	movs	r1, #32
 8000896:	481a      	ldr	r0, [pc, #104]	@ (8000900 <MX_GPIO_Init+0xf4>)
 8000898:	f000 fc68 	bl	800116c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800089c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4619      	mov	r1, r3
 80008b2:	4814      	ldr	r0, [pc, #80]	@ (8000904 <MX_GPIO_Init+0xf8>)
 80008b4:	f000 fac6 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008b8:	230c      	movs	r3, #12
 80008ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c4:	2303      	movs	r3, #3
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008c8:	2307      	movs	r3, #7
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4619      	mov	r1, r3
 80008d2:	480b      	ldr	r0, [pc, #44]	@ (8000900 <MX_GPIO_Init+0xf4>)
 80008d4:	f000 fab6 	bl	8000e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008d8:	2320      	movs	r3, #32
 80008da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008dc:	2301      	movs	r3, #1
 80008de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	4619      	mov	r1, r3
 80008ee:	4804      	ldr	r0, [pc, #16]	@ (8000900 <MX_GPIO_Init+0xf4>)
 80008f0:	f000 faa8 	bl	8000e44 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008f4:	bf00      	nop
 80008f6:	3728      	adds	r7, #40	@ 0x28
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	40023800 	.word	0x40023800
 8000900:	40020000 	.word	0x40020000
 8000904:	40020800 	.word	0x40020800

08000908 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b09c      	sub	sp, #112	@ 0x70
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

	char msg[100];

	while(1)
	{
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000910:	f107 000c 	add.w	r0, r7, #12
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	4a09      	ldr	r2, [pc, #36]	@ (800093c <task1_handler+0x34>)
 8000918:	2164      	movs	r1, #100	@ 0x64
 800091a:	f006 fefd 	bl	8007718 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 800091e:	f107 030c 	add.w	r3, r7, #12
 8000922:	4618      	mov	r0, r3
 8000924:	f006 fe5a 	bl	80075dc <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 8000928:	4b05      	ldr	r3, [pc, #20]	@ (8000940 <task1_handler+0x38>)
 800092a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	f3bf 8f4f 	dsb	sy
 8000934:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000938:	bf00      	nop
 800093a:	e7e9      	b.n	8000910 <task1_handler+0x8>
 800093c:	080080f4 	.word	0x080080f4
 8000940:	e000ed04 	.word	0xe000ed04

08000944 <led_blink>:

}


static void led_blink(void* parameters)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
		HAL_GPIO_TogglePin(GPIOA, LED_USER);
 800094c:	2120      	movs	r1, #32
 800094e:	4808      	ldr	r0, [pc, #32]	@ (8000970 <led_blink+0x2c>)
 8000950:	f000 fc25 	bl	800119e <HAL_GPIO_TogglePin>
		HAL_Delay(1500);
 8000954:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000958:	f000 f96e 	bl	8000c38 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("LED");
 800095c:	4805      	ldr	r0, [pc, #20]	@ (8000974 <led_blink+0x30>)
 800095e:	f006 fe3d 	bl	80075dc <SEGGER_SYSVIEW_PrintfTarget>
		vTaskDelete(NULL);
 8000962:	2000      	movs	r0, #0
 8000964:	f002 fc1c 	bl	80031a0 <vTaskDelete>
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40020000 	.word	0x40020000
 8000974:	080080f8 	.word	0x080080f8

08000978 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	4a04      	ldr	r2, [pc, #16]	@ (8000998 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d101      	bne.n	800098e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800098a:	f000 f935 	bl	8000bf8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800098e:	bf00      	nop
 8000990:	3708      	adds	r7, #8
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40001000 	.word	0x40001000

0800099c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a0:	b672      	cpsid	i
}
 80009a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <Error_Handler+0x8>

080009a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	4b10      	ldr	r3, [pc, #64]	@ (80009f4 <HAL_MspInit+0x4c>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b6:	4a0f      	ldr	r2, [pc, #60]	@ (80009f4 <HAL_MspInit+0x4c>)
 80009b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80009be:	4b0d      	ldr	r3, [pc, #52]	@ (80009f4 <HAL_MspInit+0x4c>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	603b      	str	r3, [r7, #0]
 80009ce:	4b09      	ldr	r3, [pc, #36]	@ (80009f4 <HAL_MspInit+0x4c>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d2:	4a08      	ldr	r2, [pc, #32]	@ (80009f4 <HAL_MspInit+0x4c>)
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80009da:	4b06      	ldr	r3, [pc, #24]	@ (80009f4 <HAL_MspInit+0x4c>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
vInitPrioGroupValue();
 80009e6:	f003 fe09 	bl	80045fc <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023800 	.word	0x40023800

080009f8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b08e      	sub	sp, #56	@ 0x38
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a04:	2300      	movs	r3, #0
 8000a06:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	4b33      	ldr	r3, [pc, #204]	@ (8000adc <HAL_InitTick+0xe4>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a10:	4a32      	ldr	r2, [pc, #200]	@ (8000adc <HAL_InitTick+0xe4>)
 8000a12:	f043 0310 	orr.w	r3, r3, #16
 8000a16:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a18:	4b30      	ldr	r3, [pc, #192]	@ (8000adc <HAL_InitTick+0xe4>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1c:	f003 0310 	and.w	r3, r3, #16
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a24:	f107 0210 	add.w	r2, r7, #16
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	4611      	mov	r1, r2
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 fcd6 	bl	80013e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a34:	6a3b      	ldr	r3, [r7, #32]
 8000a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d103      	bne.n	8000a46 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a3e:	f000 fcbb 	bl	80013b8 <HAL_RCC_GetPCLK1Freq>
 8000a42:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a44:	e004      	b.n	8000a50 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a46:	f000 fcb7 	bl	80013b8 <HAL_RCC_GetPCLK1Freq>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	005b      	lsls	r3, r3, #1
 8000a4e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a52:	4a23      	ldr	r2, [pc, #140]	@ (8000ae0 <HAL_InitTick+0xe8>)
 8000a54:	fba2 2303 	umull	r2, r3, r2, r3
 8000a58:	0c9b      	lsrs	r3, r3, #18
 8000a5a:	3b01      	subs	r3, #1
 8000a5c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ae4 <HAL_InitTick+0xec>)
 8000a60:	4a21      	ldr	r2, [pc, #132]	@ (8000ae8 <HAL_InitTick+0xf0>)
 8000a62:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a64:	4b1f      	ldr	r3, [pc, #124]	@ (8000ae4 <HAL_InitTick+0xec>)
 8000a66:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a6a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ae4 <HAL_InitTick+0xec>)
 8000a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a70:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a72:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae4 <HAL_InitTick+0xec>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ae4 <HAL_InitTick+0xec>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a7e:	4b19      	ldr	r3, [pc, #100]	@ (8000ae4 <HAL_InitTick+0xec>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a84:	4817      	ldr	r0, [pc, #92]	@ (8000ae4 <HAL_InitTick+0xec>)
 8000a86:	f001 f9ab 	bl	8001de0 <HAL_TIM_Base_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a90:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d11b      	bne.n	8000ad0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a98:	4812      	ldr	r0, [pc, #72]	@ (8000ae4 <HAL_InitTick+0xec>)
 8000a9a:	f001 f9fb 	bl	8001e94 <HAL_TIM_Base_Start_IT>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000aa4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d111      	bne.n	8000ad0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000aac:	2036      	movs	r0, #54	@ 0x36
 8000aae:	f000 f9bb 	bl	8000e28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	2b0f      	cmp	r3, #15
 8000ab6:	d808      	bhi.n	8000aca <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ab8:	2200      	movs	r2, #0
 8000aba:	6879      	ldr	r1, [r7, #4]
 8000abc:	2036      	movs	r0, #54	@ 0x36
 8000abe:	f000 f997 	bl	8000df0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	@ (8000aec <HAL_InitTick+0xf4>)
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6013      	str	r3, [r2, #0]
 8000ac8:	e002      	b.n	8000ad0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ad0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3738      	adds	r7, #56	@ 0x38
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	431bde83 	.word	0x431bde83
 8000ae4:	20000084 	.word	0x20000084
 8000ae8:	40001000 	.word	0x40001000
 8000aec:	20000004 	.word	0x20000004

08000af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000af4:	bf00      	nop
 8000af6:	e7fd      	b.n	8000af4 <NMI_Handler+0x4>

08000af8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000afc:	bf00      	nop
 8000afe:	e7fd      	b.n	8000afc <HardFault_Handler+0x4>

08000b00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b04:	bf00      	nop
 8000b06:	e7fd      	b.n	8000b04 <MemManage_Handler+0x4>

08000b08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b0c:	bf00      	nop
 8000b0e:	e7fd      	b.n	8000b0c <BusFault_Handler+0x4>

08000b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <UsageFault_Handler+0x4>

08000b18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
	...

08000b28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b2c:	4802      	ldr	r0, [pc, #8]	@ (8000b38 <TIM6_DAC_IRQHandler+0x10>)
 8000b2e:	f001 fa21 	bl	8001f74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000084 	.word	0x20000084

08000b3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <SystemInit+0x20>)
 8000b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b46:	4a05      	ldr	r2, [pc, #20]	@ (8000b5c <SystemInit+0x20>)
 8000b48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b98 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b64:	f7ff ffea 	bl	8000b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b68:	480c      	ldr	r0, [pc, #48]	@ (8000b9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b6a:	490d      	ldr	r1, [pc, #52]	@ (8000ba0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b70:	e002      	b.n	8000b78 <LoopCopyDataInit>

08000b72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b76:	3304      	adds	r3, #4

08000b78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b7c:	d3f9      	bcc.n	8000b72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ba8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b80:	4c0a      	ldr	r4, [pc, #40]	@ (8000bac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b84:	e001      	b.n	8000b8a <LoopFillZerobss>

08000b86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b88:	3204      	adds	r2, #4

08000b8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b8c:	d3fb      	bcc.n	8000b86 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f006 fe11 	bl	80077b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b92:	f7ff fd73 	bl	800067c <main>
  bx  lr    
 8000b96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ba4:	08008260 	.word	0x08008260
  ldr r2, =_sbss
 8000ba8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000bac:	20014644 	.word	0x20014644

08000bb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC_IRQHandler>
	...

08000bb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <HAL_Init+0x40>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf4 <HAL_Init+0x40>)
 8000bbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf4 <HAL_Init+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf4 <HAL_Init+0x40>)
 8000bca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd0:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a07      	ldr	r2, [pc, #28]	@ (8000bf4 <HAL_Init+0x40>)
 8000bd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bdc:	2003      	movs	r0, #3
 8000bde:	f000 f8fc 	bl	8000dda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000be2:	2000      	movs	r0, #0
 8000be4:	f7ff ff08 	bl	80009f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be8:	f7ff fede 	bl	80009a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bec:	2300      	movs	r3, #0
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023c00 	.word	0x40023c00

08000bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bfc:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <HAL_IncTick+0x20>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	461a      	mov	r2, r3
 8000c02:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <HAL_IncTick+0x24>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4413      	add	r3, r2
 8000c08:	4a04      	ldr	r2, [pc, #16]	@ (8000c1c <HAL_IncTick+0x24>)
 8000c0a:	6013      	str	r3, [r2, #0]
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000008 	.word	0x20000008
 8000c1c:	200000cc 	.word	0x200000cc

08000c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  return uwTick;
 8000c24:	4b03      	ldr	r3, [pc, #12]	@ (8000c34 <HAL_GetTick+0x14>)
 8000c26:	681b      	ldr	r3, [r3, #0]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	200000cc 	.word	0x200000cc

08000c38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c40:	f7ff ffee 	bl	8000c20 <HAL_GetTick>
 8000c44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c50:	d005      	beq.n	8000c5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c52:	4b0a      	ldr	r3, [pc, #40]	@ (8000c7c <HAL_Delay+0x44>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	461a      	mov	r2, r3
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c5e:	bf00      	nop
 8000c60:	f7ff ffde 	bl	8000c20 <HAL_GetTick>
 8000c64:	4602      	mov	r2, r0
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d8f7      	bhi.n	8000c60 <HAL_Delay+0x28>
  {
  }
}
 8000c70:	bf00      	nop
 8000c72:	bf00      	nop
 8000c74:	3710      	adds	r7, #16
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	20000008 	.word	0x20000008

08000c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b085      	sub	sp, #20
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c90:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c96:	68ba      	ldr	r2, [r7, #8]
 8000c98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ca8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cb2:	4a04      	ldr	r2, [pc, #16]	@ (8000cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	60d3      	str	r3, [r2, #12]
}
 8000cb8:	bf00      	nop
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ccc:	4b04      	ldr	r3, [pc, #16]	@ (8000ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cce:	68db      	ldr	r3, [r3, #12]
 8000cd0:	0a1b      	lsrs	r3, r3, #8
 8000cd2:	f003 0307 	and.w	r3, r3, #7
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	4603      	mov	r3, r0
 8000cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	db0b      	blt.n	8000d0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cf6:	79fb      	ldrb	r3, [r7, #7]
 8000cf8:	f003 021f 	and.w	r2, r3, #31
 8000cfc:	4907      	ldr	r1, [pc, #28]	@ (8000d1c <__NVIC_EnableIRQ+0x38>)
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	095b      	lsrs	r3, r3, #5
 8000d04:	2001      	movs	r0, #1
 8000d06:	fa00 f202 	lsl.w	r2, r0, r2
 8000d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000e100 	.word	0xe000e100

08000d20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	6039      	str	r1, [r7, #0]
 8000d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db0a      	blt.n	8000d4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	b2da      	uxtb	r2, r3
 8000d38:	490c      	ldr	r1, [pc, #48]	@ (8000d6c <__NVIC_SetPriority+0x4c>)
 8000d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3e:	0112      	lsls	r2, r2, #4
 8000d40:	b2d2      	uxtb	r2, r2
 8000d42:	440b      	add	r3, r1
 8000d44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d48:	e00a      	b.n	8000d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	4908      	ldr	r1, [pc, #32]	@ (8000d70 <__NVIC_SetPriority+0x50>)
 8000d50:	79fb      	ldrb	r3, [r7, #7]
 8000d52:	f003 030f 	and.w	r3, r3, #15
 8000d56:	3b04      	subs	r3, #4
 8000d58:	0112      	lsls	r2, r2, #4
 8000d5a:	b2d2      	uxtb	r2, r2
 8000d5c:	440b      	add	r3, r1
 8000d5e:	761a      	strb	r2, [r3, #24]
}
 8000d60:	bf00      	nop
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000e100 	.word	0xe000e100
 8000d70:	e000ed00 	.word	0xe000ed00

08000d74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b089      	sub	sp, #36	@ 0x24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	f1c3 0307 	rsb	r3, r3, #7
 8000d8e:	2b04      	cmp	r3, #4
 8000d90:	bf28      	it	cs
 8000d92:	2304      	movcs	r3, #4
 8000d94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d96:	69fb      	ldr	r3, [r7, #28]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	2b06      	cmp	r3, #6
 8000d9c:	d902      	bls.n	8000da4 <NVIC_EncodePriority+0x30>
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	3b03      	subs	r3, #3
 8000da2:	e000      	b.n	8000da6 <NVIC_EncodePriority+0x32>
 8000da4:	2300      	movs	r3, #0
 8000da6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43da      	mvns	r2, r3
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	401a      	ands	r2, r3
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dbc:	f04f 31ff 	mov.w	r1, #4294967295
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc6:	43d9      	mvns	r1, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dcc:	4313      	orrs	r3, r2
         );
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3724      	adds	r7, #36	@ 0x24
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000de2:	6878      	ldr	r0, [r7, #4]
 8000de4:	f7ff ff4c 	bl	8000c80 <__NVIC_SetPriorityGrouping>
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	4603      	mov	r3, r0
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
 8000dfc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e02:	f7ff ff61 	bl	8000cc8 <__NVIC_GetPriorityGrouping>
 8000e06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	68b9      	ldr	r1, [r7, #8]
 8000e0c:	6978      	ldr	r0, [r7, #20]
 8000e0e:	f7ff ffb1 	bl	8000d74 <NVIC_EncodePriority>
 8000e12:	4602      	mov	r2, r0
 8000e14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e18:	4611      	mov	r1, r2
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f7ff ff80 	bl	8000d20 <__NVIC_SetPriority>
}
 8000e20:	bf00      	nop
 8000e22:	3718      	adds	r7, #24
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff ff54 	bl	8000ce4 <__NVIC_EnableIRQ>
}
 8000e3c:	bf00      	nop
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}

08000e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b089      	sub	sp, #36	@ 0x24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e52:	2300      	movs	r3, #0
 8000e54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e56:	2300      	movs	r3, #0
 8000e58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
 8000e5e:	e165      	b.n	800112c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e60:	2201      	movs	r2, #1
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	4013      	ands	r3, r2
 8000e72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e74:	693a      	ldr	r2, [r7, #16]
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	f040 8154 	bne.w	8001126 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 0303 	and.w	r3, r3, #3
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d005      	beq.n	8000e96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	d130      	bne.n	8000ef8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	68da      	ldr	r2, [r3, #12]
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ecc:	2201      	movs	r2, #1
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	69ba      	ldr	r2, [r7, #24]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	091b      	lsrs	r3, r3, #4
 8000ee2:	f003 0201 	and.w	r2, r3, #1
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	f003 0303 	and.w	r3, r3, #3
 8000f00:	2b03      	cmp	r3, #3
 8000f02:	d017      	beq.n	8000f34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68db      	ldr	r3, [r3, #12]
 8000f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	005b      	lsls	r3, r3, #1
 8000f0e:	2203      	movs	r2, #3
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	43db      	mvns	r3, r3
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	689a      	ldr	r2, [r3, #8]
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	69ba      	ldr	r2, [r7, #24]
 8000f32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0303 	and.w	r3, r3, #3
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d123      	bne.n	8000f88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	08da      	lsrs	r2, r3, #3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3208      	adds	r2, #8
 8000f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	f003 0307 	and.w	r3, r3, #7
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	220f      	movs	r2, #15
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	43db      	mvns	r3, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	691a      	ldr	r2, [r3, #16]
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f003 0307 	and.w	r3, r3, #7
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	fa02 f303 	lsl.w	r3, r2, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4313      	orrs	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	08da      	lsrs	r2, r3, #3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	3208      	adds	r2, #8
 8000f82:	69b9      	ldr	r1, [r7, #24]
 8000f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	005b      	lsls	r3, r3, #1
 8000f92:	2203      	movs	r2, #3
 8000f94:	fa02 f303 	lsl.w	r3, r2, r3
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0203 	and.w	r2, r3, #3
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	f000 80ae 	beq.w	8001126 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	4b5d      	ldr	r3, [pc, #372]	@ (8001144 <HAL_GPIO_Init+0x300>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd2:	4a5c      	ldr	r2, [pc, #368]	@ (8001144 <HAL_GPIO_Init+0x300>)
 8000fd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fda:	4b5a      	ldr	r3, [pc, #360]	@ (8001144 <HAL_GPIO_Init+0x300>)
 8000fdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fe2:	60fb      	str	r3, [r7, #12]
 8000fe4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fe6:	4a58      	ldr	r2, [pc, #352]	@ (8001148 <HAL_GPIO_Init+0x304>)
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	089b      	lsrs	r3, r3, #2
 8000fec:	3302      	adds	r3, #2
 8000fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	220f      	movs	r2, #15
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	4013      	ands	r3, r2
 8001008:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4f      	ldr	r2, [pc, #316]	@ (800114c <HAL_GPIO_Init+0x308>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d025      	beq.n	800105e <HAL_GPIO_Init+0x21a>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a4e      	ldr	r2, [pc, #312]	@ (8001150 <HAL_GPIO_Init+0x30c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d01f      	beq.n	800105a <HAL_GPIO_Init+0x216>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4d      	ldr	r2, [pc, #308]	@ (8001154 <HAL_GPIO_Init+0x310>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d019      	beq.n	8001056 <HAL_GPIO_Init+0x212>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a4c      	ldr	r2, [pc, #304]	@ (8001158 <HAL_GPIO_Init+0x314>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d013      	beq.n	8001052 <HAL_GPIO_Init+0x20e>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a4b      	ldr	r2, [pc, #300]	@ (800115c <HAL_GPIO_Init+0x318>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d00d      	beq.n	800104e <HAL_GPIO_Init+0x20a>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a4a      	ldr	r2, [pc, #296]	@ (8001160 <HAL_GPIO_Init+0x31c>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d007      	beq.n	800104a <HAL_GPIO_Init+0x206>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a49      	ldr	r2, [pc, #292]	@ (8001164 <HAL_GPIO_Init+0x320>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d101      	bne.n	8001046 <HAL_GPIO_Init+0x202>
 8001042:	2306      	movs	r3, #6
 8001044:	e00c      	b.n	8001060 <HAL_GPIO_Init+0x21c>
 8001046:	2307      	movs	r3, #7
 8001048:	e00a      	b.n	8001060 <HAL_GPIO_Init+0x21c>
 800104a:	2305      	movs	r3, #5
 800104c:	e008      	b.n	8001060 <HAL_GPIO_Init+0x21c>
 800104e:	2304      	movs	r3, #4
 8001050:	e006      	b.n	8001060 <HAL_GPIO_Init+0x21c>
 8001052:	2303      	movs	r3, #3
 8001054:	e004      	b.n	8001060 <HAL_GPIO_Init+0x21c>
 8001056:	2302      	movs	r3, #2
 8001058:	e002      	b.n	8001060 <HAL_GPIO_Init+0x21c>
 800105a:	2301      	movs	r3, #1
 800105c:	e000      	b.n	8001060 <HAL_GPIO_Init+0x21c>
 800105e:	2300      	movs	r3, #0
 8001060:	69fa      	ldr	r2, [r7, #28]
 8001062:	f002 0203 	and.w	r2, r2, #3
 8001066:	0092      	lsls	r2, r2, #2
 8001068:	4093      	lsls	r3, r2
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4313      	orrs	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001070:	4935      	ldr	r1, [pc, #212]	@ (8001148 <HAL_GPIO_Init+0x304>)
 8001072:	69fb      	ldr	r3, [r7, #28]
 8001074:	089b      	lsrs	r3, r3, #2
 8001076:	3302      	adds	r3, #2
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800107e:	4b3a      	ldr	r3, [pc, #232]	@ (8001168 <HAL_GPIO_Init+0x324>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	43db      	mvns	r3, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4013      	ands	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010a2:	4a31      	ldr	r2, [pc, #196]	@ (8001168 <HAL_GPIO_Init+0x324>)
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001168 <HAL_GPIO_Init+0x324>)
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4013      	ands	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010cc:	4a26      	ldr	r2, [pc, #152]	@ (8001168 <HAL_GPIO_Init+0x324>)
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010d2:	4b25      	ldr	r3, [pc, #148]	@ (8001168 <HAL_GPIO_Init+0x324>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001168 <HAL_GPIO_Init+0x324>)
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001168 <HAL_GPIO_Init+0x324>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001102:	693b      	ldr	r3, [r7, #16]
 8001104:	43db      	mvns	r3, r3
 8001106:	69ba      	ldr	r2, [r7, #24]
 8001108:	4013      	ands	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001114:	2b00      	cmp	r3, #0
 8001116:	d003      	beq.n	8001120 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001118:	69ba      	ldr	r2, [r7, #24]
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	4313      	orrs	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001120:	4a11      	ldr	r2, [pc, #68]	@ (8001168 <HAL_GPIO_Init+0x324>)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3301      	adds	r3, #1
 800112a:	61fb      	str	r3, [r7, #28]
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	2b0f      	cmp	r3, #15
 8001130:	f67f ae96 	bls.w	8000e60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	3724      	adds	r7, #36	@ 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800
 8001148:	40013800 	.word	0x40013800
 800114c:	40020000 	.word	0x40020000
 8001150:	40020400 	.word	0x40020400
 8001154:	40020800 	.word	0x40020800
 8001158:	40020c00 	.word	0x40020c00
 800115c:	40021000 	.word	0x40021000
 8001160:	40021400 	.word	0x40021400
 8001164:	40021800 	.word	0x40021800
 8001168:	40013c00 	.word	0x40013c00

0800116c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	807b      	strh	r3, [r7, #2]
 8001178:	4613      	mov	r3, r2
 800117a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800117c:	787b      	ldrb	r3, [r7, #1]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001182:	887a      	ldrh	r2, [r7, #2]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001188:	e003      	b.n	8001192 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800118a:	887b      	ldrh	r3, [r7, #2]
 800118c:	041a      	lsls	r2, r3, #16
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	619a      	str	r2, [r3, #24]
}
 8001192:	bf00      	nop
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800119e:	b480      	push	{r7}
 80011a0:	b085      	sub	sp, #20
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	6078      	str	r0, [r7, #4]
 80011a6:	460b      	mov	r3, r1
 80011a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	695b      	ldr	r3, [r3, #20]
 80011ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011b0:	887a      	ldrh	r2, [r7, #2]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4013      	ands	r3, r2
 80011b6:	041a      	lsls	r2, r3, #16
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	43d9      	mvns	r1, r3
 80011bc:	887b      	ldrh	r3, [r7, #2]
 80011be:	400b      	ands	r3, r1
 80011c0:	431a      	orrs	r2, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	619a      	str	r2, [r3, #24]
}
 80011c6:	bf00      	nop
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e0cc      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011e8:	4b68      	ldr	r3, [pc, #416]	@ (800138c <HAL_RCC_ClockConfig+0x1b8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 030f 	and.w	r3, r3, #15
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d90c      	bls.n	8001210 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f6:	4b65      	ldr	r3, [pc, #404]	@ (800138c <HAL_RCC_ClockConfig+0x1b8>)
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fe:	4b63      	ldr	r3, [pc, #396]	@ (800138c <HAL_RCC_ClockConfig+0x1b8>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	683a      	ldr	r2, [r7, #0]
 8001208:	429a      	cmp	r2, r3
 800120a:	d001      	beq.n	8001210 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e0b8      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d020      	beq.n	800125e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	d005      	beq.n	8001234 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001228:	4b59      	ldr	r3, [pc, #356]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	4a58      	ldr	r2, [pc, #352]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 800122e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001232:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0308 	and.w	r3, r3, #8
 800123c:	2b00      	cmp	r3, #0
 800123e:	d005      	beq.n	800124c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001240:	4b53      	ldr	r3, [pc, #332]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	4a52      	ldr	r2, [pc, #328]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001246:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800124a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800124c:	4b50      	ldr	r3, [pc, #320]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	494d      	ldr	r1, [pc, #308]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 800125a:	4313      	orrs	r3, r2
 800125c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d044      	beq.n	80012f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d107      	bne.n	8001282 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001272:	4b47      	ldr	r3, [pc, #284]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d119      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e07f      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d003      	beq.n	8001292 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800128e:	2b03      	cmp	r3, #3
 8001290:	d107      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001292:	4b3f      	ldr	r3, [pc, #252]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d109      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e06f      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e067      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012b2:	4b37      	ldr	r3, [pc, #220]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f023 0203 	bic.w	r2, r3, #3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	4934      	ldr	r1, [pc, #208]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012c4:	f7ff fcac 	bl	8000c20 <HAL_GetTick>
 80012c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ca:	e00a      	b.n	80012e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012cc:	f7ff fca8 	bl	8000c20 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012da:	4293      	cmp	r3, r2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e04f      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 020c 	and.w	r2, r3, #12
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d1eb      	bne.n	80012cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012f4:	4b25      	ldr	r3, [pc, #148]	@ (800138c <HAL_RCC_ClockConfig+0x1b8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 030f 	and.w	r3, r3, #15
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d20c      	bcs.n	800131c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001302:	4b22      	ldr	r3, [pc, #136]	@ (800138c <HAL_RCC_ClockConfig+0x1b8>)
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800130a:	4b20      	ldr	r3, [pc, #128]	@ (800138c <HAL_RCC_ClockConfig+0x1b8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	429a      	cmp	r2, r3
 8001316:	d001      	beq.n	800131c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e032      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	2b00      	cmp	r3, #0
 8001326:	d008      	beq.n	800133a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001328:	4b19      	ldr	r3, [pc, #100]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	4916      	ldr	r1, [pc, #88]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001336:	4313      	orrs	r3, r2
 8001338:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	2b00      	cmp	r3, #0
 8001344:	d009      	beq.n	800135a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001346:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	490e      	ldr	r1, [pc, #56]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001356:	4313      	orrs	r3, r2
 8001358:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800135a:	f000 f873 	bl	8001444 <HAL_RCC_GetSysClockFreq>
 800135e:	4602      	mov	r2, r0
 8001360:	4b0b      	ldr	r3, [pc, #44]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	091b      	lsrs	r3, r3, #4
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	490a      	ldr	r1, [pc, #40]	@ (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 800136c:	5ccb      	ldrb	r3, [r1, r3]
 800136e:	fa22 f303 	lsr.w	r3, r2, r3
 8001372:	4a09      	ldr	r2, [pc, #36]	@ (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001376:	4b09      	ldr	r3, [pc, #36]	@ (800139c <HAL_RCC_ClockConfig+0x1c8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fb3c 	bl	80009f8 <HAL_InitTick>

  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023c00 	.word	0x40023c00
 8001390:	40023800 	.word	0x40023800
 8001394:	080081c4 	.word	0x080081c4
 8001398:	20000000 	.word	0x20000000
 800139c:	20000004 	.word	0x20000004

080013a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013a4:	4b03      	ldr	r3, [pc, #12]	@ (80013b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80013a6:	681b      	ldr	r3, [r3, #0]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	20000000 	.word	0x20000000

080013b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013bc:	f7ff fff0 	bl	80013a0 <HAL_RCC_GetHCLKFreq>
 80013c0:	4602      	mov	r2, r0
 80013c2:	4b05      	ldr	r3, [pc, #20]	@ (80013d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013c4:	689b      	ldr	r3, [r3, #8]
 80013c6:	0a9b      	lsrs	r3, r3, #10
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	4903      	ldr	r1, [pc, #12]	@ (80013dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80013ce:	5ccb      	ldrb	r3, [r1, r3]
 80013d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40023800 	.word	0x40023800
 80013dc:	080081d4 	.word	0x080081d4

080013e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	220f      	movs	r2, #15
 80013ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013f0:	4b12      	ldr	r3, [pc, #72]	@ (800143c <HAL_RCC_GetClockConfig+0x5c>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f003 0203 	and.w	r2, r3, #3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013fc:	4b0f      	ldr	r3, [pc, #60]	@ (800143c <HAL_RCC_GetClockConfig+0x5c>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001408:	4b0c      	ldr	r3, [pc, #48]	@ (800143c <HAL_RCC_GetClockConfig+0x5c>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001414:	4b09      	ldr	r3, [pc, #36]	@ (800143c <HAL_RCC_GetClockConfig+0x5c>)
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	08db      	lsrs	r3, r3, #3
 800141a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001422:	4b07      	ldr	r3, [pc, #28]	@ (8001440 <HAL_RCC_GetClockConfig+0x60>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 020f 	and.w	r2, r3, #15
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	601a      	str	r2, [r3, #0]
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800
 8001440:	40023c00 	.word	0x40023c00

08001444 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001444:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001448:	b0ae      	sub	sp, #184	@ 0xb8
 800144a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800144c:	2300      	movs	r3, #0
 800144e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001452:	2300      	movs	r3, #0
 8001454:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001458:	2300      	movs	r3, #0
 800145a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800145e:	2300      	movs	r3, #0
 8001460:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001464:	2300      	movs	r3, #0
 8001466:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800146a:	4bcb      	ldr	r3, [pc, #812]	@ (8001798 <HAL_RCC_GetSysClockFreq+0x354>)
 800146c:	689b      	ldr	r3, [r3, #8]
 800146e:	f003 030c 	and.w	r3, r3, #12
 8001472:	2b0c      	cmp	r3, #12
 8001474:	f200 8206 	bhi.w	8001884 <HAL_RCC_GetSysClockFreq+0x440>
 8001478:	a201      	add	r2, pc, #4	@ (adr r2, 8001480 <HAL_RCC_GetSysClockFreq+0x3c>)
 800147a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800147e:	bf00      	nop
 8001480:	080014b5 	.word	0x080014b5
 8001484:	08001885 	.word	0x08001885
 8001488:	08001885 	.word	0x08001885
 800148c:	08001885 	.word	0x08001885
 8001490:	080014bd 	.word	0x080014bd
 8001494:	08001885 	.word	0x08001885
 8001498:	08001885 	.word	0x08001885
 800149c:	08001885 	.word	0x08001885
 80014a0:	080014c5 	.word	0x080014c5
 80014a4:	08001885 	.word	0x08001885
 80014a8:	08001885 	.word	0x08001885
 80014ac:	08001885 	.word	0x08001885
 80014b0:	080016b5 	.word	0x080016b5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014b4:	4bb9      	ldr	r3, [pc, #740]	@ (800179c <HAL_RCC_GetSysClockFreq+0x358>)
 80014b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80014ba:	e1e7      	b.n	800188c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014bc:	4bb8      	ldr	r3, [pc, #736]	@ (80017a0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80014be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80014c2:	e1e3      	b.n	800188c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014c4:	4bb4      	ldr	r3, [pc, #720]	@ (8001798 <HAL_RCC_GetSysClockFreq+0x354>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014cc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014d0:	4bb1      	ldr	r3, [pc, #708]	@ (8001798 <HAL_RCC_GetSysClockFreq+0x354>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d071      	beq.n	80015c0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014dc:	4bae      	ldr	r3, [pc, #696]	@ (8001798 <HAL_RCC_GetSysClockFreq+0x354>)
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	099b      	lsrs	r3, r3, #6
 80014e2:	2200      	movs	r2, #0
 80014e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80014e8:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80014ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80014f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80014f8:	2300      	movs	r3, #0
 80014fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80014fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001502:	4622      	mov	r2, r4
 8001504:	462b      	mov	r3, r5
 8001506:	f04f 0000 	mov.w	r0, #0
 800150a:	f04f 0100 	mov.w	r1, #0
 800150e:	0159      	lsls	r1, r3, #5
 8001510:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001514:	0150      	lsls	r0, r2, #5
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4621      	mov	r1, r4
 800151c:	1a51      	subs	r1, r2, r1
 800151e:	6439      	str	r1, [r7, #64]	@ 0x40
 8001520:	4629      	mov	r1, r5
 8001522:	eb63 0301 	sbc.w	r3, r3, r1
 8001526:	647b      	str	r3, [r7, #68]	@ 0x44
 8001528:	f04f 0200 	mov.w	r2, #0
 800152c:	f04f 0300 	mov.w	r3, #0
 8001530:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001534:	4649      	mov	r1, r9
 8001536:	018b      	lsls	r3, r1, #6
 8001538:	4641      	mov	r1, r8
 800153a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800153e:	4641      	mov	r1, r8
 8001540:	018a      	lsls	r2, r1, #6
 8001542:	4641      	mov	r1, r8
 8001544:	1a51      	subs	r1, r2, r1
 8001546:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001548:	4649      	mov	r1, r9
 800154a:	eb63 0301 	sbc.w	r3, r3, r1
 800154e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800155c:	4649      	mov	r1, r9
 800155e:	00cb      	lsls	r3, r1, #3
 8001560:	4641      	mov	r1, r8
 8001562:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001566:	4641      	mov	r1, r8
 8001568:	00ca      	lsls	r2, r1, #3
 800156a:	4610      	mov	r0, r2
 800156c:	4619      	mov	r1, r3
 800156e:	4603      	mov	r3, r0
 8001570:	4622      	mov	r2, r4
 8001572:	189b      	adds	r3, r3, r2
 8001574:	633b      	str	r3, [r7, #48]	@ 0x30
 8001576:	462b      	mov	r3, r5
 8001578:	460a      	mov	r2, r1
 800157a:	eb42 0303 	adc.w	r3, r2, r3
 800157e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	f04f 0300 	mov.w	r3, #0
 8001588:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800158c:	4629      	mov	r1, r5
 800158e:	024b      	lsls	r3, r1, #9
 8001590:	4621      	mov	r1, r4
 8001592:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001596:	4621      	mov	r1, r4
 8001598:	024a      	lsls	r2, r1, #9
 800159a:	4610      	mov	r0, r2
 800159c:	4619      	mov	r1, r3
 800159e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80015a2:	2200      	movs	r2, #0
 80015a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80015a8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80015ac:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80015b0:	f7fe fece 	bl	8000350 <__aeabi_uldivmod>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4613      	mov	r3, r2
 80015ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80015be:	e067      	b.n	8001690 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015c0:	4b75      	ldr	r3, [pc, #468]	@ (8001798 <HAL_RCC_GetSysClockFreq+0x354>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	099b      	lsrs	r3, r3, #6
 80015c6:	2200      	movs	r2, #0
 80015c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80015cc:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80015d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80015da:	2300      	movs	r3, #0
 80015dc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80015de:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80015e2:	4622      	mov	r2, r4
 80015e4:	462b      	mov	r3, r5
 80015e6:	f04f 0000 	mov.w	r0, #0
 80015ea:	f04f 0100 	mov.w	r1, #0
 80015ee:	0159      	lsls	r1, r3, #5
 80015f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015f4:	0150      	lsls	r0, r2, #5
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	4621      	mov	r1, r4
 80015fc:	1a51      	subs	r1, r2, r1
 80015fe:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001600:	4629      	mov	r1, r5
 8001602:	eb63 0301 	sbc.w	r3, r3, r1
 8001606:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001608:	f04f 0200 	mov.w	r2, #0
 800160c:	f04f 0300 	mov.w	r3, #0
 8001610:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001614:	4649      	mov	r1, r9
 8001616:	018b      	lsls	r3, r1, #6
 8001618:	4641      	mov	r1, r8
 800161a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800161e:	4641      	mov	r1, r8
 8001620:	018a      	lsls	r2, r1, #6
 8001622:	4641      	mov	r1, r8
 8001624:	ebb2 0a01 	subs.w	sl, r2, r1
 8001628:	4649      	mov	r1, r9
 800162a:	eb63 0b01 	sbc.w	fp, r3, r1
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	f04f 0300 	mov.w	r3, #0
 8001636:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800163a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800163e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001642:	4692      	mov	sl, r2
 8001644:	469b      	mov	fp, r3
 8001646:	4623      	mov	r3, r4
 8001648:	eb1a 0303 	adds.w	r3, sl, r3
 800164c:	623b      	str	r3, [r7, #32]
 800164e:	462b      	mov	r3, r5
 8001650:	eb4b 0303 	adc.w	r3, fp, r3
 8001654:	627b      	str	r3, [r7, #36]	@ 0x24
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	f04f 0300 	mov.w	r3, #0
 800165e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001662:	4629      	mov	r1, r5
 8001664:	028b      	lsls	r3, r1, #10
 8001666:	4621      	mov	r1, r4
 8001668:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800166c:	4621      	mov	r1, r4
 800166e:	028a      	lsls	r2, r1, #10
 8001670:	4610      	mov	r0, r2
 8001672:	4619      	mov	r1, r3
 8001674:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001678:	2200      	movs	r2, #0
 800167a:	673b      	str	r3, [r7, #112]	@ 0x70
 800167c:	677a      	str	r2, [r7, #116]	@ 0x74
 800167e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001682:	f7fe fe65 	bl	8000350 <__aeabi_uldivmod>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4613      	mov	r3, r2
 800168c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001690:	4b41      	ldr	r3, [pc, #260]	@ (8001798 <HAL_RCC_GetSysClockFreq+0x354>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	0c1b      	lsrs	r3, r3, #16
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	3301      	adds	r3, #1
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80016a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80016a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80016aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80016b2:	e0eb      	b.n	800188c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016b4:	4b38      	ldr	r3, [pc, #224]	@ (8001798 <HAL_RCC_GetSysClockFreq+0x354>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80016bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016c0:	4b35      	ldr	r3, [pc, #212]	@ (8001798 <HAL_RCC_GetSysClockFreq+0x354>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d06b      	beq.n	80017a4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016cc:	4b32      	ldr	r3, [pc, #200]	@ (8001798 <HAL_RCC_GetSysClockFreq+0x354>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	099b      	lsrs	r3, r3, #6
 80016d2:	2200      	movs	r2, #0
 80016d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80016d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80016d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80016da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016de:	663b      	str	r3, [r7, #96]	@ 0x60
 80016e0:	2300      	movs	r3, #0
 80016e2:	667b      	str	r3, [r7, #100]	@ 0x64
 80016e4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80016e8:	4622      	mov	r2, r4
 80016ea:	462b      	mov	r3, r5
 80016ec:	f04f 0000 	mov.w	r0, #0
 80016f0:	f04f 0100 	mov.w	r1, #0
 80016f4:	0159      	lsls	r1, r3, #5
 80016f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016fa:	0150      	lsls	r0, r2, #5
 80016fc:	4602      	mov	r2, r0
 80016fe:	460b      	mov	r3, r1
 8001700:	4621      	mov	r1, r4
 8001702:	1a51      	subs	r1, r2, r1
 8001704:	61b9      	str	r1, [r7, #24]
 8001706:	4629      	mov	r1, r5
 8001708:	eb63 0301 	sbc.w	r3, r3, r1
 800170c:	61fb      	str	r3, [r7, #28]
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	f04f 0300 	mov.w	r3, #0
 8001716:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800171a:	4659      	mov	r1, fp
 800171c:	018b      	lsls	r3, r1, #6
 800171e:	4651      	mov	r1, sl
 8001720:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001724:	4651      	mov	r1, sl
 8001726:	018a      	lsls	r2, r1, #6
 8001728:	4651      	mov	r1, sl
 800172a:	ebb2 0801 	subs.w	r8, r2, r1
 800172e:	4659      	mov	r1, fp
 8001730:	eb63 0901 	sbc.w	r9, r3, r1
 8001734:	f04f 0200 	mov.w	r2, #0
 8001738:	f04f 0300 	mov.w	r3, #0
 800173c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001740:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001744:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001748:	4690      	mov	r8, r2
 800174a:	4699      	mov	r9, r3
 800174c:	4623      	mov	r3, r4
 800174e:	eb18 0303 	adds.w	r3, r8, r3
 8001752:	613b      	str	r3, [r7, #16]
 8001754:	462b      	mov	r3, r5
 8001756:	eb49 0303 	adc.w	r3, r9, r3
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	f04f 0200 	mov.w	r2, #0
 8001760:	f04f 0300 	mov.w	r3, #0
 8001764:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001768:	4629      	mov	r1, r5
 800176a:	024b      	lsls	r3, r1, #9
 800176c:	4621      	mov	r1, r4
 800176e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001772:	4621      	mov	r1, r4
 8001774:	024a      	lsls	r2, r1, #9
 8001776:	4610      	mov	r0, r2
 8001778:	4619      	mov	r1, r3
 800177a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800177e:	2200      	movs	r2, #0
 8001780:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001782:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001784:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001788:	f7fe fde2 	bl	8000350 <__aeabi_uldivmod>
 800178c:	4602      	mov	r2, r0
 800178e:	460b      	mov	r3, r1
 8001790:	4613      	mov	r3, r2
 8001792:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001796:	e065      	b.n	8001864 <HAL_RCC_GetSysClockFreq+0x420>
 8001798:	40023800 	.word	0x40023800
 800179c:	00f42400 	.word	0x00f42400
 80017a0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017a4:	4b3d      	ldr	r3, [pc, #244]	@ (800189c <HAL_RCC_GetSysClockFreq+0x458>)
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	099b      	lsrs	r3, r3, #6
 80017aa:	2200      	movs	r2, #0
 80017ac:	4618      	mov	r0, r3
 80017ae:	4611      	mov	r1, r2
 80017b0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80017b6:	2300      	movs	r3, #0
 80017b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80017ba:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80017be:	4642      	mov	r2, r8
 80017c0:	464b      	mov	r3, r9
 80017c2:	f04f 0000 	mov.w	r0, #0
 80017c6:	f04f 0100 	mov.w	r1, #0
 80017ca:	0159      	lsls	r1, r3, #5
 80017cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017d0:	0150      	lsls	r0, r2, #5
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4641      	mov	r1, r8
 80017d8:	1a51      	subs	r1, r2, r1
 80017da:	60b9      	str	r1, [r7, #8]
 80017dc:	4649      	mov	r1, r9
 80017de:	eb63 0301 	sbc.w	r3, r3, r1
 80017e2:	60fb      	str	r3, [r7, #12]
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	f04f 0300 	mov.w	r3, #0
 80017ec:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80017f0:	4659      	mov	r1, fp
 80017f2:	018b      	lsls	r3, r1, #6
 80017f4:	4651      	mov	r1, sl
 80017f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017fa:	4651      	mov	r1, sl
 80017fc:	018a      	lsls	r2, r1, #6
 80017fe:	4651      	mov	r1, sl
 8001800:	1a54      	subs	r4, r2, r1
 8001802:	4659      	mov	r1, fp
 8001804:	eb63 0501 	sbc.w	r5, r3, r1
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	00eb      	lsls	r3, r5, #3
 8001812:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001816:	00e2      	lsls	r2, r4, #3
 8001818:	4614      	mov	r4, r2
 800181a:	461d      	mov	r5, r3
 800181c:	4643      	mov	r3, r8
 800181e:	18e3      	adds	r3, r4, r3
 8001820:	603b      	str	r3, [r7, #0]
 8001822:	464b      	mov	r3, r9
 8001824:	eb45 0303 	adc.w	r3, r5, r3
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	f04f 0200 	mov.w	r2, #0
 800182e:	f04f 0300 	mov.w	r3, #0
 8001832:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001836:	4629      	mov	r1, r5
 8001838:	028b      	lsls	r3, r1, #10
 800183a:	4621      	mov	r1, r4
 800183c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001840:	4621      	mov	r1, r4
 8001842:	028a      	lsls	r2, r1, #10
 8001844:	4610      	mov	r0, r2
 8001846:	4619      	mov	r1, r3
 8001848:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800184c:	2200      	movs	r2, #0
 800184e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001850:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001852:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001856:	f7fe fd7b 	bl	8000350 <__aeabi_uldivmod>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4613      	mov	r3, r2
 8001860:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001864:	4b0d      	ldr	r3, [pc, #52]	@ (800189c <HAL_RCC_GetSysClockFreq+0x458>)
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	0f1b      	lsrs	r3, r3, #28
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001872:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001876:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800187a:	fbb2 f3f3 	udiv	r3, r2, r3
 800187e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001882:	e003      	b.n	800188c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001884:	4b06      	ldr	r3, [pc, #24]	@ (80018a0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001886:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800188a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800188c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001890:	4618      	mov	r0, r3
 8001892:	37b8      	adds	r7, #184	@ 0xb8
 8001894:	46bd      	mov	sp, r7
 8001896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800
 80018a0:	00f42400 	.word	0x00f42400

080018a4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e28d      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 8083 	beq.w	80019ca <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80018c4:	4b94      	ldr	r3, [pc, #592]	@ (8001b18 <HAL_RCC_OscConfig+0x274>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 030c 	and.w	r3, r3, #12
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d019      	beq.n	8001904 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80018d0:	4b91      	ldr	r3, [pc, #580]	@ (8001b18 <HAL_RCC_OscConfig+0x274>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 030c 	and.w	r3, r3, #12
        || \
 80018d8:	2b08      	cmp	r3, #8
 80018da:	d106      	bne.n	80018ea <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80018dc:	4b8e      	ldr	r3, [pc, #568]	@ (8001b18 <HAL_RCC_OscConfig+0x274>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018e4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018e8:	d00c      	beq.n	8001904 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ea:	4b8b      	ldr	r3, [pc, #556]	@ (8001b18 <HAL_RCC_OscConfig+0x274>)
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80018f2:	2b0c      	cmp	r3, #12
 80018f4:	d112      	bne.n	800191c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018f6:	4b88      	ldr	r3, [pc, #544]	@ (8001b18 <HAL_RCC_OscConfig+0x274>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001902:	d10b      	bne.n	800191c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001904:	4b84      	ldr	r3, [pc, #528]	@ (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d05b      	beq.n	80019c8 <HAL_RCC_OscConfig+0x124>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d157      	bne.n	80019c8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e25a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001924:	d106      	bne.n	8001934 <HAL_RCC_OscConfig+0x90>
 8001926:	4b7c      	ldr	r3, [pc, #496]	@ (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a7b      	ldr	r2, [pc, #492]	@ (8001b18 <HAL_RCC_OscConfig+0x274>)
 800192c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001930:	6013      	str	r3, [r2, #0]
 8001932:	e01d      	b.n	8001970 <HAL_RCC_OscConfig+0xcc>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800193c:	d10c      	bne.n	8001958 <HAL_RCC_OscConfig+0xb4>
 800193e:	4b76      	ldr	r3, [pc, #472]	@ (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a75      	ldr	r2, [pc, #468]	@ (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001944:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	4b73      	ldr	r3, [pc, #460]	@ (8001b18 <HAL_RCC_OscConfig+0x274>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a72      	ldr	r2, [pc, #456]	@ (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001950:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	e00b      	b.n	8001970 <HAL_RCC_OscConfig+0xcc>
 8001958:	4b6f      	ldr	r3, [pc, #444]	@ (8001b18 <HAL_RCC_OscConfig+0x274>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a6e      	ldr	r2, [pc, #440]	@ (8001b18 <HAL_RCC_OscConfig+0x274>)
 800195e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	4b6c      	ldr	r3, [pc, #432]	@ (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a6b      	ldr	r2, [pc, #428]	@ (8001b18 <HAL_RCC_OscConfig+0x274>)
 800196a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800196e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d013      	beq.n	80019a0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001978:	f7ff f952 	bl	8000c20 <HAL_GetTick>
 800197c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197e:	e008      	b.n	8001992 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001980:	f7ff f94e 	bl	8000c20 <HAL_GetTick>
 8001984:	4602      	mov	r2, r0
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	1ad3      	subs	r3, r2, r3
 800198a:	2b64      	cmp	r3, #100	@ 0x64
 800198c:	d901      	bls.n	8001992 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800198e:	2303      	movs	r3, #3
 8001990:	e21f      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001992:	4b61      	ldr	r3, [pc, #388]	@ (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0f0      	beq.n	8001980 <HAL_RCC_OscConfig+0xdc>
 800199e:	e014      	b.n	80019ca <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a0:	f7ff f93e 	bl	8000c20 <HAL_GetTick>
 80019a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a8:	f7ff f93a 	bl	8000c20 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b64      	cmp	r3, #100	@ 0x64
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e20b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ba:	4b57      	ldr	r3, [pc, #348]	@ (8001b18 <HAL_RCC_OscConfig+0x274>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d1f0      	bne.n	80019a8 <HAL_RCC_OscConfig+0x104>
 80019c6:	e000      	b.n	80019ca <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d06f      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80019d6:	4b50      	ldr	r3, [pc, #320]	@ (8001b18 <HAL_RCC_OscConfig+0x274>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 030c 	and.w	r3, r3, #12
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d017      	beq.n	8001a12 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019e2:	4b4d      	ldr	r3, [pc, #308]	@ (8001b18 <HAL_RCC_OscConfig+0x274>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	f003 030c 	and.w	r3, r3, #12
        || \
 80019ea:	2b08      	cmp	r3, #8
 80019ec:	d105      	bne.n	80019fa <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001b18 <HAL_RCC_OscConfig+0x274>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00b      	beq.n	8001a12 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019fa:	4b47      	ldr	r3, [pc, #284]	@ (8001b18 <HAL_RCC_OscConfig+0x274>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001a02:	2b0c      	cmp	r3, #12
 8001a04:	d11c      	bne.n	8001a40 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a06:	4b44      	ldr	r3, [pc, #272]	@ (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d116      	bne.n	8001a40 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a12:	4b41      	ldr	r3, [pc, #260]	@ (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d005      	beq.n	8001a2a <HAL_RCC_OscConfig+0x186>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d001      	beq.n	8001a2a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e1d3      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a2a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	4937      	ldr	r1, [pc, #220]	@ (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3e:	e03a      	b.n	8001ab6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d020      	beq.n	8001a8a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a48:	4b34      	ldr	r3, [pc, #208]	@ (8001b1c <HAL_RCC_OscConfig+0x278>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a4e:	f7ff f8e7 	bl	8000c20 <HAL_GetTick>
 8001a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a54:	e008      	b.n	8001a68 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a56:	f7ff f8e3 	bl	8000c20 <HAL_GetTick>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e1b4      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a68:	4b2b      	ldr	r3, [pc, #172]	@ (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0f0      	beq.n	8001a56 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a74:	4b28      	ldr	r3, [pc, #160]	@ (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	4925      	ldr	r1, [pc, #148]	@ (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	600b      	str	r3, [r1, #0]
 8001a88:	e015      	b.n	8001ab6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a8a:	4b24      	ldr	r3, [pc, #144]	@ (8001b1c <HAL_RCC_OscConfig+0x278>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a90:	f7ff f8c6 	bl	8000c20 <HAL_GetTick>
 8001a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a98:	f7ff f8c2 	bl	8000c20 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e193      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aaa:	4b1b      	ldr	r3, [pc, #108]	@ (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0308 	and.w	r3, r3, #8
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d036      	beq.n	8001b30 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d016      	beq.n	8001af8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aca:	4b15      	ldr	r3, [pc, #84]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 8001acc:	2201      	movs	r2, #1
 8001ace:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad0:	f7ff f8a6 	bl	8000c20 <HAL_GetTick>
 8001ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad6:	e008      	b.n	8001aea <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad8:	f7ff f8a2 	bl	8000c20 <HAL_GetTick>
 8001adc:	4602      	mov	r2, r0
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e173      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aea:	4b0b      	ldr	r3, [pc, #44]	@ (8001b18 <HAL_RCC_OscConfig+0x274>)
 8001aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d0f0      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x234>
 8001af6:	e01b      	b.n	8001b30 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001af8:	4b09      	ldr	r3, [pc, #36]	@ (8001b20 <HAL_RCC_OscConfig+0x27c>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afe:	f7ff f88f 	bl	8000c20 <HAL_GetTick>
 8001b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b04:	e00e      	b.n	8001b24 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b06:	f7ff f88b 	bl	8000c20 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d907      	bls.n	8001b24 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e15c      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	42470000 	.word	0x42470000
 8001b20:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b24:	4b8a      	ldr	r3, [pc, #552]	@ (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001b26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1ea      	bne.n	8001b06 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	f000 8097 	beq.w	8001c6c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b42:	4b83      	ldr	r3, [pc, #524]	@ (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10f      	bne.n	8001b6e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60bb      	str	r3, [r7, #8]
 8001b52:	4b7f      	ldr	r3, [pc, #508]	@ (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	4a7e      	ldr	r2, [pc, #504]	@ (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001b58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b5e:	4b7c      	ldr	r3, [pc, #496]	@ (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b6e:	4b79      	ldr	r3, [pc, #484]	@ (8001d54 <HAL_RCC_OscConfig+0x4b0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d118      	bne.n	8001bac <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b7a:	4b76      	ldr	r3, [pc, #472]	@ (8001d54 <HAL_RCC_OscConfig+0x4b0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a75      	ldr	r2, [pc, #468]	@ (8001d54 <HAL_RCC_OscConfig+0x4b0>)
 8001b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b86:	f7ff f84b 	bl	8000c20 <HAL_GetTick>
 8001b8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8c:	e008      	b.n	8001ba0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b8e:	f7ff f847 	bl	8000c20 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d901      	bls.n	8001ba0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	e118      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ba0:	4b6c      	ldr	r3, [pc, #432]	@ (8001d54 <HAL_RCC_OscConfig+0x4b0>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d0f0      	beq.n	8001b8e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d106      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x31e>
 8001bb4:	4b66      	ldr	r3, [pc, #408]	@ (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001bb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bb8:	4a65      	ldr	r2, [pc, #404]	@ (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001bba:	f043 0301 	orr.w	r3, r3, #1
 8001bbe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bc0:	e01c      	b.n	8001bfc <HAL_RCC_OscConfig+0x358>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	2b05      	cmp	r3, #5
 8001bc8:	d10c      	bne.n	8001be4 <HAL_RCC_OscConfig+0x340>
 8001bca:	4b61      	ldr	r3, [pc, #388]	@ (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bce:	4a60      	ldr	r2, [pc, #384]	@ (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001bd0:	f043 0304 	orr.w	r3, r3, #4
 8001bd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bd6:	4b5e      	ldr	r3, [pc, #376]	@ (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bda:	4a5d      	ldr	r2, [pc, #372]	@ (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001be2:	e00b      	b.n	8001bfc <HAL_RCC_OscConfig+0x358>
 8001be4:	4b5a      	ldr	r3, [pc, #360]	@ (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001be8:	4a59      	ldr	r2, [pc, #356]	@ (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001bea:	f023 0301 	bic.w	r3, r3, #1
 8001bee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bf0:	4b57      	ldr	r3, [pc, #348]	@ (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001bf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bf4:	4a56      	ldr	r2, [pc, #344]	@ (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001bf6:	f023 0304 	bic.w	r3, r3, #4
 8001bfa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689b      	ldr	r3, [r3, #8]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d015      	beq.n	8001c30 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c04:	f7ff f80c 	bl	8000c20 <HAL_GetTick>
 8001c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c0a:	e00a      	b.n	8001c22 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0c:	f7ff f808 	bl	8000c20 <HAL_GetTick>
 8001c10:	4602      	mov	r2, r0
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d901      	bls.n	8001c22 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e0d7      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c22:	4b4b      	ldr	r3, [pc, #300]	@ (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d0ee      	beq.n	8001c0c <HAL_RCC_OscConfig+0x368>
 8001c2e:	e014      	b.n	8001c5a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c30:	f7fe fff6 	bl	8000c20 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c36:	e00a      	b.n	8001c4e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c38:	f7fe fff2 	bl	8000c20 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d901      	bls.n	8001c4e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e0c1      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c4e:	4b40      	ldr	r3, [pc, #256]	@ (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1ee      	bne.n	8001c38 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c5a:	7dfb      	ldrb	r3, [r7, #23]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d105      	bne.n	8001c6c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c60:	4b3b      	ldr	r3, [pc, #236]	@ (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c64:	4a3a      	ldr	r2, [pc, #232]	@ (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001c66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c6a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80ad 	beq.w	8001dd0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c76:	4b36      	ldr	r3, [pc, #216]	@ (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 030c 	and.w	r3, r3, #12
 8001c7e:	2b08      	cmp	r3, #8
 8001c80:	d060      	beq.n	8001d44 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	699b      	ldr	r3, [r3, #24]
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d145      	bne.n	8001d16 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c8a:	4b33      	ldr	r3, [pc, #204]	@ (8001d58 <HAL_RCC_OscConfig+0x4b4>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c90:	f7fe ffc6 	bl	8000c20 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c98:	f7fe ffc2 	bl	8000c20 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e093      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001caa:	4b29      	ldr	r3, [pc, #164]	@ (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69da      	ldr	r2, [r3, #28]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc4:	019b      	lsls	r3, r3, #6
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ccc:	085b      	lsrs	r3, r3, #1
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	041b      	lsls	r3, r3, #16
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd8:	061b      	lsls	r3, r3, #24
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce0:	071b      	lsls	r3, r3, #28
 8001ce2:	491b      	ldr	r1, [pc, #108]	@ (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ce8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d58 <HAL_RCC_OscConfig+0x4b4>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cee:	f7fe ff97 	bl	8000c20 <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cf4:	e008      	b.n	8001d08 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf6:	f7fe ff93 	bl	8000c20 <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e064      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d08:	4b11      	ldr	r3, [pc, #68]	@ (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0f0      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x452>
 8001d14:	e05c      	b.n	8001dd0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d16:	4b10      	ldr	r3, [pc, #64]	@ (8001d58 <HAL_RCC_OscConfig+0x4b4>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d1c:	f7fe ff80 	bl	8000c20 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d24:	f7fe ff7c 	bl	8000c20 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e04d      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d36:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <HAL_RCC_OscConfig+0x4ac>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x480>
 8001d42:	e045      	b.n	8001dd0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	699b      	ldr	r3, [r3, #24]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d107      	bne.n	8001d5c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e040      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40007000 	.word	0x40007000
 8001d58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ddc <HAL_RCC_OscConfig+0x538>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d030      	beq.n	8001dcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d129      	bne.n	8001dcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d122      	bne.n	8001dcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d119      	bne.n	8001dcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001da2:	085b      	lsrs	r3, r3, #1
 8001da4:	3b01      	subs	r3, #1
 8001da6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d10f      	bne.n	8001dcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001db6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d107      	bne.n	8001dcc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d001      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e000      	b.n	8001dd2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40023800 	.word	0x40023800

08001de0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d101      	bne.n	8001df2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e041      	b.n	8001e76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d106      	bne.n	8001e0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f839 	bl	8001e7e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2202      	movs	r2, #2
 8001e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3304      	adds	r3, #4
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4610      	mov	r0, r2
 8001e20:	f000 f9c0 	bl	80021a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2201      	movs	r2, #1
 8001e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ea2:	b2db      	uxtb	r3, r3
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d001      	beq.n	8001eac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e04e      	b.n	8001f4a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2202      	movs	r2, #2
 8001eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	68da      	ldr	r2, [r3, #12]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f042 0201 	orr.w	r2, r2, #1
 8001ec2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a23      	ldr	r2, [pc, #140]	@ (8001f58 <HAL_TIM_Base_Start_IT+0xc4>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d022      	beq.n	8001f14 <HAL_TIM_Base_Start_IT+0x80>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ed6:	d01d      	beq.n	8001f14 <HAL_TIM_Base_Start_IT+0x80>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a1f      	ldr	r2, [pc, #124]	@ (8001f5c <HAL_TIM_Base_Start_IT+0xc8>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d018      	beq.n	8001f14 <HAL_TIM_Base_Start_IT+0x80>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a1e      	ldr	r2, [pc, #120]	@ (8001f60 <HAL_TIM_Base_Start_IT+0xcc>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d013      	beq.n	8001f14 <HAL_TIM_Base_Start_IT+0x80>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a1c      	ldr	r2, [pc, #112]	@ (8001f64 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d00e      	beq.n	8001f14 <HAL_TIM_Base_Start_IT+0x80>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a1b      	ldr	r2, [pc, #108]	@ (8001f68 <HAL_TIM_Base_Start_IT+0xd4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d009      	beq.n	8001f14 <HAL_TIM_Base_Start_IT+0x80>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a19      	ldr	r2, [pc, #100]	@ (8001f6c <HAL_TIM_Base_Start_IT+0xd8>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d004      	beq.n	8001f14 <HAL_TIM_Base_Start_IT+0x80>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a18      	ldr	r2, [pc, #96]	@ (8001f70 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d111      	bne.n	8001f38 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2b06      	cmp	r3, #6
 8001f24:	d010      	beq.n	8001f48 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f042 0201 	orr.w	r2, r2, #1
 8001f34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f36:	e007      	b.n	8001f48 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f042 0201 	orr.w	r2, r2, #1
 8001f46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3714      	adds	r7, #20
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	40010000 	.word	0x40010000
 8001f5c:	40000400 	.word	0x40000400
 8001f60:	40000800 	.word	0x40000800
 8001f64:	40000c00 	.word	0x40000c00
 8001f68:	40010400 	.word	0x40010400
 8001f6c:	40014000 	.word	0x40014000
 8001f70:	40001800 	.word	0x40001800

08001f74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d020      	beq.n	8001fd8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f003 0302 	and.w	r3, r3, #2
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d01b      	beq.n	8001fd8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0202 	mvn.w	r2, #2
 8001fa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f8d2 	bl	8002168 <HAL_TIM_IC_CaptureCallback>
 8001fc4:	e005      	b.n	8001fd2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f8c4 	bl	8002154 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f8d5 	bl	800217c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d020      	beq.n	8002024 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d01b      	beq.n	8002024 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f06f 0204 	mvn.w	r2, #4
 8001ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f8ac 	bl	8002168 <HAL_TIM_IC_CaptureCallback>
 8002010:	e005      	b.n	800201e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f89e 	bl	8002154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	f000 f8af 	bl	800217c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	2b00      	cmp	r3, #0
 800202c:	d020      	beq.n	8002070 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b00      	cmp	r3, #0
 8002036:	d01b      	beq.n	8002070 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f06f 0208 	mvn.w	r2, #8
 8002040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2204      	movs	r2, #4
 8002046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f003 0303 	and.w	r3, r3, #3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 f886 	bl	8002168 <HAL_TIM_IC_CaptureCallback>
 800205c:	e005      	b.n	800206a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f878 	bl	8002154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f000 f889 	bl	800217c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	f003 0310 	and.w	r3, r3, #16
 8002076:	2b00      	cmp	r3, #0
 8002078:	d020      	beq.n	80020bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	f003 0310 	and.w	r3, r3, #16
 8002080:	2b00      	cmp	r3, #0
 8002082:	d01b      	beq.n	80020bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f06f 0210 	mvn.w	r2, #16
 800208c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2208      	movs	r2, #8
 8002092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	69db      	ldr	r3, [r3, #28]
 800209a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f860 	bl	8002168 <HAL_TIM_IC_CaptureCallback>
 80020a8:	e005      	b.n	80020b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f852 	bl	8002154 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 f863 	bl	800217c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d00c      	beq.n	80020e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d007      	beq.n	80020e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f06f 0201 	mvn.w	r2, #1
 80020d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7fe fc4c 	bl	8000978 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00c      	beq.n	8002104 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d007      	beq.n	8002104 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80020fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 f900 	bl	8002304 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800210a:	2b00      	cmp	r3, #0
 800210c:	d00c      	beq.n	8002128 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002114:	2b00      	cmp	r3, #0
 8002116:	d007      	beq.n	8002128 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f834 	bl	8002190 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	f003 0320 	and.w	r3, r3, #32
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00c      	beq.n	800214c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f003 0320 	and.w	r3, r3, #32
 8002138:	2b00      	cmp	r3, #0
 800213a:	d007      	beq.n	800214c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0220 	mvn.w	r2, #32
 8002144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f8d2 	bl	80022f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800214c:	bf00      	nop
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002170:	bf00      	nop
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002198:	bf00      	nop
 800219a:	370c      	adds	r7, #12
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	4a43      	ldr	r2, [pc, #268]	@ (80022c4 <TIM_Base_SetConfig+0x120>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d013      	beq.n	80021e4 <TIM_Base_SetConfig+0x40>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021c2:	d00f      	beq.n	80021e4 <TIM_Base_SetConfig+0x40>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a40      	ldr	r2, [pc, #256]	@ (80022c8 <TIM_Base_SetConfig+0x124>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d00b      	beq.n	80021e4 <TIM_Base_SetConfig+0x40>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a3f      	ldr	r2, [pc, #252]	@ (80022cc <TIM_Base_SetConfig+0x128>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d007      	beq.n	80021e4 <TIM_Base_SetConfig+0x40>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a3e      	ldr	r2, [pc, #248]	@ (80022d0 <TIM_Base_SetConfig+0x12c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d003      	beq.n	80021e4 <TIM_Base_SetConfig+0x40>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a3d      	ldr	r2, [pc, #244]	@ (80022d4 <TIM_Base_SetConfig+0x130>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d108      	bne.n	80021f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a32      	ldr	r2, [pc, #200]	@ (80022c4 <TIM_Base_SetConfig+0x120>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d02b      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002204:	d027      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a2f      	ldr	r2, [pc, #188]	@ (80022c8 <TIM_Base_SetConfig+0x124>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d023      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a2e      	ldr	r2, [pc, #184]	@ (80022cc <TIM_Base_SetConfig+0x128>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d01f      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a2d      	ldr	r2, [pc, #180]	@ (80022d0 <TIM_Base_SetConfig+0x12c>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d01b      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a2c      	ldr	r2, [pc, #176]	@ (80022d4 <TIM_Base_SetConfig+0x130>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d017      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a2b      	ldr	r2, [pc, #172]	@ (80022d8 <TIM_Base_SetConfig+0x134>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d013      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a2a      	ldr	r2, [pc, #168]	@ (80022dc <TIM_Base_SetConfig+0x138>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d00f      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a29      	ldr	r2, [pc, #164]	@ (80022e0 <TIM_Base_SetConfig+0x13c>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d00b      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a28      	ldr	r2, [pc, #160]	@ (80022e4 <TIM_Base_SetConfig+0x140>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d007      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a27      	ldr	r2, [pc, #156]	@ (80022e8 <TIM_Base_SetConfig+0x144>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d003      	beq.n	8002256 <TIM_Base_SetConfig+0xb2>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a26      	ldr	r2, [pc, #152]	@ (80022ec <TIM_Base_SetConfig+0x148>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d108      	bne.n	8002268 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800225c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	4313      	orrs	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	695b      	ldr	r3, [r3, #20]
 8002272:	4313      	orrs	r3, r2
 8002274:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	689a      	ldr	r2, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a0e      	ldr	r2, [pc, #56]	@ (80022c4 <TIM_Base_SetConfig+0x120>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d003      	beq.n	8002296 <TIM_Base_SetConfig+0xf2>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a10      	ldr	r2, [pc, #64]	@ (80022d4 <TIM_Base_SetConfig+0x130>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d103      	bne.n	800229e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	691a      	ldr	r2, [r3, #16]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f043 0204 	orr.w	r2, r3, #4
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2201      	movs	r2, #1
 80022ae:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	601a      	str	r2, [r3, #0]
}
 80022b6:	bf00      	nop
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40010000 	.word	0x40010000
 80022c8:	40000400 	.word	0x40000400
 80022cc:	40000800 	.word	0x40000800
 80022d0:	40000c00 	.word	0x40000c00
 80022d4:	40010400 	.word	0x40010400
 80022d8:	40014000 	.word	0x40014000
 80022dc:	40014400 	.word	0x40014400
 80022e0:	40014800 	.word	0x40014800
 80022e4:	40001800 	.word	0x40001800
 80022e8:	40001c00 	.word	0x40001c00
 80022ec:	40002000 	.word	0x40002000

080022f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	f103 0208 	add.w	r2, r3, #8
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f04f 32ff 	mov.w	r2, #4294967295
 8002330:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f103 0208 	add.w	r2, r3, #8
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f103 0208 	add.w	r2, r3, #8
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002372:	b480      	push	{r7}
 8002374:	b085      	sub	sp, #20
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	601a      	str	r2, [r3, #0]
}
 80023ae:	bf00      	nop
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80023ba:	b480      	push	{r7}
 80023bc:	b085      	sub	sp, #20
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d0:	d103      	bne.n	80023da <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	691b      	ldr	r3, [r3, #16]
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	e00c      	b.n	80023f4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3308      	adds	r3, #8
 80023de:	60fb      	str	r3, [r7, #12]
 80023e0:	e002      	b.n	80023e8 <vListInsert+0x2e>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	60fb      	str	r3, [r7, #12]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d2f6      	bcs.n	80023e2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	685a      	ldr	r2, [r3, #4]
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	687a      	ldr	r2, [r7, #4]
 8002414:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	601a      	str	r2, [r3, #0]
}
 8002420:	bf00      	nop
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	691b      	ldr	r3, [r3, #16]
 8002438:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6892      	ldr	r2, [r2, #8]
 8002442:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	6852      	ldr	r2, [r2, #4]
 800244c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	429a      	cmp	r2, r3
 8002456:	d103      	bne.n	8002460 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689a      	ldr	r2, [r3, #8]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	1e5a      	subs	r2, r3, #1
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10b      	bne.n	80024ac <xQueueGenericReset+0x2c>
        __asm volatile
 8002494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002498:	f383 8811 	msr	BASEPRI, r3
 800249c:	f3bf 8f6f 	isb	sy
 80024a0:	f3bf 8f4f 	dsb	sy
 80024a4:	60bb      	str	r3, [r7, #8]
    }
 80024a6:	bf00      	nop
 80024a8:	bf00      	nop
 80024aa:	e7fd      	b.n	80024a8 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80024ac:	f002 f926 	bl	80046fc <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024b8:	68f9      	ldr	r1, [r7, #12]
 80024ba:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80024bc:	fb01 f303 	mul.w	r3, r1, r3
 80024c0:	441a      	add	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2200      	movs	r2, #0
 80024ca:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024dc:	3b01      	subs	r3, #1
 80024de:	68f9      	ldr	r1, [r7, #12]
 80024e0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80024e2:	fb01 f303 	mul.w	r3, r1, r3
 80024e6:	441a      	add	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	22ff      	movs	r2, #255	@ 0xff
 80024f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	22ff      	movs	r2, #255	@ 0xff
 80024f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d109      	bne.n	8002516 <xQueueGenericReset+0x96>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00f      	beq.n	800252a <xQueueGenericReset+0xaa>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	3310      	adds	r3, #16
 800250e:	4618      	mov	r0, r3
 8002510:	f001 f970 	bl	80037f4 <xTaskRemoveFromEventList>
 8002514:	e009      	b.n	800252a <xQueueGenericReset+0xaa>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	3310      	adds	r3, #16
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fefc 	bl	8002318 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	3324      	adds	r3, #36	@ 0x24
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fef7 	bl	8002318 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800252a:	f002 f919 	bl	8004760 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800252e:	2301      	movs	r3, #1
}
 8002530:	4618      	mov	r0, r3
 8002532:	3710      	adds	r7, #16
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002538:	b580      	push	{r7, lr}
 800253a:	b08c      	sub	sp, #48	@ 0x30
 800253c:	af02      	add	r7, sp, #8
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	4613      	mov	r3, r2
 8002544:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10b      	bne.n	8002564 <xQueueGenericCreate+0x2c>
        __asm volatile
 800254c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002550:	f383 8811 	msr	BASEPRI, r3
 8002554:	f3bf 8f6f 	isb	sy
 8002558:	f3bf 8f4f 	dsb	sy
 800255c:	61bb      	str	r3, [r7, #24]
    }
 800255e:	bf00      	nop
 8002560:	bf00      	nop
 8002562:	e7fd      	b.n	8002560 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	fb02 f303 	mul.w	r3, r2, r3
 800256c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d006      	beq.n	8002582 <xQueueGenericCreate+0x4a>
 8002574:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	fbb2 f3f3 	udiv	r3, r2, r3
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	429a      	cmp	r2, r3
 8002580:	d101      	bne.n	8002586 <xQueueGenericCreate+0x4e>
 8002582:	2301      	movs	r3, #1
 8002584:	e000      	b.n	8002588 <xQueueGenericCreate+0x50>
 8002586:	2300      	movs	r3, #0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10b      	bne.n	80025a4 <xQueueGenericCreate+0x6c>
        __asm volatile
 800258c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002590:	f383 8811 	msr	BASEPRI, r3
 8002594:	f3bf 8f6f 	isb	sy
 8002598:	f3bf 8f4f 	dsb	sy
 800259c:	617b      	str	r3, [r7, #20]
    }
 800259e:	bf00      	nop
 80025a0:	bf00      	nop
 80025a2:	e7fd      	b.n	80025a0 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80025a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a6:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80025aa:	d90b      	bls.n	80025c4 <xQueueGenericCreate+0x8c>
        __asm volatile
 80025ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025b0:	f383 8811 	msr	BASEPRI, r3
 80025b4:	f3bf 8f6f 	isb	sy
 80025b8:	f3bf 8f4f 	dsb	sy
 80025bc:	613b      	str	r3, [r7, #16]
    }
 80025be:	bf00      	nop
 80025c0:	bf00      	nop
 80025c2:	e7fd      	b.n	80025c0 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80025c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c6:	3350      	adds	r3, #80	@ 0x50
 80025c8:	4618      	mov	r0, r3
 80025ca:	f002 f9c9 	bl	8004960 <pvPortMalloc>
 80025ce:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80025d0:	6a3b      	ldr	r3, [r7, #32]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00d      	beq.n	80025f2 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	3350      	adds	r3, #80	@ 0x50
 80025de:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80025e0:	79fa      	ldrb	r2, [r7, #7]
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	9300      	str	r3, [sp, #0]
 80025e6:	4613      	mov	r3, r2
 80025e8:	69fa      	ldr	r2, [r7, #28]
 80025ea:	68b9      	ldr	r1, [r7, #8]
 80025ec:	68f8      	ldr	r0, [r7, #12]
 80025ee:	f000 f805 	bl	80025fc <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80025f2:	6a3b      	ldr	r3, [r7, #32]
    }
 80025f4:	4618      	mov	r0, r3
 80025f6:	3728      	adds	r7, #40	@ 0x28
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
 8002608:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800260a:	68bb      	ldr	r3, [r7, #8]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d103      	bne.n	8002618 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	69ba      	ldr	r2, [r7, #24]
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	e002      	b.n	800261e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	68fa      	ldr	r2, [r7, #12]
 8002622:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800262a:	2101      	movs	r1, #1
 800262c:	69b8      	ldr	r0, [r7, #24]
 800262e:	f7ff ff27 	bl	8002480 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	78fa      	ldrb	r2, [r7, #3]
 8002636:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800263a:	78fb      	ldrb	r3, [r7, #3]
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	68f9      	ldr	r1, [r7, #12]
 8002640:	2073      	movs	r0, #115	@ 0x73
 8002642:	f004 f951 	bl	80068e8 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002646:	bf00      	nop
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b090      	sub	sp, #64	@ 0x40
 8002654:	af02      	add	r7, sp, #8
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
 800265c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800265e:	2300      	movs	r3, #0
 8002660:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8002666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10b      	bne.n	8002684 <xQueueGenericSend+0x34>
        __asm volatile
 800266c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002670:	f383 8811 	msr	BASEPRI, r3
 8002674:	f3bf 8f6f 	isb	sy
 8002678:	f3bf 8f4f 	dsb	sy
 800267c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800267e:	bf00      	nop
 8002680:	bf00      	nop
 8002682:	e7fd      	b.n	8002680 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d103      	bne.n	8002692 <xQueueGenericSend+0x42>
 800268a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800268c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <xQueueGenericSend+0x46>
 8002692:	2301      	movs	r3, #1
 8002694:	e000      	b.n	8002698 <xQueueGenericSend+0x48>
 8002696:	2300      	movs	r3, #0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10b      	bne.n	80026b4 <xQueueGenericSend+0x64>
        __asm volatile
 800269c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026a0:	f383 8811 	msr	BASEPRI, r3
 80026a4:	f3bf 8f6f 	isb	sy
 80026a8:	f3bf 8f4f 	dsb	sy
 80026ac:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80026ae:	bf00      	nop
 80026b0:	bf00      	nop
 80026b2:	e7fd      	b.n	80026b0 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d103      	bne.n	80026c2 <xQueueGenericSend+0x72>
 80026ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d101      	bne.n	80026c6 <xQueueGenericSend+0x76>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <xQueueGenericSend+0x78>
 80026c6:	2300      	movs	r3, #0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d10b      	bne.n	80026e4 <xQueueGenericSend+0x94>
        __asm volatile
 80026cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026d0:	f383 8811 	msr	BASEPRI, r3
 80026d4:	f3bf 8f6f 	isb	sy
 80026d8:	f3bf 8f4f 	dsb	sy
 80026dc:	623b      	str	r3, [r7, #32]
    }
 80026de:	bf00      	nop
 80026e0:	bf00      	nop
 80026e2:	e7fd      	b.n	80026e0 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026e4:	f001 fa24 	bl	8003b30 <xTaskGetSchedulerState>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d102      	bne.n	80026f4 <xQueueGenericSend+0xa4>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d101      	bne.n	80026f8 <xQueueGenericSend+0xa8>
 80026f4:	2301      	movs	r3, #1
 80026f6:	e000      	b.n	80026fa <xQueueGenericSend+0xaa>
 80026f8:	2300      	movs	r3, #0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10b      	bne.n	8002716 <xQueueGenericSend+0xc6>
        __asm volatile
 80026fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002702:	f383 8811 	msr	BASEPRI, r3
 8002706:	f3bf 8f6f 	isb	sy
 800270a:	f3bf 8f4f 	dsb	sy
 800270e:	61fb      	str	r3, [r7, #28]
    }
 8002710:	bf00      	nop
 8002712:	bf00      	nop
 8002714:	e7fd      	b.n	8002712 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002716:	f001 fff1 	bl	80046fc <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800271a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800271c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800271e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002722:	429a      	cmp	r2, r3
 8002724:	d302      	bcc.n	800272c <xQueueGenericSend+0xdc>
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d11f      	bne.n	800276c <xQueueGenericSend+0x11c>
            {
                traceQUEUE_SEND( pxQueue );
 800272c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800272e:	4618      	mov	r0, r3
 8002730:	f004 fe68 	bl	8007404 <SEGGER_SYSVIEW_ShrinkId>
 8002734:	68ba      	ldr	r2, [r7, #8]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	460b      	mov	r3, r1
 800273e:	4601      	mov	r1, r0
 8002740:	205a      	movs	r0, #90	@ 0x5a
 8002742:	f004 f947 	bl	80069d4 <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	68b9      	ldr	r1, [r7, #8]
 800274a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800274c:	f000 fa5c 	bl	8002c08 <prvCopyDataToQueue>
 8002750:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002754:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002756:	2b00      	cmp	r3, #0
 8002758:	d004      	beq.n	8002764 <xQueueGenericSend+0x114>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800275a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800275c:	3324      	adds	r3, #36	@ 0x24
 800275e:	4618      	mov	r0, r3
 8002760:	f001 f848 	bl	80037f4 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002764:	f001 fffc 	bl	8004760 <vPortExitCritical>
                return pdPASS;
 8002768:	2301      	movs	r3, #1
 800276a:	e07d      	b.n	8002868 <xQueueGenericSend+0x218>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d110      	bne.n	8002794 <xQueueGenericSend+0x144>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002772:	f001 fff5 	bl	8004760 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 8002776:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002778:	4618      	mov	r0, r3
 800277a:	f004 fe43 	bl	8007404 <SEGGER_SYSVIEW_ShrinkId>
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	6879      	ldr	r1, [r7, #4]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	460b      	mov	r3, r1
 8002788:	4601      	mov	r1, r0
 800278a:	205a      	movs	r0, #90	@ 0x5a
 800278c:	f004 f922 	bl	80069d4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002790:	2300      	movs	r3, #0
 8002792:	e069      	b.n	8002868 <xQueueGenericSend+0x218>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002794:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002796:	2b00      	cmp	r3, #0
 8002798:	d106      	bne.n	80027a8 <xQueueGenericSend+0x158>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800279a:	f107 0314 	add.w	r3, r7, #20
 800279e:	4618      	mov	r0, r3
 80027a0:	f001 f890 	bl	80038c4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80027a4:	2301      	movs	r3, #1
 80027a6:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80027a8:	f001 ffda 	bl	8004760 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80027ac:	f000 fe04 	bl	80033b8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80027b0:	f001 ffa4 	bl	80046fc <vPortEnterCritical>
 80027b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027ba:	b25b      	sxtb	r3, r3
 80027bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c0:	d103      	bne.n	80027ca <xQueueGenericSend+0x17a>
 80027c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027d0:	b25b      	sxtb	r3, r3
 80027d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d6:	d103      	bne.n	80027e0 <xQueueGenericSend+0x190>
 80027d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80027e0:	f001 ffbe 	bl	8004760 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027e4:	1d3a      	adds	r2, r7, #4
 80027e6:	f107 0314 	add.w	r3, r7, #20
 80027ea:	4611      	mov	r1, r2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f001 f87f 	bl	80038f0 <xTaskCheckForTimeOut>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d124      	bne.n	8002842 <xQueueGenericSend+0x1f2>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80027f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80027fa:	f000 fafd 	bl	8002df8 <prvIsQueueFull>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d018      	beq.n	8002836 <xQueueGenericSend+0x1e6>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002806:	3310      	adds	r3, #16
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	4611      	mov	r1, r2
 800280c:	4618      	mov	r0, r3
 800280e:	f000 ff9b 	bl	8003748 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002812:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002814:	f000 fa88 	bl	8002d28 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002818:	f000 fddc 	bl	80033d4 <xTaskResumeAll>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	f47f af79 	bne.w	8002716 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8002824:	4b12      	ldr	r3, [pc, #72]	@ (8002870 <xQueueGenericSend+0x220>)
 8002826:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	f3bf 8f4f 	dsb	sy
 8002830:	f3bf 8f6f 	isb	sy
 8002834:	e76f      	b.n	8002716 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002836:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002838:	f000 fa76 	bl	8002d28 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800283c:	f000 fdca 	bl	80033d4 <xTaskResumeAll>
 8002840:	e769      	b.n	8002716 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002842:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002844:	f000 fa70 	bl	8002d28 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002848:	f000 fdc4 	bl	80033d4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 800284c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800284e:	4618      	mov	r0, r3
 8002850:	f004 fdd8 	bl	8007404 <SEGGER_SYSVIEW_ShrinkId>
 8002854:	68ba      	ldr	r2, [r7, #8]
 8002856:	6879      	ldr	r1, [r7, #4]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	460b      	mov	r3, r1
 800285e:	4601      	mov	r1, r0
 8002860:	205a      	movs	r0, #90	@ 0x5a
 8002862:	f004 f8b7 	bl	80069d4 <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 8002866:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8002868:	4618      	mov	r0, r3
 800286a:	3738      	adds	r7, #56	@ 0x38
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}
 8002870:	e000ed04 	.word	0xe000ed04

08002874 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b090      	sub	sp, #64	@ 0x40
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
 8002880:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8002886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10b      	bne.n	80028a4 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 800288c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002890:	f383 8811 	msr	BASEPRI, r3
 8002894:	f3bf 8f6f 	isb	sy
 8002898:	f3bf 8f4f 	dsb	sy
 800289c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800289e:	bf00      	nop
 80028a0:	bf00      	nop
 80028a2:	e7fd      	b.n	80028a0 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d103      	bne.n	80028b2 <xQueueGenericSendFromISR+0x3e>
 80028aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <xQueueGenericSendFromISR+0x42>
 80028b2:	2301      	movs	r3, #1
 80028b4:	e000      	b.n	80028b8 <xQueueGenericSendFromISR+0x44>
 80028b6:	2300      	movs	r3, #0
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10b      	bne.n	80028d4 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 80028bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028c0:	f383 8811 	msr	BASEPRI, r3
 80028c4:	f3bf 8f6f 	isb	sy
 80028c8:	f3bf 8f4f 	dsb	sy
 80028cc:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80028ce:	bf00      	nop
 80028d0:	bf00      	nop
 80028d2:	e7fd      	b.n	80028d0 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d103      	bne.n	80028e2 <xQueueGenericSendFromISR+0x6e>
 80028da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d101      	bne.n	80028e6 <xQueueGenericSendFromISR+0x72>
 80028e2:	2301      	movs	r3, #1
 80028e4:	e000      	b.n	80028e8 <xQueueGenericSendFromISR+0x74>
 80028e6:	2300      	movs	r3, #0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10b      	bne.n	8002904 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 80028ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028f0:	f383 8811 	msr	BASEPRI, r3
 80028f4:	f3bf 8f6f 	isb	sy
 80028f8:	f3bf 8f4f 	dsb	sy
 80028fc:	623b      	str	r3, [r7, #32]
    }
 80028fe:	bf00      	nop
 8002900:	bf00      	nop
 8002902:	e7fd      	b.n	8002900 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002904:	f001 ffea 	bl	80048dc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002908:	f3ef 8211 	mrs	r2, BASEPRI
 800290c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002910:	f383 8811 	msr	BASEPRI, r3
 8002914:	f3bf 8f6f 	isb	sy
 8002918:	f3bf 8f4f 	dsb	sy
 800291c:	61fa      	str	r2, [r7, #28]
 800291e:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002920:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002922:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002926:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800292a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800292c:	429a      	cmp	r2, r3
 800292e:	d302      	bcc.n	8002936 <xQueueGenericSendFromISR+0xc2>
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	2b02      	cmp	r3, #2
 8002934:	d149      	bne.n	80029ca <xQueueGenericSendFromISR+0x156>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002938:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800293c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002940:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002944:	62fb      	str	r3, [r7, #44]	@ 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 8002946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002948:	4618      	mov	r0, r3
 800294a:	f004 fd5b 	bl	8007404 <SEGGER_SYSVIEW_ShrinkId>
 800294e:	4601      	mov	r1, r0
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	461a      	mov	r2, r3
 8002954:	2060      	movs	r0, #96	@ 0x60
 8002956:	f003 ff6d 	bl	8006834 <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	68b9      	ldr	r1, [r7, #8]
 800295e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002960:	f000 f952 	bl	8002c08 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002964:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296c:	d112      	bne.n	8002994 <xQueueGenericSendFromISR+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800296e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002972:	2b00      	cmp	r3, #0
 8002974:	d026      	beq.n	80029c4 <xQueueGenericSendFromISR+0x150>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002978:	3324      	adds	r3, #36	@ 0x24
 800297a:	4618      	mov	r0, r3
 800297c:	f000 ff3a 	bl	80037f4 <xTaskRemoveFromEventList>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d01e      	beq.n	80029c4 <xQueueGenericSendFromISR+0x150>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d01b      	beq.n	80029c4 <xQueueGenericSendFromISR+0x150>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	e017      	b.n	80029c4 <xQueueGenericSendFromISR+0x150>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002994:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002998:	2b7f      	cmp	r3, #127	@ 0x7f
 800299a:	d10b      	bne.n	80029b4 <xQueueGenericSendFromISR+0x140>
        __asm volatile
 800299c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029a0:	f383 8811 	msr	BASEPRI, r3
 80029a4:	f3bf 8f6f 	isb	sy
 80029a8:	f3bf 8f4f 	dsb	sy
 80029ac:	617b      	str	r3, [r7, #20]
    }
 80029ae:	bf00      	nop
 80029b0:	bf00      	nop
 80029b2:	e7fd      	b.n	80029b0 <xQueueGenericSendFromISR+0x13c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80029b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80029b8:	3301      	adds	r3, #1
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	b25a      	sxtb	r2, r3
 80029be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80029c4:	2301      	movs	r3, #1
 80029c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 80029c8:	e00b      	b.n	80029e2 <xQueueGenericSendFromISR+0x16e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80029ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029cc:	4618      	mov	r0, r3
 80029ce:	f004 fd19 	bl	8007404 <SEGGER_SYSVIEW_ShrinkId>
 80029d2:	4601      	mov	r1, r0
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	461a      	mov	r2, r3
 80029d8:	2060      	movs	r0, #96	@ 0x60
 80029da:	f003 ff2b 	bl	8006834 <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029e4:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80029ec:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80029ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3740      	adds	r7, #64	@ 0x40
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80029f8:	b590      	push	{r4, r7, lr}
 80029fa:	b08f      	sub	sp, #60	@ 0x3c
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002a04:	2300      	movs	r3, #0
 8002a06:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d10b      	bne.n	8002a2a <xQueueReceive+0x32>
        __asm volatile
 8002a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a16:	f383 8811 	msr	BASEPRI, r3
 8002a1a:	f3bf 8f6f 	isb	sy
 8002a1e:	f3bf 8f4f 	dsb	sy
 8002a22:	623b      	str	r3, [r7, #32]
    }
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
 8002a28:	e7fd      	b.n	8002a26 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d103      	bne.n	8002a38 <xQueueReceive+0x40>
 8002a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d101      	bne.n	8002a3c <xQueueReceive+0x44>
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <xQueueReceive+0x46>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10b      	bne.n	8002a5a <xQueueReceive+0x62>
        __asm volatile
 8002a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a46:	f383 8811 	msr	BASEPRI, r3
 8002a4a:	f3bf 8f6f 	isb	sy
 8002a4e:	f3bf 8f4f 	dsb	sy
 8002a52:	61fb      	str	r3, [r7, #28]
    }
 8002a54:	bf00      	nop
 8002a56:	bf00      	nop
 8002a58:	e7fd      	b.n	8002a56 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a5a:	f001 f869 	bl	8003b30 <xTaskGetSchedulerState>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d102      	bne.n	8002a6a <xQueueReceive+0x72>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <xQueueReceive+0x76>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e000      	b.n	8002a70 <xQueueReceive+0x78>
 8002a6e:	2300      	movs	r3, #0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d10b      	bne.n	8002a8c <xQueueReceive+0x94>
        __asm volatile
 8002a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a78:	f383 8811 	msr	BASEPRI, r3
 8002a7c:	f3bf 8f6f 	isb	sy
 8002a80:	f3bf 8f4f 	dsb	sy
 8002a84:	61bb      	str	r3, [r7, #24]
    }
 8002a86:	bf00      	nop
 8002a88:	bf00      	nop
 8002a8a:	e7fd      	b.n	8002a88 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002a8c:	f001 fe36 	bl	80046fc <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a94:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d024      	beq.n	8002ae6 <xQueueReceive+0xee>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a9c:	68b9      	ldr	r1, [r7, #8]
 8002a9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002aa0:	f000 f91c 	bl	8002cdc <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	f004 fcac 	bl	8007404 <SEGGER_SYSVIEW_ShrinkId>
 8002aac:	4604      	mov	r4, r0
 8002aae:	2000      	movs	r0, #0
 8002ab0:	f004 fca8 	bl	8007404 <SEGGER_SYSVIEW_ShrinkId>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2101      	movs	r1, #1
 8002aba:	9100      	str	r1, [sp, #0]
 8002abc:	4621      	mov	r1, r4
 8002abe:	205c      	movs	r0, #92	@ 0x5c
 8002ac0:	f003 ff88 	bl	80069d4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac6:	1e5a      	subs	r2, r3, #1
 8002ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aca:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ace:	691b      	ldr	r3, [r3, #16]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d004      	beq.n	8002ade <xQueueReceive+0xe6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad6:	3310      	adds	r3, #16
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 fe8b 	bl	80037f4 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002ade:	f001 fe3f 	bl	8004760 <vPortExitCritical>
                return pdPASS;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e08a      	b.n	8002bfc <xQueueReceive+0x204>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d113      	bne.n	8002b14 <xQueueReceive+0x11c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002aec:	f001 fe38 	bl	8004760 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002af2:	4618      	mov	r0, r3
 8002af4:	f004 fc86 	bl	8007404 <SEGGER_SYSVIEW_ShrinkId>
 8002af8:	4604      	mov	r4, r0
 8002afa:	2000      	movs	r0, #0
 8002afc:	f004 fc82 	bl	8007404 <SEGGER_SYSVIEW_ShrinkId>
 8002b00:	4602      	mov	r2, r0
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2101      	movs	r1, #1
 8002b06:	9100      	str	r1, [sp, #0]
 8002b08:	4621      	mov	r1, r4
 8002b0a:	205c      	movs	r0, #92	@ 0x5c
 8002b0c:	f003 ff62 	bl	80069d4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002b10:	2300      	movs	r3, #0
 8002b12:	e073      	b.n	8002bfc <xQueueReceive+0x204>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d106      	bne.n	8002b28 <xQueueReceive+0x130>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002b1a:	f107 0310 	add.w	r3, r7, #16
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 fed0 	bl	80038c4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002b24:	2301      	movs	r3, #1
 8002b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002b28:	f001 fe1a 	bl	8004760 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002b2c:	f000 fc44 	bl	80033b8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002b30:	f001 fde4 	bl	80046fc <vPortEnterCritical>
 8002b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b36:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b3a:	b25b      	sxtb	r3, r3
 8002b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b40:	d103      	bne.n	8002b4a <xQueueReceive+0x152>
 8002b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b44:	2200      	movs	r2, #0
 8002b46:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b4c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b50:	b25b      	sxtb	r3, r3
 8002b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b56:	d103      	bne.n	8002b60 <xQueueReceive+0x168>
 8002b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b60:	f001 fdfe 	bl	8004760 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b64:	1d3a      	adds	r2, r7, #4
 8002b66:	f107 0310 	add.w	r3, r7, #16
 8002b6a:	4611      	mov	r1, r2
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f000 febf 	bl	80038f0 <xTaskCheckForTimeOut>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d124      	bne.n	8002bc2 <xQueueReceive+0x1ca>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b7a:	f000 f927 	bl	8002dcc <prvIsQueueEmpty>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d018      	beq.n	8002bb6 <xQueueReceive+0x1be>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b86:	3324      	adds	r3, #36	@ 0x24
 8002b88:	687a      	ldr	r2, [r7, #4]
 8002b8a:	4611      	mov	r1, r2
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f000 fddb 	bl	8003748 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002b92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b94:	f000 f8c8 	bl	8002d28 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002b98:	f000 fc1c 	bl	80033d4 <xTaskResumeAll>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	f47f af74 	bne.w	8002a8c <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8002ba4:	4b17      	ldr	r3, [pc, #92]	@ (8002c04 <xQueueReceive+0x20c>)
 8002ba6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	f3bf 8f6f 	isb	sy
 8002bb4:	e76a      	b.n	8002a8c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002bb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bb8:	f000 f8b6 	bl	8002d28 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002bbc:	f000 fc0a 	bl	80033d4 <xTaskResumeAll>
 8002bc0:	e764      	b.n	8002a8c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002bc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bc4:	f000 f8b0 	bl	8002d28 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002bc8:	f000 fc04 	bl	80033d4 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bcc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bce:	f000 f8fd 	bl	8002dcc <prvIsQueueEmpty>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	f43f af59 	beq.w	8002a8c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f004 fc11 	bl	8007404 <SEGGER_SYSVIEW_ShrinkId>
 8002be2:	4604      	mov	r4, r0
 8002be4:	2000      	movs	r0, #0
 8002be6:	f004 fc0d 	bl	8007404 <SEGGER_SYSVIEW_ShrinkId>
 8002bea:	4602      	mov	r2, r0
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2101      	movs	r1, #1
 8002bf0:	9100      	str	r1, [sp, #0]
 8002bf2:	4621      	mov	r1, r4
 8002bf4:	205c      	movs	r0, #92	@ 0x5c
 8002bf6:	f003 feed 	bl	80069d4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002bfa:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3734      	adds	r7, #52	@ 0x34
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd90      	pop	{r4, r7, pc}
 8002c04:	e000ed04 	.word	0xe000ed04

08002c08 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b086      	sub	sp, #24
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002c14:	2300      	movs	r3, #0
 8002c16:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c1c:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10d      	bne.n	8002c42 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d14d      	bne.n	8002cca <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 ff9a 	bl	8003b6c <xTaskPriorityDisinherit>
 8002c38:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	609a      	str	r2, [r3, #8]
 8002c40:	e043      	b.n	8002cca <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d119      	bne.n	8002c7c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6858      	ldr	r0, [r3, #4]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c50:	461a      	mov	r2, r3
 8002c52:	68b9      	ldr	r1, [r7, #8]
 8002c54:	f004 fdd4 	bl	8007800 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	685a      	ldr	r2, [r3, #4]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c60:	441a      	add	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d32b      	bcc.n	8002cca <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	605a      	str	r2, [r3, #4]
 8002c7a:	e026      	b.n	8002cca <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	68d8      	ldr	r0, [r3, #12]
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c84:	461a      	mov	r2, r3
 8002c86:	68b9      	ldr	r1, [r7, #8]
 8002c88:	f004 fdba 	bl	8007800 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	68da      	ldr	r2, [r3, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c94:	425b      	negs	r3, r3
 8002c96:	441a      	add	r2, r3
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	68da      	ldr	r2, [r3, #12]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d207      	bcs.n	8002cb8 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb0:	425b      	negs	r3, r3
 8002cb2:	441a      	add	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d105      	bne.n	8002cca <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d002      	beq.n	8002cca <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	3b01      	subs	r3, #1
 8002cc8:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	1c5a      	adds	r2, r3, #1
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8002cd2:	697b      	ldr	r3, [r7, #20]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
 8002ce4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d018      	beq.n	8002d20 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	68da      	ldr	r2, [r3, #12]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cf6:	441a      	add	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68da      	ldr	r2, [r3, #12]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d303      	bcc.n	8002d10 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	68d9      	ldr	r1, [r3, #12]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d18:	461a      	mov	r2, r3
 8002d1a:	6838      	ldr	r0, [r7, #0]
 8002d1c:	f004 fd70 	bl	8007800 <memcpy>
    }
}
 8002d20:	bf00      	nop
 8002d22:	3708      	adds	r7, #8
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002d30:	f001 fce4 	bl	80046fc <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d3a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d3c:	e011      	b.n	8002d62 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d012      	beq.n	8002d6c <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3324      	adds	r3, #36	@ 0x24
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 fd52 	bl	80037f4 <xTaskRemoveFromEventList>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002d56:	f000 fe33 	bl	80039c0 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	dce9      	bgt.n	8002d3e <prvUnlockQueue+0x16>
 8002d6a:	e000      	b.n	8002d6e <prvUnlockQueue+0x46>
                        break;
 8002d6c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	22ff      	movs	r2, #255	@ 0xff
 8002d72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002d76:	f001 fcf3 	bl	8004760 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002d7a:	f001 fcbf 	bl	80046fc <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d84:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d86:	e011      	b.n	8002dac <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d012      	beq.n	8002db6 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	3310      	adds	r3, #16
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 fd2d 	bl	80037f4 <xTaskRemoveFromEventList>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002da0:	f000 fe0e 	bl	80039c0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002da4:	7bbb      	ldrb	r3, [r7, #14]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002dac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	dce9      	bgt.n	8002d88 <prvUnlockQueue+0x60>
 8002db4:	e000      	b.n	8002db8 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002db6:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	22ff      	movs	r2, #255	@ 0xff
 8002dbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002dc0:	f001 fcce 	bl	8004760 <vPortExitCritical>
}
 8002dc4:	bf00      	nop
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002dd4:	f001 fc92 	bl	80046fc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d102      	bne.n	8002de6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002de0:	2301      	movs	r3, #1
 8002de2:	60fb      	str	r3, [r7, #12]
 8002de4:	e001      	b.n	8002dea <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002de6:	2300      	movs	r3, #0
 8002de8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002dea:	f001 fcb9 	bl	8004760 <vPortExitCritical>

    return xReturn;
 8002dee:	68fb      	ldr	r3, [r7, #12]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002e00:	f001 fc7c 	bl	80046fc <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d102      	bne.n	8002e16 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002e10:	2301      	movs	r3, #1
 8002e12:	60fb      	str	r3, [r7, #12]
 8002e14:	e001      	b.n	8002e1a <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002e16:	2300      	movs	r3, #0
 8002e18:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002e1a:	f001 fca1 	bl	8004760 <vPortExitCritical>

    return xReturn;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e32:	2300      	movs	r3, #0
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	e01e      	b.n	8002e76 <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002e38:	4a13      	ldr	r2, [pc, #76]	@ (8002e88 <vQueueAddToRegistry+0x60>)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d115      	bne.n	8002e70 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002e44:	4910      	ldr	r1, [pc, #64]	@ (8002e88 <vQueueAddToRegistry+0x60>)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	683a      	ldr	r2, [r7, #0]
 8002e4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002e4e:	4a0e      	ldr	r2, [pc, #56]	@ (8002e88 <vQueueAddToRegistry+0x60>)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4413      	add	r3, r2
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f004 fad1 	bl	8007404 <SEGGER_SYSVIEW_ShrinkId>
 8002e62:	4601      	mov	r1, r0
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	2071      	movs	r0, #113	@ 0x71
 8002e6a:	f003 fce3 	bl	8006834 <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002e6e:	e006      	b.n	8002e7e <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	3301      	adds	r3, #1
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2b07      	cmp	r3, #7
 8002e7a:	d9dd      	bls.n	8002e38 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002e7c:	bf00      	nop
 8002e7e:	bf00      	nop
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	200000d0 	.word	0x200000d0

08002e8c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002e9c:	f001 fc2e 	bl	80046fc <vPortEnterCritical>
 8002ea0:	697b      	ldr	r3, [r7, #20]
 8002ea2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ea6:	b25b      	sxtb	r3, r3
 8002ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eac:	d103      	bne.n	8002eb6 <vQueueWaitForMessageRestricted+0x2a>
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ebc:	b25b      	sxtb	r3, r3
 8002ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec2:	d103      	bne.n	8002ecc <vQueueWaitForMessageRestricted+0x40>
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ecc:	f001 fc48 	bl	8004760 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d106      	bne.n	8002ee6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	3324      	adds	r3, #36	@ 0x24
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	68b9      	ldr	r1, [r7, #8]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 fc57 	bl	8003794 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002ee6:	6978      	ldr	r0, [r7, #20]
 8002ee8:	f7ff ff1e 	bl	8002d28 <prvUnlockQueue>
    }
 8002eec:	bf00      	nop
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}

08002ef4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b08c      	sub	sp, #48	@ 0x30
 8002ef8:	af04      	add	r7, sp, #16
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	60b9      	str	r1, [r7, #8]
 8002efe:	603b      	str	r3, [r7, #0]
 8002f00:	4613      	mov	r3, r2
 8002f02:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002f04:	88fb      	ldrh	r3, [r7, #6]
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f001 fd29 	bl	8004960 <pvPortMalloc>
 8002f0e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00e      	beq.n	8002f34 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002f16:	2058      	movs	r0, #88	@ 0x58
 8002f18:	f001 fd22 	bl	8004960 <pvPortMalloc>
 8002f1c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f2a:	e005      	b.n	8002f38 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002f2c:	6978      	ldr	r0, [r7, #20]
 8002f2e:	f001 fdf9 	bl	8004b24 <vPortFree>
 8002f32:	e001      	b.n	8002f38 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d013      	beq.n	8002f66 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f3e:	88fa      	ldrh	r2, [r7, #6]
 8002f40:	2300      	movs	r3, #0
 8002f42:	9303      	str	r3, [sp, #12]
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	9302      	str	r3, [sp, #8]
 8002f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f4a:	9301      	str	r3, [sp, #4]
 8002f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f4e:	9300      	str	r3, [sp, #0]
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	68b9      	ldr	r1, [r7, #8]
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 f80e 	bl	8002f76 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002f5a:	69f8      	ldr	r0, [r7, #28]
 8002f5c:	f000 f8a2 	bl	80030a4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002f60:	2301      	movs	r3, #1
 8002f62:	61bb      	str	r3, [r7, #24]
 8002f64:	e002      	b.n	8002f6c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f66:	f04f 33ff 	mov.w	r3, #4294967295
 8002f6a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002f6c:	69bb      	ldr	r3, [r7, #24]
    }
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3720      	adds	r7, #32
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b088      	sub	sp, #32
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	60f8      	str	r0, [r7, #12]
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f86:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	21a5      	movs	r1, #165	@ 0xa5
 8002f90:	f004 fc08 	bl	80077a4 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	f023 0307 	bic.w	r3, r3, #7
 8002fac:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00b      	beq.n	8002fd0 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	617b      	str	r3, [r7, #20]
    }
 8002fca:	bf00      	nop
 8002fcc:	bf00      	nop
 8002fce:	e7fd      	b.n	8002fcc <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d01f      	beq.n	8003016 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
 8002fda:	e012      	b.n	8003002 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	7819      	ldrb	r1, [r3, #0]
 8002fe4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	4413      	add	r3, r2
 8002fea:	3334      	adds	r3, #52	@ 0x34
 8002fec:	460a      	mov	r2, r1
 8002fee:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002ff0:	68ba      	ldr	r2, [r7, #8]
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d006      	beq.n	800300a <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	3301      	adds	r3, #1
 8003000:	61fb      	str	r3, [r7, #28]
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	2b09      	cmp	r3, #9
 8003006:	d9e9      	bls.n	8002fdc <prvInitialiseNewTask+0x66>
 8003008:	e000      	b.n	800300c <prvInitialiseNewTask+0x96>
            {
                break;
 800300a:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800300c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003014:	e003      	b.n	800301e <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800301e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003020:	2b04      	cmp	r3, #4
 8003022:	d901      	bls.n	8003028 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003024:	2304      	movs	r3, #4
 8003026:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800302c:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800302e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003030:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003032:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003036:	2200      	movs	r2, #0
 8003038:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800303a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800303c:	3304      	adds	r3, #4
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff f98a 	bl	8002358 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003046:	3318      	adds	r3, #24
 8003048:	4618      	mov	r0, r3
 800304a:	f7ff f985 	bl	8002358 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800304e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003050:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003052:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003056:	f1c3 0205 	rsb	r2, r3, #5
 800305a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800305c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800305e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003060:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003062:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003066:	3350      	adds	r3, #80	@ 0x50
 8003068:	2204      	movs	r2, #4
 800306a:	2100      	movs	r1, #0
 800306c:	4618      	mov	r0, r3
 800306e:	f004 fb99 	bl	80077a4 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003074:	3354      	adds	r3, #84	@ 0x54
 8003076:	2201      	movs	r2, #1
 8003078:	2100      	movs	r1, #0
 800307a:	4618      	mov	r0, r3
 800307c:	f004 fb92 	bl	80077a4 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003080:	683a      	ldr	r2, [r7, #0]
 8003082:	68f9      	ldr	r1, [r7, #12]
 8003084:	69b8      	ldr	r0, [r7, #24]
 8003086:	f001 f989 	bl	800439c <pxPortInitialiseStack>
 800308a:	4602      	mov	r2, r0
 800308c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800308e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003090:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003092:	2b00      	cmp	r3, #0
 8003094:	d002      	beq.n	800309c <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003098:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800309a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800309c:	bf00      	nop
 800309e:	3720      	adds	r7, #32
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80030a4:	b5b0      	push	{r4, r5, r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80030ac:	f001 fb26 	bl	80046fc <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80030b0:	4b35      	ldr	r3, [pc, #212]	@ (8003188 <prvAddNewTaskToReadyList+0xe4>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	3301      	adds	r3, #1
 80030b6:	4a34      	ldr	r2, [pc, #208]	@ (8003188 <prvAddNewTaskToReadyList+0xe4>)
 80030b8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80030ba:	4b34      	ldr	r3, [pc, #208]	@ (800318c <prvAddNewTaskToReadyList+0xe8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d109      	bne.n	80030d6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80030c2:	4a32      	ldr	r2, [pc, #200]	@ (800318c <prvAddNewTaskToReadyList+0xe8>)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80030c8:	4b2f      	ldr	r3, [pc, #188]	@ (8003188 <prvAddNewTaskToReadyList+0xe4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d110      	bne.n	80030f2 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80030d0:	f000 fc94 	bl	80039fc <prvInitialiseTaskLists>
 80030d4:	e00d      	b.n	80030f2 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80030d6:	4b2e      	ldr	r3, [pc, #184]	@ (8003190 <prvAddNewTaskToReadyList+0xec>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d109      	bne.n	80030f2 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80030de:	4b2b      	ldr	r3, [pc, #172]	@ (800318c <prvAddNewTaskToReadyList+0xe8>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d802      	bhi.n	80030f2 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80030ec:	4a27      	ldr	r2, [pc, #156]	@ (800318c <prvAddNewTaskToReadyList+0xe8>)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80030f2:	4b28      	ldr	r3, [pc, #160]	@ (8003194 <prvAddNewTaskToReadyList+0xf0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	3301      	adds	r3, #1
 80030f8:	4a26      	ldr	r2, [pc, #152]	@ (8003194 <prvAddNewTaskToReadyList+0xf0>)
 80030fa:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80030fc:	4b25      	ldr	r3, [pc, #148]	@ (8003194 <prvAddNewTaskToReadyList+0xf0>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d016      	beq.n	8003138 <prvAddNewTaskToReadyList+0x94>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4618      	mov	r0, r3
 800310e:	f004 f853 	bl	80071b8 <SEGGER_SYSVIEW_OnTaskCreate>
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003122:	461d      	mov	r5, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	461c      	mov	r4, r3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800312e:	1ae3      	subs	r3, r4, r3
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	462b      	mov	r3, r5
 8003134:	f001 fec6 	bl	8004ec4 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4618      	mov	r0, r3
 800313c:	f004 f8c0 	bl	80072c0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003144:	2201      	movs	r2, #1
 8003146:	409a      	lsls	r2, r3
 8003148:	4b13      	ldr	r3, [pc, #76]	@ (8003198 <prvAddNewTaskToReadyList+0xf4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4313      	orrs	r3, r2
 800314e:	4a12      	ldr	r2, [pc, #72]	@ (8003198 <prvAddNewTaskToReadyList+0xf4>)
 8003150:	6013      	str	r3, [r2, #0]
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003156:	4613      	mov	r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	4413      	add	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4a0f      	ldr	r2, [pc, #60]	@ (800319c <prvAddNewTaskToReadyList+0xf8>)
 8003160:	441a      	add	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3304      	adds	r3, #4
 8003166:	4619      	mov	r1, r3
 8003168:	4610      	mov	r0, r2
 800316a:	f7ff f902 	bl	8002372 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800316e:	f001 faf7 	bl	8004760 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003172:	4b07      	ldr	r3, [pc, #28]	@ (8003190 <prvAddNewTaskToReadyList+0xec>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d001      	beq.n	800317e <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800317a:	4b04      	ldr	r3, [pc, #16]	@ (800318c <prvAddNewTaskToReadyList+0xe8>)
 800317c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800317e:	bf00      	nop
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bdb0      	pop	{r4, r5, r7, pc}
 8003186:	bf00      	nop
 8003188:	200001e8 	.word	0x200001e8
 800318c:	20000110 	.word	0x20000110
 8003190:	200001f4 	.word	0x200001f4
 8003194:	20000204 	.word	0x20000204
 8003198:	200001f0 	.word	0x200001f0
 800319c:	20000114 	.word	0x20000114

080031a0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 80031a8:	f001 faa8 	bl	80046fc <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d102      	bne.n	80031b8 <vTaskDelete+0x18>
 80031b2:	4b46      	ldr	r3, [pc, #280]	@ (80032cc <vTaskDelete+0x12c>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	e000      	b.n	80031ba <vTaskDelete+0x1a>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	3304      	adds	r3, #4
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7ff f933 	bl	800242c <uxListRemove>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d115      	bne.n	80031f8 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031d0:	493f      	ldr	r1, [pc, #252]	@ (80032d0 <vTaskDelete+0x130>)
 80031d2:	4613      	mov	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10a      	bne.n	80031f8 <vTaskDelete+0x58>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e6:	2201      	movs	r2, #1
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	43da      	mvns	r2, r3
 80031ee:	4b39      	ldr	r3, [pc, #228]	@ (80032d4 <vTaskDelete+0x134>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4013      	ands	r3, r2
 80031f4:	4a37      	ldr	r2, [pc, #220]	@ (80032d4 <vTaskDelete+0x134>)
 80031f6:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d004      	beq.n	800320a <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	3318      	adds	r3, #24
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff f911 	bl	800242c <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 800320a:	4b33      	ldr	r3, [pc, #204]	@ (80032d8 <vTaskDelete+0x138>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	3301      	adds	r3, #1
 8003210:	4a31      	ldr	r2, [pc, #196]	@ (80032d8 <vTaskDelete+0x138>)
 8003212:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8003214:	4b2d      	ldr	r3, [pc, #180]	@ (80032cc <vTaskDelete+0x12c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	429a      	cmp	r2, r3
 800321c:	d118      	bne.n	8003250 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	3304      	adds	r3, #4
 8003222:	4619      	mov	r1, r3
 8003224:	482d      	ldr	r0, [pc, #180]	@ (80032dc <vTaskDelete+0x13c>)
 8003226:	f7ff f8a4 	bl	8002372 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 800322a:	4b2d      	ldr	r3, [pc, #180]	@ (80032e0 <vTaskDelete+0x140>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	3301      	adds	r3, #1
 8003230:	4a2b      	ldr	r2, [pc, #172]	@ (80032e0 <vTaskDelete+0x140>)
 8003232:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4618      	mov	r0, r3
 8003238:	f004 f8e4 	bl	8007404 <SEGGER_SYSVIEW_ShrinkId>
 800323c:	4603      	mov	r3, r0
 800323e:	4619      	mov	r1, r3
 8003240:	2022      	movs	r0, #34	@ 0x22
 8003242:	f003 fabb 	bl	80067bc <SEGGER_SYSVIEW_RecordU32>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	4618      	mov	r0, r3
 800324a:	f001 fea3 	bl	8004f94 <SYSVIEW_DeleteTask>
 800324e:	e016      	b.n	800327e <vTaskDelete+0xde>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8003250:	4b24      	ldr	r3, [pc, #144]	@ (80032e4 <vTaskDelete+0x144>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3b01      	subs	r3, #1
 8003256:	4a23      	ldr	r2, [pc, #140]	@ (80032e4 <vTaskDelete+0x144>)
 8003258:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	4618      	mov	r0, r3
 800325e:	f004 f8d1 	bl	8007404 <SEGGER_SYSVIEW_ShrinkId>
 8003262:	4603      	mov	r3, r0
 8003264:	4619      	mov	r1, r3
 8003266:	2022      	movs	r0, #34	@ 0x22
 8003268:	f003 faa8 	bl	80067bc <SEGGER_SYSVIEW_RecordU32>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4618      	mov	r0, r3
 8003270:	f001 fe90 	bl	8004f94 <SYSVIEW_DeleteTask>
                prvDeleteTCB( pxTCB );
 8003274:	68f8      	ldr	r0, [r7, #12]
 8003276:	f000 fc2f 	bl	8003ad8 <prvDeleteTCB>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 800327a:	f000 fc3d 	bl	8003af8 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 800327e:	f001 fa6f 	bl	8004760 <vPortExitCritical>

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8003282:	4b19      	ldr	r3, [pc, #100]	@ (80032e8 <vTaskDelete+0x148>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d01c      	beq.n	80032c4 <vTaskDelete+0x124>
        {
            if( pxTCB == pxCurrentTCB )
 800328a:	4b10      	ldr	r3, [pc, #64]	@ (80032cc <vTaskDelete+0x12c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	68fa      	ldr	r2, [r7, #12]
 8003290:	429a      	cmp	r2, r3
 8003292:	d117      	bne.n	80032c4 <vTaskDelete+0x124>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8003294:	4b15      	ldr	r3, [pc, #84]	@ (80032ec <vTaskDelete+0x14c>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d00b      	beq.n	80032b4 <vTaskDelete+0x114>
        __asm volatile
 800329c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032a0:	f383 8811 	msr	BASEPRI, r3
 80032a4:	f3bf 8f6f 	isb	sy
 80032a8:	f3bf 8f4f 	dsb	sy
 80032ac:	60bb      	str	r3, [r7, #8]
    }
 80032ae:	bf00      	nop
 80032b0:	bf00      	nop
 80032b2:	e7fd      	b.n	80032b0 <vTaskDelete+0x110>
                portYIELD_WITHIN_API();
 80032b4:	4b0e      	ldr	r3, [pc, #56]	@ (80032f0 <vTaskDelete+0x150>)
 80032b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	f3bf 8f4f 	dsb	sy
 80032c0:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80032c4:	bf00      	nop
 80032c6:	3710      	adds	r7, #16
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	20000110 	.word	0x20000110
 80032d0:	20000114 	.word	0x20000114
 80032d4:	200001f0 	.word	0x200001f0
 80032d8:	20000204 	.word	0x20000204
 80032dc:	200001bc 	.word	0x200001bc
 80032e0:	200001d0 	.word	0x200001d0
 80032e4:	200001e8 	.word	0x200001e8
 80032e8:	200001f4 	.word	0x200001f4
 80032ec:	20000210 	.word	0x20000210
 80032f0:	e000ed04 	.word	0xe000ed04

080032f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80032fa:	4b27      	ldr	r3, [pc, #156]	@ (8003398 <vTaskStartScheduler+0xa4>)
 80032fc:	9301      	str	r3, [sp, #4]
 80032fe:	2300      	movs	r3, #0
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	2300      	movs	r3, #0
 8003304:	2282      	movs	r2, #130	@ 0x82
 8003306:	4925      	ldr	r1, [pc, #148]	@ (800339c <vTaskStartScheduler+0xa8>)
 8003308:	4825      	ldr	r0, [pc, #148]	@ (80033a0 <vTaskStartScheduler+0xac>)
 800330a:	f7ff fdf3 	bl	8002ef4 <xTaskCreate>
 800330e:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d102      	bne.n	800331c <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8003316:	f000 fd23 	bl	8003d60 <xTimerCreateTimerTask>
 800331a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d124      	bne.n	800336c <vTaskStartScheduler+0x78>
        __asm volatile
 8003322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003326:	f383 8811 	msr	BASEPRI, r3
 800332a:	f3bf 8f6f 	isb	sy
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	60bb      	str	r3, [r7, #8]
    }
 8003334:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8003336:	4b1b      	ldr	r3, [pc, #108]	@ (80033a4 <vTaskStartScheduler+0xb0>)
 8003338:	f04f 32ff 	mov.w	r2, #4294967295
 800333c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800333e:	4b1a      	ldr	r3, [pc, #104]	@ (80033a8 <vTaskStartScheduler+0xb4>)
 8003340:	2201      	movs	r2, #1
 8003342:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003344:	4b19      	ldr	r3, [pc, #100]	@ (80033ac <vTaskStartScheduler+0xb8>)
 8003346:	2200      	movs	r2, #0
 8003348:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800334a:	4b19      	ldr	r3, [pc, #100]	@ (80033b0 <vTaskStartScheduler+0xbc>)
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	4b12      	ldr	r3, [pc, #72]	@ (8003398 <vTaskStartScheduler+0xa4>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	429a      	cmp	r2, r3
 8003354:	d102      	bne.n	800335c <vTaskStartScheduler+0x68>
 8003356:	f003 ff13 	bl	8007180 <SEGGER_SYSVIEW_OnIdle>
 800335a:	e004      	b.n	8003366 <vTaskStartScheduler+0x72>
 800335c:	4b14      	ldr	r3, [pc, #80]	@ (80033b0 <vTaskStartScheduler+0xbc>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f003 ff6b 	bl	800723c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003366:	f001 f8a5 	bl	80044b4 <xPortStartScheduler>
 800336a:	e00f      	b.n	800338c <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003372:	d10b      	bne.n	800338c <vTaskStartScheduler+0x98>
        __asm volatile
 8003374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003378:	f383 8811 	msr	BASEPRI, r3
 800337c:	f3bf 8f6f 	isb	sy
 8003380:	f3bf 8f4f 	dsb	sy
 8003384:	607b      	str	r3, [r7, #4]
    }
 8003386:	bf00      	nop
 8003388:	bf00      	nop
 800338a:	e7fd      	b.n	8003388 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800338c:	4b09      	ldr	r3, [pc, #36]	@ (80033b4 <vTaskStartScheduler+0xc0>)
 800338e:	681b      	ldr	r3, [r3, #0]
}
 8003390:	bf00      	nop
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	2000020c 	.word	0x2000020c
 800339c:	080080fc 	.word	0x080080fc
 80033a0:	080039d9 	.word	0x080039d9
 80033a4:	20000208 	.word	0x20000208
 80033a8:	200001f4 	.word	0x200001f4
 80033ac:	200001ec 	.word	0x200001ec
 80033b0:	20000110 	.word	0x20000110
 80033b4:	080081dc 	.word	0x080081dc

080033b8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80033bc:	4b04      	ldr	r3, [pc, #16]	@ (80033d0 <vTaskSuspendAll+0x18>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	3301      	adds	r3, #1
 80033c2:	4a03      	ldr	r2, [pc, #12]	@ (80033d0 <vTaskSuspendAll+0x18>)
 80033c4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80033c6:	bf00      	nop
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	20000210 	.word	0x20000210

080033d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80033de:	2300      	movs	r3, #0
 80033e0:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80033e2:	4b3e      	ldr	r3, [pc, #248]	@ (80034dc <xTaskResumeAll+0x108>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10b      	bne.n	8003402 <xTaskResumeAll+0x2e>
        __asm volatile
 80033ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ee:	f383 8811 	msr	BASEPRI, r3
 80033f2:	f3bf 8f6f 	isb	sy
 80033f6:	f3bf 8f4f 	dsb	sy
 80033fa:	603b      	str	r3, [r7, #0]
    }
 80033fc:	bf00      	nop
 80033fe:	bf00      	nop
 8003400:	e7fd      	b.n	80033fe <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003402:	f001 f97b 	bl	80046fc <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003406:	4b35      	ldr	r3, [pc, #212]	@ (80034dc <xTaskResumeAll+0x108>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	3b01      	subs	r3, #1
 800340c:	4a33      	ldr	r2, [pc, #204]	@ (80034dc <xTaskResumeAll+0x108>)
 800340e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003410:	4b32      	ldr	r3, [pc, #200]	@ (80034dc <xTaskResumeAll+0x108>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d159      	bne.n	80034cc <xTaskResumeAll+0xf8>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003418:	4b31      	ldr	r3, [pc, #196]	@ (80034e0 <xTaskResumeAll+0x10c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d055      	beq.n	80034cc <xTaskResumeAll+0xf8>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003420:	e032      	b.n	8003488 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003422:	4b30      	ldr	r3, [pc, #192]	@ (80034e4 <xTaskResumeAll+0x110>)
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	3318      	adds	r3, #24
 800342e:	4618      	mov	r0, r3
 8003430:	f7fe fffc 	bl	800242c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	3304      	adds	r3, #4
 8003438:	4618      	mov	r0, r3
 800343a:	f7fe fff7 	bl	800242c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	4618      	mov	r0, r3
 8003442:	f003 ff3d 	bl	80072c0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800344a:	2201      	movs	r2, #1
 800344c:	409a      	lsls	r2, r3
 800344e:	4b26      	ldr	r3, [pc, #152]	@ (80034e8 <xTaskResumeAll+0x114>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4313      	orrs	r3, r2
 8003454:	4a24      	ldr	r2, [pc, #144]	@ (80034e8 <xTaskResumeAll+0x114>)
 8003456:	6013      	str	r3, [r2, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800345c:	4613      	mov	r3, r2
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	4413      	add	r3, r2
 8003462:	009b      	lsls	r3, r3, #2
 8003464:	4a21      	ldr	r2, [pc, #132]	@ (80034ec <xTaskResumeAll+0x118>)
 8003466:	441a      	add	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	3304      	adds	r3, #4
 800346c:	4619      	mov	r1, r3
 800346e:	4610      	mov	r0, r2
 8003470:	f7fe ff7f 	bl	8002372 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003478:	4b1d      	ldr	r3, [pc, #116]	@ (80034f0 <xTaskResumeAll+0x11c>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800347e:	429a      	cmp	r2, r3
 8003480:	d302      	bcc.n	8003488 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 8003482:	4b1c      	ldr	r3, [pc, #112]	@ (80034f4 <xTaskResumeAll+0x120>)
 8003484:	2201      	movs	r2, #1
 8003486:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003488:	4b16      	ldr	r3, [pc, #88]	@ (80034e4 <xTaskResumeAll+0x110>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1c8      	bne.n	8003422 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003496:	f000 fb2f 	bl	8003af8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800349a:	4b17      	ldr	r3, [pc, #92]	@ (80034f8 <xTaskResumeAll+0x124>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d010      	beq.n	80034c8 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80034a6:	f000 f84b 	bl	8003540 <xTaskIncrementTick>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d002      	beq.n	80034b6 <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 80034b0:	4b10      	ldr	r3, [pc, #64]	@ (80034f4 <xTaskResumeAll+0x120>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	3b01      	subs	r3, #1
 80034ba:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d1f1      	bne.n	80034a6 <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 80034c2:	4b0d      	ldr	r3, [pc, #52]	@ (80034f8 <xTaskResumeAll+0x124>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80034c8:	4b0a      	ldr	r3, [pc, #40]	@ (80034f4 <xTaskResumeAll+0x120>)
 80034ca:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80034cc:	f001 f948 	bl	8004760 <vPortExitCritical>

    return xAlreadyYielded;
 80034d0:	687b      	ldr	r3, [r7, #4]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3710      	adds	r7, #16
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	20000210 	.word	0x20000210
 80034e0:	200001e8 	.word	0x200001e8
 80034e4:	200001a8 	.word	0x200001a8
 80034e8:	200001f0 	.word	0x200001f0
 80034ec:	20000114 	.word	0x20000114
 80034f0:	20000110 	.word	0x20000110
 80034f4:	200001fc 	.word	0x200001fc
 80034f8:	200001f8 	.word	0x200001f8

080034fc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003502:	4b05      	ldr	r3, [pc, #20]	@ (8003518 <xTaskGetTickCount+0x1c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003508:	687b      	ldr	r3, [r7, #4]
}
 800350a:	4618      	mov	r0, r3
 800350c:	370c      	adds	r7, #12
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr
 8003516:	bf00      	nop
 8003518:	200001ec 	.word	0x200001ec

0800351c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003522:	f001 f9db 	bl	80048dc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003526:	2300      	movs	r3, #0
 8003528:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800352a:	4b04      	ldr	r3, [pc, #16]	@ (800353c <xTaskGetTickCountFromISR+0x20>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003530:	683b      	ldr	r3, [r7, #0]
}
 8003532:	4618      	mov	r0, r3
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	200001ec 	.word	0x200001ec

08003540 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003546:	2300      	movs	r3, #0
 8003548:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800354a:	4b41      	ldr	r3, [pc, #260]	@ (8003650 <xTaskIncrementTick+0x110>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d174      	bne.n	800363c <xTaskIncrementTick+0xfc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003552:	4b40      	ldr	r3, [pc, #256]	@ (8003654 <xTaskIncrementTick+0x114>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	3301      	adds	r3, #1
 8003558:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800355a:	4a3e      	ldr	r2, [pc, #248]	@ (8003654 <xTaskIncrementTick+0x114>)
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d121      	bne.n	80035aa <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003566:	4b3c      	ldr	r3, [pc, #240]	@ (8003658 <xTaskIncrementTick+0x118>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00b      	beq.n	8003588 <xTaskIncrementTick+0x48>
        __asm volatile
 8003570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003574:	f383 8811 	msr	BASEPRI, r3
 8003578:	f3bf 8f6f 	isb	sy
 800357c:	f3bf 8f4f 	dsb	sy
 8003580:	603b      	str	r3, [r7, #0]
    }
 8003582:	bf00      	nop
 8003584:	bf00      	nop
 8003586:	e7fd      	b.n	8003584 <xTaskIncrementTick+0x44>
 8003588:	4b33      	ldr	r3, [pc, #204]	@ (8003658 <xTaskIncrementTick+0x118>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	60fb      	str	r3, [r7, #12]
 800358e:	4b33      	ldr	r3, [pc, #204]	@ (800365c <xTaskIncrementTick+0x11c>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a31      	ldr	r2, [pc, #196]	@ (8003658 <xTaskIncrementTick+0x118>)
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	4a31      	ldr	r2, [pc, #196]	@ (800365c <xTaskIncrementTick+0x11c>)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6013      	str	r3, [r2, #0]
 800359c:	4b30      	ldr	r3, [pc, #192]	@ (8003660 <xTaskIncrementTick+0x120>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3301      	adds	r3, #1
 80035a2:	4a2f      	ldr	r2, [pc, #188]	@ (8003660 <xTaskIncrementTick+0x120>)
 80035a4:	6013      	str	r3, [r2, #0]
 80035a6:	f000 faa7 	bl	8003af8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80035aa:	4b2e      	ldr	r3, [pc, #184]	@ (8003664 <xTaskIncrementTick+0x124>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	693a      	ldr	r2, [r7, #16]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d348      	bcc.n	8003646 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035b4:	4b28      	ldr	r3, [pc, #160]	@ (8003658 <xTaskIncrementTick+0x118>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d104      	bne.n	80035c8 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035be:	4b29      	ldr	r3, [pc, #164]	@ (8003664 <xTaskIncrementTick+0x124>)
 80035c0:	f04f 32ff 	mov.w	r2, #4294967295
 80035c4:	601a      	str	r2, [r3, #0]
                    break;
 80035c6:	e03e      	b.n	8003646 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035c8:	4b23      	ldr	r3, [pc, #140]	@ (8003658 <xTaskIncrementTick+0x118>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80035d8:	693a      	ldr	r2, [r7, #16]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	429a      	cmp	r2, r3
 80035de:	d203      	bcs.n	80035e8 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80035e0:	4a20      	ldr	r2, [pc, #128]	@ (8003664 <xTaskIncrementTick+0x124>)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80035e6:	e02e      	b.n	8003646 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	3304      	adds	r3, #4
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fe ff1d 	bl	800242c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d004      	beq.n	8003604 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	3318      	adds	r3, #24
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fe ff14 	bl	800242c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	4618      	mov	r0, r3
 8003608:	f003 fe5a 	bl	80072c0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003610:	2201      	movs	r2, #1
 8003612:	409a      	lsls	r2, r3
 8003614:	4b14      	ldr	r3, [pc, #80]	@ (8003668 <xTaskIncrementTick+0x128>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4313      	orrs	r3, r2
 800361a:	4a13      	ldr	r2, [pc, #76]	@ (8003668 <xTaskIncrementTick+0x128>)
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	4a10      	ldr	r2, [pc, #64]	@ (800366c <xTaskIncrementTick+0x12c>)
 800362c:	441a      	add	r2, r3
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	3304      	adds	r3, #4
 8003632:	4619      	mov	r1, r3
 8003634:	4610      	mov	r0, r2
 8003636:	f7fe fe9c 	bl	8002372 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800363a:	e7bb      	b.n	80035b4 <xTaskIncrementTick+0x74>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800363c:	4b0c      	ldr	r3, [pc, #48]	@ (8003670 <xTaskIncrementTick+0x130>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	3301      	adds	r3, #1
 8003642:	4a0b      	ldr	r2, [pc, #44]	@ (8003670 <xTaskIncrementTick+0x130>)
 8003644:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8003646:	697b      	ldr	r3, [r7, #20]
}
 8003648:	4618      	mov	r0, r3
 800364a:	3718      	adds	r7, #24
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}
 8003650:	20000210 	.word	0x20000210
 8003654:	200001ec 	.word	0x200001ec
 8003658:	200001a0 	.word	0x200001a0
 800365c:	200001a4 	.word	0x200001a4
 8003660:	20000200 	.word	0x20000200
 8003664:	20000208 	.word	0x20000208
 8003668:	200001f0 	.word	0x200001f0
 800366c:	20000114 	.word	0x20000114
 8003670:	200001f8 	.word	0x200001f8

08003674 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b086      	sub	sp, #24
 8003678:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800367a:	4b2d      	ldr	r3, [pc, #180]	@ (8003730 <vTaskSwitchContext+0xbc>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003682:	4b2c      	ldr	r3, [pc, #176]	@ (8003734 <vTaskSwitchContext+0xc0>)
 8003684:	2201      	movs	r2, #1
 8003686:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003688:	e04e      	b.n	8003728 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 800368a:	4b2a      	ldr	r3, [pc, #168]	@ (8003734 <vTaskSwitchContext+0xc0>)
 800368c:	2200      	movs	r2, #0
 800368e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003690:	4b29      	ldr	r3, [pc, #164]	@ (8003738 <vTaskSwitchContext+0xc4>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	fab3 f383 	clz	r3, r3
 800369c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800369e:	7afb      	ldrb	r3, [r7, #11]
 80036a0:	f1c3 031f 	rsb	r3, r3, #31
 80036a4:	617b      	str	r3, [r7, #20]
 80036a6:	4925      	ldr	r1, [pc, #148]	@ (800373c <vTaskSwitchContext+0xc8>)
 80036a8:	697a      	ldr	r2, [r7, #20]
 80036aa:	4613      	mov	r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	4413      	add	r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10b      	bne.n	80036d2 <vTaskSwitchContext+0x5e>
        __asm volatile
 80036ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036be:	f383 8811 	msr	BASEPRI, r3
 80036c2:	f3bf 8f6f 	isb	sy
 80036c6:	f3bf 8f4f 	dsb	sy
 80036ca:	607b      	str	r3, [r7, #4]
    }
 80036cc:	bf00      	nop
 80036ce:	bf00      	nop
 80036d0:	e7fd      	b.n	80036ce <vTaskSwitchContext+0x5a>
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	4613      	mov	r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4a17      	ldr	r2, [pc, #92]	@ (800373c <vTaskSwitchContext+0xc8>)
 80036de:	4413      	add	r3, r2
 80036e0:	613b      	str	r3, [r7, #16]
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	605a      	str	r2, [r3, #4]
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	3308      	adds	r3, #8
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d104      	bne.n	8003702 <vTaskSwitchContext+0x8e>
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	605a      	str	r2, [r3, #4]
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	4a0d      	ldr	r2, [pc, #52]	@ (8003740 <vTaskSwitchContext+0xcc>)
 800370a:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800370c:	4b0c      	ldr	r3, [pc, #48]	@ (8003740 <vTaskSwitchContext+0xcc>)
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	4b0c      	ldr	r3, [pc, #48]	@ (8003744 <vTaskSwitchContext+0xd0>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d102      	bne.n	800371e <vTaskSwitchContext+0xaa>
 8003718:	f003 fd32 	bl	8007180 <SEGGER_SYSVIEW_OnIdle>
}
 800371c:	e004      	b.n	8003728 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 800371e:	4b08      	ldr	r3, [pc, #32]	@ (8003740 <vTaskSwitchContext+0xcc>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f003 fd8a 	bl	800723c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003728:	bf00      	nop
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	20000210 	.word	0x20000210
 8003734:	200001fc 	.word	0x200001fc
 8003738:	200001f0 	.word	0x200001f0
 800373c:	20000114 	.word	0x20000114
 8003740:	20000110 	.word	0x20000110
 8003744:	2000020c 	.word	0x2000020c

08003748 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10b      	bne.n	8003770 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8003758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	f3bf 8f6f 	isb	sy
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	60fb      	str	r3, [r7, #12]
    }
 800376a:	bf00      	nop
 800376c:	bf00      	nop
 800376e:	e7fd      	b.n	800376c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003770:	4b07      	ldr	r3, [pc, #28]	@ (8003790 <vTaskPlaceOnEventList+0x48>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	3318      	adds	r3, #24
 8003776:	4619      	mov	r1, r3
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f7fe fe1e 	bl	80023ba <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800377e:	2101      	movs	r1, #1
 8003780:	6838      	ldr	r0, [r7, #0]
 8003782:	f000 fa75 	bl	8003c70 <prvAddCurrentTaskToDelayedList>
}
 8003786:	bf00      	nop
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	20000110 	.word	0x20000110

08003794 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10b      	bne.n	80037be <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80037a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037aa:	f383 8811 	msr	BASEPRI, r3
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	617b      	str	r3, [r7, #20]
    }
 80037b8:	bf00      	nop
 80037ba:	bf00      	nop
 80037bc:	e7fd      	b.n	80037ba <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80037be:	4b0c      	ldr	r3, [pc, #48]	@ (80037f0 <vTaskPlaceOnEventListRestricted+0x5c>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	3318      	adds	r3, #24
 80037c4:	4619      	mov	r1, r3
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f7fe fdd3 	bl	8002372 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 80037d2:	f04f 33ff 	mov.w	r3, #4294967295
 80037d6:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80037d8:	2024      	movs	r0, #36	@ 0x24
 80037da:	f002 ffd1 	bl	8006780 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80037de:	6879      	ldr	r1, [r7, #4]
 80037e0:	68b8      	ldr	r0, [r7, #8]
 80037e2:	f000 fa45 	bl	8003c70 <prvAddCurrentTaskToDelayedList>
    }
 80037e6:	bf00      	nop
 80037e8:	3718      	adds	r7, #24
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	20000110 	.word	0x20000110

080037f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d10b      	bne.n	8003822 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 800380a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800380e:	f383 8811 	msr	BASEPRI, r3
 8003812:	f3bf 8f6f 	isb	sy
 8003816:	f3bf 8f4f 	dsb	sy
 800381a:	60fb      	str	r3, [r7, #12]
    }
 800381c:	bf00      	nop
 800381e:	bf00      	nop
 8003820:	e7fd      	b.n	800381e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	3318      	adds	r3, #24
 8003826:	4618      	mov	r0, r3
 8003828:	f7fe fe00 	bl	800242c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800382c:	4b1f      	ldr	r3, [pc, #124]	@ (80038ac <xTaskRemoveFromEventList+0xb8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d120      	bne.n	8003876 <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	3304      	adds	r3, #4
 8003838:	4618      	mov	r0, r3
 800383a:	f7fe fdf7 	bl	800242c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	4618      	mov	r0, r3
 8003842:	f003 fd3d 	bl	80072c0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800384a:	2201      	movs	r2, #1
 800384c:	409a      	lsls	r2, r3
 800384e:	4b18      	ldr	r3, [pc, #96]	@ (80038b0 <xTaskRemoveFromEventList+0xbc>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4313      	orrs	r3, r2
 8003854:	4a16      	ldr	r2, [pc, #88]	@ (80038b0 <xTaskRemoveFromEventList+0xbc>)
 8003856:	6013      	str	r3, [r2, #0]
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800385c:	4613      	mov	r3, r2
 800385e:	009b      	lsls	r3, r3, #2
 8003860:	4413      	add	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4a13      	ldr	r2, [pc, #76]	@ (80038b4 <xTaskRemoveFromEventList+0xc0>)
 8003866:	441a      	add	r2, r3
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	3304      	adds	r3, #4
 800386c:	4619      	mov	r1, r3
 800386e:	4610      	mov	r0, r2
 8003870:	f7fe fd7f 	bl	8002372 <vListInsertEnd>
 8003874:	e005      	b.n	8003882 <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	3318      	adds	r3, #24
 800387a:	4619      	mov	r1, r3
 800387c:	480e      	ldr	r0, [pc, #56]	@ (80038b8 <xTaskRemoveFromEventList+0xc4>)
 800387e:	f7fe fd78 	bl	8002372 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003886:	4b0d      	ldr	r3, [pc, #52]	@ (80038bc <xTaskRemoveFromEventList+0xc8>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800388c:	429a      	cmp	r2, r3
 800388e:	d905      	bls.n	800389c <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003890:	2301      	movs	r3, #1
 8003892:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003894:	4b0a      	ldr	r3, [pc, #40]	@ (80038c0 <xTaskRemoveFromEventList+0xcc>)
 8003896:	2201      	movs	r2, #1
 8003898:	601a      	str	r2, [r3, #0]
 800389a:	e001      	b.n	80038a0 <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80038a0:	697b      	ldr	r3, [r7, #20]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20000210 	.word	0x20000210
 80038b0:	200001f0 	.word	0x200001f0
 80038b4:	20000114 	.word	0x20000114
 80038b8:	200001a8 	.word	0x200001a8
 80038bc:	20000110 	.word	0x20000110
 80038c0:	200001fc 	.word	0x200001fc

080038c4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80038cc:	4b06      	ldr	r3, [pc, #24]	@ (80038e8 <vTaskInternalSetTimeOutState+0x24>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80038d4:	4b05      	ldr	r3, [pc, #20]	@ (80038ec <vTaskInternalSetTimeOutState+0x28>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	605a      	str	r2, [r3, #4]
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	20000200 	.word	0x20000200
 80038ec:	200001ec 	.word	0x200001ec

080038f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10b      	bne.n	8003918 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8003900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003904:	f383 8811 	msr	BASEPRI, r3
 8003908:	f3bf 8f6f 	isb	sy
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	613b      	str	r3, [r7, #16]
    }
 8003912:	bf00      	nop
 8003914:	bf00      	nop
 8003916:	e7fd      	b.n	8003914 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10b      	bne.n	8003936 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	60fb      	str	r3, [r7, #12]
    }
 8003930:	bf00      	nop
 8003932:	bf00      	nop
 8003934:	e7fd      	b.n	8003932 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8003936:	f000 fee1 	bl	80046fc <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800393a:	4b1f      	ldr	r3, [pc, #124]	@ (80039b8 <xTaskCheckForTimeOut+0xc8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003952:	d102      	bne.n	800395a <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003954:	2300      	movs	r3, #0
 8003956:	61fb      	str	r3, [r7, #28]
 8003958:	e026      	b.n	80039a8 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	4b17      	ldr	r3, [pc, #92]	@ (80039bc <xTaskCheckForTimeOut+0xcc>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d00a      	beq.n	800397c <xTaskCheckForTimeOut+0x8c>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	429a      	cmp	r2, r3
 800396e:	d305      	bcc.n	800397c <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003970:	2301      	movs	r3, #1
 8003972:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2200      	movs	r2, #0
 8003978:	601a      	str	r2, [r3, #0]
 800397a:	e015      	b.n	80039a8 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	429a      	cmp	r2, r3
 8003984:	d20b      	bcs.n	800399e <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	1ad2      	subs	r2, r2, r3
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f7ff ff96 	bl	80038c4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003998:	2300      	movs	r3, #0
 800399a:	61fb      	str	r3, [r7, #28]
 800399c:	e004      	b.n	80039a8 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	2200      	movs	r2, #0
 80039a2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80039a4:	2301      	movs	r3, #1
 80039a6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80039a8:	f000 feda 	bl	8004760 <vPortExitCritical>

    return xReturn;
 80039ac:	69fb      	ldr	r3, [r7, #28]
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3720      	adds	r7, #32
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	200001ec 	.word	0x200001ec
 80039bc:	20000200 	.word	0x20000200

080039c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80039c4:	4b03      	ldr	r3, [pc, #12]	@ (80039d4 <vTaskMissedYield+0x14>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	601a      	str	r2, [r3, #0]
}
 80039ca:	bf00      	nop
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	200001fc 	.word	0x200001fc

080039d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b082      	sub	sp, #8
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80039e0:	f000 f84c 	bl	8003a7c <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 80039e4:	4b04      	ldr	r3, [pc, #16]	@ (80039f8 <prvIdleTask+0x20>)
 80039e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	f3bf 8f4f 	dsb	sy
 80039f0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80039f4:	bf00      	nop
 80039f6:	e7f3      	b.n	80039e0 <prvIdleTask+0x8>
 80039f8:	e000ed04 	.word	0xe000ed04

080039fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a02:	2300      	movs	r3, #0
 8003a04:	607b      	str	r3, [r7, #4]
 8003a06:	e00c      	b.n	8003a22 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4a12      	ldr	r2, [pc, #72]	@ (8003a5c <prvInitialiseTaskLists+0x60>)
 8003a14:	4413      	add	r3, r2
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fe fc7e 	bl	8002318 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	607b      	str	r3, [r7, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b04      	cmp	r3, #4
 8003a26:	d9ef      	bls.n	8003a08 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003a28:	480d      	ldr	r0, [pc, #52]	@ (8003a60 <prvInitialiseTaskLists+0x64>)
 8003a2a:	f7fe fc75 	bl	8002318 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003a2e:	480d      	ldr	r0, [pc, #52]	@ (8003a64 <prvInitialiseTaskLists+0x68>)
 8003a30:	f7fe fc72 	bl	8002318 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003a34:	480c      	ldr	r0, [pc, #48]	@ (8003a68 <prvInitialiseTaskLists+0x6c>)
 8003a36:	f7fe fc6f 	bl	8002318 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003a3a:	480c      	ldr	r0, [pc, #48]	@ (8003a6c <prvInitialiseTaskLists+0x70>)
 8003a3c:	f7fe fc6c 	bl	8002318 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003a40:	480b      	ldr	r0, [pc, #44]	@ (8003a70 <prvInitialiseTaskLists+0x74>)
 8003a42:	f7fe fc69 	bl	8002318 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003a46:	4b0b      	ldr	r3, [pc, #44]	@ (8003a74 <prvInitialiseTaskLists+0x78>)
 8003a48:	4a05      	ldr	r2, [pc, #20]	@ (8003a60 <prvInitialiseTaskLists+0x64>)
 8003a4a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a78 <prvInitialiseTaskLists+0x7c>)
 8003a4e:	4a05      	ldr	r2, [pc, #20]	@ (8003a64 <prvInitialiseTaskLists+0x68>)
 8003a50:	601a      	str	r2, [r3, #0]
}
 8003a52:	bf00      	nop
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	20000114 	.word	0x20000114
 8003a60:	20000178 	.word	0x20000178
 8003a64:	2000018c 	.word	0x2000018c
 8003a68:	200001a8 	.word	0x200001a8
 8003a6c:	200001bc 	.word	0x200001bc
 8003a70:	200001d4 	.word	0x200001d4
 8003a74:	200001a0 	.word	0x200001a0
 8003a78:	200001a4 	.word	0x200001a4

08003a7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a82:	e019      	b.n	8003ab8 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003a84:	f000 fe3a 	bl	80046fc <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a88:	4b10      	ldr	r3, [pc, #64]	@ (8003acc <prvCheckTasksWaitingTermination+0x50>)
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3304      	adds	r3, #4
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7fe fcc9 	bl	800242c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003a9a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad0 <prvCheckTasksWaitingTermination+0x54>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	4a0b      	ldr	r2, [pc, #44]	@ (8003ad0 <prvCheckTasksWaitingTermination+0x54>)
 8003aa2:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad4 <prvCheckTasksWaitingTermination+0x58>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad4 <prvCheckTasksWaitingTermination+0x58>)
 8003aac:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003aae:	f000 fe57 	bl	8004760 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f810 	bl	8003ad8 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ab8:	4b06      	ldr	r3, [pc, #24]	@ (8003ad4 <prvCheckTasksWaitingTermination+0x58>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1e1      	bne.n	8003a84 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003ac0:	bf00      	nop
 8003ac2:	bf00      	nop
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	200001bc 	.word	0x200001bc
 8003ad0:	200001e8 	.word	0x200001e8
 8003ad4:	200001d0 	.word	0x200001d0

08003ad8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b082      	sub	sp, #8
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f001 f81d 	bl	8004b24 <vPortFree>
                vPortFree( pxTCB );
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f001 f81a 	bl	8004b24 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003af0:	bf00      	nop
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003afc:	4b0a      	ldr	r3, [pc, #40]	@ (8003b28 <prvResetNextTaskUnblockTime+0x30>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d104      	bne.n	8003b10 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003b06:	4b09      	ldr	r3, [pc, #36]	@ (8003b2c <prvResetNextTaskUnblockTime+0x34>)
 8003b08:	f04f 32ff 	mov.w	r2, #4294967295
 8003b0c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003b0e:	e005      	b.n	8003b1c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b10:	4b05      	ldr	r3, [pc, #20]	@ (8003b28 <prvResetNextTaskUnblockTime+0x30>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a04      	ldr	r2, [pc, #16]	@ (8003b2c <prvResetNextTaskUnblockTime+0x34>)
 8003b1a:	6013      	str	r3, [r2, #0]
}
 8003b1c:	bf00      	nop
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	200001a0 	.word	0x200001a0
 8003b2c:	20000208 	.word	0x20000208

08003b30 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003b36:	4b0b      	ldr	r3, [pc, #44]	@ (8003b64 <xTaskGetSchedulerState+0x34>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d102      	bne.n	8003b44 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	607b      	str	r3, [r7, #4]
 8003b42:	e008      	b.n	8003b56 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b44:	4b08      	ldr	r3, [pc, #32]	@ (8003b68 <xTaskGetSchedulerState+0x38>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d102      	bne.n	8003b52 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003b4c:	2302      	movs	r3, #2
 8003b4e:	607b      	str	r3, [r7, #4]
 8003b50:	e001      	b.n	8003b56 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003b52:	2300      	movs	r3, #0
 8003b54:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003b56:	687b      	ldr	r3, [r7, #4]
    }
 8003b58:	4618      	mov	r0, r3
 8003b5a:	370c      	adds	r7, #12
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr
 8003b64:	200001f4 	.word	0x200001f4
 8003b68:	20000210 	.word	0x20000210

08003b6c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d06a      	beq.n	8003c58 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003b82:	4b38      	ldr	r3, [pc, #224]	@ (8003c64 <xTaskPriorityDisinherit+0xf8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d00b      	beq.n	8003ba4 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8003b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b90:	f383 8811 	msr	BASEPRI, r3
 8003b94:	f3bf 8f6f 	isb	sy
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	60fb      	str	r3, [r7, #12]
    }
 8003b9e:	bf00      	nop
 8003ba0:	bf00      	nop
 8003ba2:	e7fd      	b.n	8003ba0 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d10b      	bne.n	8003bc4 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8003bac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bb0:	f383 8811 	msr	BASEPRI, r3
 8003bb4:	f3bf 8f6f 	isb	sy
 8003bb8:	f3bf 8f4f 	dsb	sy
 8003bbc:	60bb      	str	r3, [r7, #8]
    }
 8003bbe:	bf00      	nop
 8003bc0:	bf00      	nop
 8003bc2:	e7fd      	b.n	8003bc0 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bc8:	1e5a      	subs	r2, r3, #1
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d03e      	beq.n	8003c58 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d13a      	bne.n	8003c58 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	3304      	adds	r3, #4
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7fe fc20 	bl	800242c <uxListRemove>
 8003bec:	4603      	mov	r3, r0
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10a      	bne.n	8003c08 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	43da      	mvns	r2, r3
 8003bfe:	4b1a      	ldr	r3, [pc, #104]	@ (8003c68 <xTaskPriorityDisinherit+0xfc>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4013      	ands	r3, r2
 8003c04:	4a18      	ldr	r2, [pc, #96]	@ (8003c68 <xTaskPriorityDisinherit+0xfc>)
 8003c06:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	204a      	movs	r0, #74	@ 0x4a
 8003c0e:	f002 fdd5 	bl	80067bc <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c1e:	f1c3 0205 	rsb	r2, r3, #5
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	409a      	lsls	r2, r3
 8003c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8003c68 <xTaskPriorityDisinherit+0xfc>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	4a0c      	ldr	r2, [pc, #48]	@ (8003c68 <xTaskPriorityDisinherit+0xfc>)
 8003c36:	6013      	str	r3, [r2, #0]
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4413      	add	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	4a09      	ldr	r2, [pc, #36]	@ (8003c6c <xTaskPriorityDisinherit+0x100>)
 8003c46:	441a      	add	r2, r3
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	3304      	adds	r3, #4
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4610      	mov	r0, r2
 8003c50:	f7fe fb8f 	bl	8002372 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003c54:	2301      	movs	r3, #1
 8003c56:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003c58:	697b      	ldr	r3, [r7, #20]
    }
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20000110 	.word	0x20000110
 8003c68:	200001f0 	.word	0x200001f0
 8003c6c:	20000114 	.word	0x20000114

08003c70 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003c7a:	4b32      	ldr	r3, [pc, #200]	@ (8003d44 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c80:	4b31      	ldr	r3, [pc, #196]	@ (8003d48 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	3304      	adds	r3, #4
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fe fbd0 	bl	800242c <uxListRemove>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10b      	bne.n	8003caa <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003c92:	4b2d      	ldr	r3, [pc, #180]	@ (8003d48 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c98:	2201      	movs	r2, #1
 8003c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9e:	43da      	mvns	r2, r3
 8003ca0:	4b2a      	ldr	r3, [pc, #168]	@ (8003d4c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	4a29      	ldr	r2, [pc, #164]	@ (8003d4c <prvAddCurrentTaskToDelayedList+0xdc>)
 8003ca8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb0:	d110      	bne.n	8003cd4 <prvAddCurrentTaskToDelayedList+0x64>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00d      	beq.n	8003cd4 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003cb8:	4b23      	ldr	r3, [pc, #140]	@ (8003d48 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	211b      	movs	r1, #27
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f003 fb40 	bl	8007344 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cc4:	4b20      	ldr	r3, [pc, #128]	@ (8003d48 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	3304      	adds	r3, #4
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4820      	ldr	r0, [pc, #128]	@ (8003d50 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003cce:	f7fe fb50 	bl	8002372 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003cd2:	e032      	b.n	8003d3a <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003cd4:	68fa      	ldr	r2, [r7, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4413      	add	r3, r2
 8003cda:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003cdc:	4b1a      	ldr	r3, [pc, #104]	@ (8003d48 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003ce4:	68ba      	ldr	r2, [r7, #8]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d20f      	bcs.n	8003d0c <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003cec:	4b16      	ldr	r3, [pc, #88]	@ (8003d48 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2104      	movs	r1, #4
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f003 fb26 	bl	8007344 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cf8:	4b16      	ldr	r3, [pc, #88]	@ (8003d54 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	4b12      	ldr	r3, [pc, #72]	@ (8003d48 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3304      	adds	r3, #4
 8003d02:	4619      	mov	r1, r3
 8003d04:	4610      	mov	r0, r2
 8003d06:	f7fe fb58 	bl	80023ba <vListInsert>
}
 8003d0a:	e016      	b.n	8003d3a <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003d0c:	4b0e      	ldr	r3, [pc, #56]	@ (8003d48 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	2104      	movs	r1, #4
 8003d12:	4618      	mov	r0, r3
 8003d14:	f003 fb16 	bl	8007344 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d18:	4b0f      	ldr	r3, [pc, #60]	@ (8003d58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d48 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	3304      	adds	r3, #4
 8003d22:	4619      	mov	r1, r3
 8003d24:	4610      	mov	r0, r2
 8003d26:	f7fe fb48 	bl	80023ba <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8003d5c <prvAddCurrentTaskToDelayedList+0xec>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d202      	bcs.n	8003d3a <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003d34:	4a09      	ldr	r2, [pc, #36]	@ (8003d5c <prvAddCurrentTaskToDelayedList+0xec>)
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	6013      	str	r3, [r2, #0]
}
 8003d3a:	bf00      	nop
 8003d3c:	3710      	adds	r7, #16
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	bf00      	nop
 8003d44:	200001ec 	.word	0x200001ec
 8003d48:	20000110 	.word	0x20000110
 8003d4c:	200001f0 	.word	0x200001f0
 8003d50:	200001d4 	.word	0x200001d4
 8003d54:	200001a4 	.word	0x200001a4
 8003d58:	200001a0 	.word	0x200001a0
 8003d5c:	20000208 	.word	0x20000208

08003d60 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003d6a:	f000 fae1 	bl	8004330 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003d6e:	4b12      	ldr	r3, [pc, #72]	@ (8003db8 <xTimerCreateTimerTask+0x58>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00b      	beq.n	8003d8e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003d76:	4b11      	ldr	r3, [pc, #68]	@ (8003dbc <xTimerCreateTimerTask+0x5c>)
 8003d78:	9301      	str	r3, [sp, #4]
 8003d7a:	2302      	movs	r3, #2
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	2300      	movs	r3, #0
 8003d80:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003d84:	490e      	ldr	r1, [pc, #56]	@ (8003dc0 <xTimerCreateTimerTask+0x60>)
 8003d86:	480f      	ldr	r0, [pc, #60]	@ (8003dc4 <xTimerCreateTimerTask+0x64>)
 8003d88:	f7ff f8b4 	bl	8002ef4 <xTaskCreate>
 8003d8c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10b      	bne.n	8003dac <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8003d94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d98:	f383 8811 	msr	BASEPRI, r3
 8003d9c:	f3bf 8f6f 	isb	sy
 8003da0:	f3bf 8f4f 	dsb	sy
 8003da4:	603b      	str	r3, [r7, #0]
    }
 8003da6:	bf00      	nop
 8003da8:	bf00      	nop
 8003daa:	e7fd      	b.n	8003da8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003dac:	687b      	ldr	r3, [r7, #4]
    }
 8003dae:	4618      	mov	r0, r3
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	20000244 	.word	0x20000244
 8003dbc:	20000248 	.word	0x20000248
 8003dc0:	08008104 	.word	0x08008104
 8003dc4:	08003f01 	.word	0x08003f01

08003dc8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08a      	sub	sp, #40	@ 0x28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
 8003dd4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10b      	bne.n	8003df8 <xTimerGenericCommand+0x30>
        __asm volatile
 8003de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	623b      	str	r3, [r7, #32]
    }
 8003df2:	bf00      	nop
 8003df4:	bf00      	nop
 8003df6:	e7fd      	b.n	8003df4 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003df8:	4b19      	ldr	r3, [pc, #100]	@ (8003e60 <xTimerGenericCommand+0x98>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d02a      	beq.n	8003e56 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2b05      	cmp	r3, #5
 8003e10:	dc18      	bgt.n	8003e44 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003e12:	f7ff fe8d 	bl	8003b30 <xTaskGetSchedulerState>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d109      	bne.n	8003e30 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003e1c:	4b10      	ldr	r3, [pc, #64]	@ (8003e60 <xTimerGenericCommand+0x98>)
 8003e1e:	6818      	ldr	r0, [r3, #0]
 8003e20:	f107 0114 	add.w	r1, r7, #20
 8003e24:	2300      	movs	r3, #0
 8003e26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003e28:	f7fe fc12 	bl	8002650 <xQueueGenericSend>
 8003e2c:	6278      	str	r0, [r7, #36]	@ 0x24
 8003e2e:	e012      	b.n	8003e56 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003e30:	4b0b      	ldr	r3, [pc, #44]	@ (8003e60 <xTimerGenericCommand+0x98>)
 8003e32:	6818      	ldr	r0, [r3, #0]
 8003e34:	f107 0114 	add.w	r1, r7, #20
 8003e38:	2300      	movs	r3, #0
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f7fe fc08 	bl	8002650 <xQueueGenericSend>
 8003e40:	6278      	str	r0, [r7, #36]	@ 0x24
 8003e42:	e008      	b.n	8003e56 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003e44:	4b06      	ldr	r3, [pc, #24]	@ (8003e60 <xTimerGenericCommand+0x98>)
 8003e46:	6818      	ldr	r0, [r3, #0]
 8003e48:	f107 0114 	add.w	r1, r7, #20
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	683a      	ldr	r2, [r7, #0]
 8003e50:	f7fe fd10 	bl	8002874 <xQueueGenericSendFromISR>
 8003e54:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3728      	adds	r7, #40	@ 0x28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	20000244 	.word	0x20000244

08003e64 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b088      	sub	sp, #32
 8003e68:	af02      	add	r7, sp, #8
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e6e:	4b23      	ldr	r3, [pc, #140]	@ (8003efc <prvProcessExpiredTimer+0x98>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	3304      	adds	r3, #4
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fe fad5 	bl	800242c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d023      	beq.n	8003ed8 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	699a      	ldr	r2, [r3, #24]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	18d1      	adds	r1, r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	6978      	ldr	r0, [r7, #20]
 8003e9e:	f000 f8d5 	bl	800404c <prvInsertTimerInActiveList>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d020      	beq.n	8003eea <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	2300      	movs	r3, #0
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	6978      	ldr	r0, [r7, #20]
 8003eb4:	f7ff ff88 	bl	8003dc8 <xTimerGenericCommand>
 8003eb8:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d114      	bne.n	8003eea <prvProcessExpiredTimer+0x86>
        __asm volatile
 8003ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec4:	f383 8811 	msr	BASEPRI, r3
 8003ec8:	f3bf 8f6f 	isb	sy
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	60fb      	str	r3, [r7, #12]
    }
 8003ed2:	bf00      	nop
 8003ed4:	bf00      	nop
 8003ed6:	e7fd      	b.n	8003ed4 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ede:	f023 0301 	bic.w	r3, r3, #1
 8003ee2:	b2da      	uxtb	r2, r3
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	6a1b      	ldr	r3, [r3, #32]
 8003eee:	6978      	ldr	r0, [r7, #20]
 8003ef0:	4798      	blx	r3
    }
 8003ef2:	bf00      	nop
 8003ef4:	3718      	adds	r7, #24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	2000023c 	.word	0x2000023c

08003f00 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b084      	sub	sp, #16
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f08:	f107 0308 	add.w	r3, r7, #8
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 f859 	bl	8003fc4 <prvGetNextExpireTime>
 8003f12:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	4619      	mov	r1, r3
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 f805 	bl	8003f28 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003f1e:	f000 f8d7 	bl	80040d0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f22:	bf00      	nop
 8003f24:	e7f0      	b.n	8003f08 <prvTimerTask+0x8>
	...

08003f28 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003f32:	f7ff fa41 	bl	80033b8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f36:	f107 0308 	add.w	r3, r7, #8
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 f866 	bl	800400c <prvSampleTimeNow>
 8003f40:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d130      	bne.n	8003faa <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d10a      	bne.n	8003f64 <prvProcessTimerOrBlockTask+0x3c>
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d806      	bhi.n	8003f64 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003f56:	f7ff fa3d 	bl	80033d4 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003f5a:	68f9      	ldr	r1, [r7, #12]
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff ff81 	bl	8003e64 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003f62:	e024      	b.n	8003fae <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d008      	beq.n	8003f7c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003f6a:	4b13      	ldr	r3, [pc, #76]	@ (8003fb8 <prvProcessTimerOrBlockTask+0x90>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <prvProcessTimerOrBlockTask+0x50>
 8003f74:	2301      	movs	r3, #1
 8003f76:	e000      	b.n	8003f7a <prvProcessTimerOrBlockTask+0x52>
 8003f78:	2300      	movs	r3, #0
 8003f7a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003f7c:	4b0f      	ldr	r3, [pc, #60]	@ (8003fbc <prvProcessTimerOrBlockTask+0x94>)
 8003f7e:	6818      	ldr	r0, [r3, #0]
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	683a      	ldr	r2, [r7, #0]
 8003f88:	4619      	mov	r1, r3
 8003f8a:	f7fe ff7f 	bl	8002e8c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003f8e:	f7ff fa21 	bl	80033d4 <xTaskResumeAll>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10a      	bne.n	8003fae <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003f98:	4b09      	ldr	r3, [pc, #36]	@ (8003fc0 <prvProcessTimerOrBlockTask+0x98>)
 8003f9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	f3bf 8f4f 	dsb	sy
 8003fa4:	f3bf 8f6f 	isb	sy
    }
 8003fa8:	e001      	b.n	8003fae <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003faa:	f7ff fa13 	bl	80033d4 <xTaskResumeAll>
    }
 8003fae:	bf00      	nop
 8003fb0:	3710      	adds	r7, #16
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20000240 	.word	0x20000240
 8003fbc:	20000244 	.word	0x20000244
 8003fc0:	e000ed04 	.word	0xe000ed04

08003fc4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8004008 <prvGetNextExpireTime+0x44>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <prvGetNextExpireTime+0x16>
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	e000      	b.n	8003fdc <prvGetNextExpireTime+0x18>
 8003fda:	2200      	movs	r2, #0
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d105      	bne.n	8003ff4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fe8:	4b07      	ldr	r3, [pc, #28]	@ (8004008 <prvGetNextExpireTime+0x44>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68db      	ldr	r3, [r3, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	60fb      	str	r3, [r7, #12]
 8003ff2:	e001      	b.n	8003ff8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
    }
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	3714      	adds	r7, #20
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	2000023c 	.word	0x2000023c

0800400c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004014:	f7ff fa72 	bl	80034fc <xTaskGetTickCount>
 8004018:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800401a:	4b0b      	ldr	r3, [pc, #44]	@ (8004048 <prvSampleTimeNow+0x3c>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	429a      	cmp	r2, r3
 8004022:	d205      	bcs.n	8004030 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004024:	f000 f91e 	bl	8004264 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	601a      	str	r2, [r3, #0]
 800402e:	e002      	b.n	8004036 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004036:	4a04      	ldr	r2, [pc, #16]	@ (8004048 <prvSampleTimeNow+0x3c>)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800403c:	68fb      	ldr	r3, [r7, #12]
    }
 800403e:	4618      	mov	r0, r3
 8004040:	3710      	adds	r7, #16
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	2000024c 	.word	0x2000024c

0800404c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
 8004058:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800405a:	2300      	movs	r3, #0
 800405c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	429a      	cmp	r2, r3
 8004070:	d812      	bhi.n	8004098 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	1ad2      	subs	r2, r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	429a      	cmp	r2, r3
 800407e:	d302      	bcc.n	8004086 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004080:	2301      	movs	r3, #1
 8004082:	617b      	str	r3, [r7, #20]
 8004084:	e01b      	b.n	80040be <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004086:	4b10      	ldr	r3, [pc, #64]	@ (80040c8 <prvInsertTimerInActiveList+0x7c>)
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	3304      	adds	r3, #4
 800408e:	4619      	mov	r1, r3
 8004090:	4610      	mov	r0, r2
 8004092:	f7fe f992 	bl	80023ba <vListInsert>
 8004096:	e012      	b.n	80040be <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	429a      	cmp	r2, r3
 800409e:	d206      	bcs.n	80040ae <prvInsertTimerInActiveList+0x62>
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d302      	bcc.n	80040ae <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80040a8:	2301      	movs	r3, #1
 80040aa:	617b      	str	r3, [r7, #20]
 80040ac:	e007      	b.n	80040be <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80040ae:	4b07      	ldr	r3, [pc, #28]	@ (80040cc <prvInsertTimerInActiveList+0x80>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	3304      	adds	r3, #4
 80040b6:	4619      	mov	r1, r3
 80040b8:	4610      	mov	r0, r2
 80040ba:	f7fe f97e 	bl	80023ba <vListInsert>
            }
        }

        return xProcessTimerNow;
 80040be:	697b      	ldr	r3, [r7, #20]
    }
 80040c0:	4618      	mov	r0, r3
 80040c2:	3718      	adds	r7, #24
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	20000240 	.word	0x20000240
 80040cc:	2000023c 	.word	0x2000023c

080040d0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b08c      	sub	sp, #48	@ 0x30
 80040d4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040d6:	e0b2      	b.n	800423e <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f2c0 80af 	blt.w	800423e <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80040e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d004      	beq.n	80040f6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040ee:	3304      	adds	r3, #4
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fe f99b 	bl	800242c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040f6:	1d3b      	adds	r3, r7, #4
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff ff87 	bl	800400c <prvSampleTimeNow>
 80040fe:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2b09      	cmp	r3, #9
 8004104:	f200 8098 	bhi.w	8004238 <prvProcessReceivedCommands+0x168>
 8004108:	a201      	add	r2, pc, #4	@ (adr r2, 8004110 <prvProcessReceivedCommands+0x40>)
 800410a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410e:	bf00      	nop
 8004110:	08004139 	.word	0x08004139
 8004114:	08004139 	.word	0x08004139
 8004118:	08004139 	.word	0x08004139
 800411c:	080041af 	.word	0x080041af
 8004120:	080041c3 	.word	0x080041c3
 8004124:	0800420f 	.word	0x0800420f
 8004128:	08004139 	.word	0x08004139
 800412c:	08004139 	.word	0x08004139
 8004130:	080041af 	.word	0x080041af
 8004134:	080041c3 	.word	0x080041c3
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800413a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800413e:	f043 0301 	orr.w	r3, r3, #1
 8004142:	b2da      	uxtb	r2, r3
 8004144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004146:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800414a:	68fa      	ldr	r2, [r7, #12]
 800414c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	18d1      	adds	r1, r2, r3
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6a3a      	ldr	r2, [r7, #32]
 8004156:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004158:	f7ff ff78 	bl	800404c <prvInsertTimerInActiveList>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d06c      	beq.n	800423c <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004168:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800416a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800416c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b00      	cmp	r3, #0
 8004176:	d061      	beq.n	800423c <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	441a      	add	r2, r3
 8004180:	2300      	movs	r3, #0
 8004182:	9300      	str	r3, [sp, #0]
 8004184:	2300      	movs	r3, #0
 8004186:	2100      	movs	r1, #0
 8004188:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800418a:	f7ff fe1d 	bl	8003dc8 <xTimerGenericCommand>
 800418e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d152      	bne.n	800423c <prvProcessReceivedCommands+0x16c>
        __asm volatile
 8004196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800419a:	f383 8811 	msr	BASEPRI, r3
 800419e:	f3bf 8f6f 	isb	sy
 80041a2:	f3bf 8f4f 	dsb	sy
 80041a6:	61bb      	str	r3, [r7, #24]
    }
 80041a8:	bf00      	nop
 80041aa:	bf00      	nop
 80041ac:	e7fd      	b.n	80041aa <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80041ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041b4:	f023 0301 	bic.w	r3, r3, #1
 80041b8:	b2da      	uxtb	r2, r3
 80041ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041bc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80041c0:	e03d      	b.n	800423e <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80041c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041c8:	f043 0301 	orr.w	r3, r3, #1
 80041cc:	b2da      	uxtb	r2, r3
 80041ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d8:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80041da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10b      	bne.n	80041fa <prvProcessReceivedCommands+0x12a>
        __asm volatile
 80041e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e6:	f383 8811 	msr	BASEPRI, r3
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	617b      	str	r3, [r7, #20]
    }
 80041f4:	bf00      	nop
 80041f6:	bf00      	nop
 80041f8:	e7fd      	b.n	80041f6 <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80041fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fc:	699a      	ldr	r2, [r3, #24]
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	18d1      	adds	r1, r2, r3
 8004202:	6a3b      	ldr	r3, [r7, #32]
 8004204:	6a3a      	ldr	r2, [r7, #32]
 8004206:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004208:	f7ff ff20 	bl	800404c <prvInsertTimerInActiveList>
                        break;
 800420c:	e017      	b.n	800423e <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800420e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004210:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d103      	bne.n	8004224 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 800421c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800421e:	f000 fc81 	bl	8004b24 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004222:	e00c      	b.n	800423e <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004226:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800422a:	f023 0301 	bic.w	r3, r3, #1
 800422e:	b2da      	uxtb	r2, r3
 8004230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004232:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004236:	e002      	b.n	800423e <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004238:	bf00      	nop
 800423a:	e000      	b.n	800423e <prvProcessReceivedCommands+0x16e>
                        break;
 800423c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800423e:	4b08      	ldr	r3, [pc, #32]	@ (8004260 <prvProcessReceivedCommands+0x190>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f107 0108 	add.w	r1, r7, #8
 8004246:	2200      	movs	r2, #0
 8004248:	4618      	mov	r0, r3
 800424a:	f7fe fbd5 	bl	80029f8 <xQueueReceive>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	f47f af41 	bne.w	80040d8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8004256:	bf00      	nop
 8004258:	bf00      	nop
 800425a:	3728      	adds	r7, #40	@ 0x28
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	20000244 	.word	0x20000244

08004264 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800426a:	e049      	b.n	8004300 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800426c:	4b2e      	ldr	r3, [pc, #184]	@ (8004328 <prvSwitchTimerLists+0xc4>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004276:	4b2c      	ldr	r3, [pc, #176]	@ (8004328 <prvSwitchTimerLists+0xc4>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68db      	ldr	r3, [r3, #12]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	3304      	adds	r3, #4
 8004284:	4618      	mov	r0, r3
 8004286:	f7fe f8d1 	bl	800242c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	d02f      	beq.n	8004300 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	699b      	ldr	r3, [r3, #24]
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4413      	add	r3, r2
 80042a8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d90e      	bls.n	80042d0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	68ba      	ldr	r2, [r7, #8]
 80042b6:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80042be:	4b1a      	ldr	r3, [pc, #104]	@ (8004328 <prvSwitchTimerLists+0xc4>)
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	3304      	adds	r3, #4
 80042c6:	4619      	mov	r1, r3
 80042c8:	4610      	mov	r0, r2
 80042ca:	f7fe f876 	bl	80023ba <vListInsert>
 80042ce:	e017      	b.n	8004300 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80042d0:	2300      	movs	r3, #0
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	2300      	movs	r3, #0
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	2100      	movs	r1, #0
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f7ff fd74 	bl	8003dc8 <xTimerGenericCommand>
 80042e0:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d10b      	bne.n	8004300 <prvSwitchTimerLists+0x9c>
        __asm volatile
 80042e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	603b      	str	r3, [r7, #0]
    }
 80042fa:	bf00      	nop
 80042fc:	bf00      	nop
 80042fe:	e7fd      	b.n	80042fc <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004300:	4b09      	ldr	r3, [pc, #36]	@ (8004328 <prvSwitchTimerLists+0xc4>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d1b0      	bne.n	800426c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 800430a:	4b07      	ldr	r3, [pc, #28]	@ (8004328 <prvSwitchTimerLists+0xc4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8004310:	4b06      	ldr	r3, [pc, #24]	@ (800432c <prvSwitchTimerLists+0xc8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a04      	ldr	r2, [pc, #16]	@ (8004328 <prvSwitchTimerLists+0xc4>)
 8004316:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004318:	4a04      	ldr	r2, [pc, #16]	@ (800432c <prvSwitchTimerLists+0xc8>)
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	6013      	str	r3, [r2, #0]
    }
 800431e:	bf00      	nop
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	2000023c 	.word	0x2000023c
 800432c:	20000240 	.word	0x20000240

08004330 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004334:	f000 f9e2 	bl	80046fc <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004338:	4b12      	ldr	r3, [pc, #72]	@ (8004384 <prvCheckForValidListAndQueue+0x54>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d11d      	bne.n	800437c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004340:	4811      	ldr	r0, [pc, #68]	@ (8004388 <prvCheckForValidListAndQueue+0x58>)
 8004342:	f7fd ffe9 	bl	8002318 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004346:	4811      	ldr	r0, [pc, #68]	@ (800438c <prvCheckForValidListAndQueue+0x5c>)
 8004348:	f7fd ffe6 	bl	8002318 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 800434c:	4b10      	ldr	r3, [pc, #64]	@ (8004390 <prvCheckForValidListAndQueue+0x60>)
 800434e:	4a0e      	ldr	r2, [pc, #56]	@ (8004388 <prvCheckForValidListAndQueue+0x58>)
 8004350:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004352:	4b10      	ldr	r3, [pc, #64]	@ (8004394 <prvCheckForValidListAndQueue+0x64>)
 8004354:	4a0d      	ldr	r2, [pc, #52]	@ (800438c <prvCheckForValidListAndQueue+0x5c>)
 8004356:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004358:	2200      	movs	r2, #0
 800435a:	210c      	movs	r1, #12
 800435c:	200a      	movs	r0, #10
 800435e:	f7fe f8eb 	bl	8002538 <xQueueGenericCreate>
 8004362:	4603      	mov	r3, r0
 8004364:	4a07      	ldr	r2, [pc, #28]	@ (8004384 <prvCheckForValidListAndQueue+0x54>)
 8004366:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004368:	4b06      	ldr	r3, [pc, #24]	@ (8004384 <prvCheckForValidListAndQueue+0x54>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d005      	beq.n	800437c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004370:	4b04      	ldr	r3, [pc, #16]	@ (8004384 <prvCheckForValidListAndQueue+0x54>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4908      	ldr	r1, [pc, #32]	@ (8004398 <prvCheckForValidListAndQueue+0x68>)
 8004376:	4618      	mov	r0, r3
 8004378:	f7fe fd56 	bl	8002e28 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800437c:	f000 f9f0 	bl	8004760 <vPortExitCritical>
    }
 8004380:	bf00      	nop
 8004382:	bd80      	pop	{r7, pc}
 8004384:	20000244 	.word	0x20000244
 8004388:	20000214 	.word	0x20000214
 800438c:	20000228 	.word	0x20000228
 8004390:	2000023c 	.word	0x2000023c
 8004394:	20000240 	.word	0x20000240
 8004398:	0800810c 	.word	0x0800810c

0800439c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	60b9      	str	r1, [r7, #8]
 80043a6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	3b04      	subs	r3, #4
 80043ac:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80043b4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	3b04      	subs	r3, #4
 80043ba:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	f023 0201 	bic.w	r2, r3, #1
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	3b04      	subs	r3, #4
 80043ca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80043cc:	4a0c      	ldr	r2, [pc, #48]	@ (8004400 <pxPortInitialiseStack+0x64>)
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	3b14      	subs	r3, #20
 80043d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	3b04      	subs	r3, #4
 80043e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f06f 0202 	mvn.w	r2, #2
 80043ea:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	3b20      	subs	r3, #32
 80043f0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80043f2:	68fb      	ldr	r3, [r7, #12]
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr
 8004400:	08004405 	.word	0x08004405

08004404 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004404:	b480      	push	{r7}
 8004406:	b085      	sub	sp, #20
 8004408:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800440a:	2300      	movs	r3, #0
 800440c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800440e:	4b13      	ldr	r3, [pc, #76]	@ (800445c <prvTaskExitError+0x58>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004416:	d00b      	beq.n	8004430 <prvTaskExitError+0x2c>
        __asm volatile
 8004418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800441c:	f383 8811 	msr	BASEPRI, r3
 8004420:	f3bf 8f6f 	isb	sy
 8004424:	f3bf 8f4f 	dsb	sy
 8004428:	60fb      	str	r3, [r7, #12]
    }
 800442a:	bf00      	nop
 800442c:	bf00      	nop
 800442e:	e7fd      	b.n	800442c <prvTaskExitError+0x28>
        __asm volatile
 8004430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004434:	f383 8811 	msr	BASEPRI, r3
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	60bb      	str	r3, [r7, #8]
    }
 8004442:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004444:	bf00      	nop
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d0fc      	beq.n	8004446 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800444c:	bf00      	nop
 800444e:	bf00      	nop
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	2000000c 	.word	0x2000000c

08004460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004460:	4b07      	ldr	r3, [pc, #28]	@ (8004480 <pxCurrentTCBConst2>)
 8004462:	6819      	ldr	r1, [r3, #0]
 8004464:	6808      	ldr	r0, [r1, #0]
 8004466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800446a:	f380 8809 	msr	PSP, r0
 800446e:	f3bf 8f6f 	isb	sy
 8004472:	f04f 0000 	mov.w	r0, #0
 8004476:	f380 8811 	msr	BASEPRI, r0
 800447a:	4770      	bx	lr
 800447c:	f3af 8000 	nop.w

08004480 <pxCurrentTCBConst2>:
 8004480:	20000110 	.word	0x20000110
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004484:	bf00      	nop
 8004486:	bf00      	nop

08004488 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004488:	4808      	ldr	r0, [pc, #32]	@ (80044ac <prvPortStartFirstTask+0x24>)
 800448a:	6800      	ldr	r0, [r0, #0]
 800448c:	6800      	ldr	r0, [r0, #0]
 800448e:	f380 8808 	msr	MSP, r0
 8004492:	f04f 0000 	mov.w	r0, #0
 8004496:	f380 8814 	msr	CONTROL, r0
 800449a:	b662      	cpsie	i
 800449c:	b661      	cpsie	f
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	f3bf 8f6f 	isb	sy
 80044a6:	df00      	svc	0
 80044a8:	bf00      	nop
 80044aa:	0000      	.short	0x0000
 80044ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80044b0:	bf00      	nop
 80044b2:	bf00      	nop

080044b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80044ba:	4b47      	ldr	r3, [pc, #284]	@ (80045d8 <xPortStartScheduler+0x124>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a47      	ldr	r2, [pc, #284]	@ (80045dc <xPortStartScheduler+0x128>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d10b      	bne.n	80044dc <xPortStartScheduler+0x28>
        __asm volatile
 80044c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c8:	f383 8811 	msr	BASEPRI, r3
 80044cc:	f3bf 8f6f 	isb	sy
 80044d0:	f3bf 8f4f 	dsb	sy
 80044d4:	60fb      	str	r3, [r7, #12]
    }
 80044d6:	bf00      	nop
 80044d8:	bf00      	nop
 80044da:	e7fd      	b.n	80044d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044dc:	4b3e      	ldr	r3, [pc, #248]	@ (80045d8 <xPortStartScheduler+0x124>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a3f      	ldr	r2, [pc, #252]	@ (80045e0 <xPortStartScheduler+0x12c>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d10b      	bne.n	80044fe <xPortStartScheduler+0x4a>
        __asm volatile
 80044e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ea:	f383 8811 	msr	BASEPRI, r3
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	613b      	str	r3, [r7, #16]
    }
 80044f8:	bf00      	nop
 80044fa:	bf00      	nop
 80044fc:	e7fd      	b.n	80044fa <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044fe:	4b39      	ldr	r3, [pc, #228]	@ (80045e4 <xPortStartScheduler+0x130>)
 8004500:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	b2db      	uxtb	r3, r3
 8004508:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	22ff      	movs	r2, #255	@ 0xff
 800450e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004518:	78fb      	ldrb	r3, [r7, #3]
 800451a:	b2db      	uxtb	r3, r3
 800451c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004520:	b2da      	uxtb	r2, r3
 8004522:	4b31      	ldr	r3, [pc, #196]	@ (80045e8 <xPortStartScheduler+0x134>)
 8004524:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004526:	4b31      	ldr	r3, [pc, #196]	@ (80045ec <xPortStartScheduler+0x138>)
 8004528:	2207      	movs	r2, #7
 800452a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800452c:	e009      	b.n	8004542 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800452e:	4b2f      	ldr	r3, [pc, #188]	@ (80045ec <xPortStartScheduler+0x138>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	3b01      	subs	r3, #1
 8004534:	4a2d      	ldr	r2, [pc, #180]	@ (80045ec <xPortStartScheduler+0x138>)
 8004536:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004538:	78fb      	ldrb	r3, [r7, #3]
 800453a:	b2db      	uxtb	r3, r3
 800453c:	005b      	lsls	r3, r3, #1
 800453e:	b2db      	uxtb	r3, r3
 8004540:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004542:	78fb      	ldrb	r3, [r7, #3]
 8004544:	b2db      	uxtb	r3, r3
 8004546:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800454a:	2b80      	cmp	r3, #128	@ 0x80
 800454c:	d0ef      	beq.n	800452e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800454e:	4b27      	ldr	r3, [pc, #156]	@ (80045ec <xPortStartScheduler+0x138>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f1c3 0307 	rsb	r3, r3, #7
 8004556:	2b04      	cmp	r3, #4
 8004558:	d00b      	beq.n	8004572 <xPortStartScheduler+0xbe>
        __asm volatile
 800455a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800455e:	f383 8811 	msr	BASEPRI, r3
 8004562:	f3bf 8f6f 	isb	sy
 8004566:	f3bf 8f4f 	dsb	sy
 800456a:	60bb      	str	r3, [r7, #8]
    }
 800456c:	bf00      	nop
 800456e:	bf00      	nop
 8004570:	e7fd      	b.n	800456e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004572:	4b1e      	ldr	r3, [pc, #120]	@ (80045ec <xPortStartScheduler+0x138>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	021b      	lsls	r3, r3, #8
 8004578:	4a1c      	ldr	r2, [pc, #112]	@ (80045ec <xPortStartScheduler+0x138>)
 800457a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800457c:	4b1b      	ldr	r3, [pc, #108]	@ (80045ec <xPortStartScheduler+0x138>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004584:	4a19      	ldr	r2, [pc, #100]	@ (80045ec <xPortStartScheduler+0x138>)
 8004586:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	b2da      	uxtb	r2, r3
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004590:	4b17      	ldr	r3, [pc, #92]	@ (80045f0 <xPortStartScheduler+0x13c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a16      	ldr	r2, [pc, #88]	@ (80045f0 <xPortStartScheduler+0x13c>)
 8004596:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800459a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800459c:	4b14      	ldr	r3, [pc, #80]	@ (80045f0 <xPortStartScheduler+0x13c>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	4a13      	ldr	r2, [pc, #76]	@ (80045f0 <xPortStartScheduler+0x13c>)
 80045a2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80045a6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80045a8:	f000 f968 	bl	800487c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80045ac:	4b11      	ldr	r3, [pc, #68]	@ (80045f4 <xPortStartScheduler+0x140>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80045b2:	f000 f987 	bl	80048c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80045b6:	4b10      	ldr	r3, [pc, #64]	@ (80045f8 <xPortStartScheduler+0x144>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a0f      	ldr	r2, [pc, #60]	@ (80045f8 <xPortStartScheduler+0x144>)
 80045bc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80045c0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80045c2:	f7ff ff61 	bl	8004488 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80045c6:	f7ff f855 	bl	8003674 <vTaskSwitchContext>
    prvTaskExitError();
 80045ca:	f7ff ff1b 	bl	8004404 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3718      	adds	r7, #24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	e000ed00 	.word	0xe000ed00
 80045dc:	410fc271 	.word	0x410fc271
 80045e0:	410fc270 	.word	0x410fc270
 80045e4:	e000e400 	.word	0xe000e400
 80045e8:	20000250 	.word	0x20000250
 80045ec:	20000254 	.word	0x20000254
 80045f0:	e000ed20 	.word	0xe000ed20
 80045f4:	2000000c 	.word	0x2000000c
 80045f8:	e000ef34 	.word	0xe000ef34

080045fc <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	b087      	sub	sp, #28
 8004600:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004602:	4b38      	ldr	r3, [pc, #224]	@ (80046e4 <vInitPrioGroupValue+0xe8>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4a38      	ldr	r2, [pc, #224]	@ (80046e8 <vInitPrioGroupValue+0xec>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d10b      	bne.n	8004624 <vInitPrioGroupValue+0x28>
        __asm volatile
 800460c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004610:	f383 8811 	msr	BASEPRI, r3
 8004614:	f3bf 8f6f 	isb	sy
 8004618:	f3bf 8f4f 	dsb	sy
 800461c:	60fb      	str	r3, [r7, #12]
    }
 800461e:	bf00      	nop
 8004620:	bf00      	nop
 8004622:	e7fd      	b.n	8004620 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004624:	4b2f      	ldr	r3, [pc, #188]	@ (80046e4 <vInitPrioGroupValue+0xe8>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a30      	ldr	r2, [pc, #192]	@ (80046ec <vInitPrioGroupValue+0xf0>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d10b      	bne.n	8004646 <vInitPrioGroupValue+0x4a>
        __asm volatile
 800462e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004632:	f383 8811 	msr	BASEPRI, r3
 8004636:	f3bf 8f6f 	isb	sy
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	613b      	str	r3, [r7, #16]
    }
 8004640:	bf00      	nop
 8004642:	bf00      	nop
 8004644:	e7fd      	b.n	8004642 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004646:	4b2a      	ldr	r3, [pc, #168]	@ (80046f0 <vInitPrioGroupValue+0xf4>)
 8004648:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	b2db      	uxtb	r3, r3
 8004650:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	22ff      	movs	r2, #255	@ 0xff
 8004656:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	b2db      	uxtb	r3, r3
 800465e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004660:	78fb      	ldrb	r3, [r7, #3]
 8004662:	b2db      	uxtb	r3, r3
 8004664:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004668:	b2da      	uxtb	r2, r3
 800466a:	4b22      	ldr	r3, [pc, #136]	@ (80046f4 <vInitPrioGroupValue+0xf8>)
 800466c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800466e:	4b22      	ldr	r3, [pc, #136]	@ (80046f8 <vInitPrioGroupValue+0xfc>)
 8004670:	2207      	movs	r2, #7
 8004672:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004674:	e009      	b.n	800468a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8004676:	4b20      	ldr	r3, [pc, #128]	@ (80046f8 <vInitPrioGroupValue+0xfc>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3b01      	subs	r3, #1
 800467c:	4a1e      	ldr	r2, [pc, #120]	@ (80046f8 <vInitPrioGroupValue+0xfc>)
 800467e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004680:	78fb      	ldrb	r3, [r7, #3]
 8004682:	b2db      	uxtb	r3, r3
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	b2db      	uxtb	r3, r3
 8004688:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800468a:	78fb      	ldrb	r3, [r7, #3]
 800468c:	b2db      	uxtb	r3, r3
 800468e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004692:	2b80      	cmp	r3, #128	@ 0x80
 8004694:	d0ef      	beq.n	8004676 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004696:	4b18      	ldr	r3, [pc, #96]	@ (80046f8 <vInitPrioGroupValue+0xfc>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f1c3 0307 	rsb	r3, r3, #7
 800469e:	2b04      	cmp	r3, #4
 80046a0:	d00b      	beq.n	80046ba <vInitPrioGroupValue+0xbe>
        __asm volatile
 80046a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	60bb      	str	r3, [r7, #8]
    }
 80046b4:	bf00      	nop
 80046b6:	bf00      	nop
 80046b8:	e7fd      	b.n	80046b6 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046ba:	4b0f      	ldr	r3, [pc, #60]	@ (80046f8 <vInitPrioGroupValue+0xfc>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	021b      	lsls	r3, r3, #8
 80046c0:	4a0d      	ldr	r2, [pc, #52]	@ (80046f8 <vInitPrioGroupValue+0xfc>)
 80046c2:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80046c4:	4b0c      	ldr	r3, [pc, #48]	@ (80046f8 <vInitPrioGroupValue+0xfc>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80046cc:	4a0a      	ldr	r2, [pc, #40]	@ (80046f8 <vInitPrioGroupValue+0xfc>)
 80046ce:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80046d8:	bf00      	nop
 80046da:	371c      	adds	r7, #28
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	e000ed00 	.word	0xe000ed00
 80046e8:	410fc271 	.word	0x410fc271
 80046ec:	410fc270 	.word	0x410fc270
 80046f0:	e000e400 	.word	0xe000e400
 80046f4:	20000250 	.word	0x20000250
 80046f8:	20000254 	.word	0x20000254

080046fc <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
        __asm volatile
 8004702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004706:	f383 8811 	msr	BASEPRI, r3
 800470a:	f3bf 8f6f 	isb	sy
 800470e:	f3bf 8f4f 	dsb	sy
 8004712:	607b      	str	r3, [r7, #4]
    }
 8004714:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004716:	4b10      	ldr	r3, [pc, #64]	@ (8004758 <vPortEnterCritical+0x5c>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	3301      	adds	r3, #1
 800471c:	4a0e      	ldr	r2, [pc, #56]	@ (8004758 <vPortEnterCritical+0x5c>)
 800471e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004720:	4b0d      	ldr	r3, [pc, #52]	@ (8004758 <vPortEnterCritical+0x5c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d110      	bne.n	800474a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004728:	4b0c      	ldr	r3, [pc, #48]	@ (800475c <vPortEnterCritical+0x60>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d00b      	beq.n	800474a <vPortEnterCritical+0x4e>
        __asm volatile
 8004732:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004736:	f383 8811 	msr	BASEPRI, r3
 800473a:	f3bf 8f6f 	isb	sy
 800473e:	f3bf 8f4f 	dsb	sy
 8004742:	603b      	str	r3, [r7, #0]
    }
 8004744:	bf00      	nop
 8004746:	bf00      	nop
 8004748:	e7fd      	b.n	8004746 <vPortEnterCritical+0x4a>
    }
}
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	2000000c 	.word	0x2000000c
 800475c:	e000ed04 	.word	0xe000ed04

08004760 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004766:	4b12      	ldr	r3, [pc, #72]	@ (80047b0 <vPortExitCritical+0x50>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10b      	bne.n	8004786 <vPortExitCritical+0x26>
        __asm volatile
 800476e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004772:	f383 8811 	msr	BASEPRI, r3
 8004776:	f3bf 8f6f 	isb	sy
 800477a:	f3bf 8f4f 	dsb	sy
 800477e:	607b      	str	r3, [r7, #4]
    }
 8004780:	bf00      	nop
 8004782:	bf00      	nop
 8004784:	e7fd      	b.n	8004782 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004786:	4b0a      	ldr	r3, [pc, #40]	@ (80047b0 <vPortExitCritical+0x50>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	3b01      	subs	r3, #1
 800478c:	4a08      	ldr	r2, [pc, #32]	@ (80047b0 <vPortExitCritical+0x50>)
 800478e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004790:	4b07      	ldr	r3, [pc, #28]	@ (80047b0 <vPortExitCritical+0x50>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d105      	bne.n	80047a4 <vPortExitCritical+0x44>
 8004798:	2300      	movs	r3, #0
 800479a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	f383 8811 	msr	BASEPRI, r3
    }
 80047a2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	2000000c 	.word	0x2000000c
	...

080047c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80047c0:	f3ef 8009 	mrs	r0, PSP
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	4b15      	ldr	r3, [pc, #84]	@ (8004820 <pxCurrentTCBConst>)
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	f01e 0f10 	tst.w	lr, #16
 80047d0:	bf08      	it	eq
 80047d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80047d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047da:	6010      	str	r0, [r2, #0]
 80047dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80047e4:	f380 8811 	msr	BASEPRI, r0
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	f3bf 8f6f 	isb	sy
 80047f0:	f7fe ff40 	bl	8003674 <vTaskSwitchContext>
 80047f4:	f04f 0000 	mov.w	r0, #0
 80047f8:	f380 8811 	msr	BASEPRI, r0
 80047fc:	bc09      	pop	{r0, r3}
 80047fe:	6819      	ldr	r1, [r3, #0]
 8004800:	6808      	ldr	r0, [r1, #0]
 8004802:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004806:	f01e 0f10 	tst.w	lr, #16
 800480a:	bf08      	it	eq
 800480c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004810:	f380 8809 	msr	PSP, r0
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	f3af 8000 	nop.w

08004820 <pxCurrentTCBConst>:
 8004820:	20000110 	.word	0x20000110
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004824:	bf00      	nop
 8004826:	bf00      	nop

08004828 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b082      	sub	sp, #8
 800482c:	af00      	add	r7, sp, #0
        __asm volatile
 800482e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004832:	f383 8811 	msr	BASEPRI, r3
 8004836:	f3bf 8f6f 	isb	sy
 800483a:	f3bf 8f4f 	dsb	sy
 800483e:	607b      	str	r3, [r7, #4]
    }
 8004840:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004842:	f002 fc23 	bl	800708c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004846:	f7fe fe7b 	bl	8003540 <xTaskIncrementTick>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d006      	beq.n	800485e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004850:	f002 fc7a 	bl	8007148 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004854:	4b08      	ldr	r3, [pc, #32]	@ (8004878 <SysTick_Handler+0x50>)
 8004856:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	e001      	b.n	8004862 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800485e:	f002 fc57 	bl	8007110 <SEGGER_SYSVIEW_RecordExitISR>
 8004862:	2300      	movs	r3, #0
 8004864:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	f383 8811 	msr	BASEPRI, r3
    }
 800486c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800486e:	bf00      	nop
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	e000ed04 	.word	0xe000ed04

0800487c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004880:	4b0b      	ldr	r3, [pc, #44]	@ (80048b0 <vPortSetupTimerInterrupt+0x34>)
 8004882:	2200      	movs	r2, #0
 8004884:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004886:	4b0b      	ldr	r3, [pc, #44]	@ (80048b4 <vPortSetupTimerInterrupt+0x38>)
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800488c:	4b0a      	ldr	r3, [pc, #40]	@ (80048b8 <vPortSetupTimerInterrupt+0x3c>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a0a      	ldr	r2, [pc, #40]	@ (80048bc <vPortSetupTimerInterrupt+0x40>)
 8004892:	fba2 2303 	umull	r2, r3, r2, r3
 8004896:	099b      	lsrs	r3, r3, #6
 8004898:	4a09      	ldr	r2, [pc, #36]	@ (80048c0 <vPortSetupTimerInterrupt+0x44>)
 800489a:	3b01      	subs	r3, #1
 800489c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800489e:	4b04      	ldr	r3, [pc, #16]	@ (80048b0 <vPortSetupTimerInterrupt+0x34>)
 80048a0:	2207      	movs	r2, #7
 80048a2:	601a      	str	r2, [r3, #0]
}
 80048a4:	bf00      	nop
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	e000e010 	.word	0xe000e010
 80048b4:	e000e018 	.word	0xe000e018
 80048b8:	20000000 	.word	0x20000000
 80048bc:	10624dd3 	.word	0x10624dd3
 80048c0:	e000e014 	.word	0xe000e014

080048c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80048c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80048d4 <vPortEnableVFP+0x10>
 80048c8:	6801      	ldr	r1, [r0, #0]
 80048ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80048ce:	6001      	str	r1, [r0, #0]
 80048d0:	4770      	bx	lr
 80048d2:	0000      	.short	0x0000
 80048d4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80048d8:	bf00      	nop
 80048da:	bf00      	nop

080048dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80048e2:	f3ef 8305 	mrs	r3, IPSR
 80048e6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2b0f      	cmp	r3, #15
 80048ec:	d915      	bls.n	800491a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80048ee:	4a18      	ldr	r2, [pc, #96]	@ (8004950 <vPortValidateInterruptPriority+0x74>)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4413      	add	r3, r2
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80048f8:	4b16      	ldr	r3, [pc, #88]	@ (8004954 <vPortValidateInterruptPriority+0x78>)
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	7afa      	ldrb	r2, [r7, #11]
 80048fe:	429a      	cmp	r2, r3
 8004900:	d20b      	bcs.n	800491a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8004902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004906:	f383 8811 	msr	BASEPRI, r3
 800490a:	f3bf 8f6f 	isb	sy
 800490e:	f3bf 8f4f 	dsb	sy
 8004912:	607b      	str	r3, [r7, #4]
    }
 8004914:	bf00      	nop
 8004916:	bf00      	nop
 8004918:	e7fd      	b.n	8004916 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800491a:	4b0f      	ldr	r3, [pc, #60]	@ (8004958 <vPortValidateInterruptPriority+0x7c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004922:	4b0e      	ldr	r3, [pc, #56]	@ (800495c <vPortValidateInterruptPriority+0x80>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d90b      	bls.n	8004942 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800492a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800492e:	f383 8811 	msr	BASEPRI, r3
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	603b      	str	r3, [r7, #0]
    }
 800493c:	bf00      	nop
 800493e:	bf00      	nop
 8004940:	e7fd      	b.n	800493e <vPortValidateInterruptPriority+0x62>
    }
 8004942:	bf00      	nop
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	e000e3f0 	.word	0xe000e3f0
 8004954:	20000250 	.word	0x20000250
 8004958:	e000ed0c 	.word	0xe000ed0c
 800495c:	20000254 	.word	0x20000254

08004960 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b08a      	sub	sp, #40	@ 0x28
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004968:	2300      	movs	r3, #0
 800496a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800496c:	f7fe fd24 	bl	80033b8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004970:	4b66      	ldr	r3, [pc, #408]	@ (8004b0c <pvPortMalloc+0x1ac>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d101      	bne.n	800497c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004978:	f000 f938 	bl	8004bec <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800497c:	4b64      	ldr	r3, [pc, #400]	@ (8004b10 <pvPortMalloc+0x1b0>)
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4013      	ands	r3, r2
 8004984:	2b00      	cmp	r3, #0
 8004986:	f040 80a9 	bne.w	8004adc <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d02e      	beq.n	80049ee <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004990:	2208      	movs	r2, #8
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	429a      	cmp	r2, r3
 800499a:	d228      	bcs.n	80049ee <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 800499c:	2208      	movs	r2, #8
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4413      	add	r3, r2
 80049a2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f003 0307 	and.w	r3, r3, #7
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d022      	beq.n	80049f4 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f023 0307 	bic.w	r3, r3, #7
 80049b4:	3308      	adds	r3, #8
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d215      	bcs.n	80049e8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f023 0307 	bic.w	r3, r3, #7
 80049c2:	3308      	adds	r3, #8
 80049c4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d011      	beq.n	80049f4 <pvPortMalloc+0x94>
        __asm volatile
 80049d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	617b      	str	r3, [r7, #20]
    }
 80049e2:	bf00      	nop
 80049e4:	bf00      	nop
 80049e6:	e7fd      	b.n	80049e4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80049e8:	2300      	movs	r3, #0
 80049ea:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049ec:	e002      	b.n	80049f4 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80049ee:	2300      	movs	r3, #0
 80049f0:	607b      	str	r3, [r7, #4]
 80049f2:	e000      	b.n	80049f6 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80049f4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d06f      	beq.n	8004adc <pvPortMalloc+0x17c>
 80049fc:	4b45      	ldr	r3, [pc, #276]	@ (8004b14 <pvPortMalloc+0x1b4>)
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d86a      	bhi.n	8004adc <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004a06:	4b44      	ldr	r3, [pc, #272]	@ (8004b18 <pvPortMalloc+0x1b8>)
 8004a08:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004a0a:	4b43      	ldr	r3, [pc, #268]	@ (8004b18 <pvPortMalloc+0x1b8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a10:	e004      	b.n	8004a1c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8004a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a14:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d903      	bls.n	8004a2e <pvPortMalloc+0xce>
 8004a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1f1      	bne.n	8004a12 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004a2e:	4b37      	ldr	r3, [pc, #220]	@ (8004b0c <pvPortMalloc+0x1ac>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d051      	beq.n	8004adc <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2208      	movs	r2, #8
 8004a3e:	4413      	add	r3, r2
 8004a40:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	1ad2      	subs	r2, r2, r3
 8004a52:	2308      	movs	r3, #8
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d920      	bls.n	8004a9c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4413      	add	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00b      	beq.n	8004a84 <pvPortMalloc+0x124>
        __asm volatile
 8004a6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a70:	f383 8811 	msr	BASEPRI, r3
 8004a74:	f3bf 8f6f 	isb	sy
 8004a78:	f3bf 8f4f 	dsb	sy
 8004a7c:	613b      	str	r3, [r7, #16]
    }
 8004a7e:	bf00      	nop
 8004a80:	bf00      	nop
 8004a82:	e7fd      	b.n	8004a80 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a86:	685a      	ldr	r2, [r3, #4]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	1ad2      	subs	r2, r2, r3
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a96:	69b8      	ldr	r0, [r7, #24]
 8004a98:	f000 f90a 	bl	8004cb0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a9c:	4b1d      	ldr	r3, [pc, #116]	@ (8004b14 <pvPortMalloc+0x1b4>)
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	4a1b      	ldr	r2, [pc, #108]	@ (8004b14 <pvPortMalloc+0x1b4>)
 8004aa8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8004b14 <pvPortMalloc+0x1b4>)
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	4b1b      	ldr	r3, [pc, #108]	@ (8004b1c <pvPortMalloc+0x1bc>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d203      	bcs.n	8004abe <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ab6:	4b17      	ldr	r3, [pc, #92]	@ (8004b14 <pvPortMalloc+0x1b4>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a18      	ldr	r2, [pc, #96]	@ (8004b1c <pvPortMalloc+0x1bc>)
 8004abc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	4b13      	ldr	r3, [pc, #76]	@ (8004b10 <pvPortMalloc+0x1b0>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aca:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ace:	2200      	movs	r2, #0
 8004ad0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004ad2:	4b13      	ldr	r3, [pc, #76]	@ (8004b20 <pvPortMalloc+0x1c0>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	4a11      	ldr	r2, [pc, #68]	@ (8004b20 <pvPortMalloc+0x1c0>)
 8004ada:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004adc:	f7fe fc7a 	bl	80033d4 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ae0:	69fb      	ldr	r3, [r7, #28]
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00b      	beq.n	8004b02 <pvPortMalloc+0x1a2>
        __asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	60fb      	str	r3, [r7, #12]
    }
 8004afc:	bf00      	nop
 8004afe:	bf00      	nop
 8004b00:	e7fd      	b.n	8004afe <pvPortMalloc+0x19e>
    return pvReturn;
 8004b02:	69fb      	ldr	r3, [r7, #28]
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3728      	adds	r7, #40	@ 0x28
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	20012e60 	.word	0x20012e60
 8004b10:	20012e74 	.word	0x20012e74
 8004b14:	20012e64 	.word	0x20012e64
 8004b18:	20012e58 	.word	0x20012e58
 8004b1c:	20012e68 	.word	0x20012e68
 8004b20:	20012e6c 	.word	0x20012e6c

08004b24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d04f      	beq.n	8004bd6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004b36:	2308      	movs	r3, #8
 8004b38:	425b      	negs	r3, r3
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	685a      	ldr	r2, [r3, #4]
 8004b48:	4b25      	ldr	r3, [pc, #148]	@ (8004be0 <vPortFree+0xbc>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10b      	bne.n	8004b6a <vPortFree+0x46>
        __asm volatile
 8004b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b56:	f383 8811 	msr	BASEPRI, r3
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	60fb      	str	r3, [r7, #12]
    }
 8004b64:	bf00      	nop
 8004b66:	bf00      	nop
 8004b68:	e7fd      	b.n	8004b66 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d00b      	beq.n	8004b8a <vPortFree+0x66>
        __asm volatile
 8004b72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b76:	f383 8811 	msr	BASEPRI, r3
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	60bb      	str	r3, [r7, #8]
    }
 8004b84:	bf00      	nop
 8004b86:	bf00      	nop
 8004b88:	e7fd      	b.n	8004b86 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	685a      	ldr	r2, [r3, #4]
 8004b8e:	4b14      	ldr	r3, [pc, #80]	@ (8004be0 <vPortFree+0xbc>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4013      	ands	r3, r2
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d01e      	beq.n	8004bd6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d11a      	bne.n	8004bd6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8004be0 <vPortFree+0xbc>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	43db      	mvns	r3, r3
 8004baa:	401a      	ands	r2, r3
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004bb0:	f7fe fc02 	bl	80033b8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	685a      	ldr	r2, [r3, #4]
 8004bb8:	4b0a      	ldr	r3, [pc, #40]	@ (8004be4 <vPortFree+0xc0>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	4a09      	ldr	r2, [pc, #36]	@ (8004be4 <vPortFree+0xc0>)
 8004bc0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004bc2:	6938      	ldr	r0, [r7, #16]
 8004bc4:	f000 f874 	bl	8004cb0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004bc8:	4b07      	ldr	r3, [pc, #28]	@ (8004be8 <vPortFree+0xc4>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	4a06      	ldr	r2, [pc, #24]	@ (8004be8 <vPortFree+0xc4>)
 8004bd0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004bd2:	f7fe fbff 	bl	80033d4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004bd6:	bf00      	nop
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20012e74 	.word	0x20012e74
 8004be4:	20012e64 	.word	0x20012e64
 8004be8:	20012e70 	.word	0x20012e70

08004bec <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004bf2:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8004bf6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004bf8:	4b27      	ldr	r3, [pc, #156]	@ (8004c98 <prvHeapInit+0xac>)
 8004bfa:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00c      	beq.n	8004c20 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	3307      	adds	r3, #7
 8004c0a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0307 	bic.w	r3, r3, #7
 8004c12:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	4a1f      	ldr	r2, [pc, #124]	@ (8004c98 <prvHeapInit+0xac>)
 8004c1c:	4413      	add	r3, r2
 8004c1e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c24:	4a1d      	ldr	r2, [pc, #116]	@ (8004c9c <prvHeapInit+0xb0>)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8004c9c <prvHeapInit+0xb0>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68ba      	ldr	r2, [r7, #8]
 8004c34:	4413      	add	r3, r2
 8004c36:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004c38:	2208      	movs	r2, #8
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	1a9b      	subs	r3, r3, r2
 8004c3e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f023 0307 	bic.w	r3, r3, #7
 8004c46:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4a15      	ldr	r2, [pc, #84]	@ (8004ca0 <prvHeapInit+0xb4>)
 8004c4c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004c4e:	4b14      	ldr	r3, [pc, #80]	@ (8004ca0 <prvHeapInit+0xb4>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	2200      	movs	r2, #0
 8004c54:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004c56:	4b12      	ldr	r3, [pc, #72]	@ (8004ca0 <prvHeapInit+0xb4>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	1ad2      	subs	r2, r2, r3
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ca0 <prvHeapInit+0xb4>)
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	4a0a      	ldr	r2, [pc, #40]	@ (8004ca4 <prvHeapInit+0xb8>)
 8004c7a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	4a09      	ldr	r2, [pc, #36]	@ (8004ca8 <prvHeapInit+0xbc>)
 8004c82:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c84:	4b09      	ldr	r3, [pc, #36]	@ (8004cac <prvHeapInit+0xc0>)
 8004c86:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004c8a:	601a      	str	r2, [r3, #0]
}
 8004c8c:	bf00      	nop
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	20000258 	.word	0x20000258
 8004c9c:	20012e58 	.word	0x20012e58
 8004ca0:	20012e60 	.word	0x20012e60
 8004ca4:	20012e68 	.word	0x20012e68
 8004ca8:	20012e64 	.word	0x20012e64
 8004cac:	20012e74 	.word	0x20012e74

08004cb0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004cb8:	4b28      	ldr	r3, [pc, #160]	@ (8004d5c <prvInsertBlockIntoFreeList+0xac>)
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	e002      	b.n	8004cc4 <prvInsertBlockIntoFreeList+0x14>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	60fb      	str	r3, [r7, #12]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d8f7      	bhi.n	8004cbe <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	4413      	add	r3, r2
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d108      	bne.n	8004cf2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	685a      	ldr	r2, [r3, #4]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	441a      	add	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	68ba      	ldr	r2, [r7, #8]
 8004cfc:	441a      	add	r2, r3
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d118      	bne.n	8004d38 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	4b15      	ldr	r3, [pc, #84]	@ (8004d60 <prvInsertBlockIntoFreeList+0xb0>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d00d      	beq.n	8004d2e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685a      	ldr	r2, [r3, #4]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	441a      	add	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	e008      	b.n	8004d40 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d2e:	4b0c      	ldr	r3, [pc, #48]	@ (8004d60 <prvInsertBlockIntoFreeList+0xb0>)
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	601a      	str	r2, [r3, #0]
 8004d36:	e003      	b.n	8004d40 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d002      	beq.n	8004d4e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004d4e:	bf00      	nop
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	20012e58 	.word	0x20012e58
 8004d60:	20012e60 	.word	0x20012e60

08004d64 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004d64:	b580      	push	{r7, lr}
 8004d66:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004d68:	4803      	ldr	r0, [pc, #12]	@ (8004d78 <_cbSendSystemDesc+0x14>)
 8004d6a:	f002 f939 	bl	8006fe0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004d6e:	4803      	ldr	r0, [pc, #12]	@ (8004d7c <_cbSendSystemDesc+0x18>)
 8004d70:	f002 f936 	bl	8006fe0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004d74:	bf00      	nop
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	08008114 	.word	0x08008114
 8004d7c:	08008148 	.word	0x08008148

08004d80 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004d84:	4b06      	ldr	r3, [pc, #24]	@ (8004da0 <SEGGER_SYSVIEW_Conf+0x20>)
 8004d86:	6818      	ldr	r0, [r3, #0]
 8004d88:	4b05      	ldr	r3, [pc, #20]	@ (8004da0 <SEGGER_SYSVIEW_Conf+0x20>)
 8004d8a:	6819      	ldr	r1, [r3, #0]
 8004d8c:	4b05      	ldr	r3, [pc, #20]	@ (8004da4 <SEGGER_SYSVIEW_Conf+0x24>)
 8004d8e:	4a06      	ldr	r2, [pc, #24]	@ (8004da8 <SEGGER_SYSVIEW_Conf+0x28>)
 8004d90:	f001 fca2 	bl	80066d8 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004d94:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004d98:	f001 fce2 	bl	8006760 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004d9c:	bf00      	nop
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	20000000 	.word	0x20000000
 8004da4:	08004d65 	.word	0x08004d65
 8004da8:	080081e0 	.word	0x080081e0

08004dac <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004db2:	2300      	movs	r3, #0
 8004db4:	607b      	str	r3, [r7, #4]
 8004db6:	e033      	b.n	8004e20 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004db8:	491e      	ldr	r1, [pc, #120]	@ (8004e34 <_cbSendTaskList+0x88>)
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4413      	add	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	440b      	add	r3, r1
 8004dc6:	6818      	ldr	r0, [r3, #0]
 8004dc8:	491a      	ldr	r1, [pc, #104]	@ (8004e34 <_cbSendTaskList+0x88>)
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	4413      	add	r3, r2
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	440b      	add	r3, r1
 8004dd6:	3304      	adds	r3, #4
 8004dd8:	6819      	ldr	r1, [r3, #0]
 8004dda:	4c16      	ldr	r4, [pc, #88]	@ (8004e34 <_cbSendTaskList+0x88>)
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	4613      	mov	r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4423      	add	r3, r4
 8004de8:	3308      	adds	r3, #8
 8004dea:	681c      	ldr	r4, [r3, #0]
 8004dec:	4d11      	ldr	r5, [pc, #68]	@ (8004e34 <_cbSendTaskList+0x88>)
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	4613      	mov	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	442b      	add	r3, r5
 8004dfa:	330c      	adds	r3, #12
 8004dfc:	681d      	ldr	r5, [r3, #0]
 8004dfe:	4e0d      	ldr	r6, [pc, #52]	@ (8004e34 <_cbSendTaskList+0x88>)
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	4613      	mov	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	4433      	add	r3, r6
 8004e0c:	3310      	adds	r3, #16
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	462b      	mov	r3, r5
 8004e14:	4622      	mov	r2, r4
 8004e16:	f000 f979 	bl	800510c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	3301      	adds	r3, #1
 8004e1e:	607b      	str	r3, [r7, #4]
 8004e20:	4b05      	ldr	r3, [pc, #20]	@ (8004e38 <_cbSendTaskList+0x8c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d3c6      	bcc.n	8004db8 <_cbSendTaskList+0xc>
  }
}
 8004e2a:	bf00      	nop
 8004e2c:	bf00      	nop
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e34:	20012e78 	.word	0x20012e78
 8004e38:	20012f18 	.word	0x20012f18

08004e3c <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004e3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e40:	b082      	sub	sp, #8
 8004e42:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004e44:	f7fe fb6a 	bl	800351c <xTaskGetTickCountFromISR>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	469a      	mov	sl, r3
 8004e4e:	4693      	mov	fp, r2
 8004e50:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004e54:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e58:	4602      	mov	r2, r0
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	f04f 0a00 	mov.w	sl, #0
 8004e60:	f04f 0b00 	mov.w	fp, #0
 8004e64:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004e68:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004e6c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004e70:	4652      	mov	r2, sl
 8004e72:	465b      	mov	r3, fp
 8004e74:	1a14      	subs	r4, r2, r0
 8004e76:	eb63 0501 	sbc.w	r5, r3, r1
 8004e7a:	f04f 0200 	mov.w	r2, #0
 8004e7e:	f04f 0300 	mov.w	r3, #0
 8004e82:	00ab      	lsls	r3, r5, #2
 8004e84:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004e88:	00a2      	lsls	r2, r4, #2
 8004e8a:	4614      	mov	r4, r2
 8004e8c:	461d      	mov	r5, r3
 8004e8e:	eb14 0800 	adds.w	r8, r4, r0
 8004e92:	eb45 0901 	adc.w	r9, r5, r1
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	f04f 0300 	mov.w	r3, #0
 8004e9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ea2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ea6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004eaa:	4690      	mov	r8, r2
 8004eac:	4699      	mov	r9, r3
 8004eae:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004eb2:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004eb6:	4610      	mov	r0, r2
 8004eb8:	4619      	mov	r1, r3
 8004eba:	3708      	adds	r7, #8
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004ec4 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004ed2:	2205      	movs	r2, #5
 8004ed4:	492b      	ldr	r1, [pc, #172]	@ (8004f84 <SYSVIEW_AddTask+0xc0>)
 8004ed6:	68b8      	ldr	r0, [r7, #8]
 8004ed8:	f002 fc54 	bl	8007784 <memcmp>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d04b      	beq.n	8004f7a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004ee2:	4b29      	ldr	r3, [pc, #164]	@ (8004f88 <SYSVIEW_AddTask+0xc4>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2b07      	cmp	r3, #7
 8004ee8:	d903      	bls.n	8004ef2 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004eea:	4828      	ldr	r0, [pc, #160]	@ (8004f8c <SYSVIEW_AddTask+0xc8>)
 8004eec:	f002 fb8a 	bl	8007604 <SEGGER_SYSVIEW_Warn>
    return;
 8004ef0:	e044      	b.n	8004f7c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004ef2:	4b25      	ldr	r3, [pc, #148]	@ (8004f88 <SYSVIEW_AddTask+0xc4>)
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	4926      	ldr	r1, [pc, #152]	@ (8004f90 <SYSVIEW_AddTask+0xcc>)
 8004ef8:	4613      	mov	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004f06:	4b20      	ldr	r3, [pc, #128]	@ (8004f88 <SYSVIEW_AddTask+0xc4>)
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	4921      	ldr	r1, [pc, #132]	@ (8004f90 <SYSVIEW_AddTask+0xcc>)
 8004f0c:	4613      	mov	r3, r2
 8004f0e:	009b      	lsls	r3, r3, #2
 8004f10:	4413      	add	r3, r2
 8004f12:	009b      	lsls	r3, r3, #2
 8004f14:	440b      	add	r3, r1
 8004f16:	3304      	adds	r3, #4
 8004f18:	68ba      	ldr	r2, [r7, #8]
 8004f1a:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004f1c:	4b1a      	ldr	r3, [pc, #104]	@ (8004f88 <SYSVIEW_AddTask+0xc4>)
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	491b      	ldr	r1, [pc, #108]	@ (8004f90 <SYSVIEW_AddTask+0xcc>)
 8004f22:	4613      	mov	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	3308      	adds	r3, #8
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004f32:	4b15      	ldr	r3, [pc, #84]	@ (8004f88 <SYSVIEW_AddTask+0xc4>)
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	4916      	ldr	r1, [pc, #88]	@ (8004f90 <SYSVIEW_AddTask+0xcc>)
 8004f38:	4613      	mov	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	440b      	add	r3, r1
 8004f42:	330c      	adds	r3, #12
 8004f44:	683a      	ldr	r2, [r7, #0]
 8004f46:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004f48:	4b0f      	ldr	r3, [pc, #60]	@ (8004f88 <SYSVIEW_AddTask+0xc4>)
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	4910      	ldr	r1, [pc, #64]	@ (8004f90 <SYSVIEW_AddTask+0xcc>)
 8004f4e:	4613      	mov	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4413      	add	r3, r2
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	440b      	add	r3, r1
 8004f58:	3310      	adds	r3, #16
 8004f5a:	69ba      	ldr	r2, [r7, #24]
 8004f5c:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8004f88 <SYSVIEW_AddTask+0xc4>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	3301      	adds	r3, #1
 8004f64:	4a08      	ldr	r2, [pc, #32]	@ (8004f88 <SYSVIEW_AddTask+0xc4>)
 8004f66:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	9300      	str	r3, [sp, #0]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	68b9      	ldr	r1, [r7, #8]
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f000 f8ca 	bl	800510c <SYSVIEW_SendTaskInfo>
 8004f78:	e000      	b.n	8004f7c <SYSVIEW_AddTask+0xb8>
    return;
 8004f7a:	bf00      	nop

}
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	08008158 	.word	0x08008158
 8004f88:	20012f18 	.word	0x20012f18
 8004f8c:	08008160 	.word	0x08008160
 8004f90:	20012e78 	.word	0x20012e78

08004f94 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8004f9c:	4b59      	ldr	r3, [pc, #356]	@ (8005104 <SYSVIEW_DeleteTask+0x170>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 80ab 	beq.w	80050fc <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	60fb      	str	r3, [r7, #12]
 8004faa:	e00d      	b.n	8004fc8 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8004fac:	4956      	ldr	r1, [pc, #344]	@ (8005108 <SYSVIEW_DeleteTask+0x174>)
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	440b      	add	r3, r1
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d008      	beq.n	8004fd4 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	3301      	adds	r3, #1
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	4b4e      	ldr	r3, [pc, #312]	@ (8005104 <SYSVIEW_DeleteTask+0x170>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d3ec      	bcc.n	8004fac <SYSVIEW_DeleteTask+0x18>
 8004fd2:	e000      	b.n	8004fd6 <SYSVIEW_DeleteTask+0x42>
      break;
 8004fd4:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8004fd6:	4b4b      	ldr	r3, [pc, #300]	@ (8005104 <SYSVIEW_DeleteTask+0x170>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	3b01      	subs	r3, #1
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d111      	bne.n	8005006 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	4413      	add	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4a46      	ldr	r2, [pc, #280]	@ (8005108 <SYSVIEW_DeleteTask+0x174>)
 8004fee:	4413      	add	r3, r2
 8004ff0:	2214      	movs	r2, #20
 8004ff2:	2100      	movs	r1, #0
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f002 fbd5 	bl	80077a4 <memset>
    _NumTasks--;
 8004ffa:	4b42      	ldr	r3, [pc, #264]	@ (8005104 <SYSVIEW_DeleteTask+0x170>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3b01      	subs	r3, #1
 8005000:	4a40      	ldr	r2, [pc, #256]	@ (8005104 <SYSVIEW_DeleteTask+0x170>)
 8005002:	6013      	str	r3, [r2, #0]
 8005004:	e07b      	b.n	80050fe <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8005006:	4b3f      	ldr	r3, [pc, #252]	@ (8005104 <SYSVIEW_DeleteTask+0x170>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	429a      	cmp	r2, r3
 800500e:	d276      	bcs.n	80050fe <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8005010:	4b3c      	ldr	r3, [pc, #240]	@ (8005104 <SYSVIEW_DeleteTask+0x170>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	1e5a      	subs	r2, r3, #1
 8005016:	493c      	ldr	r1, [pc, #240]	@ (8005108 <SYSVIEW_DeleteTask+0x174>)
 8005018:	4613      	mov	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	440b      	add	r3, r1
 8005022:	6819      	ldr	r1, [r3, #0]
 8005024:	4838      	ldr	r0, [pc, #224]	@ (8005108 <SYSVIEW_DeleteTask+0x174>)
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	4613      	mov	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4413      	add	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4403      	add	r3, r0
 8005032:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8005034:	4b33      	ldr	r3, [pc, #204]	@ (8005104 <SYSVIEW_DeleteTask+0x170>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	1e5a      	subs	r2, r3, #1
 800503a:	4933      	ldr	r1, [pc, #204]	@ (8005108 <SYSVIEW_DeleteTask+0x174>)
 800503c:	4613      	mov	r3, r2
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	440b      	add	r3, r1
 8005046:	3304      	adds	r3, #4
 8005048:	6819      	ldr	r1, [r3, #0]
 800504a:	482f      	ldr	r0, [pc, #188]	@ (8005108 <SYSVIEW_DeleteTask+0x174>)
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	4613      	mov	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4403      	add	r3, r0
 8005058:	3304      	adds	r3, #4
 800505a:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 800505c:	4b29      	ldr	r3, [pc, #164]	@ (8005104 <SYSVIEW_DeleteTask+0x170>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	1e5a      	subs	r2, r3, #1
 8005062:	4929      	ldr	r1, [pc, #164]	@ (8005108 <SYSVIEW_DeleteTask+0x174>)
 8005064:	4613      	mov	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	440b      	add	r3, r1
 800506e:	3308      	adds	r3, #8
 8005070:	6819      	ldr	r1, [r3, #0]
 8005072:	4825      	ldr	r0, [pc, #148]	@ (8005108 <SYSVIEW_DeleteTask+0x174>)
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	4613      	mov	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4403      	add	r3, r0
 8005080:	3308      	adds	r3, #8
 8005082:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8005084:	4b1f      	ldr	r3, [pc, #124]	@ (8005104 <SYSVIEW_DeleteTask+0x170>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	1e5a      	subs	r2, r3, #1
 800508a:	491f      	ldr	r1, [pc, #124]	@ (8005108 <SYSVIEW_DeleteTask+0x174>)
 800508c:	4613      	mov	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	4413      	add	r3, r2
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	440b      	add	r3, r1
 8005096:	330c      	adds	r3, #12
 8005098:	6819      	ldr	r1, [r3, #0]
 800509a:	481b      	ldr	r0, [pc, #108]	@ (8005108 <SYSVIEW_DeleteTask+0x174>)
 800509c:	68fa      	ldr	r2, [r7, #12]
 800509e:	4613      	mov	r3, r2
 80050a0:	009b      	lsls	r3, r3, #2
 80050a2:	4413      	add	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4403      	add	r3, r0
 80050a8:	330c      	adds	r3, #12
 80050aa:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 80050ac:	4b15      	ldr	r3, [pc, #84]	@ (8005104 <SYSVIEW_DeleteTask+0x170>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	1e5a      	subs	r2, r3, #1
 80050b2:	4915      	ldr	r1, [pc, #84]	@ (8005108 <SYSVIEW_DeleteTask+0x174>)
 80050b4:	4613      	mov	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	440b      	add	r3, r1
 80050be:	3310      	adds	r3, #16
 80050c0:	6819      	ldr	r1, [r3, #0]
 80050c2:	4811      	ldr	r0, [pc, #68]	@ (8005108 <SYSVIEW_DeleteTask+0x174>)
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	4613      	mov	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	4413      	add	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4403      	add	r3, r0
 80050d0:	3310      	adds	r3, #16
 80050d2:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 80050d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005104 <SYSVIEW_DeleteTask+0x170>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	1e5a      	subs	r2, r3, #1
 80050da:	4613      	mov	r3, r2
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	4413      	add	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4a09      	ldr	r2, [pc, #36]	@ (8005108 <SYSVIEW_DeleteTask+0x174>)
 80050e4:	4413      	add	r3, r2
 80050e6:	2214      	movs	r2, #20
 80050e8:	2100      	movs	r1, #0
 80050ea:	4618      	mov	r0, r3
 80050ec:	f002 fb5a 	bl	80077a4 <memset>
    _NumTasks--;
 80050f0:	4b04      	ldr	r3, [pc, #16]	@ (8005104 <SYSVIEW_DeleteTask+0x170>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3b01      	subs	r3, #1
 80050f6:	4a03      	ldr	r2, [pc, #12]	@ (8005104 <SYSVIEW_DeleteTask+0x170>)
 80050f8:	6013      	str	r3, [r2, #0]
 80050fa:	e000      	b.n	80050fe <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 80050fc:	bf00      	nop
  }
}
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	20012f18 	.word	0x20012f18
 8005108:	20012e78 	.word	0x20012e78

0800510c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800510c:	b580      	push	{r7, lr}
 800510e:	b08a      	sub	sp, #40	@ 0x28
 8005110:	af00      	add	r7, sp, #0
 8005112:	60f8      	str	r0, [r7, #12]
 8005114:	60b9      	str	r1, [r7, #8]
 8005116:	607a      	str	r2, [r7, #4]
 8005118:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800511a:	f107 0314 	add.w	r3, r7, #20
 800511e:	2214      	movs	r2, #20
 8005120:	2100      	movs	r1, #0
 8005122:	4618      	mov	r0, r3
 8005124:	f002 fb3e 	bl	80077a4 <memset>
  TaskInfo.TaskID     = TaskID;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800513a:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800513c:	f107 0314 	add.w	r3, r7, #20
 8005140:	4618      	mov	r0, r3
 8005142:	f001 fe55 	bl	8006df0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005146:	bf00      	nop
 8005148:	3728      	adds	r7, #40	@ 0x28
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
	...

08005150 <__NVIC_EnableIRQ>:
{
 8005150:	b480      	push	{r7}
 8005152:	b083      	sub	sp, #12
 8005154:	af00      	add	r7, sp, #0
 8005156:	4603      	mov	r3, r0
 8005158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800515a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800515e:	2b00      	cmp	r3, #0
 8005160:	db0b      	blt.n	800517a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005162:	79fb      	ldrb	r3, [r7, #7]
 8005164:	f003 021f 	and.w	r2, r3, #31
 8005168:	4907      	ldr	r1, [pc, #28]	@ (8005188 <__NVIC_EnableIRQ+0x38>)
 800516a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800516e:	095b      	lsrs	r3, r3, #5
 8005170:	2001      	movs	r0, #1
 8005172:	fa00 f202 	lsl.w	r2, r0, r2
 8005176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	e000e100 	.word	0xe000e100

0800518c <__NVIC_SetPriority>:
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	4603      	mov	r3, r0
 8005194:	6039      	str	r1, [r7, #0]
 8005196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800519c:	2b00      	cmp	r3, #0
 800519e:	db0a      	blt.n	80051b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	b2da      	uxtb	r2, r3
 80051a4:	490c      	ldr	r1, [pc, #48]	@ (80051d8 <__NVIC_SetPriority+0x4c>)
 80051a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051aa:	0112      	lsls	r2, r2, #4
 80051ac:	b2d2      	uxtb	r2, r2
 80051ae:	440b      	add	r3, r1
 80051b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80051b4:	e00a      	b.n	80051cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	4908      	ldr	r1, [pc, #32]	@ (80051dc <__NVIC_SetPriority+0x50>)
 80051bc:	79fb      	ldrb	r3, [r7, #7]
 80051be:	f003 030f 	and.w	r3, r3, #15
 80051c2:	3b04      	subs	r3, #4
 80051c4:	0112      	lsls	r2, r2, #4
 80051c6:	b2d2      	uxtb	r2, r2
 80051c8:	440b      	add	r3, r1
 80051ca:	761a      	strb	r2, [r3, #24]
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	e000e100 	.word	0xe000e100
 80051dc:	e000ed00 	.word	0xe000ed00

080051e0 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80051e6:	f002 fa69 	bl	80076bc <SEGGER_SYSVIEW_IsStarted>
 80051ea:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80051f2:	f001 fc81 	bl	8006af8 <SEGGER_SYSVIEW_Start>
  }
}
 80051f6:	bf00      	nop
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
	...

08005200 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8005200:	b580      	push	{r7, lr}
 8005202:	b082      	sub	sp, #8
 8005204:	af00      	add	r7, sp, #0
 8005206:	4603      	mov	r3, r0
 8005208:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 800520a:	4b0c      	ldr	r3, [pc, #48]	@ (800523c <_cbOnUARTRx+0x3c>)
 800520c:	781b      	ldrb	r3, [r3, #0]
 800520e:	2b03      	cmp	r3, #3
 8005210:	d806      	bhi.n	8005220 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8005212:	4b0a      	ldr	r3, [pc, #40]	@ (800523c <_cbOnUARTRx+0x3c>)
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	3301      	adds	r3, #1
 8005218:	b2da      	uxtb	r2, r3
 800521a:	4b08      	ldr	r3, [pc, #32]	@ (800523c <_cbOnUARTRx+0x3c>)
 800521c:	701a      	strb	r2, [r3, #0]
    goto Done;
 800521e:	e009      	b.n	8005234 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8005220:	f7ff ffde 	bl	80051e0 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8005224:	4b05      	ldr	r3, [pc, #20]	@ (800523c <_cbOnUARTRx+0x3c>)
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	4618      	mov	r0, r3
 800522a:	1dfb      	adds	r3, r7, #7
 800522c:	2201      	movs	r2, #1
 800522e:	4619      	mov	r1, r3
 8005230:	f000 fb9a 	bl	8005968 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8005234:	bf00      	nop
}
 8005236:	3708      	adds	r7, #8
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}
 800523c:	20000010 	.word	0x20000010

08005240 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8005240:	b580      	push	{r7, lr}
 8005242:	b084      	sub	sp, #16
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005248:	4b14      	ldr	r3, [pc, #80]	@ (800529c <_cbOnUARTTx+0x5c>)
 800524a:	785b      	ldrb	r3, [r3, #1]
 800524c:	2b03      	cmp	r3, #3
 800524e:	d80f      	bhi.n	8005270 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8005250:	4b12      	ldr	r3, [pc, #72]	@ (800529c <_cbOnUARTTx+0x5c>)
 8005252:	785b      	ldrb	r3, [r3, #1]
 8005254:	461a      	mov	r2, r3
 8005256:	4b12      	ldr	r3, [pc, #72]	@ (80052a0 <_cbOnUARTTx+0x60>)
 8005258:	5c9a      	ldrb	r2, [r3, r2]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800525e:	4b0f      	ldr	r3, [pc, #60]	@ (800529c <_cbOnUARTTx+0x5c>)
 8005260:	785b      	ldrb	r3, [r3, #1]
 8005262:	3301      	adds	r3, #1
 8005264:	b2da      	uxtb	r2, r3
 8005266:	4b0d      	ldr	r3, [pc, #52]	@ (800529c <_cbOnUARTTx+0x5c>)
 8005268:	705a      	strb	r2, [r3, #1]
    r = 1;
 800526a:	2301      	movs	r3, #1
 800526c:	60fb      	str	r3, [r7, #12]
    goto Done;
 800526e:	e00f      	b.n	8005290 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8005270:	4b0a      	ldr	r3, [pc, #40]	@ (800529c <_cbOnUARTTx+0x5c>)
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	6879      	ldr	r1, [r7, #4]
 8005278:	4618      	mov	r0, r3
 800527a:	f000 fa19 	bl	80056b0 <SEGGER_RTT_ReadUpBufferNoLock>
 800527e:	4603      	mov	r3, r0
 8005280:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2b00      	cmp	r3, #0
 8005286:	da02      	bge.n	800528e <_cbOnUARTTx+0x4e>
    r = 0;
 8005288:	2300      	movs	r3, #0
 800528a:	60fb      	str	r3, [r7, #12]
 800528c:	e000      	b.n	8005290 <_cbOnUARTTx+0x50>
  }
Done:
 800528e:	bf00      	nop
  return r;
 8005290:	68fb      	ldr	r3, [r7, #12]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3710      	adds	r7, #16
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	20000010 	.word	0x20000010
 80052a0:	080081e8 	.word	0x080081e8

080052a4 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 80052ac:	4a04      	ldr	r2, [pc, #16]	@ (80052c0 <SEGGER_UART_init+0x1c>)
 80052ae:	4905      	ldr	r1, [pc, #20]	@ (80052c4 <SEGGER_UART_init+0x20>)
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f863 	bl	800537c <HIF_UART_Init>
}
 80052b6:	bf00      	nop
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	08005201 	.word	0x08005201
 80052c4:	08005241 	.word	0x08005241

080052c8 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 80052ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005348 <USART2_IRQHandler+0x80>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f003 0320 	and.w	r3, r3, #32
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d011      	beq.n	8005302 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80052de:	4b1b      	ldr	r3, [pc, #108]	@ (800534c <USART2_IRQHandler+0x84>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	f003 030b 	and.w	r3, r3, #11
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d108      	bne.n	8005302 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80052f0:	4b17      	ldr	r3, [pc, #92]	@ (8005350 <USART2_IRQHandler+0x88>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d004      	beq.n	8005302 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80052f8:	4b15      	ldr	r3, [pc, #84]	@ (8005350 <USART2_IRQHandler+0x88>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	79fa      	ldrb	r2, [r7, #7]
 80052fe:	4610      	mov	r0, r2
 8005300:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01a      	beq.n	8005342 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 800530c:	4b11      	ldr	r3, [pc, #68]	@ (8005354 <USART2_IRQHandler+0x8c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d015      	beq.n	8005340 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8005314:	4b0f      	ldr	r3, [pc, #60]	@ (8005354 <USART2_IRQHandler+0x8c>)
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	1dfa      	adds	r2, r7, #7
 800531a:	4610      	mov	r0, r2
 800531c:	4798      	blx	r3
 800531e:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d106      	bne.n	8005334 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8005326:	4b0c      	ldr	r3, [pc, #48]	@ (8005358 <USART2_IRQHandler+0x90>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a0b      	ldr	r2, [pc, #44]	@ (8005358 <USART2_IRQHandler+0x90>)
 800532c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005330:	6013      	str	r3, [r2, #0]
 8005332:	e006      	b.n	8005342 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8005334:	4b04      	ldr	r3, [pc, #16]	@ (8005348 <USART2_IRQHandler+0x80>)
 8005336:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005338:	79fa      	ldrb	r2, [r7, #7]
 800533a:	4b04      	ldr	r3, [pc, #16]	@ (800534c <USART2_IRQHandler+0x84>)
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	e000      	b.n	8005342 <USART2_IRQHandler+0x7a>
      return;
 8005340:	bf00      	nop
    }
  }
}
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	40004400 	.word	0x40004400
 800534c:	40004404 	.word	0x40004404
 8005350:	20012f1c 	.word	0x20012f1c
 8005354:	20012f20 	.word	0x20012f20
 8005358:	4000440c 	.word	0x4000440c

0800535c <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 800535c:	b480      	push	{r7}
 800535e:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8005360:	4b05      	ldr	r3, [pc, #20]	@ (8005378 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a04      	ldr	r2, [pc, #16]	@ (8005378 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005366:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800536a:	6013      	str	r3, [r2, #0]
}
 800536c:	bf00      	nop
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	4000440c 	.word	0x4000440c

0800537c <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 800537c:	b580      	push	{r7, lr}
 800537e:	b086      	sub	sp, #24
 8005380:	af00      	add	r7, sp, #0
 8005382:	60f8      	str	r0, [r7, #12]
 8005384:	60b9      	str	r1, [r7, #8]
 8005386:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005388:	4b2e      	ldr	r3, [pc, #184]	@ (8005444 <HIF_UART_Init+0xc8>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a2d      	ldr	r2, [pc, #180]	@ (8005444 <HIF_UART_Init+0xc8>)
 800538e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005392:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8005394:	4b2c      	ldr	r3, [pc, #176]	@ (8005448 <HIF_UART_Init+0xcc>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a2b      	ldr	r2, [pc, #172]	@ (8005448 <HIF_UART_Init+0xcc>)
 800539a:	f043 0301 	orr.w	r3, r3, #1
 800539e:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80053a0:	4b2a      	ldr	r3, [pc, #168]	@ (800544c <HIF_UART_Init+0xd0>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80053a6:	693b      	ldr	r3, [r7, #16]
 80053a8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053ac:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80053b4:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80053b6:	4a25      	ldr	r2, [pc, #148]	@ (800544c <HIF_UART_Init+0xd0>)
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80053bc:	4b24      	ldr	r3, [pc, #144]	@ (8005450 <HIF_UART_Init+0xd4>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 80053c2:	693b      	ldr	r3, [r7, #16]
 80053c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80053c8:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80053d0:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 80053d2:	4a1f      	ldr	r2, [pc, #124]	@ (8005450 <HIF_UART_Init+0xd4>)
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 80053d8:	4b1e      	ldr	r3, [pc, #120]	@ (8005454 <HIF_UART_Init+0xd8>)
 80053da:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 80053de:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 80053e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005458 <HIF_UART_Init+0xdc>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 80053e6:	4b1d      	ldr	r3, [pc, #116]	@ (800545c <HIF_UART_Init+0xe0>)
 80053e8:	2280      	movs	r2, #128	@ 0x80
 80053ea:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 80053f2:	4a1b      	ldr	r2, [pc, #108]	@ (8005460 <HIF_UART_Init+0xe4>)
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fa:	3301      	adds	r3, #1
 80053fc:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	085b      	lsrs	r3, r3, #1
 8005402:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800540a:	d302      	bcc.n	8005412 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 800540c:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8005410:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d004      	beq.n	8005422 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	011b      	lsls	r3, r3, #4
 800541c:	4a11      	ldr	r2, [pc, #68]	@ (8005464 <HIF_UART_Init+0xe8>)
 800541e:	b29b      	uxth	r3, r3
 8005420:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8005422:	4a11      	ldr	r2, [pc, #68]	@ (8005468 <HIF_UART_Init+0xec>)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005428:	4a10      	ldr	r2, [pc, #64]	@ (800546c <HIF_UART_Init+0xf0>)
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800542e:	2106      	movs	r1, #6
 8005430:	2026      	movs	r0, #38	@ 0x26
 8005432:	f7ff feab 	bl	800518c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8005436:	2026      	movs	r0, #38	@ 0x26
 8005438:	f7ff fe8a 	bl	8005150 <__NVIC_EnableIRQ>
}
 800543c:	bf00      	nop
 800543e:	3718      	adds	r7, #24
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	40023840 	.word	0x40023840
 8005448:	40023830 	.word	0x40023830
 800544c:	40020020 	.word	0x40020020
 8005450:	40020000 	.word	0x40020000
 8005454:	4000440c 	.word	0x4000440c
 8005458:	40004410 	.word	0x40004410
 800545c:	40004414 	.word	0x40004414
 8005460:	0501bd00 	.word	0x0501bd00
 8005464:	40004408 	.word	0x40004408
 8005468:	20012f1c 	.word	0x20012f1c
 800546c:	20012f20 	.word	0x20012f20

08005470 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005470:	b480      	push	{r7}
 8005472:	b083      	sub	sp, #12
 8005474:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005476:	4b25      	ldr	r3, [pc, #148]	@ (800550c <_DoInit+0x9c>)
 8005478:	603b      	str	r3, [r7, #0]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	2203      	movs	r2, #3
 800547e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	2203      	movs	r2, #3
 8005484:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	4a21      	ldr	r2, [pc, #132]	@ (8005510 <_DoInit+0xa0>)
 800548a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	4a21      	ldr	r2, [pc, #132]	@ (8005514 <_DoInit+0xa4>)
 8005490:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005498:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	2200      	movs	r2, #0
 800549e:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	2200      	movs	r2, #0
 80054a4:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2200      	movs	r2, #0
 80054aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	4a18      	ldr	r2, [pc, #96]	@ (8005510 <_DoInit+0xa0>)
 80054b0:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	4a18      	ldr	r2, [pc, #96]	@ (8005518 <_DoInit+0xa8>)
 80054b6:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	2210      	movs	r2, #16
 80054bc:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	2200      	movs	r2, #0
 80054c2:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	2200      	movs	r2, #0
 80054c8:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	2200      	movs	r2, #0
 80054ce:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80054d0:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80054d4:	2300      	movs	r3, #0
 80054d6:	607b      	str	r3, [r7, #4]
 80054d8:	e00c      	b.n	80054f4 <_DoInit+0x84>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f1c3 030f 	rsb	r3, r3, #15
 80054e0:	4a0e      	ldr	r2, [pc, #56]	@ (800551c <_DoInit+0xac>)
 80054e2:	5cd1      	ldrb	r1, [r2, r3]
 80054e4:	683a      	ldr	r2, [r7, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4413      	add	r3, r2
 80054ea:	460a      	mov	r2, r1
 80054ec:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	3301      	adds	r3, #1
 80054f2:	607b      	str	r3, [r7, #4]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b0f      	cmp	r3, #15
 80054f8:	d9ef      	bls.n	80054da <_DoInit+0x6a>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80054fa:	f3bf 8f5f 	dmb	sy
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	20012f24 	.word	0x20012f24
 8005510:	080081b0 	.word	0x080081b0
 8005514:	20012fcc 	.word	0x20012fcc
 8005518:	200133cc 	.word	0x200133cc
 800551c:	080081ec 	.word	0x080081ec

08005520 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005520:	b580      	push	{r7, lr}
 8005522:	b08a      	sub	sp, #40	@ 0x28
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800552c:	2300      	movs	r3, #0
 800552e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800553c:	69ba      	ldr	r2, [r7, #24]
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	429a      	cmp	r2, r3
 8005542:	d905      	bls.n	8005550 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	3b01      	subs	r3, #1
 800554c:	627b      	str	r3, [r7, #36]	@ 0x24
 800554e:	e007      	b.n	8005560 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	689a      	ldr	r2, [r3, #8]
 8005554:	69b9      	ldr	r1, [r7, #24]
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	1acb      	subs	r3, r1, r3
 800555a:	4413      	add	r3, r2
 800555c:	3b01      	subs	r3, #1
 800555e:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	689a      	ldr	r2, [r3, #8]
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800556a:	4293      	cmp	r3, r2
 800556c:	bf28      	it	cs
 800556e:	4613      	movcs	r3, r2
 8005570:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005572:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4293      	cmp	r3, r2
 8005578:	bf28      	it	cs
 800557a:	4613      	movcs	r3, r2
 800557c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	4413      	add	r3, r2
 8005586:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005588:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800558a:	68b9      	ldr	r1, [r7, #8]
 800558c:	6978      	ldr	r0, [r7, #20]
 800558e:	f002 f937 	bl	8007800 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005592:	6a3a      	ldr	r2, [r7, #32]
 8005594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005596:	4413      	add	r3, r2
 8005598:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800559a:	68ba      	ldr	r2, [r7, #8]
 800559c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800559e:	4413      	add	r3, r2
 80055a0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80055aa:	69fa      	ldr	r2, [r7, #28]
 80055ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ae:	4413      	add	r3, r2
 80055b0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	69fa      	ldr	r2, [r7, #28]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d101      	bne.n	80055c0 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80055bc:	2300      	movs	r3, #0
 80055be:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80055c0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	69fa      	ldr	r2, [r7, #28]
 80055c8:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1b2      	bne.n	8005536 <_WriteBlocking+0x16>
  return NumBytesWritten;
 80055d0:	6a3b      	ldr	r3, [r7, #32]
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3728      	adds	r7, #40	@ 0x28
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}

080055da <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 80055da:	b580      	push	{r7, lr}
 80055dc:	b088      	sub	sp, #32
 80055de:	af00      	add	r7, sp, #0
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	60b9      	str	r1, [r7, #8]
 80055e4:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d911      	bls.n	8005622 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	4413      	add	r3, r2
 8005606:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	68b9      	ldr	r1, [r7, #8]
 800560c:	6938      	ldr	r0, [r7, #16]
 800560e:	f002 f8f7 	bl	8007800 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005612:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8005616:	69fa      	ldr	r2, [r7, #28]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	441a      	add	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005620:	e01f      	b.n	8005662 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8005622:	69bb      	ldr	r3, [r7, #24]
 8005624:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	685a      	ldr	r2, [r3, #4]
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	4413      	add	r3, r2
 800562e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005630:	697a      	ldr	r2, [r7, #20]
 8005632:	68b9      	ldr	r1, [r7, #8]
 8005634:	6938      	ldr	r0, [r7, #16]
 8005636:	f002 f8e3 	bl	8007800 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	4413      	add	r3, r2
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	4619      	mov	r1, r3
 8005652:	6938      	ldr	r0, [r7, #16]
 8005654:	f002 f8d4 	bl	8007800 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005658:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	697a      	ldr	r2, [r7, #20]
 8005660:	60da      	str	r2, [r3, #12]
}
 8005662:	bf00      	nop
 8005664:	3720      	adds	r7, #32
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}

0800566a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800566a:	b480      	push	{r7}
 800566c:	b087      	sub	sp, #28
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800567e:	693a      	ldr	r2, [r7, #16]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	429a      	cmp	r2, r3
 8005684:	d808      	bhi.n	8005698 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	689a      	ldr	r2, [r3, #8]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	1ad2      	subs	r2, r2, r3
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	4413      	add	r3, r2
 8005692:	3b01      	subs	r3, #1
 8005694:	617b      	str	r3, [r7, #20]
 8005696:	e004      	b.n	80056a2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005698:	693a      	ldr	r2, [r7, #16]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	3b01      	subs	r3, #1
 80056a0:	617b      	str	r3, [r7, #20]
  }
  return r;
 80056a2:	697b      	ldr	r3, [r7, #20]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	371c      	adds	r7, #28
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b08c      	sub	sp, #48	@ 0x30
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80056bc:	4b3e      	ldr	r3, [pc, #248]	@ (80057b8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80056be:	623b      	str	r3, [r7, #32]
 80056c0:	6a3b      	ldr	r3, [r7, #32]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80056ca:	f7ff fed1 	bl	8005470 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	1c5a      	adds	r2, r3, #1
 80056d2:	4613      	mov	r3, r2
 80056d4:	005b      	lsls	r3, r3, #1
 80056d6:	4413      	add	r3, r2
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	4a37      	ldr	r2, [pc, #220]	@ (80057b8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80056dc:	4413      	add	r3, r2
 80056de:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80056f0:	2300      	movs	r3, #0
 80056f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80056f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d92b      	bls.n	8005754 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4293      	cmp	r3, r2
 800570c:	bf28      	it	cs
 800570e:	4613      	movcs	r3, r2
 8005710:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	685a      	ldr	r2, [r3, #4]
 8005716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005718:	4413      	add	r3, r2
 800571a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	6939      	ldr	r1, [r7, #16]
 8005720:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005722:	f002 f86d 	bl	8007800 <memcpy>
    NumBytesRead += NumBytesRem;
 8005726:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	4413      	add	r3, r2
 800572c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800572e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	4413      	add	r3, r2
 8005734:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800573e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	4413      	add	r3, r2
 8005744:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800574c:	429a      	cmp	r2, r3
 800574e:	d101      	bne.n	8005754 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005750:	2300      	movs	r3, #0
 8005752:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005754:	69ba      	ldr	r2, [r7, #24]
 8005756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4293      	cmp	r3, r2
 8005762:	bf28      	it	cs
 8005764:	4613      	movcs	r3, r2
 8005766:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d019      	beq.n	80057a2 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	685a      	ldr	r2, [r3, #4]
 8005772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005774:	4413      	add	r3, r2
 8005776:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005778:	697a      	ldr	r2, [r7, #20]
 800577a:	6939      	ldr	r1, [r7, #16]
 800577c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800577e:	f002 f83f 	bl	8007800 <memcpy>
    NumBytesRead += NumBytesRem;
 8005782:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	4413      	add	r3, r2
 8005788:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800578a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	4413      	add	r3, r2
 8005790:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	1ad3      	subs	r3, r2, r3
 8005798:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800579a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	4413      	add	r3, r2
 80057a0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80057a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80057a8:	69fb      	ldr	r3, [r7, #28]
 80057aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057ac:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80057ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3730      	adds	r7, #48	@ 0x30
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}
 80057b8:	20012f24 	.word	0x20012f24

080057bc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80057bc:	b580      	push	{r7, lr}
 80057be:	b08c      	sub	sp, #48	@ 0x30
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	60b9      	str	r1, [r7, #8]
 80057c6:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80057c8:	4b3e      	ldr	r3, [pc, #248]	@ (80058c4 <SEGGER_RTT_ReadNoLock+0x108>)
 80057ca:	623b      	str	r3, [r7, #32]
 80057cc:	6a3b      	ldr	r3, [r7, #32]
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d101      	bne.n	80057da <SEGGER_RTT_ReadNoLock+0x1e>
 80057d6:	f7ff fe4b 	bl	8005470 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	4613      	mov	r3, r2
 80057de:	005b      	lsls	r3, r3, #1
 80057e0:	4413      	add	r3, r2
 80057e2:	00db      	lsls	r3, r3, #3
 80057e4:	3360      	adds	r3, #96	@ 0x60
 80057e6:	4a37      	ldr	r2, [pc, #220]	@ (80058c4 <SEGGER_RTT_ReadNoLock+0x108>)
 80057e8:	4413      	add	r3, r2
 80057ea:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80057f0:	69fb      	ldr	r3, [r7, #28]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80057fc:	2300      	movs	r3, #0
 80057fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005800:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005802:	69bb      	ldr	r3, [r7, #24]
 8005804:	429a      	cmp	r2, r3
 8005806:	d92b      	bls.n	8005860 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005808:	69fb      	ldr	r3, [r7, #28]
 800580a:	689a      	ldr	r2, [r3, #8]
 800580c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	4293      	cmp	r3, r2
 8005818:	bf28      	it	cs
 800581a:	4613      	movcs	r3, r2
 800581c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005824:	4413      	add	r3, r2
 8005826:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	6939      	ldr	r1, [r7, #16]
 800582c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800582e:	f001 ffe7 	bl	8007800 <memcpy>
    NumBytesRead += NumBytesRem;
 8005832:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	4413      	add	r3, r2
 8005838:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800583a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	4413      	add	r3, r2
 8005840:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800584a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	4413      	add	r3, r2
 8005850:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005858:	429a      	cmp	r2, r3
 800585a:	d101      	bne.n	8005860 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800585c:	2300      	movs	r3, #0
 800585e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005860:	69ba      	ldr	r2, [r7, #24]
 8005862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005864:	1ad3      	subs	r3, r2, r3
 8005866:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4293      	cmp	r3, r2
 800586e:	bf28      	it	cs
 8005870:	4613      	movcs	r3, r2
 8005872:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d019      	beq.n	80058ae <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005880:	4413      	add	r3, r2
 8005882:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	6939      	ldr	r1, [r7, #16]
 8005888:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800588a:	f001 ffb9 	bl	8007800 <memcpy>
    NumBytesRead += NumBytesRem;
 800588e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	4413      	add	r3, r2
 8005894:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005896:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	4413      	add	r3, r2
 800589c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80058a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	4413      	add	r3, r2
 80058ac:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80058ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80058b8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80058ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80058bc:	4618      	mov	r0, r3
 80058be:	3730      	adds	r7, #48	@ 0x30
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}
 80058c4:	20012f24 	.word	0x20012f24

080058c8 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b088      	sub	sp, #32
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	4613      	mov	r3, r2
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	4413      	add	r3, r2
 80058e0:	00db      	lsls	r3, r3, #3
 80058e2:	3360      	adds	r3, #96	@ 0x60
 80058e4:	4a1f      	ldr	r2, [pc, #124]	@ (8005964 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 80058e6:	4413      	add	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	2b02      	cmp	r3, #2
 80058f0:	d029      	beq.n	8005946 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 80058f2:	2b02      	cmp	r3, #2
 80058f4:	d82e      	bhi.n	8005954 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d002      	beq.n	8005900 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d013      	beq.n	8005926 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80058fe:	e029      	b.n	8005954 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005900:	6978      	ldr	r0, [r7, #20]
 8005902:	f7ff feb2 	bl	800566a <_GetAvailWriteSpace>
 8005906:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	429a      	cmp	r2, r3
 800590e:	d202      	bcs.n	8005916 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005910:	2300      	movs	r3, #0
 8005912:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8005914:	e021      	b.n	800595a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800591a:	687a      	ldr	r2, [r7, #4]
 800591c:	69b9      	ldr	r1, [r7, #24]
 800591e:	6978      	ldr	r0, [r7, #20]
 8005920:	f7ff fe5b 	bl	80055da <_WriteNoCheck>
    break;
 8005924:	e019      	b.n	800595a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005926:	6978      	ldr	r0, [r7, #20]
 8005928:	f7ff fe9f 	bl	800566a <_GetAvailWriteSpace>
 800592c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	4293      	cmp	r3, r2
 8005934:	bf28      	it	cs
 8005936:	4613      	movcs	r3, r2
 8005938:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800593a:	69fa      	ldr	r2, [r7, #28]
 800593c:	69b9      	ldr	r1, [r7, #24]
 800593e:	6978      	ldr	r0, [r7, #20]
 8005940:	f7ff fe4b 	bl	80055da <_WriteNoCheck>
    break;
 8005944:	e009      	b.n	800595a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	69b9      	ldr	r1, [r7, #24]
 800594a:	6978      	ldr	r0, [r7, #20]
 800594c:	f7ff fde8 	bl	8005520 <_WriteBlocking>
 8005950:	61f8      	str	r0, [r7, #28]
    break;
 8005952:	e002      	b.n	800595a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8005954:	2300      	movs	r3, #0
 8005956:	61fb      	str	r3, [r7, #28]
    break;
 8005958:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800595a:	69fb      	ldr	r3, [r7, #28]
}
 800595c:	4618      	mov	r0, r3
 800595e:	3720      	adds	r7, #32
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	20012f24 	.word	0x20012f24

08005968 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005968:	b580      	push	{r7, lr}
 800596a:	b088      	sub	sp, #32
 800596c:	af00      	add	r7, sp, #0
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005974:	4b0e      	ldr	r3, [pc, #56]	@ (80059b0 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005976:	61fb      	str	r3, [r7, #28]
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005982:	f7ff fd75 	bl	8005470 <_DoInit>
  SEGGER_RTT_LOCK();
 8005986:	f3ef 8311 	mrs	r3, BASEPRI
 800598a:	f04f 0120 	mov.w	r1, #32
 800598e:	f381 8811 	msr	BASEPRI, r1
 8005992:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	68b9      	ldr	r1, [r7, #8]
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f7ff ff95 	bl	80058c8 <SEGGER_RTT_WriteDownBufferNoLock>
 800599e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80059a6:	697b      	ldr	r3, [r7, #20]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3720      	adds	r7, #32
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	20012f24 	.word	0x20012f24

080059b4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b088      	sub	sp, #32
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
 80059c0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80059c2:	4b3d      	ldr	r3, [pc, #244]	@ (8005ab8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80059c4:	61bb      	str	r3, [r7, #24]
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80059d0:	f7ff fd4e 	bl	8005470 <_DoInit>
  SEGGER_RTT_LOCK();
 80059d4:	f3ef 8311 	mrs	r3, BASEPRI
 80059d8:	f04f 0120 	mov.w	r1, #32
 80059dc:	f381 8811 	msr	BASEPRI, r1
 80059e0:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80059e2:	4b35      	ldr	r3, [pc, #212]	@ (8005ab8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80059e4:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 80059e6:	2300      	movs	r3, #0
 80059e8:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 80059ea:	6939      	ldr	r1, [r7, #16]
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	1c5a      	adds	r2, r3, #1
 80059f0:	4613      	mov	r3, r2
 80059f2:	005b      	lsls	r3, r3, #1
 80059f4:	4413      	add	r3, r2
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	440b      	add	r3, r1
 80059fa:	3304      	adds	r3, #4
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d008      	beq.n	8005a14 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	3301      	adds	r3, #1
 8005a06:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	69fa      	ldr	r2, [r7, #28]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	dbeb      	blt.n	80059ea <SEGGER_RTT_AllocUpBuffer+0x36>
 8005a12:	e000      	b.n	8005a16 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005a14:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	69fa      	ldr	r2, [r7, #28]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	da3f      	bge.n	8005aa0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005a20:	6939      	ldr	r1, [r7, #16]
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	4613      	mov	r3, r2
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	4413      	add	r3, r2
 8005a2c:	00db      	lsls	r3, r3, #3
 8005a2e:	440b      	add	r3, r1
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005a34:	6939      	ldr	r1, [r7, #16]
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	1c5a      	adds	r2, r3, #1
 8005a3a:	4613      	mov	r3, r2
 8005a3c:	005b      	lsls	r3, r3, #1
 8005a3e:	4413      	add	r3, r2
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	440b      	add	r3, r1
 8005a44:	3304      	adds	r3, #4
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005a4a:	6939      	ldr	r1, [r7, #16]
 8005a4c:	69fa      	ldr	r2, [r7, #28]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	4413      	add	r3, r2
 8005a54:	00db      	lsls	r3, r3, #3
 8005a56:	440b      	add	r3, r1
 8005a58:	3320      	adds	r3, #32
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005a5e:	6939      	ldr	r1, [r7, #16]
 8005a60:	69fa      	ldr	r2, [r7, #28]
 8005a62:	4613      	mov	r3, r2
 8005a64:	005b      	lsls	r3, r3, #1
 8005a66:	4413      	add	r3, r2
 8005a68:	00db      	lsls	r3, r3, #3
 8005a6a:	440b      	add	r3, r1
 8005a6c:	3328      	adds	r3, #40	@ 0x28
 8005a6e:	2200      	movs	r2, #0
 8005a70:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005a72:	6939      	ldr	r1, [r7, #16]
 8005a74:	69fa      	ldr	r2, [r7, #28]
 8005a76:	4613      	mov	r3, r2
 8005a78:	005b      	lsls	r3, r3, #1
 8005a7a:	4413      	add	r3, r2
 8005a7c:	00db      	lsls	r3, r3, #3
 8005a7e:	440b      	add	r3, r1
 8005a80:	3324      	adds	r3, #36	@ 0x24
 8005a82:	2200      	movs	r2, #0
 8005a84:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005a86:	6939      	ldr	r1, [r7, #16]
 8005a88:	69fa      	ldr	r2, [r7, #28]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	005b      	lsls	r3, r3, #1
 8005a8e:	4413      	add	r3, r2
 8005a90:	00db      	lsls	r3, r3, #3
 8005a92:	440b      	add	r3, r1
 8005a94:	332c      	adds	r3, #44	@ 0x2c
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a9a:	f3bf 8f5f 	dmb	sy
 8005a9e:	e002      	b.n	8005aa6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8005aa4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005aac:	69fb      	ldr	r3, [r7, #28]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3720      	adds	r7, #32
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	20012f24 	.word	0x20012f24

08005abc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b08a      	sub	sp, #40	@ 0x28
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
 8005ac8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8005aca:	4b21      	ldr	r3, [pc, #132]	@ (8005b50 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005acc:	623b      	str	r3, [r7, #32]
 8005ace:	6a3b      	ldr	r3, [r7, #32]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d101      	bne.n	8005adc <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005ad8:	f7ff fcca 	bl	8005470 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005adc:	4b1c      	ldr	r3, [pc, #112]	@ (8005b50 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005ade:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d82c      	bhi.n	8005b40 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8005ae6:	f3ef 8311 	mrs	r3, BASEPRI
 8005aea:	f04f 0120 	mov.w	r1, #32
 8005aee:	f381 8811 	msr	BASEPRI, r1
 8005af2:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	4613      	mov	r3, r2
 8005af8:	005b      	lsls	r3, r3, #1
 8005afa:	4413      	add	r3, r2
 8005afc:	00db      	lsls	r3, r3, #3
 8005afe:	3360      	adds	r3, #96	@ 0x60
 8005b00:	69fa      	ldr	r2, [r7, #28]
 8005b02:	4413      	add	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00e      	beq.n	8005b2a <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2200      	movs	r2, #0
 8005b22:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	2200      	movs	r2, #0
 8005b28:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b2e:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005b30:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b3e:	e002      	b.n	8005b46 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005b40:	f04f 33ff 	mov.w	r3, #4294967295
 8005b44:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8005b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3728      	adds	r7, #40	@ 0x28
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	20012f24 	.word	0x20012f24

08005b54 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005b54:	b480      	push	{r7}
 8005b56:	b087      	sub	sp, #28
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005b60:	2300      	movs	r3, #0
 8005b62:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00f      	beq.n	8005b8a <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8005b6a:	e002      	b.n	8005b72 <_EncodeStr+0x1e>
      Len++;
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	3301      	adds	r3, #1
 8005b70:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 8005b72:	68ba      	ldr	r2, [r7, #8]
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	4413      	add	r3, r2
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d1f6      	bne.n	8005b6c <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 8005b7e:	693a      	ldr	r2, [r7, #16]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d901      	bls.n	8005b8a <_EncodeStr+0x36>
      Len = Limit;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005b8a:	693b      	ldr	r3, [r7, #16]
 8005b8c:	2bfe      	cmp	r3, #254	@ 0xfe
 8005b8e:	d806      	bhi.n	8005b9e <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	1c5a      	adds	r2, r3, #1
 8005b94:	60fa      	str	r2, [r7, #12]
 8005b96:	693a      	ldr	r2, [r7, #16]
 8005b98:	b2d2      	uxtb	r2, r2
 8005b9a:	701a      	strb	r2, [r3, #0]
 8005b9c:	e011      	b.n	8005bc2 <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	1c5a      	adds	r2, r3, #1
 8005ba2:	60fa      	str	r2, [r7, #12]
 8005ba4:	22ff      	movs	r2, #255	@ 0xff
 8005ba6:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	1c5a      	adds	r2, r3, #1
 8005bac:	60fa      	str	r2, [r7, #12]
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	b2d2      	uxtb	r2, r2
 8005bb2:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	0a19      	lsrs	r1, r3, #8
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	1c5a      	adds	r2, r3, #1
 8005bbc:	60fa      	str	r2, [r7, #12]
 8005bbe:	b2ca      	uxtb	r2, r1
 8005bc0:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005bc6:	e00a      	b.n	8005bde <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	1c53      	adds	r3, r2, #1
 8005bcc:	60bb      	str	r3, [r7, #8]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	1c59      	adds	r1, r3, #1
 8005bd2:	60f9      	str	r1, [r7, #12]
 8005bd4:	7812      	ldrb	r2, [r2, #0]
 8005bd6:	701a      	strb	r2, [r3, #0]
    n++;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	3301      	adds	r3, #1
 8005bdc:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005bde:	697a      	ldr	r2, [r7, #20]
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d3f0      	bcc.n	8005bc8 <_EncodeStr+0x74>
  }
  return pPayload;
 8005be6:	68fb      	ldr	r3, [r7, #12]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	371c      	adds	r7, #28
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	3304      	adds	r3, #4
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c12:	4b35      	ldr	r3, [pc, #212]	@ (8005ce8 <_HandleIncomingPacket+0xdc>)
 8005c14:	7e1b      	ldrb	r3, [r3, #24]
 8005c16:	4618      	mov	r0, r3
 8005c18:	1cfb      	adds	r3, r7, #3
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	f7ff fdcd 	bl	80057bc <SEGGER_RTT_ReadNoLock>
 8005c22:	4603      	mov	r3, r0
 8005c24:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	dd59      	ble.n	8005ce0 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8005c2c:	78fb      	ldrb	r3, [r7, #3]
 8005c2e:	2b80      	cmp	r3, #128	@ 0x80
 8005c30:	d032      	beq.n	8005c98 <_HandleIncomingPacket+0x8c>
 8005c32:	2b80      	cmp	r3, #128	@ 0x80
 8005c34:	dc42      	bgt.n	8005cbc <_HandleIncomingPacket+0xb0>
 8005c36:	2b07      	cmp	r3, #7
 8005c38:	dc16      	bgt.n	8005c68 <_HandleIncomingPacket+0x5c>
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	dd3e      	ble.n	8005cbc <_HandleIncomingPacket+0xb0>
 8005c3e:	3b01      	subs	r3, #1
 8005c40:	2b06      	cmp	r3, #6
 8005c42:	d83b      	bhi.n	8005cbc <_HandleIncomingPacket+0xb0>
 8005c44:	a201      	add	r2, pc, #4	@ (adr r2, 8005c4c <_HandleIncomingPacket+0x40>)
 8005c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c4a:	bf00      	nop
 8005c4c:	08005c6f 	.word	0x08005c6f
 8005c50:	08005c75 	.word	0x08005c75
 8005c54:	08005c7b 	.word	0x08005c7b
 8005c58:	08005c81 	.word	0x08005c81
 8005c5c:	08005c87 	.word	0x08005c87
 8005c60:	08005c8d 	.word	0x08005c8d
 8005c64:	08005c93 	.word	0x08005c93
 8005c68:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c6a:	d034      	beq.n	8005cd6 <_HandleIncomingPacket+0xca>
 8005c6c:	e026      	b.n	8005cbc <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005c6e:	f000 ff43 	bl	8006af8 <SEGGER_SYSVIEW_Start>
      break;
 8005c72:	e035      	b.n	8005ce0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005c74:	f000 fffc 	bl	8006c70 <SEGGER_SYSVIEW_Stop>
      break;
 8005c78:	e032      	b.n	8005ce0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005c7a:	f001 f9d5 	bl	8007028 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005c7e:	e02f      	b.n	8005ce0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005c80:	f001 f99a 	bl	8006fb8 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005c84:	e02c      	b.n	8005ce0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005c86:	f001 f819 	bl	8006cbc <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005c8a:	e029      	b.n	8005ce0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005c8c:	f001 fc68 	bl	8007560 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005c90:	e026      	b.n	8005ce0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005c92:	f001 fc47 	bl	8007524 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005c96:	e023      	b.n	8005ce0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c98:	4b13      	ldr	r3, [pc, #76]	@ (8005ce8 <_HandleIncomingPacket+0xdc>)
 8005c9a:	7e1b      	ldrb	r3, [r3, #24]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	1cfb      	adds	r3, r7, #3
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	f7ff fd8a 	bl	80057bc <SEGGER_RTT_ReadNoLock>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	dd13      	ble.n	8005cda <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005cb2:	78fb      	ldrb	r3, [r7, #3]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f001 fbb5 	bl	8007424 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005cba:	e00e      	b.n	8005cda <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005cbc:	78fb      	ldrb	r3, [r7, #3]
 8005cbe:	b25b      	sxtb	r3, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	da0c      	bge.n	8005cde <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005cc4:	4b08      	ldr	r3, [pc, #32]	@ (8005ce8 <_HandleIncomingPacket+0xdc>)
 8005cc6:	7e1b      	ldrb	r3, [r3, #24]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	1cfb      	adds	r3, r7, #3
 8005ccc:	2201      	movs	r2, #1
 8005cce:	4619      	mov	r1, r3
 8005cd0:	f7ff fd74 	bl	80057bc <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005cd4:	e003      	b.n	8005cde <_HandleIncomingPacket+0xd2>
      break;
 8005cd6:	bf00      	nop
 8005cd8:	e002      	b.n	8005ce0 <_HandleIncomingPacket+0xd4>
      break;
 8005cda:	bf00      	nop
 8005cdc:	e000      	b.n	8005ce0 <_HandleIncomingPacket+0xd4>
      break;
 8005cde:	bf00      	nop
    }
  }
}
 8005ce0:	bf00      	nop
 8005ce2:	3708      	adds	r7, #8
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	200143e4 	.word	0x200143e4

08005cec <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b08c      	sub	sp, #48	@ 0x30
 8005cf0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005cf6:	1d3b      	adds	r3, r7, #4
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005cfc:	69fb      	ldr	r3, [r7, #28]
 8005cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d00:	4b32      	ldr	r3, [pc, #200]	@ (8005dcc <_TrySendOverflowPacket+0xe0>)
 8005d02:	695b      	ldr	r3, [r3, #20]
 8005d04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d06:	e00b      	b.n	8005d20 <_TrySendOverflowPacket+0x34>
 8005d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d0e:	1c59      	adds	r1, r3, #1
 8005d10:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005d12:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d16:	b2d2      	uxtb	r2, r2
 8005d18:	701a      	strb	r2, [r3, #0]
 8005d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d1c:	09db      	lsrs	r3, r3, #7
 8005d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d22:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d24:	d8f0      	bhi.n	8005d08 <_TrySendOverflowPacket+0x1c>
 8005d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d28:	1c5a      	adds	r2, r3, #1
 8005d2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d2e:	b2d2      	uxtb	r2, r2
 8005d30:	701a      	strb	r2, [r3, #0]
 8005d32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d34:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005d36:	4b26      	ldr	r3, [pc, #152]	@ (8005dd0 <_TrySendOverflowPacket+0xe4>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005d3c:	4b23      	ldr	r3, [pc, #140]	@ (8005dcc <_TrySendOverflowPacket+0xe0>)
 8005d3e:	68db      	ldr	r3, [r3, #12]
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	1ad3      	subs	r3, r2, r3
 8005d44:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005d46:	69fb      	ldr	r3, [r7, #28]
 8005d48:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	623b      	str	r3, [r7, #32]
 8005d4e:	e00b      	b.n	8005d68 <_TrySendOverflowPacket+0x7c>
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	b2da      	uxtb	r2, r3
 8005d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d56:	1c59      	adds	r1, r3, #1
 8005d58:	6279      	str	r1, [r7, #36]	@ 0x24
 8005d5a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d5e:	b2d2      	uxtb	r2, r2
 8005d60:	701a      	strb	r2, [r3, #0]
 8005d62:	6a3b      	ldr	r3, [r7, #32]
 8005d64:	09db      	lsrs	r3, r3, #7
 8005d66:	623b      	str	r3, [r7, #32]
 8005d68:	6a3b      	ldr	r3, [r7, #32]
 8005d6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d6c:	d8f0      	bhi.n	8005d50 <_TrySendOverflowPacket+0x64>
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d70:	1c5a      	adds	r2, r3, #1
 8005d72:	627a      	str	r2, [r7, #36]	@ 0x24
 8005d74:	6a3a      	ldr	r2, [r7, #32]
 8005d76:	b2d2      	uxtb	r2, r2
 8005d78:	701a      	strb	r2, [r3, #0]
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005d7e:	4b13      	ldr	r3, [pc, #76]	@ (8005dcc <_TrySendOverflowPacket+0xe0>)
 8005d80:	785b      	ldrb	r3, [r3, #1]
 8005d82:	4618      	mov	r0, r3
 8005d84:	1d3b      	adds	r3, r7, #4
 8005d86:	69fa      	ldr	r2, [r7, #28]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	1d3b      	adds	r3, r7, #4
 8005d8e:	4619      	mov	r1, r3
 8005d90:	f7fa fa3e 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005d94:	4603      	mov	r3, r0
 8005d96:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 8005d98:	f7ff fae0 	bl	800535c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d009      	beq.n	8005db6 <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005da2:	4a0a      	ldr	r2, [pc, #40]	@ (8005dcc <_TrySendOverflowPacket+0xe0>)
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005da8:	4b08      	ldr	r3, [pc, #32]	@ (8005dcc <_TrySendOverflowPacket+0xe0>)
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	3b01      	subs	r3, #1
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	4b06      	ldr	r3, [pc, #24]	@ (8005dcc <_TrySendOverflowPacket+0xe0>)
 8005db2:	701a      	strb	r2, [r3, #0]
 8005db4:	e004      	b.n	8005dc0 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005db6:	4b05      	ldr	r3, [pc, #20]	@ (8005dcc <_TrySendOverflowPacket+0xe0>)
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	4a03      	ldr	r2, [pc, #12]	@ (8005dcc <_TrySendOverflowPacket+0xe0>)
 8005dbe:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005dc0:	693b      	ldr	r3, [r7, #16]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3730      	adds	r7, #48	@ 0x30
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	200143e4 	.word	0x200143e4
 8005dd0:	e0001004 	.word	0xe0001004

08005dd4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b08a      	sub	sp, #40	@ 0x28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005de0:	4b6d      	ldr	r3, [pc, #436]	@ (8005f98 <_SendPacket+0x1c4>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d010      	beq.n	8005e0a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005de8:	4b6b      	ldr	r3, [pc, #428]	@ (8005f98 <_SendPacket+0x1c4>)
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 80a5 	beq.w	8005f3c <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005df2:	4b69      	ldr	r3, [pc, #420]	@ (8005f98 <_SendPacket+0x1c4>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d109      	bne.n	8005e0e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005dfa:	f7ff ff77 	bl	8005cec <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005dfe:	4b66      	ldr	r3, [pc, #408]	@ (8005f98 <_SendPacket+0x1c4>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	f040 809c 	bne.w	8005f40 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005e08:	e001      	b.n	8005e0e <_SendPacket+0x3a>
    goto Send;
 8005e0a:	bf00      	nop
 8005e0c:	e000      	b.n	8005e10 <_SendPacket+0x3c>
Send:
 8005e0e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2b1f      	cmp	r3, #31
 8005e14:	d809      	bhi.n	8005e2a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005e16:	4b60      	ldr	r3, [pc, #384]	@ (8005f98 <_SendPacket+0x1c4>)
 8005e18:	69da      	ldr	r2, [r3, #28]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8005e20:	f003 0301 	and.w	r3, r3, #1
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f040 808d 	bne.w	8005f44 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b17      	cmp	r3, #23
 8005e2e:	d807      	bhi.n	8005e40 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	3b01      	subs	r3, #1
 8005e34:	60fb      	str	r3, [r7, #12]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	701a      	strb	r2, [r3, #0]
 8005e3e:	e03d      	b.n	8005ebc <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e4c:	d912      	bls.n	8005e74 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	09da      	lsrs	r2, r3, #7
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	3b01      	subs	r3, #1
 8005e56:	60fb      	str	r3, [r7, #12]
 8005e58:	b2d2      	uxtb	r2, r2
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	68fa      	ldr	r2, [r7, #12]
 8005e64:	3a01      	subs	r2, #1
 8005e66:	60fa      	str	r2, [r7, #12]
 8005e68:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005e6c:	b2da      	uxtb	r2, r3
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	701a      	strb	r2, [r3, #0]
 8005e72:	e006      	b.n	8005e82 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	3b01      	subs	r3, #1
 8005e78:	60fb      	str	r3, [r7, #12]
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	b2da      	uxtb	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e86:	d912      	bls.n	8005eae <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	09da      	lsrs	r2, r3, #7
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	b2d2      	uxtb	r2, r2
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	3a01      	subs	r2, #1
 8005ea0:	60fa      	str	r2, [r7, #12]
 8005ea2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ea6:	b2da      	uxtb	r2, r3
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	701a      	strb	r2, [r3, #0]
 8005eac:	e006      	b.n	8005ebc <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	60fb      	str	r3, [r7, #12]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005ebc:	4b37      	ldr	r3, [pc, #220]	@ (8005f9c <_SendPacket+0x1c8>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005ec2:	4b35      	ldr	r3, [pc, #212]	@ (8005f98 <_SendPacket+0x1c4>)
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	623b      	str	r3, [r7, #32]
 8005ed4:	e00b      	b.n	8005eee <_SendPacket+0x11a>
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	b2da      	uxtb	r2, r3
 8005eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005edc:	1c59      	adds	r1, r3, #1
 8005ede:	6279      	str	r1, [r7, #36]	@ 0x24
 8005ee0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	701a      	strb	r2, [r3, #0]
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	09db      	lsrs	r3, r3, #7
 8005eec:	623b      	str	r3, [r7, #32]
 8005eee:	6a3b      	ldr	r3, [r7, #32]
 8005ef0:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ef2:	d8f0      	bhi.n	8005ed6 <_SendPacket+0x102>
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef6:	1c5a      	adds	r2, r3, #1
 8005ef8:	627a      	str	r2, [r7, #36]	@ 0x24
 8005efa:	6a3a      	ldr	r2, [r7, #32]
 8005efc:	b2d2      	uxtb	r2, r2
 8005efe:	701a      	strb	r2, [r3, #0]
 8005f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f02:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005f04:	4b24      	ldr	r3, [pc, #144]	@ (8005f98 <_SendPacket+0x1c4>)
 8005f06:	785b      	ldrb	r3, [r3, #1]
 8005f08:	4618      	mov	r0, r3
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	461a      	mov	r2, r3
 8005f12:	68f9      	ldr	r1, [r7, #12]
 8005f14:	f7fa f97c 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005f1c:	f7ff fa1e 	bl	800535c <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d003      	beq.n	8005f2e <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005f26:	4a1c      	ldr	r2, [pc, #112]	@ (8005f98 <_SendPacket+0x1c4>)
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	60d3      	str	r3, [r2, #12]
 8005f2c:	e00b      	b.n	8005f46 <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8005f98 <_SendPacket+0x1c4>)
 8005f30:	781b      	ldrb	r3, [r3, #0]
 8005f32:	3301      	adds	r3, #1
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	4b18      	ldr	r3, [pc, #96]	@ (8005f98 <_SendPacket+0x1c4>)
 8005f38:	701a      	strb	r2, [r3, #0]
 8005f3a:	e004      	b.n	8005f46 <_SendPacket+0x172>
    goto SendDone;
 8005f3c:	bf00      	nop
 8005f3e:	e002      	b.n	8005f46 <_SendPacket+0x172>
      goto SendDone;
 8005f40:	bf00      	nop
 8005f42:	e000      	b.n	8005f46 <_SendPacket+0x172>
      goto SendDone;
 8005f44:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005f46:	4b14      	ldr	r3, [pc, #80]	@ (8005f98 <_SendPacket+0x1c4>)
 8005f48:	7e1b      	ldrb	r3, [r3, #24]
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	4a14      	ldr	r2, [pc, #80]	@ (8005fa0 <_SendPacket+0x1cc>)
 8005f4e:	460b      	mov	r3, r1
 8005f50:	005b      	lsls	r3, r3, #1
 8005f52:	440b      	add	r3, r1
 8005f54:	00db      	lsls	r3, r3, #3
 8005f56:	4413      	add	r3, r2
 8005f58:	336c      	adds	r3, #108	@ 0x6c
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8005f98 <_SendPacket+0x1c4>)
 8005f5e:	7e1b      	ldrb	r3, [r3, #24]
 8005f60:	4618      	mov	r0, r3
 8005f62:	490f      	ldr	r1, [pc, #60]	@ (8005fa0 <_SendPacket+0x1cc>)
 8005f64:	4603      	mov	r3, r0
 8005f66:	005b      	lsls	r3, r3, #1
 8005f68:	4403      	add	r3, r0
 8005f6a:	00db      	lsls	r3, r3, #3
 8005f6c:	440b      	add	r3, r1
 8005f6e:	3370      	adds	r3, #112	@ 0x70
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	429a      	cmp	r2, r3
 8005f74:	d00b      	beq.n	8005f8e <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005f76:	4b08      	ldr	r3, [pc, #32]	@ (8005f98 <_SendPacket+0x1c4>)
 8005f78:	789b      	ldrb	r3, [r3, #2]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d107      	bne.n	8005f8e <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005f7e:	4b06      	ldr	r3, [pc, #24]	@ (8005f98 <_SendPacket+0x1c4>)
 8005f80:	2201      	movs	r2, #1
 8005f82:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005f84:	f7ff fe42 	bl	8005c0c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005f88:	4b03      	ldr	r3, [pc, #12]	@ (8005f98 <_SendPacket+0x1c4>)
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005f8e:	bf00      	nop
 8005f90:	3728      	adds	r7, #40	@ 0x28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	200143e4 	.word	0x200143e4
 8005f9c:	e0001004 	.word	0xe0001004
 8005fa0:	20012f24 	.word	0x20012f24

08005fa4 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b08a      	sub	sp, #40	@ 0x28
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	460b      	mov	r3, r1
 8005fae:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	691b      	ldr	r3, [r3, #16]
 8005fb4:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	3301      	adds	r3, #1
 8005fba:	2b80      	cmp	r3, #128	@ 0x80
 8005fbc:	d80a      	bhi.n	8005fd4 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	1c59      	adds	r1, r3, #1
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	6051      	str	r1, [r2, #4]
 8005fc8:	78fa      	ldrb	r2, [r7, #3]
 8005fca:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	1c5a      	adds	r2, r3, #1
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	2b80      	cmp	r3, #128	@ 0x80
 8005fda:	d15a      	bne.n	8006092 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	691a      	ldr	r2, [r3, #16]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	689b      	ldr	r3, [r3, #8]
 8005fe4:	b2d2      	uxtb	r2, r2
 8005fe6:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	623b      	str	r3, [r7, #32]
 8005ffc:	e00b      	b.n	8006016 <_StoreChar+0x72>
 8005ffe:	6a3b      	ldr	r3, [r7, #32]
 8006000:	b2da      	uxtb	r2, r3
 8006002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006004:	1c59      	adds	r1, r3, #1
 8006006:	6279      	str	r1, [r7, #36]	@ 0x24
 8006008:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800600c:	b2d2      	uxtb	r2, r2
 800600e:	701a      	strb	r2, [r3, #0]
 8006010:	6a3b      	ldr	r3, [r7, #32]
 8006012:	09db      	lsrs	r3, r3, #7
 8006014:	623b      	str	r3, [r7, #32]
 8006016:	6a3b      	ldr	r3, [r7, #32]
 8006018:	2b7f      	cmp	r3, #127	@ 0x7f
 800601a:	d8f0      	bhi.n	8005ffe <_StoreChar+0x5a>
 800601c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800601e:	1c5a      	adds	r2, r3, #1
 8006020:	627a      	str	r2, [r7, #36]	@ 0x24
 8006022:	6a3a      	ldr	r2, [r7, #32]
 8006024:	b2d2      	uxtb	r2, r2
 8006026:	701a      	strb	r2, [r3, #0]
 8006028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602a:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	61fb      	str	r3, [r7, #28]
 8006030:	2300      	movs	r3, #0
 8006032:	61bb      	str	r3, [r7, #24]
 8006034:	e00b      	b.n	800604e <_StoreChar+0xaa>
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	b2da      	uxtb	r2, r3
 800603a:	69fb      	ldr	r3, [r7, #28]
 800603c:	1c59      	adds	r1, r3, #1
 800603e:	61f9      	str	r1, [r7, #28]
 8006040:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006044:	b2d2      	uxtb	r2, r2
 8006046:	701a      	strb	r2, [r3, #0]
 8006048:	69bb      	ldr	r3, [r7, #24]
 800604a:	09db      	lsrs	r3, r3, #7
 800604c:	61bb      	str	r3, [r7, #24]
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	2b7f      	cmp	r3, #127	@ 0x7f
 8006052:	d8f0      	bhi.n	8006036 <_StoreChar+0x92>
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	1c5a      	adds	r2, r3, #1
 8006058:	61fa      	str	r2, [r7, #28]
 800605a:	69ba      	ldr	r2, [r7, #24]
 800605c:	b2d2      	uxtb	r2, r2
 800605e:	701a      	strb	r2, [r3, #0]
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	221a      	movs	r2, #26
 800606a:	6939      	ldr	r1, [r7, #16]
 800606c:	4618      	mov	r0, r3
 800606e:	f7ff feb1 	bl	8005dd4 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4618      	mov	r0, r3
 8006078:	f7ff fdbc 	bl	8005bf4 <_PreparePacket>
 800607c:	4602      	mov	r2, r0
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	611a      	str	r2, [r3, #16]
  }
}
 8006092:	bf00      	nop
 8006094:	3728      	adds	r7, #40	@ 0x28
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
	...

0800609c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800609c:	b580      	push	{r7, lr}
 800609e:	b08a      	sub	sp, #40	@ 0x28
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	60f8      	str	r0, [r7, #12]
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
 80060a8:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80060ae:	2301      	movs	r3, #1
 80060b0:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80060b2:	2301      	movs	r3, #1
 80060b4:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80060b6:	e007      	b.n	80060c8 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80060b8:	6a3a      	ldr	r2, [r7, #32]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80060c0:	623b      	str	r3, [r7, #32]
    Width++;
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	3301      	adds	r3, #1
 80060c6:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80060c8:	6a3a      	ldr	r2, [r7, #32]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d2f3      	bcs.n	80060b8 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80060d0:	683a      	ldr	r2, [r7, #0]
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d901      	bls.n	80060dc <_PrintUnsigned+0x40>
    Width = NumDigits;
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80060dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060de:	f003 0301 	and.w	r3, r3, #1
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d000      	beq.n	80060e8 <_PrintUnsigned+0x4c>
 80060e6:	e01f      	b.n	8006128 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 80060e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d01c      	beq.n	8006128 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80060ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060f0:	f003 0302 	and.w	r3, r3, #2
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d005      	beq.n	8006104 <_PrintUnsigned+0x68>
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d102      	bne.n	8006104 <_PrintUnsigned+0x68>
        c = '0';
 80060fe:	2330      	movs	r3, #48	@ 0x30
 8006100:	76fb      	strb	r3, [r7, #27]
 8006102:	e001      	b.n	8006108 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8006104:	2320      	movs	r3, #32
 8006106:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006108:	e007      	b.n	800611a <_PrintUnsigned+0x7e>
        FieldWidth--;
 800610a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800610c:	3b01      	subs	r3, #1
 800610e:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8006110:	7efb      	ldrb	r3, [r7, #27]
 8006112:	4619      	mov	r1, r3
 8006114:	68f8      	ldr	r0, [r7, #12]
 8006116:	f7ff ff45 	bl	8005fa4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800611a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800611c:	2b00      	cmp	r3, #0
 800611e:	d003      	beq.n	8006128 <_PrintUnsigned+0x8c>
 8006120:	69fa      	ldr	r2, [r7, #28]
 8006122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006124:	429a      	cmp	r2, r3
 8006126:	d3f0      	bcc.n	800610a <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d903      	bls.n	8006136 <_PrintUnsigned+0x9a>
      NumDigits--;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	3b01      	subs	r3, #1
 8006132:	603b      	str	r3, [r7, #0]
 8006134:	e009      	b.n	800614a <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8006136:	68ba      	ldr	r2, [r7, #8]
 8006138:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800613a:	fbb2 f3f3 	udiv	r3, r2, r3
 800613e:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8006140:	697a      	ldr	r2, [r7, #20]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	429a      	cmp	r2, r3
 8006146:	d200      	bcs.n	800614a <_PrintUnsigned+0xae>
        break;
 8006148:	e005      	b.n	8006156 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 800614a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	fb02 f303 	mul.w	r3, r2, r3
 8006152:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006154:	e7e8      	b.n	8006128 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615a:	fbb2 f3f3 	udiv	r3, r2, r3
 800615e:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006164:	fb02 f303 	mul.w	r3, r2, r3
 8006168:	68ba      	ldr	r2, [r7, #8]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 800616e:	4a15      	ldr	r2, [pc, #84]	@ (80061c4 <_PrintUnsigned+0x128>)
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	4413      	add	r3, r2
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	4619      	mov	r1, r3
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	f7ff ff13 	bl	8005fa4 <_StoreChar>
    Digit /= Base;
 800617e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	fbb2 f3f3 	udiv	r3, r2, r3
 8006186:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8006188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1e3      	bne.n	8006156 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 800618e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b00      	cmp	r3, #0
 8006196:	d011      	beq.n	80061bc <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8006198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00e      	beq.n	80061bc <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800619e:	e006      	b.n	80061ae <_PrintUnsigned+0x112>
        FieldWidth--;
 80061a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061a2:	3b01      	subs	r3, #1
 80061a4:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 80061a6:	2120      	movs	r1, #32
 80061a8:	68f8      	ldr	r0, [r7, #12]
 80061aa:	f7ff fefb 	bl	8005fa4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80061ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d003      	beq.n	80061bc <_PrintUnsigned+0x120>
 80061b4:	69fa      	ldr	r2, [r7, #28]
 80061b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d3f1      	bcc.n	80061a0 <_PrintUnsigned+0x104>
      }
    }
  }
}
 80061bc:	bf00      	nop
 80061be:	3728      	adds	r7, #40	@ 0x28
 80061c0:	46bd      	mov	sp, r7
 80061c2:	bd80      	pop	{r7, pc}
 80061c4:	0800820c 	.word	0x0800820c

080061c8 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b088      	sub	sp, #32
 80061cc:	af02      	add	r7, sp, #8
 80061ce:	60f8      	str	r0, [r7, #12]
 80061d0:	60b9      	str	r1, [r7, #8]
 80061d2:	607a      	str	r2, [r7, #4]
 80061d4:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	bfb8      	it	lt
 80061dc:	425b      	neglt	r3, r3
 80061de:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80061e0:	2301      	movs	r3, #1
 80061e2:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80061e4:	e007      	b.n	80061f6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80061ee:	613b      	str	r3, [r7, #16]
    Width++;
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	3301      	adds	r3, #1
 80061f4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	daf3      	bge.n	80061e6 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80061fe:	683a      	ldr	r2, [r7, #0]
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	429a      	cmp	r2, r3
 8006204:	d901      	bls.n	800620a <_PrintInt+0x42>
    Width = NumDigits;
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 800620a:	6a3b      	ldr	r3, [r7, #32]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00a      	beq.n	8006226 <_PrintInt+0x5e>
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	2b00      	cmp	r3, #0
 8006214:	db04      	blt.n	8006220 <_PrintInt+0x58>
 8006216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006218:	f003 0304 	and.w	r3, r3, #4
 800621c:	2b00      	cmp	r3, #0
 800621e:	d002      	beq.n	8006226 <_PrintInt+0x5e>
    FieldWidth--;
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	3b01      	subs	r3, #1
 8006224:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8006226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006228:	f003 0302 	and.w	r3, r3, #2
 800622c:	2b00      	cmp	r3, #0
 800622e:	d002      	beq.n	8006236 <_PrintInt+0x6e>
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d016      	beq.n	8006264 <_PrintInt+0x9c>
 8006236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006238:	f003 0301 	and.w	r3, r3, #1
 800623c:	2b00      	cmp	r3, #0
 800623e:	d111      	bne.n	8006264 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8006240:	6a3b      	ldr	r3, [r7, #32]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00e      	beq.n	8006264 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006246:	e006      	b.n	8006256 <_PrintInt+0x8e>
        FieldWidth--;
 8006248:	6a3b      	ldr	r3, [r7, #32]
 800624a:	3b01      	subs	r3, #1
 800624c:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800624e:	2120      	movs	r1, #32
 8006250:	68f8      	ldr	r0, [r7, #12]
 8006252:	f7ff fea7 	bl	8005fa4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006256:	6a3b      	ldr	r3, [r7, #32]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d003      	beq.n	8006264 <_PrintInt+0x9c>
 800625c:	697a      	ldr	r2, [r7, #20]
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	429a      	cmp	r2, r3
 8006262:	d3f1      	bcc.n	8006248 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2b00      	cmp	r3, #0
 8006268:	da07      	bge.n	800627a <_PrintInt+0xb2>
    v = -v;
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	425b      	negs	r3, r3
 800626e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8006270:	212d      	movs	r1, #45	@ 0x2d
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f7ff fe96 	bl	8005fa4 <_StoreChar>
 8006278:	e008      	b.n	800628c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800627a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627c:	f003 0304 	and.w	r3, r3, #4
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8006284:	212b      	movs	r1, #43	@ 0x2b
 8006286:	68f8      	ldr	r0, [r7, #12]
 8006288:	f7ff fe8c 	bl	8005fa4 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 800628c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d019      	beq.n	80062ca <_PrintInt+0x102>
 8006296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	2b00      	cmp	r3, #0
 800629e:	d114      	bne.n	80062ca <_PrintInt+0x102>
 80062a0:	683b      	ldr	r3, [r7, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d111      	bne.n	80062ca <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d00e      	beq.n	80062ca <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80062ac:	e006      	b.n	80062bc <_PrintInt+0xf4>
        FieldWidth--;
 80062ae:	6a3b      	ldr	r3, [r7, #32]
 80062b0:	3b01      	subs	r3, #1
 80062b2:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80062b4:	2130      	movs	r1, #48	@ 0x30
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f7ff fe74 	bl	8005fa4 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80062bc:	6a3b      	ldr	r3, [r7, #32]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <_PrintInt+0x102>
 80062c2:	697a      	ldr	r2, [r7, #20]
 80062c4:	6a3b      	ldr	r3, [r7, #32]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d3f1      	bcc.n	80062ae <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80062ca:	68b9      	ldr	r1, [r7, #8]
 80062cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ce:	9301      	str	r3, [sp, #4]
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	9300      	str	r3, [sp, #0]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	68f8      	ldr	r0, [r7, #12]
 80062da:	f7ff fedf 	bl	800609c <_PrintUnsigned>
}
 80062de:	bf00      	nop
 80062e0:	3718      	adds	r7, #24
 80062e2:	46bd      	mov	sp, r7
 80062e4:	bd80      	pop	{r7, pc}
	...

080062e8 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b098      	sub	sp, #96	@ 0x60
 80062ec:	af02      	add	r7, sp, #8
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80062f4:	f3ef 8311 	mrs	r3, BASEPRI
 80062f8:	f04f 0120 	mov.w	r1, #32
 80062fc:	f381 8811 	msr	BASEPRI, r1
 8006300:	633b      	str	r3, [r7, #48]	@ 0x30
 8006302:	48b7      	ldr	r0, [pc, #732]	@ (80065e0 <_VPrintTarget+0x2f8>)
 8006304:	f7ff fc76 	bl	8005bf4 <_PreparePacket>
 8006308:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 800630a:	4bb5      	ldr	r3, [pc, #724]	@ (80065e0 <_VPrintTarget+0x2f8>)
 800630c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800630e:	2300      	movs	r3, #0
 8006310:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8006312:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006314:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8006316:	69fb      	ldr	r3, [r7, #28]
 8006318:	3301      	adds	r3, #1
 800631a:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	3301      	adds	r3, #1
 800632c:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800632e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006332:	2b00      	cmp	r3, #0
 8006334:	f000 8183 	beq.w	800663e <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8006338:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800633c:	2b25      	cmp	r3, #37	@ 0x25
 800633e:	f040 8170 	bne.w	8006622 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006342:	2300      	movs	r3, #0
 8006344:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8006346:	2301      	movs	r3, #1
 8006348:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8006352:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006356:	3b23      	subs	r3, #35	@ 0x23
 8006358:	2b0d      	cmp	r3, #13
 800635a:	d83f      	bhi.n	80063dc <_VPrintTarget+0xf4>
 800635c:	a201      	add	r2, pc, #4	@ (adr r2, 8006364 <_VPrintTarget+0x7c>)
 800635e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006362:	bf00      	nop
 8006364:	080063cd 	.word	0x080063cd
 8006368:	080063dd 	.word	0x080063dd
 800636c:	080063dd 	.word	0x080063dd
 8006370:	080063dd 	.word	0x080063dd
 8006374:	080063dd 	.word	0x080063dd
 8006378:	080063dd 	.word	0x080063dd
 800637c:	080063dd 	.word	0x080063dd
 8006380:	080063dd 	.word	0x080063dd
 8006384:	080063bd 	.word	0x080063bd
 8006388:	080063dd 	.word	0x080063dd
 800638c:	0800639d 	.word	0x0800639d
 8006390:	080063dd 	.word	0x080063dd
 8006394:	080063dd 	.word	0x080063dd
 8006398:	080063ad 	.word	0x080063ad
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 800639c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800639e:	f043 0301 	orr.w	r3, r3, #1
 80063a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	3301      	adds	r3, #1
 80063a8:	60fb      	str	r3, [r7, #12]
 80063aa:	e01a      	b.n	80063e2 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80063ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063ae:	f043 0302 	orr.w	r3, r3, #2
 80063b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	3301      	adds	r3, #1
 80063b8:	60fb      	str	r3, [r7, #12]
 80063ba:	e012      	b.n	80063e2 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80063bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063be:	f043 0304 	orr.w	r3, r3, #4
 80063c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	3301      	adds	r3, #1
 80063c8:	60fb      	str	r3, [r7, #12]
 80063ca:	e00a      	b.n	80063e2 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80063cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063ce:	f043 0308 	orr.w	r3, r3, #8
 80063d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	3301      	adds	r3, #1
 80063d8:	60fb      	str	r3, [r7, #12]
 80063da:	e002      	b.n	80063e2 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80063dc:	2300      	movs	r3, #0
 80063de:	653b      	str	r3, [r7, #80]	@ 0x50
 80063e0:	bf00      	nop
        }
      } while (v);
 80063e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1b0      	bne.n	800634a <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80063e8:	2300      	movs	r3, #0
 80063ea:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 80063f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80063f8:	2b2f      	cmp	r3, #47	@ 0x2f
 80063fa:	d912      	bls.n	8006422 <_VPrintTarget+0x13a>
 80063fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006400:	2b39      	cmp	r3, #57	@ 0x39
 8006402:	d80e      	bhi.n	8006422 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	3301      	adds	r3, #1
 8006408:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 800640a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800640c:	4613      	mov	r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4413      	add	r3, r2
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	461a      	mov	r2, r3
 8006416:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800641a:	4413      	add	r3, r2
 800641c:	3b30      	subs	r3, #48	@ 0x30
 800641e:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8006420:	e7e4      	b.n	80063ec <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006422:	2300      	movs	r3, #0
 8006424:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 800642e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006432:	2b2e      	cmp	r3, #46	@ 0x2e
 8006434:	d11d      	bne.n	8006472 <_VPrintTarget+0x18a>
        sFormat++;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	3301      	adds	r3, #1
 800643a:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	781b      	ldrb	r3, [r3, #0]
 8006440:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8006444:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006448:	2b2f      	cmp	r3, #47	@ 0x2f
 800644a:	d912      	bls.n	8006472 <_VPrintTarget+0x18a>
 800644c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006450:	2b39      	cmp	r3, #57	@ 0x39
 8006452:	d80e      	bhi.n	8006472 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	3301      	adds	r3, #1
 8006458:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800645a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800645c:	4613      	mov	r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	4413      	add	r3, r2
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	461a      	mov	r2, r3
 8006466:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800646a:	4413      	add	r3, r2
 800646c:	3b30      	subs	r3, #48	@ 0x30
 800646e:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8006470:	e7e4      	b.n	800643c <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800647a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800647e:	2b6c      	cmp	r3, #108	@ 0x6c
 8006480:	d003      	beq.n	800648a <_VPrintTarget+0x1a2>
 8006482:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006486:	2b68      	cmp	r3, #104	@ 0x68
 8006488:	d107      	bne.n	800649a <_VPrintTarget+0x1b2>
          c = *sFormat;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	781b      	ldrb	r3, [r3, #0]
 800648e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	3301      	adds	r3, #1
 8006496:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006498:	e7ef      	b.n	800647a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800649a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800649e:	2b25      	cmp	r3, #37	@ 0x25
 80064a0:	f000 80b3 	beq.w	800660a <_VPrintTarget+0x322>
 80064a4:	2b25      	cmp	r3, #37	@ 0x25
 80064a6:	f2c0 80b7 	blt.w	8006618 <_VPrintTarget+0x330>
 80064aa:	2b78      	cmp	r3, #120	@ 0x78
 80064ac:	f300 80b4 	bgt.w	8006618 <_VPrintTarget+0x330>
 80064b0:	2b58      	cmp	r3, #88	@ 0x58
 80064b2:	f2c0 80b1 	blt.w	8006618 <_VPrintTarget+0x330>
 80064b6:	3b58      	subs	r3, #88	@ 0x58
 80064b8:	2b20      	cmp	r3, #32
 80064ba:	f200 80ad 	bhi.w	8006618 <_VPrintTarget+0x330>
 80064be:	a201      	add	r2, pc, #4	@ (adr r2, 80064c4 <_VPrintTarget+0x1dc>)
 80064c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c4:	080065bb 	.word	0x080065bb
 80064c8:	08006619 	.word	0x08006619
 80064cc:	08006619 	.word	0x08006619
 80064d0:	08006619 	.word	0x08006619
 80064d4:	08006619 	.word	0x08006619
 80064d8:	08006619 	.word	0x08006619
 80064dc:	08006619 	.word	0x08006619
 80064e0:	08006619 	.word	0x08006619
 80064e4:	08006619 	.word	0x08006619
 80064e8:	08006619 	.word	0x08006619
 80064ec:	08006619 	.word	0x08006619
 80064f0:	08006549 	.word	0x08006549
 80064f4:	0800656f 	.word	0x0800656f
 80064f8:	08006619 	.word	0x08006619
 80064fc:	08006619 	.word	0x08006619
 8006500:	08006619 	.word	0x08006619
 8006504:	08006619 	.word	0x08006619
 8006508:	08006619 	.word	0x08006619
 800650c:	08006619 	.word	0x08006619
 8006510:	08006619 	.word	0x08006619
 8006514:	08006619 	.word	0x08006619
 8006518:	08006619 	.word	0x08006619
 800651c:	08006619 	.word	0x08006619
 8006520:	08006619 	.word	0x08006619
 8006524:	080065e5 	.word	0x080065e5
 8006528:	08006619 	.word	0x08006619
 800652c:	08006619 	.word	0x08006619
 8006530:	08006619 	.word	0x08006619
 8006534:	08006619 	.word	0x08006619
 8006538:	08006595 	.word	0x08006595
 800653c:	08006619 	.word	0x08006619
 8006540:	08006619 	.word	0x08006619
 8006544:	080065bb 	.word	0x080065bb
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	1d19      	adds	r1, r3, #4
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	6011      	str	r1, [r2, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8006556:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006558:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 800655c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8006560:	f107 0314 	add.w	r3, r7, #20
 8006564:	4611      	mov	r1, r2
 8006566:	4618      	mov	r0, r3
 8006568:	f7ff fd1c 	bl	8005fa4 <_StoreChar>
        break;
 800656c:	e055      	b.n	800661a <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	1d19      	adds	r1, r3, #4
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	6011      	str	r1, [r2, #0]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 800657c:	f107 0014 	add.w	r0, r7, #20
 8006580:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006582:	9301      	str	r3, [sp, #4]
 8006584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006586:	9300      	str	r3, [sp, #0]
 8006588:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800658a:	220a      	movs	r2, #10
 800658c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800658e:	f7ff fe1b 	bl	80061c8 <_PrintInt>
        break;
 8006592:	e042      	b.n	800661a <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	1d19      	adds	r1, r3, #4
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	6011      	str	r1, [r2, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80065a2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80065a4:	f107 0014 	add.w	r0, r7, #20
 80065a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065aa:	9301      	str	r3, [sp, #4]
 80065ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065b2:	220a      	movs	r2, #10
 80065b4:	f7ff fd72 	bl	800609c <_PrintUnsigned>
        break;
 80065b8:	e02f      	b.n	800661a <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	1d19      	adds	r1, r3, #4
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	6011      	str	r1, [r2, #0]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80065c8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80065ca:	f107 0014 	add.w	r0, r7, #20
 80065ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065d0:	9301      	str	r3, [sp, #4]
 80065d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065d4:	9300      	str	r3, [sp, #0]
 80065d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065d8:	2210      	movs	r2, #16
 80065da:	f7ff fd5f 	bl	800609c <_PrintUnsigned>
        break;
 80065de:	e01c      	b.n	800661a <_VPrintTarget+0x332>
 80065e0:	20014414 	.word	0x20014414
      case 'p':
        v = va_arg(*pParamList, int);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	1d19      	adds	r1, r3, #4
 80065ea:	687a      	ldr	r2, [r7, #4]
 80065ec:	6011      	str	r1, [r2, #0]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80065f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80065f4:	f107 0014 	add.w	r0, r7, #20
 80065f8:	2300      	movs	r3, #0
 80065fa:	9301      	str	r3, [sp, #4]
 80065fc:	2308      	movs	r3, #8
 80065fe:	9300      	str	r3, [sp, #0]
 8006600:	2308      	movs	r3, #8
 8006602:	2210      	movs	r2, #16
 8006604:	f7ff fd4a 	bl	800609c <_PrintUnsigned>
        break;
 8006608:	e007      	b.n	800661a <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 800660a:	f107 0314 	add.w	r3, r7, #20
 800660e:	2125      	movs	r1, #37	@ 0x25
 8006610:	4618      	mov	r0, r3
 8006612:	f7ff fcc7 	bl	8005fa4 <_StoreChar>
        break;
 8006616:	e000      	b.n	800661a <_VPrintTarget+0x332>
      default:
        break;
 8006618:	bf00      	nop
      }
      sFormat++;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	3301      	adds	r3, #1
 800661e:	60fb      	str	r3, [r7, #12]
 8006620:	e007      	b.n	8006632 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8006622:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006626:	f107 0314 	add.w	r3, r7, #20
 800662a:	4611      	mov	r1, r2
 800662c:	4618      	mov	r0, r3
 800662e:	f7ff fcb9 	bl	8005fa4 <_StoreChar>
    }
  } while (*sFormat);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	f47f ae72 	bne.w	8006320 <_VPrintTarget+0x38>
 800663c:	e000      	b.n	8006640 <_VPrintTarget+0x358>
      break;
 800663e:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006642:	2b00      	cmp	r3, #0
 8006644:	d041      	beq.n	80066ca <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8006646:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	b2d2      	uxtb	r2, r2
 800664c:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	643b      	str	r3, [r7, #64]	@ 0x40
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006656:	e00b      	b.n	8006670 <_VPrintTarget+0x388>
 8006658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800665a:	b2da      	uxtb	r2, r3
 800665c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800665e:	1c59      	adds	r1, r3, #1
 8006660:	6439      	str	r1, [r7, #64]	@ 0x40
 8006662:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006666:	b2d2      	uxtb	r2, r2
 8006668:	701a      	strb	r2, [r3, #0]
 800666a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800666c:	09db      	lsrs	r3, r3, #7
 800666e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006672:	2b7f      	cmp	r3, #127	@ 0x7f
 8006674:	d8f0      	bhi.n	8006658 <_VPrintTarget+0x370>
 8006676:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006678:	1c5a      	adds	r2, r3, #1
 800667a:	643a      	str	r2, [r7, #64]	@ 0x40
 800667c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800667e:	b2d2      	uxtb	r2, r2
 8006680:	701a      	strb	r2, [r3, #0]
 8006682:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006684:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006686:	69bb      	ldr	r3, [r7, #24]
 8006688:	63bb      	str	r3, [r7, #56]	@ 0x38
 800668a:	2300      	movs	r3, #0
 800668c:	637b      	str	r3, [r7, #52]	@ 0x34
 800668e:	e00b      	b.n	80066a8 <_VPrintTarget+0x3c0>
 8006690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006692:	b2da      	uxtb	r2, r3
 8006694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006696:	1c59      	adds	r1, r3, #1
 8006698:	63b9      	str	r1, [r7, #56]	@ 0x38
 800669a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800669e:	b2d2      	uxtb	r2, r2
 80066a0:	701a      	strb	r2, [r3, #0]
 80066a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066a4:	09db      	lsrs	r3, r3, #7
 80066a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80066a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80066ac:	d8f0      	bhi.n	8006690 <_VPrintTarget+0x3a8>
 80066ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b0:	1c5a      	adds	r2, r3, #1
 80066b2:	63ba      	str	r2, [r7, #56]	@ 0x38
 80066b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80066b6:	b2d2      	uxtb	r2, r2
 80066b8:	701a      	strb	r2, [r3, #0]
 80066ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066bc:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	69b9      	ldr	r1, [r7, #24]
 80066c2:	221a      	movs	r2, #26
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7ff fb85 	bl	8005dd4 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80066ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066cc:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80066d0:	bf00      	nop
 80066d2:	3758      	adds	r7, #88	@ 0x58
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80066d8:	b580      	push	{r7, lr}
 80066da:	b086      	sub	sp, #24
 80066dc:	af02      	add	r7, sp, #8
 80066de:	60f8      	str	r0, [r7, #12]
 80066e0:	60b9      	str	r1, [r7, #8]
 80066e2:	607a      	str	r2, [r7, #4]
 80066e4:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80066e6:	2300      	movs	r3, #0
 80066e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80066ec:	4917      	ldr	r1, [pc, #92]	@ (800674c <SEGGER_SYSVIEW_Init+0x74>)
 80066ee:	4818      	ldr	r0, [pc, #96]	@ (8006750 <SEGGER_SYSVIEW_Init+0x78>)
 80066f0:	f7ff f960 	bl	80059b4 <SEGGER_RTT_AllocUpBuffer>
 80066f4:	4603      	mov	r3, r0
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	4b16      	ldr	r3, [pc, #88]	@ (8006754 <SEGGER_SYSVIEW_Init+0x7c>)
 80066fa:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80066fc:	4b15      	ldr	r3, [pc, #84]	@ (8006754 <SEGGER_SYSVIEW_Init+0x7c>)
 80066fe:	785a      	ldrb	r2, [r3, #1]
 8006700:	4b14      	ldr	r3, [pc, #80]	@ (8006754 <SEGGER_SYSVIEW_Init+0x7c>)
 8006702:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006704:	4b13      	ldr	r3, [pc, #76]	@ (8006754 <SEGGER_SYSVIEW_Init+0x7c>)
 8006706:	7e1b      	ldrb	r3, [r3, #24]
 8006708:	4618      	mov	r0, r3
 800670a:	2300      	movs	r3, #0
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	2308      	movs	r3, #8
 8006710:	4a11      	ldr	r2, [pc, #68]	@ (8006758 <SEGGER_SYSVIEW_Init+0x80>)
 8006712:	490f      	ldr	r1, [pc, #60]	@ (8006750 <SEGGER_SYSVIEW_Init+0x78>)
 8006714:	f7ff f9d2 	bl	8005abc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006718:	4b0e      	ldr	r3, [pc, #56]	@ (8006754 <SEGGER_SYSVIEW_Init+0x7c>)
 800671a:	2200      	movs	r2, #0
 800671c:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800671e:	4b0f      	ldr	r3, [pc, #60]	@ (800675c <SEGGER_SYSVIEW_Init+0x84>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a0c      	ldr	r2, [pc, #48]	@ (8006754 <SEGGER_SYSVIEW_Init+0x7c>)
 8006724:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006726:	4a0b      	ldr	r2, [pc, #44]	@ (8006754 <SEGGER_SYSVIEW_Init+0x7c>)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800672c:	4a09      	ldr	r2, [pc, #36]	@ (8006754 <SEGGER_SYSVIEW_Init+0x7c>)
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006732:	4a08      	ldr	r2, [pc, #32]	@ (8006754 <SEGGER_SYSVIEW_Init+0x7c>)
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006738:	4a06      	ldr	r2, [pc, #24]	@ (8006754 <SEGGER_SYSVIEW_Init+0x7c>)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800673e:	4b05      	ldr	r3, [pc, #20]	@ (8006754 <SEGGER_SYSVIEW_Init+0x7c>)
 8006740:	2200      	movs	r2, #0
 8006742:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006744:	bf00      	nop
 8006746:	3710      	adds	r7, #16
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	200133dc 	.word	0x200133dc
 8006750:	080081bc 	.word	0x080081bc
 8006754:	200143e4 	.word	0x200143e4
 8006758:	200143dc 	.word	0x200143dc
 800675c:	e0001004 	.word	0xe0001004

08006760 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006768:	4a04      	ldr	r2, [pc, #16]	@ (800677c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6113      	str	r3, [r2, #16]
}
 800676e:	bf00      	nop
 8006770:	370c      	adds	r7, #12
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	200143e4 	.word	0x200143e4

08006780 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006780:	b580      	push	{r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006788:	f3ef 8311 	mrs	r3, BASEPRI
 800678c:	f04f 0120 	mov.w	r1, #32
 8006790:	f381 8811 	msr	BASEPRI, r1
 8006794:	60fb      	str	r3, [r7, #12]
 8006796:	4808      	ldr	r0, [pc, #32]	@ (80067b8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006798:	f7ff fa2c 	bl	8005bf4 <_PreparePacket>
 800679c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	68b9      	ldr	r1, [r7, #8]
 80067a2:	68b8      	ldr	r0, [r7, #8]
 80067a4:	f7ff fb16 	bl	8005dd4 <_SendPacket>
  RECORD_END();
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	f383 8811 	msr	BASEPRI, r3
}
 80067ae:	bf00      	nop
 80067b0:	3710      	adds	r7, #16
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	20014414 	.word	0x20014414

080067bc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80067bc:	b580      	push	{r7, lr}
 80067be:	b088      	sub	sp, #32
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80067c6:	f3ef 8311 	mrs	r3, BASEPRI
 80067ca:	f04f 0120 	mov.w	r1, #32
 80067ce:	f381 8811 	msr	BASEPRI, r1
 80067d2:	617b      	str	r3, [r7, #20]
 80067d4:	4816      	ldr	r0, [pc, #88]	@ (8006830 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80067d6:	f7ff fa0d 	bl	8005bf4 <_PreparePacket>
 80067da:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	61fb      	str	r3, [r7, #28]
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	61bb      	str	r3, [r7, #24]
 80067e8:	e00b      	b.n	8006802 <SEGGER_SYSVIEW_RecordU32+0x46>
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	1c59      	adds	r1, r3, #1
 80067f2:	61f9      	str	r1, [r7, #28]
 80067f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067f8:	b2d2      	uxtb	r2, r2
 80067fa:	701a      	strb	r2, [r3, #0]
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	09db      	lsrs	r3, r3, #7
 8006800:	61bb      	str	r3, [r7, #24]
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	2b7f      	cmp	r3, #127	@ 0x7f
 8006806:	d8f0      	bhi.n	80067ea <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	61fa      	str	r2, [r7, #28]
 800680e:	69ba      	ldr	r2, [r7, #24]
 8006810:	b2d2      	uxtb	r2, r2
 8006812:	701a      	strb	r2, [r3, #0]
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	68f9      	ldr	r1, [r7, #12]
 800681c:	6938      	ldr	r0, [r7, #16]
 800681e:	f7ff fad9 	bl	8005dd4 <_SendPacket>
  RECORD_END();
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f383 8811 	msr	BASEPRI, r3
}
 8006828:	bf00      	nop
 800682a:	3720      	adds	r7, #32
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	20014414 	.word	0x20014414

08006834 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006834:	b580      	push	{r7, lr}
 8006836:	b08c      	sub	sp, #48	@ 0x30
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006840:	f3ef 8311 	mrs	r3, BASEPRI
 8006844:	f04f 0120 	mov.w	r1, #32
 8006848:	f381 8811 	msr	BASEPRI, r1
 800684c:	61fb      	str	r3, [r7, #28]
 800684e:	4825      	ldr	r0, [pc, #148]	@ (80068e4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006850:	f7ff f9d0 	bl	8005bf4 <_PreparePacket>
 8006854:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006862:	e00b      	b.n	800687c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006866:	b2da      	uxtb	r2, r3
 8006868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800686a:	1c59      	adds	r1, r3, #1
 800686c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800686e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006872:	b2d2      	uxtb	r2, r2
 8006874:	701a      	strb	r2, [r3, #0]
 8006876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006878:	09db      	lsrs	r3, r3, #7
 800687a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800687c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800687e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006880:	d8f0      	bhi.n	8006864 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006884:	1c5a      	adds	r2, r3, #1
 8006886:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006888:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800688a:	b2d2      	uxtb	r2, r2
 800688c:	701a      	strb	r2, [r3, #0]
 800688e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006890:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	627b      	str	r3, [r7, #36]	@ 0x24
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	623b      	str	r3, [r7, #32]
 800689a:	e00b      	b.n	80068b4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800689c:	6a3b      	ldr	r3, [r7, #32]
 800689e:	b2da      	uxtb	r2, r3
 80068a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a2:	1c59      	adds	r1, r3, #1
 80068a4:	6279      	str	r1, [r7, #36]	@ 0x24
 80068a6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068aa:	b2d2      	uxtb	r2, r2
 80068ac:	701a      	strb	r2, [r3, #0]
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	09db      	lsrs	r3, r3, #7
 80068b2:	623b      	str	r3, [r7, #32]
 80068b4:	6a3b      	ldr	r3, [r7, #32]
 80068b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80068b8:	d8f0      	bhi.n	800689c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80068ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068bc:	1c5a      	adds	r2, r3, #1
 80068be:	627a      	str	r2, [r7, #36]	@ 0x24
 80068c0:	6a3a      	ldr	r2, [r7, #32]
 80068c2:	b2d2      	uxtb	r2, r2
 80068c4:	701a      	strb	r2, [r3, #0]
 80068c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80068ca:	68fa      	ldr	r2, [r7, #12]
 80068cc:	6979      	ldr	r1, [r7, #20]
 80068ce:	69b8      	ldr	r0, [r7, #24]
 80068d0:	f7ff fa80 	bl	8005dd4 <_SendPacket>
  RECORD_END();
 80068d4:	69fb      	ldr	r3, [r7, #28]
 80068d6:	f383 8811 	msr	BASEPRI, r3
}
 80068da:	bf00      	nop
 80068dc:	3730      	adds	r7, #48	@ 0x30
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop
 80068e4:	20014414 	.word	0x20014414

080068e8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b08e      	sub	sp, #56	@ 0x38
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
 80068f4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80068f6:	f3ef 8311 	mrs	r3, BASEPRI
 80068fa:	f04f 0120 	mov.w	r1, #32
 80068fe:	f381 8811 	msr	BASEPRI, r1
 8006902:	61fb      	str	r3, [r7, #28]
 8006904:	4832      	ldr	r0, [pc, #200]	@ (80069d0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006906:	f7ff f975 	bl	8005bf4 <_PreparePacket>
 800690a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	637b      	str	r3, [r7, #52]	@ 0x34
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	633b      	str	r3, [r7, #48]	@ 0x30
 8006918:	e00b      	b.n	8006932 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800691a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800691c:	b2da      	uxtb	r2, r3
 800691e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006920:	1c59      	adds	r1, r3, #1
 8006922:	6379      	str	r1, [r7, #52]	@ 0x34
 8006924:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006928:	b2d2      	uxtb	r2, r2
 800692a:	701a      	strb	r2, [r3, #0]
 800692c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692e:	09db      	lsrs	r3, r3, #7
 8006930:	633b      	str	r3, [r7, #48]	@ 0x30
 8006932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006934:	2b7f      	cmp	r3, #127	@ 0x7f
 8006936:	d8f0      	bhi.n	800691a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	637a      	str	r2, [r7, #52]	@ 0x34
 800693e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006940:	b2d2      	uxtb	r2, r2
 8006942:	701a      	strb	r2, [r3, #0]
 8006944:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006946:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006950:	e00b      	b.n	800696a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006954:	b2da      	uxtb	r2, r3
 8006956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006958:	1c59      	adds	r1, r3, #1
 800695a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800695c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006960:	b2d2      	uxtb	r2, r2
 8006962:	701a      	strb	r2, [r3, #0]
 8006964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006966:	09db      	lsrs	r3, r3, #7
 8006968:	62bb      	str	r3, [r7, #40]	@ 0x28
 800696a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800696c:	2b7f      	cmp	r3, #127	@ 0x7f
 800696e:	d8f0      	bhi.n	8006952 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006972:	1c5a      	adds	r2, r3, #1
 8006974:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006976:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006978:	b2d2      	uxtb	r2, r2
 800697a:	701a      	strb	r2, [r3, #0]
 800697c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800697e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	627b      	str	r3, [r7, #36]	@ 0x24
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	623b      	str	r3, [r7, #32]
 8006988:	e00b      	b.n	80069a2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	b2da      	uxtb	r2, r3
 800698e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006990:	1c59      	adds	r1, r3, #1
 8006992:	6279      	str	r1, [r7, #36]	@ 0x24
 8006994:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006998:	b2d2      	uxtb	r2, r2
 800699a:	701a      	strb	r2, [r3, #0]
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	09db      	lsrs	r3, r3, #7
 80069a0:	623b      	str	r3, [r7, #32]
 80069a2:	6a3b      	ldr	r3, [r7, #32]
 80069a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80069a6:	d8f0      	bhi.n	800698a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80069a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069aa:	1c5a      	adds	r2, r3, #1
 80069ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80069ae:	6a3a      	ldr	r2, [r7, #32]
 80069b0:	b2d2      	uxtb	r2, r2
 80069b2:	701a      	strb	r2, [r3, #0]
 80069b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	6979      	ldr	r1, [r7, #20]
 80069bc:	69b8      	ldr	r0, [r7, #24]
 80069be:	f7ff fa09 	bl	8005dd4 <_SendPacket>
  RECORD_END();
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	f383 8811 	msr	BASEPRI, r3
}
 80069c8:	bf00      	nop
 80069ca:	3738      	adds	r7, #56	@ 0x38
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	20014414 	.word	0x20014414

080069d4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b090      	sub	sp, #64	@ 0x40
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	607a      	str	r2, [r7, #4]
 80069e0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80069e2:	f3ef 8311 	mrs	r3, BASEPRI
 80069e6:	f04f 0120 	mov.w	r1, #32
 80069ea:	f381 8811 	msr	BASEPRI, r1
 80069ee:	61fb      	str	r3, [r7, #28]
 80069f0:	4840      	ldr	r0, [pc, #256]	@ (8006af4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80069f2:	f7ff f8ff 	bl	8005bf4 <_PreparePacket>
 80069f6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a04:	e00b      	b.n	8006a1e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006a06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a08:	b2da      	uxtb	r2, r3
 8006a0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a0c:	1c59      	adds	r1, r3, #1
 8006a0e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006a10:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a14:	b2d2      	uxtb	r2, r2
 8006a16:	701a      	strb	r2, [r3, #0]
 8006a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a1a:	09db      	lsrs	r3, r3, #7
 8006a1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a20:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a22:	d8f0      	bhi.n	8006a06 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006a24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a26:	1c5a      	adds	r2, r3, #1
 8006a28:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006a2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006a2c:	b2d2      	uxtb	r2, r2
 8006a2e:	701a      	strb	r2, [r3, #0]
 8006a30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a32:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a3c:	e00b      	b.n	8006a56 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a40:	b2da      	uxtb	r2, r3
 8006a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a44:	1c59      	adds	r1, r3, #1
 8006a46:	6379      	str	r1, [r7, #52]	@ 0x34
 8006a48:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a4c:	b2d2      	uxtb	r2, r2
 8006a4e:	701a      	strb	r2, [r3, #0]
 8006a50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a52:	09db      	lsrs	r3, r3, #7
 8006a54:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a58:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a5a:	d8f0      	bhi.n	8006a3e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006a5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a5e:	1c5a      	adds	r2, r3, #1
 8006a60:	637a      	str	r2, [r7, #52]	@ 0x34
 8006a62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a64:	b2d2      	uxtb	r2, r2
 8006a66:	701a      	strb	r2, [r3, #0]
 8006a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a6a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a74:	e00b      	b.n	8006a8e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a78:	b2da      	uxtb	r2, r3
 8006a7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a7c:	1c59      	adds	r1, r3, #1
 8006a7e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006a80:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a84:	b2d2      	uxtb	r2, r2
 8006a86:	701a      	strb	r2, [r3, #0]
 8006a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a8a:	09db      	lsrs	r3, r3, #7
 8006a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a90:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a92:	d8f0      	bhi.n	8006a76 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a96:	1c5a      	adds	r2, r3, #1
 8006a98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a9c:	b2d2      	uxtb	r2, r2
 8006a9e:	701a      	strb	r2, [r3, #0]
 8006aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aa2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006aa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006aaa:	623b      	str	r3, [r7, #32]
 8006aac:	e00b      	b.n	8006ac6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006aae:	6a3b      	ldr	r3, [r7, #32]
 8006ab0:	b2da      	uxtb	r2, r3
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab4:	1c59      	adds	r1, r3, #1
 8006ab6:	6279      	str	r1, [r7, #36]	@ 0x24
 8006ab8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006abc:	b2d2      	uxtb	r2, r2
 8006abe:	701a      	strb	r2, [r3, #0]
 8006ac0:	6a3b      	ldr	r3, [r7, #32]
 8006ac2:	09db      	lsrs	r3, r3, #7
 8006ac4:	623b      	str	r3, [r7, #32]
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	2b7f      	cmp	r3, #127	@ 0x7f
 8006aca:	d8f0      	bhi.n	8006aae <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ace:	1c5a      	adds	r2, r3, #1
 8006ad0:	627a      	str	r2, [r7, #36]	@ 0x24
 8006ad2:	6a3a      	ldr	r2, [r7, #32]
 8006ad4:	b2d2      	uxtb	r2, r2
 8006ad6:	701a      	strb	r2, [r3, #0]
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ada:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	6979      	ldr	r1, [r7, #20]
 8006ae0:	69b8      	ldr	r0, [r7, #24]
 8006ae2:	f7ff f977 	bl	8005dd4 <_SendPacket>
  RECORD_END();
 8006ae6:	69fb      	ldr	r3, [r7, #28]
 8006ae8:	f383 8811 	msr	BASEPRI, r3
}
 8006aec:	bf00      	nop
 8006aee:	3740      	adds	r7, #64	@ 0x40
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	20014414 	.word	0x20014414

08006af8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b08c      	sub	sp, #48	@ 0x30
 8006afc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006afe:	4b59      	ldr	r3, [pc, #356]	@ (8006c64 <SEGGER_SYSVIEW_Start+0x16c>)
 8006b00:	2201      	movs	r2, #1
 8006b02:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006b04:	f3ef 8311 	mrs	r3, BASEPRI
 8006b08:	f04f 0120 	mov.w	r1, #32
 8006b0c:	f381 8811 	msr	BASEPRI, r1
 8006b10:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006b12:	4b54      	ldr	r3, [pc, #336]	@ (8006c64 <SEGGER_SYSVIEW_Start+0x16c>)
 8006b14:	785b      	ldrb	r3, [r3, #1]
 8006b16:	220a      	movs	r2, #10
 8006b18:	4953      	ldr	r1, [pc, #332]	@ (8006c68 <SEGGER_SYSVIEW_Start+0x170>)
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f7f9 fb78 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 8006b26:	f7fe fc19 	bl	800535c <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006b2a:	200a      	movs	r0, #10
 8006b2c:	f7ff fe28 	bl	8006780 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b30:	f3ef 8311 	mrs	r3, BASEPRI
 8006b34:	f04f 0120 	mov.w	r1, #32
 8006b38:	f381 8811 	msr	BASEPRI, r1
 8006b3c:	60bb      	str	r3, [r7, #8]
 8006b3e:	484b      	ldr	r0, [pc, #300]	@ (8006c6c <SEGGER_SYSVIEW_Start+0x174>)
 8006b40:	f7ff f858 	bl	8005bf4 <_PreparePacket>
 8006b44:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b4e:	4b45      	ldr	r3, [pc, #276]	@ (8006c64 <SEGGER_SYSVIEW_Start+0x16c>)
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b54:	e00b      	b.n	8006b6e <SEGGER_SYSVIEW_Start+0x76>
 8006b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b58:	b2da      	uxtb	r2, r3
 8006b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b5c:	1c59      	adds	r1, r3, #1
 8006b5e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006b60:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b64:	b2d2      	uxtb	r2, r2
 8006b66:	701a      	strb	r2, [r3, #0]
 8006b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b6a:	09db      	lsrs	r3, r3, #7
 8006b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b70:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b72:	d8f0      	bhi.n	8006b56 <SEGGER_SYSVIEW_Start+0x5e>
 8006b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b76:	1c5a      	adds	r2, r3, #1
 8006b78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b7c:	b2d2      	uxtb	r2, r2
 8006b7e:	701a      	strb	r2, [r3, #0]
 8006b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b82:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b88:	4b36      	ldr	r3, [pc, #216]	@ (8006c64 <SEGGER_SYSVIEW_Start+0x16c>)
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	623b      	str	r3, [r7, #32]
 8006b8e:	e00b      	b.n	8006ba8 <SEGGER_SYSVIEW_Start+0xb0>
 8006b90:	6a3b      	ldr	r3, [r7, #32]
 8006b92:	b2da      	uxtb	r2, r3
 8006b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b96:	1c59      	adds	r1, r3, #1
 8006b98:	6279      	str	r1, [r7, #36]	@ 0x24
 8006b9a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b9e:	b2d2      	uxtb	r2, r2
 8006ba0:	701a      	strb	r2, [r3, #0]
 8006ba2:	6a3b      	ldr	r3, [r7, #32]
 8006ba4:	09db      	lsrs	r3, r3, #7
 8006ba6:	623b      	str	r3, [r7, #32]
 8006ba8:	6a3b      	ldr	r3, [r7, #32]
 8006baa:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bac:	d8f0      	bhi.n	8006b90 <SEGGER_SYSVIEW_Start+0x98>
 8006bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb0:	1c5a      	adds	r2, r3, #1
 8006bb2:	627a      	str	r2, [r7, #36]	@ 0x24
 8006bb4:	6a3a      	ldr	r2, [r7, #32]
 8006bb6:	b2d2      	uxtb	r2, r2
 8006bb8:	701a      	strb	r2, [r3, #0]
 8006bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bbc:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	61fb      	str	r3, [r7, #28]
 8006bc2:	4b28      	ldr	r3, [pc, #160]	@ (8006c64 <SEGGER_SYSVIEW_Start+0x16c>)
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	61bb      	str	r3, [r7, #24]
 8006bc8:	e00b      	b.n	8006be2 <SEGGER_SYSVIEW_Start+0xea>
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	b2da      	uxtb	r2, r3
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	1c59      	adds	r1, r3, #1
 8006bd2:	61f9      	str	r1, [r7, #28]
 8006bd4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006bd8:	b2d2      	uxtb	r2, r2
 8006bda:	701a      	strb	r2, [r3, #0]
 8006bdc:	69bb      	ldr	r3, [r7, #24]
 8006bde:	09db      	lsrs	r3, r3, #7
 8006be0:	61bb      	str	r3, [r7, #24]
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006be6:	d8f0      	bhi.n	8006bca <SEGGER_SYSVIEW_Start+0xd2>
 8006be8:	69fb      	ldr	r3, [r7, #28]
 8006bea:	1c5a      	adds	r2, r3, #1
 8006bec:	61fa      	str	r2, [r7, #28]
 8006bee:	69ba      	ldr	r2, [r7, #24]
 8006bf0:	b2d2      	uxtb	r2, r2
 8006bf2:	701a      	strb	r2, [r3, #0]
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	617b      	str	r3, [r7, #20]
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	613b      	str	r3, [r7, #16]
 8006c00:	e00b      	b.n	8006c1a <SEGGER_SYSVIEW_Start+0x122>
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	1c59      	adds	r1, r3, #1
 8006c0a:	6179      	str	r1, [r7, #20]
 8006c0c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c10:	b2d2      	uxtb	r2, r2
 8006c12:	701a      	strb	r2, [r3, #0]
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	09db      	lsrs	r3, r3, #7
 8006c18:	613b      	str	r3, [r7, #16]
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c1e:	d8f0      	bhi.n	8006c02 <SEGGER_SYSVIEW_Start+0x10a>
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	1c5a      	adds	r2, r3, #1
 8006c24:	617a      	str	r2, [r7, #20]
 8006c26:	693a      	ldr	r2, [r7, #16]
 8006c28:	b2d2      	uxtb	r2, r2
 8006c2a:	701a      	strb	r2, [r3, #0]
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006c30:	2218      	movs	r2, #24
 8006c32:	6839      	ldr	r1, [r7, #0]
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f7ff f8cd 	bl	8005dd4 <_SendPacket>
      RECORD_END();
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006c40:	4b08      	ldr	r3, [pc, #32]	@ (8006c64 <SEGGER_SYSVIEW_Start+0x16c>)
 8006c42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d002      	beq.n	8006c4e <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006c48:	4b06      	ldr	r3, [pc, #24]	@ (8006c64 <SEGGER_SYSVIEW_Start+0x16c>)
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006c4e:	f000 f9eb 	bl	8007028 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006c52:	f000 f9b1 	bl	8006fb8 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006c56:	f000 fc83 	bl	8007560 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006c5a:	bf00      	nop
 8006c5c:	3730      	adds	r7, #48	@ 0x30
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
 8006c62:	bf00      	nop
 8006c64:	200143e4 	.word	0x200143e4
 8006c68:	08008200 	.word	0x08008200
 8006c6c:	20014414 	.word	0x20014414

08006c70 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b082      	sub	sp, #8
 8006c74:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006c76:	f3ef 8311 	mrs	r3, BASEPRI
 8006c7a:	f04f 0120 	mov.w	r1, #32
 8006c7e:	f381 8811 	msr	BASEPRI, r1
 8006c82:	607b      	str	r3, [r7, #4]
 8006c84:	480b      	ldr	r0, [pc, #44]	@ (8006cb4 <SEGGER_SYSVIEW_Stop+0x44>)
 8006c86:	f7fe ffb5 	bl	8005bf4 <_PreparePacket>
 8006c8a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006c8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006cb8 <SEGGER_SYSVIEW_Stop+0x48>)
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d007      	beq.n	8006ca4 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006c94:	220b      	movs	r2, #11
 8006c96:	6839      	ldr	r1, [r7, #0]
 8006c98:	6838      	ldr	r0, [r7, #0]
 8006c9a:	f7ff f89b 	bl	8005dd4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006c9e:	4b06      	ldr	r3, [pc, #24]	@ (8006cb8 <SEGGER_SYSVIEW_Stop+0x48>)
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f383 8811 	msr	BASEPRI, r3
}
 8006caa:	bf00      	nop
 8006cac:	3708      	adds	r7, #8
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	20014414 	.word	0x20014414
 8006cb8:	200143e4 	.word	0x200143e4

08006cbc <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b08c      	sub	sp, #48	@ 0x30
 8006cc0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006cc2:	f3ef 8311 	mrs	r3, BASEPRI
 8006cc6:	f04f 0120 	mov.w	r1, #32
 8006cca:	f381 8811 	msr	BASEPRI, r1
 8006cce:	60fb      	str	r3, [r7, #12]
 8006cd0:	4845      	ldr	r0, [pc, #276]	@ (8006de8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006cd2:	f7fe ff8f 	bl	8005bf4 <_PreparePacket>
 8006cd6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ce0:	4b42      	ldr	r3, [pc, #264]	@ (8006dec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ce6:	e00b      	b.n	8006d00 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cea:	b2da      	uxtb	r2, r3
 8006cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cee:	1c59      	adds	r1, r3, #1
 8006cf0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006cf2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cf6:	b2d2      	uxtb	r2, r2
 8006cf8:	701a      	strb	r2, [r3, #0]
 8006cfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cfc:	09db      	lsrs	r3, r3, #7
 8006cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d02:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d04:	d8f0      	bhi.n	8006ce8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d08:	1c5a      	adds	r2, r3, #1
 8006d0a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d0c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d0e:	b2d2      	uxtb	r2, r2
 8006d10:	701a      	strb	r2, [r3, #0]
 8006d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d14:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d1a:	4b34      	ldr	r3, [pc, #208]	@ (8006dec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006d1c:	689b      	ldr	r3, [r3, #8]
 8006d1e:	623b      	str	r3, [r7, #32]
 8006d20:	e00b      	b.n	8006d3a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006d22:	6a3b      	ldr	r3, [r7, #32]
 8006d24:	b2da      	uxtb	r2, r3
 8006d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d28:	1c59      	adds	r1, r3, #1
 8006d2a:	6279      	str	r1, [r7, #36]	@ 0x24
 8006d2c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d30:	b2d2      	uxtb	r2, r2
 8006d32:	701a      	strb	r2, [r3, #0]
 8006d34:	6a3b      	ldr	r3, [r7, #32]
 8006d36:	09db      	lsrs	r3, r3, #7
 8006d38:	623b      	str	r3, [r7, #32]
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d3e:	d8f0      	bhi.n	8006d22 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d42:	1c5a      	adds	r2, r3, #1
 8006d44:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d46:	6a3a      	ldr	r2, [r7, #32]
 8006d48:	b2d2      	uxtb	r2, r2
 8006d4a:	701a      	strb	r2, [r3, #0]
 8006d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d4e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	61fb      	str	r3, [r7, #28]
 8006d54:	4b25      	ldr	r3, [pc, #148]	@ (8006dec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	61bb      	str	r3, [r7, #24]
 8006d5a:	e00b      	b.n	8006d74 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	b2da      	uxtb	r2, r3
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	1c59      	adds	r1, r3, #1
 8006d64:	61f9      	str	r1, [r7, #28]
 8006d66:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d6a:	b2d2      	uxtb	r2, r2
 8006d6c:	701a      	strb	r2, [r3, #0]
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	09db      	lsrs	r3, r3, #7
 8006d72:	61bb      	str	r3, [r7, #24]
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d78:	d8f0      	bhi.n	8006d5c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	1c5a      	adds	r2, r3, #1
 8006d7e:	61fa      	str	r2, [r7, #28]
 8006d80:	69ba      	ldr	r2, [r7, #24]
 8006d82:	b2d2      	uxtb	r2, r2
 8006d84:	701a      	strb	r2, [r3, #0]
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	617b      	str	r3, [r7, #20]
 8006d8e:	2300      	movs	r3, #0
 8006d90:	613b      	str	r3, [r7, #16]
 8006d92:	e00b      	b.n	8006dac <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	b2da      	uxtb	r2, r3
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	1c59      	adds	r1, r3, #1
 8006d9c:	6179      	str	r1, [r7, #20]
 8006d9e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006da2:	b2d2      	uxtb	r2, r2
 8006da4:	701a      	strb	r2, [r3, #0]
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	09db      	lsrs	r3, r3, #7
 8006daa:	613b      	str	r3, [r7, #16]
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	2b7f      	cmp	r3, #127	@ 0x7f
 8006db0:	d8f0      	bhi.n	8006d94 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	1c5a      	adds	r2, r3, #1
 8006db6:	617a      	str	r2, [r7, #20]
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	b2d2      	uxtb	r2, r2
 8006dbc:	701a      	strb	r2, [r3, #0]
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006dc2:	2218      	movs	r2, #24
 8006dc4:	6879      	ldr	r1, [r7, #4]
 8006dc6:	68b8      	ldr	r0, [r7, #8]
 8006dc8:	f7ff f804 	bl	8005dd4 <_SendPacket>
  RECORD_END();
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006dd2:	4b06      	ldr	r3, [pc, #24]	@ (8006dec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d002      	beq.n	8006de0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006dda:	4b04      	ldr	r3, [pc, #16]	@ (8006dec <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dde:	4798      	blx	r3
  }
}
 8006de0:	bf00      	nop
 8006de2:	3730      	adds	r7, #48	@ 0x30
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	20014414 	.word	0x20014414
 8006dec:	200143e4 	.word	0x200143e4

08006df0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b092      	sub	sp, #72	@ 0x48
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006df8:	f3ef 8311 	mrs	r3, BASEPRI
 8006dfc:	f04f 0120 	mov.w	r1, #32
 8006e00:	f381 8811 	msr	BASEPRI, r1
 8006e04:	617b      	str	r3, [r7, #20]
 8006e06:	486a      	ldr	r0, [pc, #424]	@ (8006fb0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006e08:	f7fe fef4 	bl	8005bf4 <_PreparePacket>
 8006e0c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681a      	ldr	r2, [r3, #0]
 8006e1a:	4b66      	ldr	r3, [pc, #408]	@ (8006fb4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e22:	e00b      	b.n	8006e3c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006e24:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e26:	b2da      	uxtb	r2, r3
 8006e28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e2a:	1c59      	adds	r1, r3, #1
 8006e2c:	6479      	str	r1, [r7, #68]	@ 0x44
 8006e2e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e32:	b2d2      	uxtb	r2, r2
 8006e34:	701a      	strb	r2, [r3, #0]
 8006e36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e38:	09db      	lsrs	r3, r3, #7
 8006e3a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e40:	d8f0      	bhi.n	8006e24 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006e42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e44:	1c5a      	adds	r2, r3, #1
 8006e46:	647a      	str	r2, [r7, #68]	@ 0x44
 8006e48:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e4a:	b2d2      	uxtb	r2, r2
 8006e4c:	701a      	strb	r2, [r3, #0]
 8006e4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e50:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e5c:	e00b      	b.n	8006e76 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e64:	1c59      	adds	r1, r3, #1
 8006e66:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006e68:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e6c:	b2d2      	uxtb	r2, r2
 8006e6e:	701a      	strb	r2, [r3, #0]
 8006e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e72:	09db      	lsrs	r3, r3, #7
 8006e74:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e78:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e7a:	d8f0      	bhi.n	8006e5e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006e7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e7e:	1c5a      	adds	r2, r3, #1
 8006e80:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006e82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e84:	b2d2      	uxtb	r2, r2
 8006e86:	701a      	strb	r2, [r3, #0]
 8006e88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e8a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	2220      	movs	r2, #32
 8006e92:	4619      	mov	r1, r3
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	f7fe fe5d 	bl	8005b54 <_EncodeStr>
 8006e9a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006e9c:	2209      	movs	r2, #9
 8006e9e:	68f9      	ldr	r1, [r7, #12]
 8006ea0:	6938      	ldr	r0, [r7, #16]
 8006ea2:	f7fe ff97 	bl	8005dd4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	637b      	str	r3, [r7, #52]	@ 0x34
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	4b40      	ldr	r3, [pc, #256]	@ (8006fb4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	1ad3      	subs	r3, r2, r3
 8006eb8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006eba:	e00b      	b.n	8006ed4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ebe:	b2da      	uxtb	r2, r3
 8006ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ec2:	1c59      	adds	r1, r3, #1
 8006ec4:	6379      	str	r1, [r7, #52]	@ 0x34
 8006ec6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006eca:	b2d2      	uxtb	r2, r2
 8006ecc:	701a      	strb	r2, [r3, #0]
 8006ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed0:	09db      	lsrs	r3, r3, #7
 8006ed2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ed8:	d8f0      	bhi.n	8006ebc <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006edc:	1c5a      	adds	r2, r3, #1
 8006ede:	637a      	str	r2, [r7, #52]	@ 0x34
 8006ee0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ee2:	b2d2      	uxtb	r2, r2
 8006ee4:	701a      	strb	r2, [r3, #0]
 8006ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ee8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ef4:	e00b      	b.n	8006f0e <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef8:	b2da      	uxtb	r2, r3
 8006efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006efc:	1c59      	adds	r1, r3, #1
 8006efe:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006f00:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f04:	b2d2      	uxtb	r2, r2
 8006f06:	701a      	strb	r2, [r3, #0]
 8006f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f0a:	09db      	lsrs	r3, r3, #7
 8006f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f10:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f12:	d8f0      	bhi.n	8006ef6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f16:	1c5a      	adds	r2, r3, #1
 8006f18:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006f1c:	b2d2      	uxtb	r2, r2
 8006f1e:	701a      	strb	r2, [r3, #0]
 8006f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f22:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	623b      	str	r3, [r7, #32]
 8006f2e:	e00b      	b.n	8006f48 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006f30:	6a3b      	ldr	r3, [r7, #32]
 8006f32:	b2da      	uxtb	r2, r3
 8006f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f36:	1c59      	adds	r1, r3, #1
 8006f38:	6279      	str	r1, [r7, #36]	@ 0x24
 8006f3a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f3e:	b2d2      	uxtb	r2, r2
 8006f40:	701a      	strb	r2, [r3, #0]
 8006f42:	6a3b      	ldr	r3, [r7, #32]
 8006f44:	09db      	lsrs	r3, r3, #7
 8006f46:	623b      	str	r3, [r7, #32]
 8006f48:	6a3b      	ldr	r3, [r7, #32]
 8006f4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f4c:	d8f0      	bhi.n	8006f30 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f50:	1c5a      	adds	r2, r3, #1
 8006f52:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f54:	6a3a      	ldr	r2, [r7, #32]
 8006f56:	b2d2      	uxtb	r2, r2
 8006f58:	701a      	strb	r2, [r3, #0]
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	61fb      	str	r3, [r7, #28]
 8006f62:	2300      	movs	r3, #0
 8006f64:	61bb      	str	r3, [r7, #24]
 8006f66:	e00b      	b.n	8006f80 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	b2da      	uxtb	r2, r3
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	1c59      	adds	r1, r3, #1
 8006f70:	61f9      	str	r1, [r7, #28]
 8006f72:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f76:	b2d2      	uxtb	r2, r2
 8006f78:	701a      	strb	r2, [r3, #0]
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	09db      	lsrs	r3, r3, #7
 8006f7e:	61bb      	str	r3, [r7, #24]
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f84:	d8f0      	bhi.n	8006f68 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	1c5a      	adds	r2, r3, #1
 8006f8a:	61fa      	str	r2, [r7, #28]
 8006f8c:	69ba      	ldr	r2, [r7, #24]
 8006f8e:	b2d2      	uxtb	r2, r2
 8006f90:	701a      	strb	r2, [r3, #0]
 8006f92:	69fb      	ldr	r3, [r7, #28]
 8006f94:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006f96:	2215      	movs	r2, #21
 8006f98:	68f9      	ldr	r1, [r7, #12]
 8006f9a:	6938      	ldr	r0, [r7, #16]
 8006f9c:	f7fe ff1a 	bl	8005dd4 <_SendPacket>
  RECORD_END();
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	f383 8811 	msr	BASEPRI, r3
}
 8006fa6:	bf00      	nop
 8006fa8:	3748      	adds	r7, #72	@ 0x48
 8006faa:	46bd      	mov	sp, r7
 8006fac:	bd80      	pop	{r7, pc}
 8006fae:	bf00      	nop
 8006fb0:	20014414 	.word	0x20014414
 8006fb4:	200143e4 	.word	0x200143e4

08006fb8 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006fbc:	4b07      	ldr	r3, [pc, #28]	@ (8006fdc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006fbe:	6a1b      	ldr	r3, [r3, #32]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d008      	beq.n	8006fd6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006fc4:	4b05      	ldr	r3, [pc, #20]	@ (8006fdc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006fc6:	6a1b      	ldr	r3, [r3, #32]
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d003      	beq.n	8006fd6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006fce:	4b03      	ldr	r3, [pc, #12]	@ (8006fdc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	4798      	blx	r3
  }
}
 8006fd6:	bf00      	nop
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	200143e4 	.word	0x200143e4

08006fe0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006fe8:	f3ef 8311 	mrs	r3, BASEPRI
 8006fec:	f04f 0120 	mov.w	r1, #32
 8006ff0:	f381 8811 	msr	BASEPRI, r1
 8006ff4:	617b      	str	r3, [r7, #20]
 8006ff6:	480b      	ldr	r0, [pc, #44]	@ (8007024 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006ff8:	f7fe fdfc 	bl	8005bf4 <_PreparePacket>
 8006ffc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ffe:	2280      	movs	r2, #128	@ 0x80
 8007000:	6879      	ldr	r1, [r7, #4]
 8007002:	6938      	ldr	r0, [r7, #16]
 8007004:	f7fe fda6 	bl	8005b54 <_EncodeStr>
 8007008:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800700a:	220e      	movs	r2, #14
 800700c:	68f9      	ldr	r1, [r7, #12]
 800700e:	6938      	ldr	r0, [r7, #16]
 8007010:	f7fe fee0 	bl	8005dd4 <_SendPacket>
  RECORD_END();
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	f383 8811 	msr	BASEPRI, r3
}
 800701a:	bf00      	nop
 800701c:	3718      	adds	r7, #24
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	20014414 	.word	0x20014414

08007028 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007028:	b590      	push	{r4, r7, lr}
 800702a:	b083      	sub	sp, #12
 800702c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800702e:	4b15      	ldr	r3, [pc, #84]	@ (8007084 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007030:	6a1b      	ldr	r3, [r3, #32]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d01a      	beq.n	800706c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8007036:	4b13      	ldr	r3, [pc, #76]	@ (8007084 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007038:	6a1b      	ldr	r3, [r3, #32]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d015      	beq.n	800706c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8007040:	4b10      	ldr	r3, [pc, #64]	@ (8007084 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007042:	6a1b      	ldr	r3, [r3, #32]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4798      	blx	r3
 8007048:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800704c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800704e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007052:	f04f 0200 	mov.w	r2, #0
 8007056:	f04f 0300 	mov.w	r3, #0
 800705a:	000a      	movs	r2, r1
 800705c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800705e:	4613      	mov	r3, r2
 8007060:	461a      	mov	r2, r3
 8007062:	4621      	mov	r1, r4
 8007064:	200d      	movs	r0, #13
 8007066:	f7ff fbe5 	bl	8006834 <SEGGER_SYSVIEW_RecordU32x2>
 800706a:	e006      	b.n	800707a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800706c:	4b06      	ldr	r3, [pc, #24]	@ (8007088 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4619      	mov	r1, r3
 8007072:	200c      	movs	r0, #12
 8007074:	f7ff fba2 	bl	80067bc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007078:	bf00      	nop
 800707a:	bf00      	nop
 800707c:	370c      	adds	r7, #12
 800707e:	46bd      	mov	sp, r7
 8007080:	bd90      	pop	{r4, r7, pc}
 8007082:	bf00      	nop
 8007084:	200143e4 	.word	0x200143e4
 8007088:	e0001004 	.word	0xe0001004

0800708c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800708c:	b580      	push	{r7, lr}
 800708e:	b086      	sub	sp, #24
 8007090:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007092:	f3ef 8311 	mrs	r3, BASEPRI
 8007096:	f04f 0120 	mov.w	r1, #32
 800709a:	f381 8811 	msr	BASEPRI, r1
 800709e:	60fb      	str	r3, [r7, #12]
 80070a0:	4819      	ldr	r0, [pc, #100]	@ (8007108 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80070a2:	f7fe fda7 	bl	8005bf4 <_PreparePacket>
 80070a6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80070ac:	4b17      	ldr	r3, [pc, #92]	@ (800710c <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070b4:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	617b      	str	r3, [r7, #20]
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	613b      	str	r3, [r7, #16]
 80070be:	e00b      	b.n	80070d8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	b2da      	uxtb	r2, r3
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	1c59      	adds	r1, r3, #1
 80070c8:	6179      	str	r1, [r7, #20]
 80070ca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070ce:	b2d2      	uxtb	r2, r2
 80070d0:	701a      	strb	r2, [r3, #0]
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	09db      	lsrs	r3, r3, #7
 80070d6:	613b      	str	r3, [r7, #16]
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	2b7f      	cmp	r3, #127	@ 0x7f
 80070dc:	d8f0      	bhi.n	80070c0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	1c5a      	adds	r2, r3, #1
 80070e2:	617a      	str	r2, [r7, #20]
 80070e4:	693a      	ldr	r2, [r7, #16]
 80070e6:	b2d2      	uxtb	r2, r2
 80070e8:	701a      	strb	r2, [r3, #0]
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80070ee:	2202      	movs	r2, #2
 80070f0:	6879      	ldr	r1, [r7, #4]
 80070f2:	68b8      	ldr	r0, [r7, #8]
 80070f4:	f7fe fe6e 	bl	8005dd4 <_SendPacket>
  RECORD_END();
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f383 8811 	msr	BASEPRI, r3
}
 80070fe:	bf00      	nop
 8007100:	3718      	adds	r7, #24
 8007102:	46bd      	mov	sp, r7
 8007104:	bd80      	pop	{r7, pc}
 8007106:	bf00      	nop
 8007108:	20014414 	.word	0x20014414
 800710c:	e000ed04 	.word	0xe000ed04

08007110 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007116:	f3ef 8311 	mrs	r3, BASEPRI
 800711a:	f04f 0120 	mov.w	r1, #32
 800711e:	f381 8811 	msr	BASEPRI, r1
 8007122:	607b      	str	r3, [r7, #4]
 8007124:	4807      	ldr	r0, [pc, #28]	@ (8007144 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007126:	f7fe fd65 	bl	8005bf4 <_PreparePacket>
 800712a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800712c:	2203      	movs	r2, #3
 800712e:	6839      	ldr	r1, [r7, #0]
 8007130:	6838      	ldr	r0, [r7, #0]
 8007132:	f7fe fe4f 	bl	8005dd4 <_SendPacket>
  RECORD_END();
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	f383 8811 	msr	BASEPRI, r3
}
 800713c:	bf00      	nop
 800713e:	3708      	adds	r7, #8
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	20014414 	.word	0x20014414

08007148 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800714e:	f3ef 8311 	mrs	r3, BASEPRI
 8007152:	f04f 0120 	mov.w	r1, #32
 8007156:	f381 8811 	msr	BASEPRI, r1
 800715a:	607b      	str	r3, [r7, #4]
 800715c:	4807      	ldr	r0, [pc, #28]	@ (800717c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800715e:	f7fe fd49 	bl	8005bf4 <_PreparePacket>
 8007162:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007164:	2212      	movs	r2, #18
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	6838      	ldr	r0, [r7, #0]
 800716a:	f7fe fe33 	bl	8005dd4 <_SendPacket>
  RECORD_END();
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f383 8811 	msr	BASEPRI, r3
}
 8007174:	bf00      	nop
 8007176:	3708      	adds	r7, #8
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}
 800717c:	20014414 	.word	0x20014414

08007180 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007186:	f3ef 8311 	mrs	r3, BASEPRI
 800718a:	f04f 0120 	mov.w	r1, #32
 800718e:	f381 8811 	msr	BASEPRI, r1
 8007192:	607b      	str	r3, [r7, #4]
 8007194:	4807      	ldr	r0, [pc, #28]	@ (80071b4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8007196:	f7fe fd2d 	bl	8005bf4 <_PreparePacket>
 800719a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800719c:	2211      	movs	r2, #17
 800719e:	6839      	ldr	r1, [r7, #0]
 80071a0:	6838      	ldr	r0, [r7, #0]
 80071a2:	f7fe fe17 	bl	8005dd4 <_SendPacket>
  RECORD_END();
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f383 8811 	msr	BASEPRI, r3
}
 80071ac:	bf00      	nop
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	20014414 	.word	0x20014414

080071b8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b088      	sub	sp, #32
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80071c0:	f3ef 8311 	mrs	r3, BASEPRI
 80071c4:	f04f 0120 	mov.w	r1, #32
 80071c8:	f381 8811 	msr	BASEPRI, r1
 80071cc:	617b      	str	r3, [r7, #20]
 80071ce:	4819      	ldr	r0, [pc, #100]	@ (8007234 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80071d0:	f7fe fd10 	bl	8005bf4 <_PreparePacket>
 80071d4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80071da:	4b17      	ldr	r3, [pc, #92]	@ (8007238 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80071dc:	691b      	ldr	r3, [r3, #16]
 80071de:	687a      	ldr	r2, [r7, #4]
 80071e0:	1ad3      	subs	r3, r2, r3
 80071e2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	61fb      	str	r3, [r7, #28]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	61bb      	str	r3, [r7, #24]
 80071ec:	e00b      	b.n	8007206 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	b2da      	uxtb	r2, r3
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	1c59      	adds	r1, r3, #1
 80071f6:	61f9      	str	r1, [r7, #28]
 80071f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071fc:	b2d2      	uxtb	r2, r2
 80071fe:	701a      	strb	r2, [r3, #0]
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	09db      	lsrs	r3, r3, #7
 8007204:	61bb      	str	r3, [r7, #24]
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	2b7f      	cmp	r3, #127	@ 0x7f
 800720a:	d8f0      	bhi.n	80071ee <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	1c5a      	adds	r2, r3, #1
 8007210:	61fa      	str	r2, [r7, #28]
 8007212:	69ba      	ldr	r2, [r7, #24]
 8007214:	b2d2      	uxtb	r2, r2
 8007216:	701a      	strb	r2, [r3, #0]
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800721c:	2208      	movs	r2, #8
 800721e:	68f9      	ldr	r1, [r7, #12]
 8007220:	6938      	ldr	r0, [r7, #16]
 8007222:	f7fe fdd7 	bl	8005dd4 <_SendPacket>
  RECORD_END();
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f383 8811 	msr	BASEPRI, r3
}
 800722c:	bf00      	nop
 800722e:	3720      	adds	r7, #32
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	20014414 	.word	0x20014414
 8007238:	200143e4 	.word	0x200143e4

0800723c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800723c:	b580      	push	{r7, lr}
 800723e:	b088      	sub	sp, #32
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007244:	f3ef 8311 	mrs	r3, BASEPRI
 8007248:	f04f 0120 	mov.w	r1, #32
 800724c:	f381 8811 	msr	BASEPRI, r1
 8007250:	617b      	str	r3, [r7, #20]
 8007252:	4819      	ldr	r0, [pc, #100]	@ (80072b8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007254:	f7fe fcce 	bl	8005bf4 <_PreparePacket>
 8007258:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800725e:	4b17      	ldr	r3, [pc, #92]	@ (80072bc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	1ad3      	subs	r3, r2, r3
 8007266:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	61fb      	str	r3, [r7, #28]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	61bb      	str	r3, [r7, #24]
 8007270:	e00b      	b.n	800728a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	b2da      	uxtb	r2, r3
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	1c59      	adds	r1, r3, #1
 800727a:	61f9      	str	r1, [r7, #28]
 800727c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007280:	b2d2      	uxtb	r2, r2
 8007282:	701a      	strb	r2, [r3, #0]
 8007284:	69bb      	ldr	r3, [r7, #24]
 8007286:	09db      	lsrs	r3, r3, #7
 8007288:	61bb      	str	r3, [r7, #24]
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	2b7f      	cmp	r3, #127	@ 0x7f
 800728e:	d8f0      	bhi.n	8007272 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	1c5a      	adds	r2, r3, #1
 8007294:	61fa      	str	r2, [r7, #28]
 8007296:	69ba      	ldr	r2, [r7, #24]
 8007298:	b2d2      	uxtb	r2, r2
 800729a:	701a      	strb	r2, [r3, #0]
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80072a0:	2204      	movs	r2, #4
 80072a2:	68f9      	ldr	r1, [r7, #12]
 80072a4:	6938      	ldr	r0, [r7, #16]
 80072a6:	f7fe fd95 	bl	8005dd4 <_SendPacket>
  RECORD_END();
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f383 8811 	msr	BASEPRI, r3
}
 80072b0:	bf00      	nop
 80072b2:	3720      	adds	r7, #32
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	20014414 	.word	0x20014414
 80072bc:	200143e4 	.word	0x200143e4

080072c0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b088      	sub	sp, #32
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80072c8:	f3ef 8311 	mrs	r3, BASEPRI
 80072cc:	f04f 0120 	mov.w	r1, #32
 80072d0:	f381 8811 	msr	BASEPRI, r1
 80072d4:	617b      	str	r3, [r7, #20]
 80072d6:	4819      	ldr	r0, [pc, #100]	@ (800733c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80072d8:	f7fe fc8c 	bl	8005bf4 <_PreparePacket>
 80072dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80072e2:	4b17      	ldr	r3, [pc, #92]	@ (8007340 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	687a      	ldr	r2, [r7, #4]
 80072e8:	1ad3      	subs	r3, r2, r3
 80072ea:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	61fb      	str	r3, [r7, #28]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	61bb      	str	r3, [r7, #24]
 80072f4:	e00b      	b.n	800730e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	69fb      	ldr	r3, [r7, #28]
 80072fc:	1c59      	adds	r1, r3, #1
 80072fe:	61f9      	str	r1, [r7, #28]
 8007300:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007304:	b2d2      	uxtb	r2, r2
 8007306:	701a      	strb	r2, [r3, #0]
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	09db      	lsrs	r3, r3, #7
 800730c:	61bb      	str	r3, [r7, #24]
 800730e:	69bb      	ldr	r3, [r7, #24]
 8007310:	2b7f      	cmp	r3, #127	@ 0x7f
 8007312:	d8f0      	bhi.n	80072f6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	1c5a      	adds	r2, r3, #1
 8007318:	61fa      	str	r2, [r7, #28]
 800731a:	69ba      	ldr	r2, [r7, #24]
 800731c:	b2d2      	uxtb	r2, r2
 800731e:	701a      	strb	r2, [r3, #0]
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007324:	2206      	movs	r2, #6
 8007326:	68f9      	ldr	r1, [r7, #12]
 8007328:	6938      	ldr	r0, [r7, #16]
 800732a:	f7fe fd53 	bl	8005dd4 <_SendPacket>
  RECORD_END();
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	f383 8811 	msr	BASEPRI, r3
}
 8007334:	bf00      	nop
 8007336:	3720      	adds	r7, #32
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}
 800733c:	20014414 	.word	0x20014414
 8007340:	200143e4 	.word	0x200143e4

08007344 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8007344:	b580      	push	{r7, lr}
 8007346:	b08a      	sub	sp, #40	@ 0x28
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800734e:	f3ef 8311 	mrs	r3, BASEPRI
 8007352:	f04f 0120 	mov.w	r1, #32
 8007356:	f381 8811 	msr	BASEPRI, r1
 800735a:	617b      	str	r3, [r7, #20]
 800735c:	4827      	ldr	r0, [pc, #156]	@ (80073fc <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800735e:	f7fe fc49 	bl	8005bf4 <_PreparePacket>
 8007362:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007368:	4b25      	ldr	r3, [pc, #148]	@ (8007400 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	627b      	str	r3, [r7, #36]	@ 0x24
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	623b      	str	r3, [r7, #32]
 800737a:	e00b      	b.n	8007394 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800737c:	6a3b      	ldr	r3, [r7, #32]
 800737e:	b2da      	uxtb	r2, r3
 8007380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007382:	1c59      	adds	r1, r3, #1
 8007384:	6279      	str	r1, [r7, #36]	@ 0x24
 8007386:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800738a:	b2d2      	uxtb	r2, r2
 800738c:	701a      	strb	r2, [r3, #0]
 800738e:	6a3b      	ldr	r3, [r7, #32]
 8007390:	09db      	lsrs	r3, r3, #7
 8007392:	623b      	str	r3, [r7, #32]
 8007394:	6a3b      	ldr	r3, [r7, #32]
 8007396:	2b7f      	cmp	r3, #127	@ 0x7f
 8007398:	d8f0      	bhi.n	800737c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800739a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739c:	1c5a      	adds	r2, r3, #1
 800739e:	627a      	str	r2, [r7, #36]	@ 0x24
 80073a0:	6a3a      	ldr	r2, [r7, #32]
 80073a2:	b2d2      	uxtb	r2, r2
 80073a4:	701a      	strb	r2, [r3, #0]
 80073a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073a8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	61fb      	str	r3, [r7, #28]
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	61bb      	str	r3, [r7, #24]
 80073b2:	e00b      	b.n	80073cc <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	b2da      	uxtb	r2, r3
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	1c59      	adds	r1, r3, #1
 80073bc:	61f9      	str	r1, [r7, #28]
 80073be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80073c2:	b2d2      	uxtb	r2, r2
 80073c4:	701a      	strb	r2, [r3, #0]
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	09db      	lsrs	r3, r3, #7
 80073ca:	61bb      	str	r3, [r7, #24]
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80073d0:	d8f0      	bhi.n	80073b4 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	1c5a      	adds	r2, r3, #1
 80073d6:	61fa      	str	r2, [r7, #28]
 80073d8:	69ba      	ldr	r2, [r7, #24]
 80073da:	b2d2      	uxtb	r2, r2
 80073dc:	701a      	strb	r2, [r3, #0]
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80073e2:	2207      	movs	r2, #7
 80073e4:	68f9      	ldr	r1, [r7, #12]
 80073e6:	6938      	ldr	r0, [r7, #16]
 80073e8:	f7fe fcf4 	bl	8005dd4 <_SendPacket>
  RECORD_END();
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	f383 8811 	msr	BASEPRI, r3
}
 80073f2:	bf00      	nop
 80073f4:	3728      	adds	r7, #40	@ 0x28
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	20014414 	.word	0x20014414
 8007400:	200143e4 	.word	0x200143e4

08007404 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 800740c:	4b04      	ldr	r3, [pc, #16]	@ (8007420 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800740e:	691b      	ldr	r3, [r3, #16]
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	1ad3      	subs	r3, r2, r3
}
 8007414:	4618      	mov	r0, r3
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr
 8007420:	200143e4 	.word	0x200143e4

08007424 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007424:	b580      	push	{r7, lr}
 8007426:	b08c      	sub	sp, #48	@ 0x30
 8007428:	af00      	add	r7, sp, #0
 800742a:	4603      	mov	r3, r0
 800742c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800742e:	4b3b      	ldr	r3, [pc, #236]	@ (800751c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d06d      	beq.n	8007512 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8007436:	4b39      	ldr	r3, [pc, #228]	@ (800751c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800743c:	2300      	movs	r3, #0
 800743e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007440:	e008      	b.n	8007454 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8007448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800744a:	2b00      	cmp	r3, #0
 800744c:	d007      	beq.n	800745e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800744e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007450:	3301      	adds	r3, #1
 8007452:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007454:	79fb      	ldrb	r3, [r7, #7]
 8007456:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007458:	429a      	cmp	r2, r3
 800745a:	d3f2      	bcc.n	8007442 <SEGGER_SYSVIEW_SendModule+0x1e>
 800745c:	e000      	b.n	8007460 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800745e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007462:	2b00      	cmp	r3, #0
 8007464:	d055      	beq.n	8007512 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007466:	f3ef 8311 	mrs	r3, BASEPRI
 800746a:	f04f 0120 	mov.w	r1, #32
 800746e:	f381 8811 	msr	BASEPRI, r1
 8007472:	617b      	str	r3, [r7, #20]
 8007474:	482a      	ldr	r0, [pc, #168]	@ (8007520 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8007476:	f7fe fbbd 	bl	8005bf4 <_PreparePacket>
 800747a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	627b      	str	r3, [r7, #36]	@ 0x24
 8007484:	79fb      	ldrb	r3, [r7, #7]
 8007486:	623b      	str	r3, [r7, #32]
 8007488:	e00b      	b.n	80074a2 <SEGGER_SYSVIEW_SendModule+0x7e>
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	b2da      	uxtb	r2, r3
 800748e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007490:	1c59      	adds	r1, r3, #1
 8007492:	6279      	str	r1, [r7, #36]	@ 0x24
 8007494:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007498:	b2d2      	uxtb	r2, r2
 800749a:	701a      	strb	r2, [r3, #0]
 800749c:	6a3b      	ldr	r3, [r7, #32]
 800749e:	09db      	lsrs	r3, r3, #7
 80074a0:	623b      	str	r3, [r7, #32]
 80074a2:	6a3b      	ldr	r3, [r7, #32]
 80074a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80074a6:	d8f0      	bhi.n	800748a <SEGGER_SYSVIEW_SendModule+0x66>
 80074a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074aa:	1c5a      	adds	r2, r3, #1
 80074ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80074ae:	6a3a      	ldr	r2, [r7, #32]
 80074b0:	b2d2      	uxtb	r2, r2
 80074b2:	701a      	strb	r2, [r3, #0]
 80074b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	61fb      	str	r3, [r7, #28]
 80074bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	61bb      	str	r3, [r7, #24]
 80074c2:	e00b      	b.n	80074dc <SEGGER_SYSVIEW_SendModule+0xb8>
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	b2da      	uxtb	r2, r3
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	1c59      	adds	r1, r3, #1
 80074cc:	61f9      	str	r1, [r7, #28]
 80074ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80074d2:	b2d2      	uxtb	r2, r2
 80074d4:	701a      	strb	r2, [r3, #0]
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	09db      	lsrs	r3, r3, #7
 80074da:	61bb      	str	r3, [r7, #24]
 80074dc:	69bb      	ldr	r3, [r7, #24]
 80074de:	2b7f      	cmp	r3, #127	@ 0x7f
 80074e0:	d8f0      	bhi.n	80074c4 <SEGGER_SYSVIEW_SendModule+0xa0>
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	1c5a      	adds	r2, r3, #1
 80074e6:	61fa      	str	r2, [r7, #28]
 80074e8:	69ba      	ldr	r2, [r7, #24]
 80074ea:	b2d2      	uxtb	r2, r2
 80074ec:	701a      	strb	r2, [r3, #0]
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80074f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2280      	movs	r2, #128	@ 0x80
 80074f8:	4619      	mov	r1, r3
 80074fa:	68f8      	ldr	r0, [r7, #12]
 80074fc:	f7fe fb2a 	bl	8005b54 <_EncodeStr>
 8007500:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8007502:	2216      	movs	r2, #22
 8007504:	68f9      	ldr	r1, [r7, #12]
 8007506:	6938      	ldr	r0, [r7, #16]
 8007508:	f7fe fc64 	bl	8005dd4 <_SendPacket>
      RECORD_END();
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007512:	bf00      	nop
 8007514:	3730      	adds	r7, #48	@ 0x30
 8007516:	46bd      	mov	sp, r7
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	2001440c 	.word	0x2001440c
 8007520:	20014414 	.word	0x20014414

08007524 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007524:	b580      	push	{r7, lr}
 8007526:	b082      	sub	sp, #8
 8007528:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800752a:	4b0c      	ldr	r3, [pc, #48]	@ (800755c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d00f      	beq.n	8007552 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007532:	4b0a      	ldr	r3, [pc, #40]	@ (800755c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d002      	beq.n	8007546 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d1f2      	bne.n	8007538 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007552:	bf00      	nop
 8007554:	3708      	adds	r7, #8
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	2001440c 	.word	0x2001440c

08007560 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007560:	b580      	push	{r7, lr}
 8007562:	b086      	sub	sp, #24
 8007564:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007566:	f3ef 8311 	mrs	r3, BASEPRI
 800756a:	f04f 0120 	mov.w	r1, #32
 800756e:	f381 8811 	msr	BASEPRI, r1
 8007572:	60fb      	str	r3, [r7, #12]
 8007574:	4817      	ldr	r0, [pc, #92]	@ (80075d4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007576:	f7fe fb3d 	bl	8005bf4 <_PreparePacket>
 800757a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	617b      	str	r3, [r7, #20]
 8007584:	4b14      	ldr	r3, [pc, #80]	@ (80075d8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	613b      	str	r3, [r7, #16]
 800758a:	e00b      	b.n	80075a4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	b2da      	uxtb	r2, r3
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	1c59      	adds	r1, r3, #1
 8007594:	6179      	str	r1, [r7, #20]
 8007596:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800759a:	b2d2      	uxtb	r2, r2
 800759c:	701a      	strb	r2, [r3, #0]
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	09db      	lsrs	r3, r3, #7
 80075a2:	613b      	str	r3, [r7, #16]
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80075a8:	d8f0      	bhi.n	800758c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80075aa:	697b      	ldr	r3, [r7, #20]
 80075ac:	1c5a      	adds	r2, r3, #1
 80075ae:	617a      	str	r2, [r7, #20]
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	b2d2      	uxtb	r2, r2
 80075b4:	701a      	strb	r2, [r3, #0]
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80075ba:	221b      	movs	r2, #27
 80075bc:	6879      	ldr	r1, [r7, #4]
 80075be:	68b8      	ldr	r0, [r7, #8]
 80075c0:	f7fe fc08 	bl	8005dd4 <_SendPacket>
  RECORD_END();
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f383 8811 	msr	BASEPRI, r3
}
 80075ca:	bf00      	nop
 80075cc:	3718      	adds	r7, #24
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	20014414 	.word	0x20014414
 80075d8:	20014410 	.word	0x20014410

080075dc <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80075dc:	b40f      	push	{r0, r1, r2, r3}
 80075de:	b580      	push	{r7, lr}
 80075e0:	b082      	sub	sp, #8
 80075e2:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80075e4:	f107 0314 	add.w	r3, r7, #20
 80075e8:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80075ea:	1d3b      	adds	r3, r7, #4
 80075ec:	461a      	mov	r2, r3
 80075ee:	2100      	movs	r1, #0
 80075f0:	6938      	ldr	r0, [r7, #16]
 80075f2:	f7fe fe79 	bl	80062e8 <_VPrintTarget>
  va_end(ParamList);
}
 80075f6:	bf00      	nop
 80075f8:	3708      	adds	r7, #8
 80075fa:	46bd      	mov	sp, r7
 80075fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007600:	b004      	add	sp, #16
 8007602:	4770      	bx	lr

08007604 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007604:	b580      	push	{r7, lr}
 8007606:	b08a      	sub	sp, #40	@ 0x28
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800760c:	f3ef 8311 	mrs	r3, BASEPRI
 8007610:	f04f 0120 	mov.w	r1, #32
 8007614:	f381 8811 	msr	BASEPRI, r1
 8007618:	617b      	str	r3, [r7, #20]
 800761a:	4827      	ldr	r0, [pc, #156]	@ (80076b8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800761c:	f7fe faea 	bl	8005bf4 <_PreparePacket>
 8007620:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007622:	2280      	movs	r2, #128	@ 0x80
 8007624:	6879      	ldr	r1, [r7, #4]
 8007626:	6938      	ldr	r0, [r7, #16]
 8007628:	f7fe fa94 	bl	8005b54 <_EncodeStr>
 800762c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	627b      	str	r3, [r7, #36]	@ 0x24
 8007632:	2301      	movs	r3, #1
 8007634:	623b      	str	r3, [r7, #32]
 8007636:	e00b      	b.n	8007650 <SEGGER_SYSVIEW_Warn+0x4c>
 8007638:	6a3b      	ldr	r3, [r7, #32]
 800763a:	b2da      	uxtb	r2, r3
 800763c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763e:	1c59      	adds	r1, r3, #1
 8007640:	6279      	str	r1, [r7, #36]	@ 0x24
 8007642:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8007646:	b2d2      	uxtb	r2, r2
 8007648:	701a      	strb	r2, [r3, #0]
 800764a:	6a3b      	ldr	r3, [r7, #32]
 800764c:	09db      	lsrs	r3, r3, #7
 800764e:	623b      	str	r3, [r7, #32]
 8007650:	6a3b      	ldr	r3, [r7, #32]
 8007652:	2b7f      	cmp	r3, #127	@ 0x7f
 8007654:	d8f0      	bhi.n	8007638 <SEGGER_SYSVIEW_Warn+0x34>
 8007656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007658:	1c5a      	adds	r2, r3, #1
 800765a:	627a      	str	r2, [r7, #36]	@ 0x24
 800765c:	6a3a      	ldr	r2, [r7, #32]
 800765e:	b2d2      	uxtb	r2, r2
 8007660:	701a      	strb	r2, [r3, #0]
 8007662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007664:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	61fb      	str	r3, [r7, #28]
 800766a:	2300      	movs	r3, #0
 800766c:	61bb      	str	r3, [r7, #24]
 800766e:	e00b      	b.n	8007688 <SEGGER_SYSVIEW_Warn+0x84>
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	b2da      	uxtb	r2, r3
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	1c59      	adds	r1, r3, #1
 8007678:	61f9      	str	r1, [r7, #28]
 800767a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800767e:	b2d2      	uxtb	r2, r2
 8007680:	701a      	strb	r2, [r3, #0]
 8007682:	69bb      	ldr	r3, [r7, #24]
 8007684:	09db      	lsrs	r3, r3, #7
 8007686:	61bb      	str	r3, [r7, #24]
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	2b7f      	cmp	r3, #127	@ 0x7f
 800768c:	d8f0      	bhi.n	8007670 <SEGGER_SYSVIEW_Warn+0x6c>
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	1c5a      	adds	r2, r3, #1
 8007692:	61fa      	str	r2, [r7, #28]
 8007694:	69ba      	ldr	r2, [r7, #24]
 8007696:	b2d2      	uxtb	r2, r2
 8007698:	701a      	strb	r2, [r3, #0]
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800769e:	221a      	movs	r2, #26
 80076a0:	68f9      	ldr	r1, [r7, #12]
 80076a2:	6938      	ldr	r0, [r7, #16]
 80076a4:	f7fe fb96 	bl	8005dd4 <_SendPacket>
  RECORD_END();
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	f383 8811 	msr	BASEPRI, r3
}
 80076ae:	bf00      	nop
 80076b0:	3728      	adds	r7, #40	@ 0x28
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	20014414 	.word	0x20014414

080076bc <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80076bc:	b580      	push	{r7, lr}
 80076be:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80076c0:	4b13      	ldr	r3, [pc, #76]	@ (8007710 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80076c2:	7e1b      	ldrb	r3, [r3, #24]
 80076c4:	4619      	mov	r1, r3
 80076c6:	4a13      	ldr	r2, [pc, #76]	@ (8007714 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80076c8:	460b      	mov	r3, r1
 80076ca:	005b      	lsls	r3, r3, #1
 80076cc:	440b      	add	r3, r1
 80076ce:	00db      	lsls	r3, r3, #3
 80076d0:	4413      	add	r3, r2
 80076d2:	336c      	adds	r3, #108	@ 0x6c
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	4b0e      	ldr	r3, [pc, #56]	@ (8007710 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80076d8:	7e1b      	ldrb	r3, [r3, #24]
 80076da:	4618      	mov	r0, r3
 80076dc:	490d      	ldr	r1, [pc, #52]	@ (8007714 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80076de:	4603      	mov	r3, r0
 80076e0:	005b      	lsls	r3, r3, #1
 80076e2:	4403      	add	r3, r0
 80076e4:	00db      	lsls	r3, r3, #3
 80076e6:	440b      	add	r3, r1
 80076e8:	3370      	adds	r3, #112	@ 0x70
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d00b      	beq.n	8007708 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80076f0:	4b07      	ldr	r3, [pc, #28]	@ (8007710 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80076f2:	789b      	ldrb	r3, [r3, #2]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d107      	bne.n	8007708 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80076f8:	4b05      	ldr	r3, [pc, #20]	@ (8007710 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80076fa:	2201      	movs	r2, #1
 80076fc:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80076fe:	f7fe fa85 	bl	8005c0c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8007702:	4b03      	ldr	r3, [pc, #12]	@ (8007710 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007704:	2200      	movs	r2, #0
 8007706:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007708:	4b01      	ldr	r3, [pc, #4]	@ (8007710 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800770a:	781b      	ldrb	r3, [r3, #0]
}
 800770c:	4618      	mov	r0, r3
 800770e:	bd80      	pop	{r7, pc}
 8007710:	200143e4 	.word	0x200143e4
 8007714:	20012f24 	.word	0x20012f24

08007718 <sniprintf>:
 8007718:	b40c      	push	{r2, r3}
 800771a:	b530      	push	{r4, r5, lr}
 800771c:	4b18      	ldr	r3, [pc, #96]	@ (8007780 <sniprintf+0x68>)
 800771e:	1e0c      	subs	r4, r1, #0
 8007720:	681d      	ldr	r5, [r3, #0]
 8007722:	b09d      	sub	sp, #116	@ 0x74
 8007724:	da08      	bge.n	8007738 <sniprintf+0x20>
 8007726:	238b      	movs	r3, #139	@ 0x8b
 8007728:	602b      	str	r3, [r5, #0]
 800772a:	f04f 30ff 	mov.w	r0, #4294967295
 800772e:	b01d      	add	sp, #116	@ 0x74
 8007730:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007734:	b002      	add	sp, #8
 8007736:	4770      	bx	lr
 8007738:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800773c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007740:	f04f 0300 	mov.w	r3, #0
 8007744:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007746:	bf14      	ite	ne
 8007748:	f104 33ff 	addne.w	r3, r4, #4294967295
 800774c:	4623      	moveq	r3, r4
 800774e:	9304      	str	r3, [sp, #16]
 8007750:	9307      	str	r3, [sp, #28]
 8007752:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007756:	9002      	str	r0, [sp, #8]
 8007758:	9006      	str	r0, [sp, #24]
 800775a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800775e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007760:	ab21      	add	r3, sp, #132	@ 0x84
 8007762:	a902      	add	r1, sp, #8
 8007764:	4628      	mov	r0, r5
 8007766:	9301      	str	r3, [sp, #4]
 8007768:	f000 f9ac 	bl	8007ac4 <_svfiprintf_r>
 800776c:	1c43      	adds	r3, r0, #1
 800776e:	bfbc      	itt	lt
 8007770:	238b      	movlt	r3, #139	@ 0x8b
 8007772:	602b      	strlt	r3, [r5, #0]
 8007774:	2c00      	cmp	r4, #0
 8007776:	d0da      	beq.n	800772e <sniprintf+0x16>
 8007778:	9b02      	ldr	r3, [sp, #8]
 800777a:	2200      	movs	r2, #0
 800777c:	701a      	strb	r2, [r3, #0]
 800777e:	e7d6      	b.n	800772e <sniprintf+0x16>
 8007780:	20000018 	.word	0x20000018

08007784 <memcmp>:
 8007784:	b510      	push	{r4, lr}
 8007786:	3901      	subs	r1, #1
 8007788:	4402      	add	r2, r0
 800778a:	4290      	cmp	r0, r2
 800778c:	d101      	bne.n	8007792 <memcmp+0xe>
 800778e:	2000      	movs	r0, #0
 8007790:	e005      	b.n	800779e <memcmp+0x1a>
 8007792:	7803      	ldrb	r3, [r0, #0]
 8007794:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007798:	42a3      	cmp	r3, r4
 800779a:	d001      	beq.n	80077a0 <memcmp+0x1c>
 800779c:	1b18      	subs	r0, r3, r4
 800779e:	bd10      	pop	{r4, pc}
 80077a0:	3001      	adds	r0, #1
 80077a2:	e7f2      	b.n	800778a <memcmp+0x6>

080077a4 <memset>:
 80077a4:	4402      	add	r2, r0
 80077a6:	4603      	mov	r3, r0
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d100      	bne.n	80077ae <memset+0xa>
 80077ac:	4770      	bx	lr
 80077ae:	f803 1b01 	strb.w	r1, [r3], #1
 80077b2:	e7f9      	b.n	80077a8 <memset+0x4>

080077b4 <__libc_init_array>:
 80077b4:	b570      	push	{r4, r5, r6, lr}
 80077b6:	4d0d      	ldr	r5, [pc, #52]	@ (80077ec <__libc_init_array+0x38>)
 80077b8:	4c0d      	ldr	r4, [pc, #52]	@ (80077f0 <__libc_init_array+0x3c>)
 80077ba:	1b64      	subs	r4, r4, r5
 80077bc:	10a4      	asrs	r4, r4, #2
 80077be:	2600      	movs	r6, #0
 80077c0:	42a6      	cmp	r6, r4
 80077c2:	d109      	bne.n	80077d8 <__libc_init_array+0x24>
 80077c4:	4d0b      	ldr	r5, [pc, #44]	@ (80077f4 <__libc_init_array+0x40>)
 80077c6:	4c0c      	ldr	r4, [pc, #48]	@ (80077f8 <__libc_init_array+0x44>)
 80077c8:	f000 fc72 	bl	80080b0 <_init>
 80077cc:	1b64      	subs	r4, r4, r5
 80077ce:	10a4      	asrs	r4, r4, #2
 80077d0:	2600      	movs	r6, #0
 80077d2:	42a6      	cmp	r6, r4
 80077d4:	d105      	bne.n	80077e2 <__libc_init_array+0x2e>
 80077d6:	bd70      	pop	{r4, r5, r6, pc}
 80077d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80077dc:	4798      	blx	r3
 80077de:	3601      	adds	r6, #1
 80077e0:	e7ee      	b.n	80077c0 <__libc_init_array+0xc>
 80077e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80077e6:	4798      	blx	r3
 80077e8:	3601      	adds	r6, #1
 80077ea:	e7f2      	b.n	80077d2 <__libc_init_array+0x1e>
 80077ec:	08008258 	.word	0x08008258
 80077f0:	08008258 	.word	0x08008258
 80077f4:	08008258 	.word	0x08008258
 80077f8:	0800825c 	.word	0x0800825c

080077fc <__retarget_lock_acquire_recursive>:
 80077fc:	4770      	bx	lr

080077fe <__retarget_lock_release_recursive>:
 80077fe:	4770      	bx	lr

08007800 <memcpy>:
 8007800:	440a      	add	r2, r1
 8007802:	4291      	cmp	r1, r2
 8007804:	f100 33ff 	add.w	r3, r0, #4294967295
 8007808:	d100      	bne.n	800780c <memcpy+0xc>
 800780a:	4770      	bx	lr
 800780c:	b510      	push	{r4, lr}
 800780e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007812:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007816:	4291      	cmp	r1, r2
 8007818:	d1f9      	bne.n	800780e <memcpy+0xe>
 800781a:	bd10      	pop	{r4, pc}

0800781c <_free_r>:
 800781c:	b538      	push	{r3, r4, r5, lr}
 800781e:	4605      	mov	r5, r0
 8007820:	2900      	cmp	r1, #0
 8007822:	d041      	beq.n	80078a8 <_free_r+0x8c>
 8007824:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007828:	1f0c      	subs	r4, r1, #4
 800782a:	2b00      	cmp	r3, #0
 800782c:	bfb8      	it	lt
 800782e:	18e4      	addlt	r4, r4, r3
 8007830:	f000 f8e0 	bl	80079f4 <__malloc_lock>
 8007834:	4a1d      	ldr	r2, [pc, #116]	@ (80078ac <_free_r+0x90>)
 8007836:	6813      	ldr	r3, [r2, #0]
 8007838:	b933      	cbnz	r3, 8007848 <_free_r+0x2c>
 800783a:	6063      	str	r3, [r4, #4]
 800783c:	6014      	str	r4, [r2, #0]
 800783e:	4628      	mov	r0, r5
 8007840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007844:	f000 b8dc 	b.w	8007a00 <__malloc_unlock>
 8007848:	42a3      	cmp	r3, r4
 800784a:	d908      	bls.n	800785e <_free_r+0x42>
 800784c:	6820      	ldr	r0, [r4, #0]
 800784e:	1821      	adds	r1, r4, r0
 8007850:	428b      	cmp	r3, r1
 8007852:	bf01      	itttt	eq
 8007854:	6819      	ldreq	r1, [r3, #0]
 8007856:	685b      	ldreq	r3, [r3, #4]
 8007858:	1809      	addeq	r1, r1, r0
 800785a:	6021      	streq	r1, [r4, #0]
 800785c:	e7ed      	b.n	800783a <_free_r+0x1e>
 800785e:	461a      	mov	r2, r3
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	b10b      	cbz	r3, 8007868 <_free_r+0x4c>
 8007864:	42a3      	cmp	r3, r4
 8007866:	d9fa      	bls.n	800785e <_free_r+0x42>
 8007868:	6811      	ldr	r1, [r2, #0]
 800786a:	1850      	adds	r0, r2, r1
 800786c:	42a0      	cmp	r0, r4
 800786e:	d10b      	bne.n	8007888 <_free_r+0x6c>
 8007870:	6820      	ldr	r0, [r4, #0]
 8007872:	4401      	add	r1, r0
 8007874:	1850      	adds	r0, r2, r1
 8007876:	4283      	cmp	r3, r0
 8007878:	6011      	str	r1, [r2, #0]
 800787a:	d1e0      	bne.n	800783e <_free_r+0x22>
 800787c:	6818      	ldr	r0, [r3, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	6053      	str	r3, [r2, #4]
 8007882:	4408      	add	r0, r1
 8007884:	6010      	str	r0, [r2, #0]
 8007886:	e7da      	b.n	800783e <_free_r+0x22>
 8007888:	d902      	bls.n	8007890 <_free_r+0x74>
 800788a:	230c      	movs	r3, #12
 800788c:	602b      	str	r3, [r5, #0]
 800788e:	e7d6      	b.n	800783e <_free_r+0x22>
 8007890:	6820      	ldr	r0, [r4, #0]
 8007892:	1821      	adds	r1, r4, r0
 8007894:	428b      	cmp	r3, r1
 8007896:	bf04      	itt	eq
 8007898:	6819      	ldreq	r1, [r3, #0]
 800789a:	685b      	ldreq	r3, [r3, #4]
 800789c:	6063      	str	r3, [r4, #4]
 800789e:	bf04      	itt	eq
 80078a0:	1809      	addeq	r1, r1, r0
 80078a2:	6021      	streq	r1, [r4, #0]
 80078a4:	6054      	str	r4, [r2, #4]
 80078a6:	e7ca      	b.n	800783e <_free_r+0x22>
 80078a8:	bd38      	pop	{r3, r4, r5, pc}
 80078aa:	bf00      	nop
 80078ac:	2001463c 	.word	0x2001463c

080078b0 <sbrk_aligned>:
 80078b0:	b570      	push	{r4, r5, r6, lr}
 80078b2:	4e0f      	ldr	r6, [pc, #60]	@ (80078f0 <sbrk_aligned+0x40>)
 80078b4:	460c      	mov	r4, r1
 80078b6:	6831      	ldr	r1, [r6, #0]
 80078b8:	4605      	mov	r5, r0
 80078ba:	b911      	cbnz	r1, 80078c2 <sbrk_aligned+0x12>
 80078bc:	f000 fba4 	bl	8008008 <_sbrk_r>
 80078c0:	6030      	str	r0, [r6, #0]
 80078c2:	4621      	mov	r1, r4
 80078c4:	4628      	mov	r0, r5
 80078c6:	f000 fb9f 	bl	8008008 <_sbrk_r>
 80078ca:	1c43      	adds	r3, r0, #1
 80078cc:	d103      	bne.n	80078d6 <sbrk_aligned+0x26>
 80078ce:	f04f 34ff 	mov.w	r4, #4294967295
 80078d2:	4620      	mov	r0, r4
 80078d4:	bd70      	pop	{r4, r5, r6, pc}
 80078d6:	1cc4      	adds	r4, r0, #3
 80078d8:	f024 0403 	bic.w	r4, r4, #3
 80078dc:	42a0      	cmp	r0, r4
 80078de:	d0f8      	beq.n	80078d2 <sbrk_aligned+0x22>
 80078e0:	1a21      	subs	r1, r4, r0
 80078e2:	4628      	mov	r0, r5
 80078e4:	f000 fb90 	bl	8008008 <_sbrk_r>
 80078e8:	3001      	adds	r0, #1
 80078ea:	d1f2      	bne.n	80078d2 <sbrk_aligned+0x22>
 80078ec:	e7ef      	b.n	80078ce <sbrk_aligned+0x1e>
 80078ee:	bf00      	nop
 80078f0:	20014638 	.word	0x20014638

080078f4 <_malloc_r>:
 80078f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078f8:	1ccd      	adds	r5, r1, #3
 80078fa:	f025 0503 	bic.w	r5, r5, #3
 80078fe:	3508      	adds	r5, #8
 8007900:	2d0c      	cmp	r5, #12
 8007902:	bf38      	it	cc
 8007904:	250c      	movcc	r5, #12
 8007906:	2d00      	cmp	r5, #0
 8007908:	4606      	mov	r6, r0
 800790a:	db01      	blt.n	8007910 <_malloc_r+0x1c>
 800790c:	42a9      	cmp	r1, r5
 800790e:	d904      	bls.n	800791a <_malloc_r+0x26>
 8007910:	230c      	movs	r3, #12
 8007912:	6033      	str	r3, [r6, #0]
 8007914:	2000      	movs	r0, #0
 8007916:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800791a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80079f0 <_malloc_r+0xfc>
 800791e:	f000 f869 	bl	80079f4 <__malloc_lock>
 8007922:	f8d8 3000 	ldr.w	r3, [r8]
 8007926:	461c      	mov	r4, r3
 8007928:	bb44      	cbnz	r4, 800797c <_malloc_r+0x88>
 800792a:	4629      	mov	r1, r5
 800792c:	4630      	mov	r0, r6
 800792e:	f7ff ffbf 	bl	80078b0 <sbrk_aligned>
 8007932:	1c43      	adds	r3, r0, #1
 8007934:	4604      	mov	r4, r0
 8007936:	d158      	bne.n	80079ea <_malloc_r+0xf6>
 8007938:	f8d8 4000 	ldr.w	r4, [r8]
 800793c:	4627      	mov	r7, r4
 800793e:	2f00      	cmp	r7, #0
 8007940:	d143      	bne.n	80079ca <_malloc_r+0xd6>
 8007942:	2c00      	cmp	r4, #0
 8007944:	d04b      	beq.n	80079de <_malloc_r+0xea>
 8007946:	6823      	ldr	r3, [r4, #0]
 8007948:	4639      	mov	r1, r7
 800794a:	4630      	mov	r0, r6
 800794c:	eb04 0903 	add.w	r9, r4, r3
 8007950:	f000 fb5a 	bl	8008008 <_sbrk_r>
 8007954:	4581      	cmp	r9, r0
 8007956:	d142      	bne.n	80079de <_malloc_r+0xea>
 8007958:	6821      	ldr	r1, [r4, #0]
 800795a:	1a6d      	subs	r5, r5, r1
 800795c:	4629      	mov	r1, r5
 800795e:	4630      	mov	r0, r6
 8007960:	f7ff ffa6 	bl	80078b0 <sbrk_aligned>
 8007964:	3001      	adds	r0, #1
 8007966:	d03a      	beq.n	80079de <_malloc_r+0xea>
 8007968:	6823      	ldr	r3, [r4, #0]
 800796a:	442b      	add	r3, r5
 800796c:	6023      	str	r3, [r4, #0]
 800796e:	f8d8 3000 	ldr.w	r3, [r8]
 8007972:	685a      	ldr	r2, [r3, #4]
 8007974:	bb62      	cbnz	r2, 80079d0 <_malloc_r+0xdc>
 8007976:	f8c8 7000 	str.w	r7, [r8]
 800797a:	e00f      	b.n	800799c <_malloc_r+0xa8>
 800797c:	6822      	ldr	r2, [r4, #0]
 800797e:	1b52      	subs	r2, r2, r5
 8007980:	d420      	bmi.n	80079c4 <_malloc_r+0xd0>
 8007982:	2a0b      	cmp	r2, #11
 8007984:	d917      	bls.n	80079b6 <_malloc_r+0xc2>
 8007986:	1961      	adds	r1, r4, r5
 8007988:	42a3      	cmp	r3, r4
 800798a:	6025      	str	r5, [r4, #0]
 800798c:	bf18      	it	ne
 800798e:	6059      	strne	r1, [r3, #4]
 8007990:	6863      	ldr	r3, [r4, #4]
 8007992:	bf08      	it	eq
 8007994:	f8c8 1000 	streq.w	r1, [r8]
 8007998:	5162      	str	r2, [r4, r5]
 800799a:	604b      	str	r3, [r1, #4]
 800799c:	4630      	mov	r0, r6
 800799e:	f000 f82f 	bl	8007a00 <__malloc_unlock>
 80079a2:	f104 000b 	add.w	r0, r4, #11
 80079a6:	1d23      	adds	r3, r4, #4
 80079a8:	f020 0007 	bic.w	r0, r0, #7
 80079ac:	1ac2      	subs	r2, r0, r3
 80079ae:	bf1c      	itt	ne
 80079b0:	1a1b      	subne	r3, r3, r0
 80079b2:	50a3      	strne	r3, [r4, r2]
 80079b4:	e7af      	b.n	8007916 <_malloc_r+0x22>
 80079b6:	6862      	ldr	r2, [r4, #4]
 80079b8:	42a3      	cmp	r3, r4
 80079ba:	bf0c      	ite	eq
 80079bc:	f8c8 2000 	streq.w	r2, [r8]
 80079c0:	605a      	strne	r2, [r3, #4]
 80079c2:	e7eb      	b.n	800799c <_malloc_r+0xa8>
 80079c4:	4623      	mov	r3, r4
 80079c6:	6864      	ldr	r4, [r4, #4]
 80079c8:	e7ae      	b.n	8007928 <_malloc_r+0x34>
 80079ca:	463c      	mov	r4, r7
 80079cc:	687f      	ldr	r7, [r7, #4]
 80079ce:	e7b6      	b.n	800793e <_malloc_r+0x4a>
 80079d0:	461a      	mov	r2, r3
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	42a3      	cmp	r3, r4
 80079d6:	d1fb      	bne.n	80079d0 <_malloc_r+0xdc>
 80079d8:	2300      	movs	r3, #0
 80079da:	6053      	str	r3, [r2, #4]
 80079dc:	e7de      	b.n	800799c <_malloc_r+0xa8>
 80079de:	230c      	movs	r3, #12
 80079e0:	6033      	str	r3, [r6, #0]
 80079e2:	4630      	mov	r0, r6
 80079e4:	f000 f80c 	bl	8007a00 <__malloc_unlock>
 80079e8:	e794      	b.n	8007914 <_malloc_r+0x20>
 80079ea:	6005      	str	r5, [r0, #0]
 80079ec:	e7d6      	b.n	800799c <_malloc_r+0xa8>
 80079ee:	bf00      	nop
 80079f0:	2001463c 	.word	0x2001463c

080079f4 <__malloc_lock>:
 80079f4:	4801      	ldr	r0, [pc, #4]	@ (80079fc <__malloc_lock+0x8>)
 80079f6:	f7ff bf01 	b.w	80077fc <__retarget_lock_acquire_recursive>
 80079fa:	bf00      	nop
 80079fc:	20014634 	.word	0x20014634

08007a00 <__malloc_unlock>:
 8007a00:	4801      	ldr	r0, [pc, #4]	@ (8007a08 <__malloc_unlock+0x8>)
 8007a02:	f7ff befc 	b.w	80077fe <__retarget_lock_release_recursive>
 8007a06:	bf00      	nop
 8007a08:	20014634 	.word	0x20014634

08007a0c <__ssputs_r>:
 8007a0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a10:	688e      	ldr	r6, [r1, #8]
 8007a12:	461f      	mov	r7, r3
 8007a14:	42be      	cmp	r6, r7
 8007a16:	680b      	ldr	r3, [r1, #0]
 8007a18:	4682      	mov	sl, r0
 8007a1a:	460c      	mov	r4, r1
 8007a1c:	4690      	mov	r8, r2
 8007a1e:	d82d      	bhi.n	8007a7c <__ssputs_r+0x70>
 8007a20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007a28:	d026      	beq.n	8007a78 <__ssputs_r+0x6c>
 8007a2a:	6965      	ldr	r5, [r4, #20]
 8007a2c:	6909      	ldr	r1, [r1, #16]
 8007a2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a32:	eba3 0901 	sub.w	r9, r3, r1
 8007a36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007a3a:	1c7b      	adds	r3, r7, #1
 8007a3c:	444b      	add	r3, r9
 8007a3e:	106d      	asrs	r5, r5, #1
 8007a40:	429d      	cmp	r5, r3
 8007a42:	bf38      	it	cc
 8007a44:	461d      	movcc	r5, r3
 8007a46:	0553      	lsls	r3, r2, #21
 8007a48:	d527      	bpl.n	8007a9a <__ssputs_r+0x8e>
 8007a4a:	4629      	mov	r1, r5
 8007a4c:	f7ff ff52 	bl	80078f4 <_malloc_r>
 8007a50:	4606      	mov	r6, r0
 8007a52:	b360      	cbz	r0, 8007aae <__ssputs_r+0xa2>
 8007a54:	6921      	ldr	r1, [r4, #16]
 8007a56:	464a      	mov	r2, r9
 8007a58:	f7ff fed2 	bl	8007800 <memcpy>
 8007a5c:	89a3      	ldrh	r3, [r4, #12]
 8007a5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007a62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a66:	81a3      	strh	r3, [r4, #12]
 8007a68:	6126      	str	r6, [r4, #16]
 8007a6a:	6165      	str	r5, [r4, #20]
 8007a6c:	444e      	add	r6, r9
 8007a6e:	eba5 0509 	sub.w	r5, r5, r9
 8007a72:	6026      	str	r6, [r4, #0]
 8007a74:	60a5      	str	r5, [r4, #8]
 8007a76:	463e      	mov	r6, r7
 8007a78:	42be      	cmp	r6, r7
 8007a7a:	d900      	bls.n	8007a7e <__ssputs_r+0x72>
 8007a7c:	463e      	mov	r6, r7
 8007a7e:	6820      	ldr	r0, [r4, #0]
 8007a80:	4632      	mov	r2, r6
 8007a82:	4641      	mov	r1, r8
 8007a84:	f000 faa6 	bl	8007fd4 <memmove>
 8007a88:	68a3      	ldr	r3, [r4, #8]
 8007a8a:	1b9b      	subs	r3, r3, r6
 8007a8c:	60a3      	str	r3, [r4, #8]
 8007a8e:	6823      	ldr	r3, [r4, #0]
 8007a90:	4433      	add	r3, r6
 8007a92:	6023      	str	r3, [r4, #0]
 8007a94:	2000      	movs	r0, #0
 8007a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a9a:	462a      	mov	r2, r5
 8007a9c:	f000 fac4 	bl	8008028 <_realloc_r>
 8007aa0:	4606      	mov	r6, r0
 8007aa2:	2800      	cmp	r0, #0
 8007aa4:	d1e0      	bne.n	8007a68 <__ssputs_r+0x5c>
 8007aa6:	6921      	ldr	r1, [r4, #16]
 8007aa8:	4650      	mov	r0, sl
 8007aaa:	f7ff feb7 	bl	800781c <_free_r>
 8007aae:	230c      	movs	r3, #12
 8007ab0:	f8ca 3000 	str.w	r3, [sl]
 8007ab4:	89a3      	ldrh	r3, [r4, #12]
 8007ab6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007aba:	81a3      	strh	r3, [r4, #12]
 8007abc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac0:	e7e9      	b.n	8007a96 <__ssputs_r+0x8a>
	...

08007ac4 <_svfiprintf_r>:
 8007ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ac8:	4698      	mov	r8, r3
 8007aca:	898b      	ldrh	r3, [r1, #12]
 8007acc:	061b      	lsls	r3, r3, #24
 8007ace:	b09d      	sub	sp, #116	@ 0x74
 8007ad0:	4607      	mov	r7, r0
 8007ad2:	460d      	mov	r5, r1
 8007ad4:	4614      	mov	r4, r2
 8007ad6:	d510      	bpl.n	8007afa <_svfiprintf_r+0x36>
 8007ad8:	690b      	ldr	r3, [r1, #16]
 8007ada:	b973      	cbnz	r3, 8007afa <_svfiprintf_r+0x36>
 8007adc:	2140      	movs	r1, #64	@ 0x40
 8007ade:	f7ff ff09 	bl	80078f4 <_malloc_r>
 8007ae2:	6028      	str	r0, [r5, #0]
 8007ae4:	6128      	str	r0, [r5, #16]
 8007ae6:	b930      	cbnz	r0, 8007af6 <_svfiprintf_r+0x32>
 8007ae8:	230c      	movs	r3, #12
 8007aea:	603b      	str	r3, [r7, #0]
 8007aec:	f04f 30ff 	mov.w	r0, #4294967295
 8007af0:	b01d      	add	sp, #116	@ 0x74
 8007af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007af6:	2340      	movs	r3, #64	@ 0x40
 8007af8:	616b      	str	r3, [r5, #20]
 8007afa:	2300      	movs	r3, #0
 8007afc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007afe:	2320      	movs	r3, #32
 8007b00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b04:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b08:	2330      	movs	r3, #48	@ 0x30
 8007b0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007ca8 <_svfiprintf_r+0x1e4>
 8007b0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007b12:	f04f 0901 	mov.w	r9, #1
 8007b16:	4623      	mov	r3, r4
 8007b18:	469a      	mov	sl, r3
 8007b1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b1e:	b10a      	cbz	r2, 8007b24 <_svfiprintf_r+0x60>
 8007b20:	2a25      	cmp	r2, #37	@ 0x25
 8007b22:	d1f9      	bne.n	8007b18 <_svfiprintf_r+0x54>
 8007b24:	ebba 0b04 	subs.w	fp, sl, r4
 8007b28:	d00b      	beq.n	8007b42 <_svfiprintf_r+0x7e>
 8007b2a:	465b      	mov	r3, fp
 8007b2c:	4622      	mov	r2, r4
 8007b2e:	4629      	mov	r1, r5
 8007b30:	4638      	mov	r0, r7
 8007b32:	f7ff ff6b 	bl	8007a0c <__ssputs_r>
 8007b36:	3001      	adds	r0, #1
 8007b38:	f000 80a7 	beq.w	8007c8a <_svfiprintf_r+0x1c6>
 8007b3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b3e:	445a      	add	r2, fp
 8007b40:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b42:	f89a 3000 	ldrb.w	r3, [sl]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f000 809f 	beq.w	8007c8a <_svfiprintf_r+0x1c6>
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b56:	f10a 0a01 	add.w	sl, sl, #1
 8007b5a:	9304      	str	r3, [sp, #16]
 8007b5c:	9307      	str	r3, [sp, #28]
 8007b5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b62:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b64:	4654      	mov	r4, sl
 8007b66:	2205      	movs	r2, #5
 8007b68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b6c:	484e      	ldr	r0, [pc, #312]	@ (8007ca8 <_svfiprintf_r+0x1e4>)
 8007b6e:	f7f8 fb9f 	bl	80002b0 <memchr>
 8007b72:	9a04      	ldr	r2, [sp, #16]
 8007b74:	b9d8      	cbnz	r0, 8007bae <_svfiprintf_r+0xea>
 8007b76:	06d0      	lsls	r0, r2, #27
 8007b78:	bf44      	itt	mi
 8007b7a:	2320      	movmi	r3, #32
 8007b7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b80:	0711      	lsls	r1, r2, #28
 8007b82:	bf44      	itt	mi
 8007b84:	232b      	movmi	r3, #43	@ 0x2b
 8007b86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b8a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b90:	d015      	beq.n	8007bbe <_svfiprintf_r+0xfa>
 8007b92:	9a07      	ldr	r2, [sp, #28]
 8007b94:	4654      	mov	r4, sl
 8007b96:	2000      	movs	r0, #0
 8007b98:	f04f 0c0a 	mov.w	ip, #10
 8007b9c:	4621      	mov	r1, r4
 8007b9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ba2:	3b30      	subs	r3, #48	@ 0x30
 8007ba4:	2b09      	cmp	r3, #9
 8007ba6:	d94b      	bls.n	8007c40 <_svfiprintf_r+0x17c>
 8007ba8:	b1b0      	cbz	r0, 8007bd8 <_svfiprintf_r+0x114>
 8007baa:	9207      	str	r2, [sp, #28]
 8007bac:	e014      	b.n	8007bd8 <_svfiprintf_r+0x114>
 8007bae:	eba0 0308 	sub.w	r3, r0, r8
 8007bb2:	fa09 f303 	lsl.w	r3, r9, r3
 8007bb6:	4313      	orrs	r3, r2
 8007bb8:	9304      	str	r3, [sp, #16]
 8007bba:	46a2      	mov	sl, r4
 8007bbc:	e7d2      	b.n	8007b64 <_svfiprintf_r+0xa0>
 8007bbe:	9b03      	ldr	r3, [sp, #12]
 8007bc0:	1d19      	adds	r1, r3, #4
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	9103      	str	r1, [sp, #12]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	bfbb      	ittet	lt
 8007bca:	425b      	neglt	r3, r3
 8007bcc:	f042 0202 	orrlt.w	r2, r2, #2
 8007bd0:	9307      	strge	r3, [sp, #28]
 8007bd2:	9307      	strlt	r3, [sp, #28]
 8007bd4:	bfb8      	it	lt
 8007bd6:	9204      	strlt	r2, [sp, #16]
 8007bd8:	7823      	ldrb	r3, [r4, #0]
 8007bda:	2b2e      	cmp	r3, #46	@ 0x2e
 8007bdc:	d10a      	bne.n	8007bf4 <_svfiprintf_r+0x130>
 8007bde:	7863      	ldrb	r3, [r4, #1]
 8007be0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007be2:	d132      	bne.n	8007c4a <_svfiprintf_r+0x186>
 8007be4:	9b03      	ldr	r3, [sp, #12]
 8007be6:	1d1a      	adds	r2, r3, #4
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	9203      	str	r2, [sp, #12]
 8007bec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007bf0:	3402      	adds	r4, #2
 8007bf2:	9305      	str	r3, [sp, #20]
 8007bf4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007cb8 <_svfiprintf_r+0x1f4>
 8007bf8:	7821      	ldrb	r1, [r4, #0]
 8007bfa:	2203      	movs	r2, #3
 8007bfc:	4650      	mov	r0, sl
 8007bfe:	f7f8 fb57 	bl	80002b0 <memchr>
 8007c02:	b138      	cbz	r0, 8007c14 <_svfiprintf_r+0x150>
 8007c04:	9b04      	ldr	r3, [sp, #16]
 8007c06:	eba0 000a 	sub.w	r0, r0, sl
 8007c0a:	2240      	movs	r2, #64	@ 0x40
 8007c0c:	4082      	lsls	r2, r0
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	3401      	adds	r4, #1
 8007c12:	9304      	str	r3, [sp, #16]
 8007c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c18:	4824      	ldr	r0, [pc, #144]	@ (8007cac <_svfiprintf_r+0x1e8>)
 8007c1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007c1e:	2206      	movs	r2, #6
 8007c20:	f7f8 fb46 	bl	80002b0 <memchr>
 8007c24:	2800      	cmp	r0, #0
 8007c26:	d036      	beq.n	8007c96 <_svfiprintf_r+0x1d2>
 8007c28:	4b21      	ldr	r3, [pc, #132]	@ (8007cb0 <_svfiprintf_r+0x1ec>)
 8007c2a:	bb1b      	cbnz	r3, 8007c74 <_svfiprintf_r+0x1b0>
 8007c2c:	9b03      	ldr	r3, [sp, #12]
 8007c2e:	3307      	adds	r3, #7
 8007c30:	f023 0307 	bic.w	r3, r3, #7
 8007c34:	3308      	adds	r3, #8
 8007c36:	9303      	str	r3, [sp, #12]
 8007c38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c3a:	4433      	add	r3, r6
 8007c3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c3e:	e76a      	b.n	8007b16 <_svfiprintf_r+0x52>
 8007c40:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c44:	460c      	mov	r4, r1
 8007c46:	2001      	movs	r0, #1
 8007c48:	e7a8      	b.n	8007b9c <_svfiprintf_r+0xd8>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	3401      	adds	r4, #1
 8007c4e:	9305      	str	r3, [sp, #20]
 8007c50:	4619      	mov	r1, r3
 8007c52:	f04f 0c0a 	mov.w	ip, #10
 8007c56:	4620      	mov	r0, r4
 8007c58:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c5c:	3a30      	subs	r2, #48	@ 0x30
 8007c5e:	2a09      	cmp	r2, #9
 8007c60:	d903      	bls.n	8007c6a <_svfiprintf_r+0x1a6>
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d0c6      	beq.n	8007bf4 <_svfiprintf_r+0x130>
 8007c66:	9105      	str	r1, [sp, #20]
 8007c68:	e7c4      	b.n	8007bf4 <_svfiprintf_r+0x130>
 8007c6a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c6e:	4604      	mov	r4, r0
 8007c70:	2301      	movs	r3, #1
 8007c72:	e7f0      	b.n	8007c56 <_svfiprintf_r+0x192>
 8007c74:	ab03      	add	r3, sp, #12
 8007c76:	9300      	str	r3, [sp, #0]
 8007c78:	462a      	mov	r2, r5
 8007c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8007cb4 <_svfiprintf_r+0x1f0>)
 8007c7c:	a904      	add	r1, sp, #16
 8007c7e:	4638      	mov	r0, r7
 8007c80:	f3af 8000 	nop.w
 8007c84:	1c42      	adds	r2, r0, #1
 8007c86:	4606      	mov	r6, r0
 8007c88:	d1d6      	bne.n	8007c38 <_svfiprintf_r+0x174>
 8007c8a:	89ab      	ldrh	r3, [r5, #12]
 8007c8c:	065b      	lsls	r3, r3, #25
 8007c8e:	f53f af2d 	bmi.w	8007aec <_svfiprintf_r+0x28>
 8007c92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c94:	e72c      	b.n	8007af0 <_svfiprintf_r+0x2c>
 8007c96:	ab03      	add	r3, sp, #12
 8007c98:	9300      	str	r3, [sp, #0]
 8007c9a:	462a      	mov	r2, r5
 8007c9c:	4b05      	ldr	r3, [pc, #20]	@ (8007cb4 <_svfiprintf_r+0x1f0>)
 8007c9e:	a904      	add	r1, sp, #16
 8007ca0:	4638      	mov	r0, r7
 8007ca2:	f000 f879 	bl	8007d98 <_printf_i>
 8007ca6:	e7ed      	b.n	8007c84 <_svfiprintf_r+0x1c0>
 8007ca8:	0800821c 	.word	0x0800821c
 8007cac:	08008226 	.word	0x08008226
 8007cb0:	00000000 	.word	0x00000000
 8007cb4:	08007a0d 	.word	0x08007a0d
 8007cb8:	08008222 	.word	0x08008222

08007cbc <_printf_common>:
 8007cbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cc0:	4616      	mov	r6, r2
 8007cc2:	4698      	mov	r8, r3
 8007cc4:	688a      	ldr	r2, [r1, #8]
 8007cc6:	690b      	ldr	r3, [r1, #16]
 8007cc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	bfb8      	it	lt
 8007cd0:	4613      	movlt	r3, r2
 8007cd2:	6033      	str	r3, [r6, #0]
 8007cd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007cd8:	4607      	mov	r7, r0
 8007cda:	460c      	mov	r4, r1
 8007cdc:	b10a      	cbz	r2, 8007ce2 <_printf_common+0x26>
 8007cde:	3301      	adds	r3, #1
 8007ce0:	6033      	str	r3, [r6, #0]
 8007ce2:	6823      	ldr	r3, [r4, #0]
 8007ce4:	0699      	lsls	r1, r3, #26
 8007ce6:	bf42      	ittt	mi
 8007ce8:	6833      	ldrmi	r3, [r6, #0]
 8007cea:	3302      	addmi	r3, #2
 8007cec:	6033      	strmi	r3, [r6, #0]
 8007cee:	6825      	ldr	r5, [r4, #0]
 8007cf0:	f015 0506 	ands.w	r5, r5, #6
 8007cf4:	d106      	bne.n	8007d04 <_printf_common+0x48>
 8007cf6:	f104 0a19 	add.w	sl, r4, #25
 8007cfa:	68e3      	ldr	r3, [r4, #12]
 8007cfc:	6832      	ldr	r2, [r6, #0]
 8007cfe:	1a9b      	subs	r3, r3, r2
 8007d00:	42ab      	cmp	r3, r5
 8007d02:	dc26      	bgt.n	8007d52 <_printf_common+0x96>
 8007d04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007d08:	6822      	ldr	r2, [r4, #0]
 8007d0a:	3b00      	subs	r3, #0
 8007d0c:	bf18      	it	ne
 8007d0e:	2301      	movne	r3, #1
 8007d10:	0692      	lsls	r2, r2, #26
 8007d12:	d42b      	bmi.n	8007d6c <_printf_common+0xb0>
 8007d14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007d18:	4641      	mov	r1, r8
 8007d1a:	4638      	mov	r0, r7
 8007d1c:	47c8      	blx	r9
 8007d1e:	3001      	adds	r0, #1
 8007d20:	d01e      	beq.n	8007d60 <_printf_common+0xa4>
 8007d22:	6823      	ldr	r3, [r4, #0]
 8007d24:	6922      	ldr	r2, [r4, #16]
 8007d26:	f003 0306 	and.w	r3, r3, #6
 8007d2a:	2b04      	cmp	r3, #4
 8007d2c:	bf02      	ittt	eq
 8007d2e:	68e5      	ldreq	r5, [r4, #12]
 8007d30:	6833      	ldreq	r3, [r6, #0]
 8007d32:	1aed      	subeq	r5, r5, r3
 8007d34:	68a3      	ldr	r3, [r4, #8]
 8007d36:	bf0c      	ite	eq
 8007d38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d3c:	2500      	movne	r5, #0
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	bfc4      	itt	gt
 8007d42:	1a9b      	subgt	r3, r3, r2
 8007d44:	18ed      	addgt	r5, r5, r3
 8007d46:	2600      	movs	r6, #0
 8007d48:	341a      	adds	r4, #26
 8007d4a:	42b5      	cmp	r5, r6
 8007d4c:	d11a      	bne.n	8007d84 <_printf_common+0xc8>
 8007d4e:	2000      	movs	r0, #0
 8007d50:	e008      	b.n	8007d64 <_printf_common+0xa8>
 8007d52:	2301      	movs	r3, #1
 8007d54:	4652      	mov	r2, sl
 8007d56:	4641      	mov	r1, r8
 8007d58:	4638      	mov	r0, r7
 8007d5a:	47c8      	blx	r9
 8007d5c:	3001      	adds	r0, #1
 8007d5e:	d103      	bne.n	8007d68 <_printf_common+0xac>
 8007d60:	f04f 30ff 	mov.w	r0, #4294967295
 8007d64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d68:	3501      	adds	r5, #1
 8007d6a:	e7c6      	b.n	8007cfa <_printf_common+0x3e>
 8007d6c:	18e1      	adds	r1, r4, r3
 8007d6e:	1c5a      	adds	r2, r3, #1
 8007d70:	2030      	movs	r0, #48	@ 0x30
 8007d72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d76:	4422      	add	r2, r4
 8007d78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d80:	3302      	adds	r3, #2
 8007d82:	e7c7      	b.n	8007d14 <_printf_common+0x58>
 8007d84:	2301      	movs	r3, #1
 8007d86:	4622      	mov	r2, r4
 8007d88:	4641      	mov	r1, r8
 8007d8a:	4638      	mov	r0, r7
 8007d8c:	47c8      	blx	r9
 8007d8e:	3001      	adds	r0, #1
 8007d90:	d0e6      	beq.n	8007d60 <_printf_common+0xa4>
 8007d92:	3601      	adds	r6, #1
 8007d94:	e7d9      	b.n	8007d4a <_printf_common+0x8e>
	...

08007d98 <_printf_i>:
 8007d98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d9c:	7e0f      	ldrb	r7, [r1, #24]
 8007d9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007da0:	2f78      	cmp	r7, #120	@ 0x78
 8007da2:	4691      	mov	r9, r2
 8007da4:	4680      	mov	r8, r0
 8007da6:	460c      	mov	r4, r1
 8007da8:	469a      	mov	sl, r3
 8007daa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007dae:	d807      	bhi.n	8007dc0 <_printf_i+0x28>
 8007db0:	2f62      	cmp	r7, #98	@ 0x62
 8007db2:	d80a      	bhi.n	8007dca <_printf_i+0x32>
 8007db4:	2f00      	cmp	r7, #0
 8007db6:	f000 80d1 	beq.w	8007f5c <_printf_i+0x1c4>
 8007dba:	2f58      	cmp	r7, #88	@ 0x58
 8007dbc:	f000 80b8 	beq.w	8007f30 <_printf_i+0x198>
 8007dc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007dc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007dc8:	e03a      	b.n	8007e40 <_printf_i+0xa8>
 8007dca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007dce:	2b15      	cmp	r3, #21
 8007dd0:	d8f6      	bhi.n	8007dc0 <_printf_i+0x28>
 8007dd2:	a101      	add	r1, pc, #4	@ (adr r1, 8007dd8 <_printf_i+0x40>)
 8007dd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007dd8:	08007e31 	.word	0x08007e31
 8007ddc:	08007e45 	.word	0x08007e45
 8007de0:	08007dc1 	.word	0x08007dc1
 8007de4:	08007dc1 	.word	0x08007dc1
 8007de8:	08007dc1 	.word	0x08007dc1
 8007dec:	08007dc1 	.word	0x08007dc1
 8007df0:	08007e45 	.word	0x08007e45
 8007df4:	08007dc1 	.word	0x08007dc1
 8007df8:	08007dc1 	.word	0x08007dc1
 8007dfc:	08007dc1 	.word	0x08007dc1
 8007e00:	08007dc1 	.word	0x08007dc1
 8007e04:	08007f43 	.word	0x08007f43
 8007e08:	08007e6f 	.word	0x08007e6f
 8007e0c:	08007efd 	.word	0x08007efd
 8007e10:	08007dc1 	.word	0x08007dc1
 8007e14:	08007dc1 	.word	0x08007dc1
 8007e18:	08007f65 	.word	0x08007f65
 8007e1c:	08007dc1 	.word	0x08007dc1
 8007e20:	08007e6f 	.word	0x08007e6f
 8007e24:	08007dc1 	.word	0x08007dc1
 8007e28:	08007dc1 	.word	0x08007dc1
 8007e2c:	08007f05 	.word	0x08007f05
 8007e30:	6833      	ldr	r3, [r6, #0]
 8007e32:	1d1a      	adds	r2, r3, #4
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	6032      	str	r2, [r6, #0]
 8007e38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007e40:	2301      	movs	r3, #1
 8007e42:	e09c      	b.n	8007f7e <_printf_i+0x1e6>
 8007e44:	6833      	ldr	r3, [r6, #0]
 8007e46:	6820      	ldr	r0, [r4, #0]
 8007e48:	1d19      	adds	r1, r3, #4
 8007e4a:	6031      	str	r1, [r6, #0]
 8007e4c:	0606      	lsls	r6, r0, #24
 8007e4e:	d501      	bpl.n	8007e54 <_printf_i+0xbc>
 8007e50:	681d      	ldr	r5, [r3, #0]
 8007e52:	e003      	b.n	8007e5c <_printf_i+0xc4>
 8007e54:	0645      	lsls	r5, r0, #25
 8007e56:	d5fb      	bpl.n	8007e50 <_printf_i+0xb8>
 8007e58:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e5c:	2d00      	cmp	r5, #0
 8007e5e:	da03      	bge.n	8007e68 <_printf_i+0xd0>
 8007e60:	232d      	movs	r3, #45	@ 0x2d
 8007e62:	426d      	negs	r5, r5
 8007e64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e68:	4858      	ldr	r0, [pc, #352]	@ (8007fcc <_printf_i+0x234>)
 8007e6a:	230a      	movs	r3, #10
 8007e6c:	e011      	b.n	8007e92 <_printf_i+0xfa>
 8007e6e:	6821      	ldr	r1, [r4, #0]
 8007e70:	6833      	ldr	r3, [r6, #0]
 8007e72:	0608      	lsls	r0, r1, #24
 8007e74:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e78:	d402      	bmi.n	8007e80 <_printf_i+0xe8>
 8007e7a:	0649      	lsls	r1, r1, #25
 8007e7c:	bf48      	it	mi
 8007e7e:	b2ad      	uxthmi	r5, r5
 8007e80:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e82:	4852      	ldr	r0, [pc, #328]	@ (8007fcc <_printf_i+0x234>)
 8007e84:	6033      	str	r3, [r6, #0]
 8007e86:	bf14      	ite	ne
 8007e88:	230a      	movne	r3, #10
 8007e8a:	2308      	moveq	r3, #8
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e92:	6866      	ldr	r6, [r4, #4]
 8007e94:	60a6      	str	r6, [r4, #8]
 8007e96:	2e00      	cmp	r6, #0
 8007e98:	db05      	blt.n	8007ea6 <_printf_i+0x10e>
 8007e9a:	6821      	ldr	r1, [r4, #0]
 8007e9c:	432e      	orrs	r6, r5
 8007e9e:	f021 0104 	bic.w	r1, r1, #4
 8007ea2:	6021      	str	r1, [r4, #0]
 8007ea4:	d04b      	beq.n	8007f3e <_printf_i+0x1a6>
 8007ea6:	4616      	mov	r6, r2
 8007ea8:	fbb5 f1f3 	udiv	r1, r5, r3
 8007eac:	fb03 5711 	mls	r7, r3, r1, r5
 8007eb0:	5dc7      	ldrb	r7, [r0, r7]
 8007eb2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007eb6:	462f      	mov	r7, r5
 8007eb8:	42bb      	cmp	r3, r7
 8007eba:	460d      	mov	r5, r1
 8007ebc:	d9f4      	bls.n	8007ea8 <_printf_i+0x110>
 8007ebe:	2b08      	cmp	r3, #8
 8007ec0:	d10b      	bne.n	8007eda <_printf_i+0x142>
 8007ec2:	6823      	ldr	r3, [r4, #0]
 8007ec4:	07df      	lsls	r7, r3, #31
 8007ec6:	d508      	bpl.n	8007eda <_printf_i+0x142>
 8007ec8:	6923      	ldr	r3, [r4, #16]
 8007eca:	6861      	ldr	r1, [r4, #4]
 8007ecc:	4299      	cmp	r1, r3
 8007ece:	bfde      	ittt	le
 8007ed0:	2330      	movle	r3, #48	@ 0x30
 8007ed2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ed6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007eda:	1b92      	subs	r2, r2, r6
 8007edc:	6122      	str	r2, [r4, #16]
 8007ede:	f8cd a000 	str.w	sl, [sp]
 8007ee2:	464b      	mov	r3, r9
 8007ee4:	aa03      	add	r2, sp, #12
 8007ee6:	4621      	mov	r1, r4
 8007ee8:	4640      	mov	r0, r8
 8007eea:	f7ff fee7 	bl	8007cbc <_printf_common>
 8007eee:	3001      	adds	r0, #1
 8007ef0:	d14a      	bne.n	8007f88 <_printf_i+0x1f0>
 8007ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef6:	b004      	add	sp, #16
 8007ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007efc:	6823      	ldr	r3, [r4, #0]
 8007efe:	f043 0320 	orr.w	r3, r3, #32
 8007f02:	6023      	str	r3, [r4, #0]
 8007f04:	4832      	ldr	r0, [pc, #200]	@ (8007fd0 <_printf_i+0x238>)
 8007f06:	2778      	movs	r7, #120	@ 0x78
 8007f08:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007f0c:	6823      	ldr	r3, [r4, #0]
 8007f0e:	6831      	ldr	r1, [r6, #0]
 8007f10:	061f      	lsls	r7, r3, #24
 8007f12:	f851 5b04 	ldr.w	r5, [r1], #4
 8007f16:	d402      	bmi.n	8007f1e <_printf_i+0x186>
 8007f18:	065f      	lsls	r7, r3, #25
 8007f1a:	bf48      	it	mi
 8007f1c:	b2ad      	uxthmi	r5, r5
 8007f1e:	6031      	str	r1, [r6, #0]
 8007f20:	07d9      	lsls	r1, r3, #31
 8007f22:	bf44      	itt	mi
 8007f24:	f043 0320 	orrmi.w	r3, r3, #32
 8007f28:	6023      	strmi	r3, [r4, #0]
 8007f2a:	b11d      	cbz	r5, 8007f34 <_printf_i+0x19c>
 8007f2c:	2310      	movs	r3, #16
 8007f2e:	e7ad      	b.n	8007e8c <_printf_i+0xf4>
 8007f30:	4826      	ldr	r0, [pc, #152]	@ (8007fcc <_printf_i+0x234>)
 8007f32:	e7e9      	b.n	8007f08 <_printf_i+0x170>
 8007f34:	6823      	ldr	r3, [r4, #0]
 8007f36:	f023 0320 	bic.w	r3, r3, #32
 8007f3a:	6023      	str	r3, [r4, #0]
 8007f3c:	e7f6      	b.n	8007f2c <_printf_i+0x194>
 8007f3e:	4616      	mov	r6, r2
 8007f40:	e7bd      	b.n	8007ebe <_printf_i+0x126>
 8007f42:	6833      	ldr	r3, [r6, #0]
 8007f44:	6825      	ldr	r5, [r4, #0]
 8007f46:	6961      	ldr	r1, [r4, #20]
 8007f48:	1d18      	adds	r0, r3, #4
 8007f4a:	6030      	str	r0, [r6, #0]
 8007f4c:	062e      	lsls	r6, r5, #24
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	d501      	bpl.n	8007f56 <_printf_i+0x1be>
 8007f52:	6019      	str	r1, [r3, #0]
 8007f54:	e002      	b.n	8007f5c <_printf_i+0x1c4>
 8007f56:	0668      	lsls	r0, r5, #25
 8007f58:	d5fb      	bpl.n	8007f52 <_printf_i+0x1ba>
 8007f5a:	8019      	strh	r1, [r3, #0]
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	6123      	str	r3, [r4, #16]
 8007f60:	4616      	mov	r6, r2
 8007f62:	e7bc      	b.n	8007ede <_printf_i+0x146>
 8007f64:	6833      	ldr	r3, [r6, #0]
 8007f66:	1d1a      	adds	r2, r3, #4
 8007f68:	6032      	str	r2, [r6, #0]
 8007f6a:	681e      	ldr	r6, [r3, #0]
 8007f6c:	6862      	ldr	r2, [r4, #4]
 8007f6e:	2100      	movs	r1, #0
 8007f70:	4630      	mov	r0, r6
 8007f72:	f7f8 f99d 	bl	80002b0 <memchr>
 8007f76:	b108      	cbz	r0, 8007f7c <_printf_i+0x1e4>
 8007f78:	1b80      	subs	r0, r0, r6
 8007f7a:	6060      	str	r0, [r4, #4]
 8007f7c:	6863      	ldr	r3, [r4, #4]
 8007f7e:	6123      	str	r3, [r4, #16]
 8007f80:	2300      	movs	r3, #0
 8007f82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f86:	e7aa      	b.n	8007ede <_printf_i+0x146>
 8007f88:	6923      	ldr	r3, [r4, #16]
 8007f8a:	4632      	mov	r2, r6
 8007f8c:	4649      	mov	r1, r9
 8007f8e:	4640      	mov	r0, r8
 8007f90:	47d0      	blx	sl
 8007f92:	3001      	adds	r0, #1
 8007f94:	d0ad      	beq.n	8007ef2 <_printf_i+0x15a>
 8007f96:	6823      	ldr	r3, [r4, #0]
 8007f98:	079b      	lsls	r3, r3, #30
 8007f9a:	d413      	bmi.n	8007fc4 <_printf_i+0x22c>
 8007f9c:	68e0      	ldr	r0, [r4, #12]
 8007f9e:	9b03      	ldr	r3, [sp, #12]
 8007fa0:	4298      	cmp	r0, r3
 8007fa2:	bfb8      	it	lt
 8007fa4:	4618      	movlt	r0, r3
 8007fa6:	e7a6      	b.n	8007ef6 <_printf_i+0x15e>
 8007fa8:	2301      	movs	r3, #1
 8007faa:	4632      	mov	r2, r6
 8007fac:	4649      	mov	r1, r9
 8007fae:	4640      	mov	r0, r8
 8007fb0:	47d0      	blx	sl
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	d09d      	beq.n	8007ef2 <_printf_i+0x15a>
 8007fb6:	3501      	adds	r5, #1
 8007fb8:	68e3      	ldr	r3, [r4, #12]
 8007fba:	9903      	ldr	r1, [sp, #12]
 8007fbc:	1a5b      	subs	r3, r3, r1
 8007fbe:	42ab      	cmp	r3, r5
 8007fc0:	dcf2      	bgt.n	8007fa8 <_printf_i+0x210>
 8007fc2:	e7eb      	b.n	8007f9c <_printf_i+0x204>
 8007fc4:	2500      	movs	r5, #0
 8007fc6:	f104 0619 	add.w	r6, r4, #25
 8007fca:	e7f5      	b.n	8007fb8 <_printf_i+0x220>
 8007fcc:	0800822d 	.word	0x0800822d
 8007fd0:	0800823e 	.word	0x0800823e

08007fd4 <memmove>:
 8007fd4:	4288      	cmp	r0, r1
 8007fd6:	b510      	push	{r4, lr}
 8007fd8:	eb01 0402 	add.w	r4, r1, r2
 8007fdc:	d902      	bls.n	8007fe4 <memmove+0x10>
 8007fde:	4284      	cmp	r4, r0
 8007fe0:	4623      	mov	r3, r4
 8007fe2:	d807      	bhi.n	8007ff4 <memmove+0x20>
 8007fe4:	1e43      	subs	r3, r0, #1
 8007fe6:	42a1      	cmp	r1, r4
 8007fe8:	d008      	beq.n	8007ffc <memmove+0x28>
 8007fea:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007fee:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007ff2:	e7f8      	b.n	8007fe6 <memmove+0x12>
 8007ff4:	4402      	add	r2, r0
 8007ff6:	4601      	mov	r1, r0
 8007ff8:	428a      	cmp	r2, r1
 8007ffa:	d100      	bne.n	8007ffe <memmove+0x2a>
 8007ffc:	bd10      	pop	{r4, pc}
 8007ffe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008002:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008006:	e7f7      	b.n	8007ff8 <memmove+0x24>

08008008 <_sbrk_r>:
 8008008:	b538      	push	{r3, r4, r5, lr}
 800800a:	4d06      	ldr	r5, [pc, #24]	@ (8008024 <_sbrk_r+0x1c>)
 800800c:	2300      	movs	r3, #0
 800800e:	4604      	mov	r4, r0
 8008010:	4608      	mov	r0, r1
 8008012:	602b      	str	r3, [r5, #0]
 8008014:	f000 f83e 	bl	8008094 <_sbrk>
 8008018:	1c43      	adds	r3, r0, #1
 800801a:	d102      	bne.n	8008022 <_sbrk_r+0x1a>
 800801c:	682b      	ldr	r3, [r5, #0]
 800801e:	b103      	cbz	r3, 8008022 <_sbrk_r+0x1a>
 8008020:	6023      	str	r3, [r4, #0]
 8008022:	bd38      	pop	{r3, r4, r5, pc}
 8008024:	20014630 	.word	0x20014630

08008028 <_realloc_r>:
 8008028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800802c:	4607      	mov	r7, r0
 800802e:	4614      	mov	r4, r2
 8008030:	460d      	mov	r5, r1
 8008032:	b921      	cbnz	r1, 800803e <_realloc_r+0x16>
 8008034:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008038:	4611      	mov	r1, r2
 800803a:	f7ff bc5b 	b.w	80078f4 <_malloc_r>
 800803e:	b92a      	cbnz	r2, 800804c <_realloc_r+0x24>
 8008040:	f7ff fbec 	bl	800781c <_free_r>
 8008044:	4625      	mov	r5, r4
 8008046:	4628      	mov	r0, r5
 8008048:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800804c:	f000 f81a 	bl	8008084 <_malloc_usable_size_r>
 8008050:	4284      	cmp	r4, r0
 8008052:	4606      	mov	r6, r0
 8008054:	d802      	bhi.n	800805c <_realloc_r+0x34>
 8008056:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800805a:	d8f4      	bhi.n	8008046 <_realloc_r+0x1e>
 800805c:	4621      	mov	r1, r4
 800805e:	4638      	mov	r0, r7
 8008060:	f7ff fc48 	bl	80078f4 <_malloc_r>
 8008064:	4680      	mov	r8, r0
 8008066:	b908      	cbnz	r0, 800806c <_realloc_r+0x44>
 8008068:	4645      	mov	r5, r8
 800806a:	e7ec      	b.n	8008046 <_realloc_r+0x1e>
 800806c:	42b4      	cmp	r4, r6
 800806e:	4622      	mov	r2, r4
 8008070:	4629      	mov	r1, r5
 8008072:	bf28      	it	cs
 8008074:	4632      	movcs	r2, r6
 8008076:	f7ff fbc3 	bl	8007800 <memcpy>
 800807a:	4629      	mov	r1, r5
 800807c:	4638      	mov	r0, r7
 800807e:	f7ff fbcd 	bl	800781c <_free_r>
 8008082:	e7f1      	b.n	8008068 <_realloc_r+0x40>

08008084 <_malloc_usable_size_r>:
 8008084:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008088:	1f18      	subs	r0, r3, #4
 800808a:	2b00      	cmp	r3, #0
 800808c:	bfbc      	itt	lt
 800808e:	580b      	ldrlt	r3, [r1, r0]
 8008090:	18c0      	addlt	r0, r0, r3
 8008092:	4770      	bx	lr

08008094 <_sbrk>:
 8008094:	4a04      	ldr	r2, [pc, #16]	@ (80080a8 <_sbrk+0x14>)
 8008096:	6811      	ldr	r1, [r2, #0]
 8008098:	4603      	mov	r3, r0
 800809a:	b909      	cbnz	r1, 80080a0 <_sbrk+0xc>
 800809c:	4903      	ldr	r1, [pc, #12]	@ (80080ac <_sbrk+0x18>)
 800809e:	6011      	str	r1, [r2, #0]
 80080a0:	6810      	ldr	r0, [r2, #0]
 80080a2:	4403      	add	r3, r0
 80080a4:	6013      	str	r3, [r2, #0]
 80080a6:	4770      	bx	lr
 80080a8:	20014640 	.word	0x20014640
 80080ac:	20014648 	.word	0x20014648

080080b0 <_init>:
 80080b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080b2:	bf00      	nop
 80080b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080b6:	bc08      	pop	{r3}
 80080b8:	469e      	mov	lr, r3
 80080ba:	4770      	bx	lr

080080bc <_fini>:
 80080bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080be:	bf00      	nop
 80080c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080c2:	bc08      	pop	{r3}
 80080c4:	469e      	mov	lr, r3
 80080c6:	4770      	bx	lr
