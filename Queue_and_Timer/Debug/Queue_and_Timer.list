
Queue_and_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000859c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  0800876c  0800876c  0000976c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bec  08008bec  0000a080  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008bec  08008bec  00009bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bf4  08008bf4  0000a080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bf4  08008bf4  00009bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008bf8  08008bf8  00009bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08008bfc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00013050  20000080  08008c7c  0000a080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200130d0  08008c7c  0000a0d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000164ef  00000000  00000000  0000a0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037d8  00000000  00000000  0002059f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f0  00000000  00000000  00023d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f7a  00000000  00000000  00025168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024dce  00000000  00000000  000260e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001af7d  00000000  00000000  0004aeb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfc40  00000000  00000000  00065e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00145a6d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057d0  00000000  00000000  00145ab0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0014b280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008754 	.word	0x08008754

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	08008754 	.word	0x08008754

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b988 	b.w	8000608 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	468e      	mov	lr, r1
 8000318:	4604      	mov	r4, r0
 800031a:	4688      	mov	r8, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4617      	mov	r7, r2
 8000324:	d962      	bls.n	80003ec <__udivmoddi4+0xdc>
 8000326:	fab2 f682 	clz	r6, r2
 800032a:	b14e      	cbz	r6, 8000340 <__udivmoddi4+0x30>
 800032c:	f1c6 0320 	rsb	r3, r6, #32
 8000330:	fa01 f806 	lsl.w	r8, r1, r6
 8000334:	fa20 f303 	lsr.w	r3, r0, r3
 8000338:	40b7      	lsls	r7, r6
 800033a:	ea43 0808 	orr.w	r8, r3, r8
 800033e:	40b4      	lsls	r4, r6
 8000340:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000344:	fa1f fc87 	uxth.w	ip, r7
 8000348:	fbb8 f1fe 	udiv	r1, r8, lr
 800034c:	0c23      	lsrs	r3, r4, #16
 800034e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000352:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000356:	fb01 f20c 	mul.w	r2, r1, ip
 800035a:	429a      	cmp	r2, r3
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x62>
 800035e:	18fb      	adds	r3, r7, r3
 8000360:	f101 30ff 	add.w	r0, r1, #4294967295
 8000364:	f080 80ea 	bcs.w	800053c <__udivmoddi4+0x22c>
 8000368:	429a      	cmp	r2, r3
 800036a:	f240 80e7 	bls.w	800053c <__udivmoddi4+0x22c>
 800036e:	3902      	subs	r1, #2
 8000370:	443b      	add	r3, r7
 8000372:	1a9a      	subs	r2, r3, r2
 8000374:	b2a3      	uxth	r3, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000382:	fb00 fc0c 	mul.w	ip, r0, ip
 8000386:	459c      	cmp	ip, r3
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0x8e>
 800038a:	18fb      	adds	r3, r7, r3
 800038c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000390:	f080 80d6 	bcs.w	8000540 <__udivmoddi4+0x230>
 8000394:	459c      	cmp	ip, r3
 8000396:	f240 80d3 	bls.w	8000540 <__udivmoddi4+0x230>
 800039a:	443b      	add	r3, r7
 800039c:	3802      	subs	r0, #2
 800039e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a2:	eba3 030c 	sub.w	r3, r3, ip
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11d      	cbz	r5, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40f3      	lsrs	r3, r6
 80003ac:	2200      	movs	r2, #0
 80003ae:	e9c5 3200 	strd	r3, r2, [r5]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d905      	bls.n	80003c6 <__udivmoddi4+0xb6>
 80003ba:	b10d      	cbz	r5, 80003c0 <__udivmoddi4+0xb0>
 80003bc:	e9c5 0100 	strd	r0, r1, [r5]
 80003c0:	2100      	movs	r1, #0
 80003c2:	4608      	mov	r0, r1
 80003c4:	e7f5      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003c6:	fab3 f183 	clz	r1, r3
 80003ca:	2900      	cmp	r1, #0
 80003cc:	d146      	bne.n	800045c <__udivmoddi4+0x14c>
 80003ce:	4573      	cmp	r3, lr
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xc8>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 8105 	bhi.w	80005e2 <__udivmoddi4+0x2d2>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb6e 0203 	sbc.w	r2, lr, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4690      	mov	r8, r2
 80003e2:	2d00      	cmp	r5, #0
 80003e4:	d0e5      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003e6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ea:	e7e2      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	2a00      	cmp	r2, #0
 80003ee:	f000 8090 	beq.w	8000512 <__udivmoddi4+0x202>
 80003f2:	fab2 f682 	clz	r6, r2
 80003f6:	2e00      	cmp	r6, #0
 80003f8:	f040 80a4 	bne.w	8000544 <__udivmoddi4+0x234>
 80003fc:	1a8a      	subs	r2, r1, r2
 80003fe:	0c03      	lsrs	r3, r0, #16
 8000400:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000404:	b280      	uxth	r0, r0
 8000406:	b2bc      	uxth	r4, r7
 8000408:	2101      	movs	r1, #1
 800040a:	fbb2 fcfe 	udiv	ip, r2, lr
 800040e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000412:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000416:	fb04 f20c 	mul.w	r2, r4, ip
 800041a:	429a      	cmp	r2, r3
 800041c:	d907      	bls.n	800042e <__udivmoddi4+0x11e>
 800041e:	18fb      	adds	r3, r7, r3
 8000420:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x11c>
 8000426:	429a      	cmp	r2, r3
 8000428:	f200 80e0 	bhi.w	80005ec <__udivmoddi4+0x2dc>
 800042c:	46c4      	mov	ip, r8
 800042e:	1a9b      	subs	r3, r3, r2
 8000430:	fbb3 f2fe 	udiv	r2, r3, lr
 8000434:	fb0e 3312 	mls	r3, lr, r2, r3
 8000438:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800043c:	fb02 f404 	mul.w	r4, r2, r4
 8000440:	429c      	cmp	r4, r3
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x144>
 8000444:	18fb      	adds	r3, r7, r3
 8000446:	f102 30ff 	add.w	r0, r2, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x142>
 800044c:	429c      	cmp	r4, r3
 800044e:	f200 80ca 	bhi.w	80005e6 <__udivmoddi4+0x2d6>
 8000452:	4602      	mov	r2, r0
 8000454:	1b1b      	subs	r3, r3, r4
 8000456:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800045a:	e7a5      	b.n	80003a8 <__udivmoddi4+0x98>
 800045c:	f1c1 0620 	rsb	r6, r1, #32
 8000460:	408b      	lsls	r3, r1
 8000462:	fa22 f706 	lsr.w	r7, r2, r6
 8000466:	431f      	orrs	r7, r3
 8000468:	fa0e f401 	lsl.w	r4, lr, r1
 800046c:	fa20 f306 	lsr.w	r3, r0, r6
 8000470:	fa2e fe06 	lsr.w	lr, lr, r6
 8000474:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000478:	4323      	orrs	r3, r4
 800047a:	fa00 f801 	lsl.w	r8, r0, r1
 800047e:	fa1f fc87 	uxth.w	ip, r7
 8000482:	fbbe f0f9 	udiv	r0, lr, r9
 8000486:	0c1c      	lsrs	r4, r3, #16
 8000488:	fb09 ee10 	mls	lr, r9, r0, lr
 800048c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000490:	fb00 fe0c 	mul.w	lr, r0, ip
 8000494:	45a6      	cmp	lr, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	d909      	bls.n	80004b0 <__udivmoddi4+0x1a0>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f100 3aff 	add.w	sl, r0, #4294967295
 80004a2:	f080 809c 	bcs.w	80005de <__udivmoddi4+0x2ce>
 80004a6:	45a6      	cmp	lr, r4
 80004a8:	f240 8099 	bls.w	80005de <__udivmoddi4+0x2ce>
 80004ac:	3802      	subs	r0, #2
 80004ae:	443c      	add	r4, r7
 80004b0:	eba4 040e 	sub.w	r4, r4, lr
 80004b4:	fa1f fe83 	uxth.w	lr, r3
 80004b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80004bc:	fb09 4413 	mls	r4, r9, r3, r4
 80004c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c8:	45a4      	cmp	ip, r4
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x1ce>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80004d2:	f080 8082 	bcs.w	80005da <__udivmoddi4+0x2ca>
 80004d6:	45a4      	cmp	ip, r4
 80004d8:	d97f      	bls.n	80005da <__udivmoddi4+0x2ca>
 80004da:	3b02      	subs	r3, #2
 80004dc:	443c      	add	r4, r7
 80004de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ea:	4564      	cmp	r4, ip
 80004ec:	4673      	mov	r3, lr
 80004ee:	46e1      	mov	r9, ip
 80004f0:	d362      	bcc.n	80005b8 <__udivmoddi4+0x2a8>
 80004f2:	d05f      	beq.n	80005b4 <__udivmoddi4+0x2a4>
 80004f4:	b15d      	cbz	r5, 800050e <__udivmoddi4+0x1fe>
 80004f6:	ebb8 0203 	subs.w	r2, r8, r3
 80004fa:	eb64 0409 	sbc.w	r4, r4, r9
 80004fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000502:	fa22 f301 	lsr.w	r3, r2, r1
 8000506:	431e      	orrs	r6, r3
 8000508:	40cc      	lsrs	r4, r1
 800050a:	e9c5 6400 	strd	r6, r4, [r5]
 800050e:	2100      	movs	r1, #0
 8000510:	e74f      	b.n	80003b2 <__udivmoddi4+0xa2>
 8000512:	fbb1 fcf2 	udiv	ip, r1, r2
 8000516:	0c01      	lsrs	r1, r0, #16
 8000518:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800051c:	b280      	uxth	r0, r0
 800051e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000522:	463b      	mov	r3, r7
 8000524:	4638      	mov	r0, r7
 8000526:	463c      	mov	r4, r7
 8000528:	46b8      	mov	r8, r7
 800052a:	46be      	mov	lr, r7
 800052c:	2620      	movs	r6, #32
 800052e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000532:	eba2 0208 	sub.w	r2, r2, r8
 8000536:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800053a:	e766      	b.n	800040a <__udivmoddi4+0xfa>
 800053c:	4601      	mov	r1, r0
 800053e:	e718      	b.n	8000372 <__udivmoddi4+0x62>
 8000540:	4610      	mov	r0, r2
 8000542:	e72c      	b.n	800039e <__udivmoddi4+0x8e>
 8000544:	f1c6 0220 	rsb	r2, r6, #32
 8000548:	fa2e f302 	lsr.w	r3, lr, r2
 800054c:	40b7      	lsls	r7, r6
 800054e:	40b1      	lsls	r1, r6
 8000550:	fa20 f202 	lsr.w	r2, r0, r2
 8000554:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000558:	430a      	orrs	r2, r1
 800055a:	fbb3 f8fe 	udiv	r8, r3, lr
 800055e:	b2bc      	uxth	r4, r7
 8000560:	fb0e 3318 	mls	r3, lr, r8, r3
 8000564:	0c11      	lsrs	r1, r2, #16
 8000566:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056a:	fb08 f904 	mul.w	r9, r8, r4
 800056e:	40b0      	lsls	r0, r6
 8000570:	4589      	cmp	r9, r1
 8000572:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000576:	b280      	uxth	r0, r0
 8000578:	d93e      	bls.n	80005f8 <__udivmoddi4+0x2e8>
 800057a:	1879      	adds	r1, r7, r1
 800057c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000580:	d201      	bcs.n	8000586 <__udivmoddi4+0x276>
 8000582:	4589      	cmp	r9, r1
 8000584:	d81f      	bhi.n	80005c6 <__udivmoddi4+0x2b6>
 8000586:	eba1 0109 	sub.w	r1, r1, r9
 800058a:	fbb1 f9fe 	udiv	r9, r1, lr
 800058e:	fb09 f804 	mul.w	r8, r9, r4
 8000592:	fb0e 1119 	mls	r1, lr, r9, r1
 8000596:	b292      	uxth	r2, r2
 8000598:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800059c:	4542      	cmp	r2, r8
 800059e:	d229      	bcs.n	80005f4 <__udivmoddi4+0x2e4>
 80005a0:	18ba      	adds	r2, r7, r2
 80005a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80005a6:	d2c4      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005a8:	4542      	cmp	r2, r8
 80005aa:	d2c2      	bcs.n	8000532 <__udivmoddi4+0x222>
 80005ac:	f1a9 0102 	sub.w	r1, r9, #2
 80005b0:	443a      	add	r2, r7
 80005b2:	e7be      	b.n	8000532 <__udivmoddi4+0x222>
 80005b4:	45f0      	cmp	r8, lr
 80005b6:	d29d      	bcs.n	80004f4 <__udivmoddi4+0x1e4>
 80005b8:	ebbe 0302 	subs.w	r3, lr, r2
 80005bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c0:	3801      	subs	r0, #1
 80005c2:	46e1      	mov	r9, ip
 80005c4:	e796      	b.n	80004f4 <__udivmoddi4+0x1e4>
 80005c6:	eba7 0909 	sub.w	r9, r7, r9
 80005ca:	4449      	add	r1, r9
 80005cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d4:	fb09 f804 	mul.w	r8, r9, r4
 80005d8:	e7db      	b.n	8000592 <__udivmoddi4+0x282>
 80005da:	4673      	mov	r3, lr
 80005dc:	e77f      	b.n	80004de <__udivmoddi4+0x1ce>
 80005de:	4650      	mov	r0, sl
 80005e0:	e766      	b.n	80004b0 <__udivmoddi4+0x1a0>
 80005e2:	4608      	mov	r0, r1
 80005e4:	e6fd      	b.n	80003e2 <__udivmoddi4+0xd2>
 80005e6:	443b      	add	r3, r7
 80005e8:	3a02      	subs	r2, #2
 80005ea:	e733      	b.n	8000454 <__udivmoddi4+0x144>
 80005ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f0:	443b      	add	r3, r7
 80005f2:	e71c      	b.n	800042e <__udivmoddi4+0x11e>
 80005f4:	4649      	mov	r1, r9
 80005f6:	e79c      	b.n	8000532 <__udivmoddi4+0x222>
 80005f8:	eba1 0109 	sub.w	r1, r1, r9
 80005fc:	46c4      	mov	ip, r8
 80005fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000602:	fb09 f804 	mul.w	r8, r9, r4
 8000606:	e7c4      	b.n	8000592 <__udivmoddi4+0x282>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <led_effect_stop>:
 */

#include "main.h"

void led_effect_stop(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af02      	add	r7, sp, #8
	for(int i=0;i<4;i++)
 8000612:	2300      	movs	r3, #0
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	e015      	b.n	8000644 <led_effect_stop+0x38>
	   {
		   handle_led_timer[i]=xTimerStop(handle_led_timer[i-1],portMAX_DELAY);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3b01      	subs	r3, #1
 800061c:	4a0d      	ldr	r2, [pc, #52]	@ (8000654 <led_effect_stop+0x48>)
 800061e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000622:	f04f 33ff 	mov.w	r3, #4294967295
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	2300      	movs	r3, #0
 800062a:	2200      	movs	r2, #0
 800062c:	2103      	movs	r1, #3
 800062e:	f006 fc57 	bl	8006ee0 <xTimerGenericCommand>
 8000632:	4603      	mov	r3, r0
 8000634:	4619      	mov	r1, r3
 8000636:	4a07      	ldr	r2, [pc, #28]	@ (8000654 <led_effect_stop+0x48>)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<4;i++)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	3301      	adds	r3, #1
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b03      	cmp	r3, #3
 8000648:	dde6      	ble.n	8000618 <led_effect_stop+0xc>
	   }
}
 800064a:	bf00      	nop
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000128 	.word	0x20000128

08000658 <led_effect>:

void led_effect(int a)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b085      	sub	sp, #20
 800065c:	af02      	add	r7, sp, #8
 800065e:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 8000660:	f7ff ffd4 	bl	800060c <led_effect_stop>
	xTimerStart(handle_led_timer[a-1],portMAX_DELAY);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	3b01      	subs	r3, #1
 8000668:	4a08      	ldr	r2, [pc, #32]	@ (800068c <led_effect+0x34>)
 800066a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800066e:	f005 fd5b 	bl	8006128 <xTaskGetTickCount>
 8000672:	4602      	mov	r2, r0
 8000674:	f04f 33ff 	mov.w	r3, #4294967295
 8000678:	9300      	str	r3, [sp, #0]
 800067a:	2300      	movs	r3, #0
 800067c:	2101      	movs	r1, #1
 800067e:	4620      	mov	r0, r4
 8000680:	f006 fc2e 	bl	8006ee0 <xTimerGenericCommand>

}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	bd90      	pop	{r4, r7, pc}
 800068c:	20000128 	.word	0x20000128

08000690 <led_effect1>:

void led_effect1(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	static int flag=1;
	(flag^=1) ? turn_off_all_leds():turn_on_all_leds();
 8000694:	4b08      	ldr	r3, [pc, #32]	@ (80006b8 <led_effect1+0x28>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	f083 0301 	eor.w	r3, r3, #1
 800069c:	4a06      	ldr	r2, [pc, #24]	@ (80006b8 <led_effect1+0x28>)
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b05      	ldr	r3, [pc, #20]	@ (80006b8 <led_effect1+0x28>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d002      	beq.n	80006ae <led_effect1+0x1e>
 80006a8:	f000 f856 	bl	8000758 <turn_off_all_leds>
}
 80006ac:	e001      	b.n	80006b2 <led_effect1+0x22>
	(flag^=1) ? turn_off_all_leds():turn_on_all_leds();
 80006ae:	f000 f847 	bl	8000740 <turn_on_all_leds>
}
 80006b2:	bf00      	nop
 80006b4:	bd80      	pop	{r7, pc}
 80006b6:	bf00      	nop
 80006b8:	20000000 	.word	0x20000000

080006bc <led_effect2>:

void led_effect2(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	static int flag=1;
	(flag^=1) ? turn_off_all_leds_500ms():turn_on_all_leds_500ms();
 80006c0:	4b08      	ldr	r3, [pc, #32]	@ (80006e4 <led_effect2+0x28>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f083 0301 	eor.w	r3, r3, #1
 80006c8:	4a06      	ldr	r2, [pc, #24]	@ (80006e4 <led_effect2+0x28>)
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b05      	ldr	r3, [pc, #20]	@ (80006e4 <led_effect2+0x28>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d002      	beq.n	80006da <led_effect2+0x1e>
 80006d4:	f000 f84c 	bl	8000770 <turn_off_all_leds_500ms>
}
 80006d8:	e001      	b.n	80006de <led_effect2+0x22>
	(flag^=1) ? turn_off_all_leds_500ms():turn_on_all_leds_500ms();
 80006da:	f000 f859 	bl	8000790 <turn_on_all_leds_500ms>
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	20000004 	.word	0x20000004

080006e8 <led_effect3>:

void led_effect3(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	static int flag=1;
	(flag^=1) ? turn_off_all_leds_1000ms():turn_on_all_leds_1000ms();
 80006ec:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <led_effect3+0x28>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f083 0301 	eor.w	r3, r3, #1
 80006f4:	4a06      	ldr	r2, [pc, #24]	@ (8000710 <led_effect3+0x28>)
 80006f6:	6013      	str	r3, [r2, #0]
 80006f8:	4b05      	ldr	r3, [pc, #20]	@ (8000710 <led_effect3+0x28>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d002      	beq.n	8000706 <led_effect3+0x1e>
 8000700:	f000 f856 	bl	80007b0 <turn_off_all_leds_1000ms>
}
 8000704:	e001      	b.n	800070a <led_effect3+0x22>
	(flag^=1) ? turn_off_all_leds_1000ms():turn_on_all_leds_1000ms();
 8000706:	f000 f863 	bl	80007d0 <turn_on_all_leds_1000ms>
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20000008 	.word	0x20000008

08000714 <led_effect4>:

void led_effect4(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	static int flag=1;
	(flag^=1) ? turn_off_all_leds_2000ms():turn_on_all_leds_2000ms();
 8000718:	4b08      	ldr	r3, [pc, #32]	@ (800073c <led_effect4+0x28>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f083 0301 	eor.w	r3, r3, #1
 8000720:	4a06      	ldr	r2, [pc, #24]	@ (800073c <led_effect4+0x28>)
 8000722:	6013      	str	r3, [r2, #0]
 8000724:	4b05      	ldr	r3, [pc, #20]	@ (800073c <led_effect4+0x28>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d002      	beq.n	8000732 <led_effect4+0x1e>
 800072c:	f000 f860 	bl	80007f0 <turn_off_all_leds_2000ms>
}
 8000730:	e001      	b.n	8000736 <led_effect4+0x22>
	(flag^=1) ? turn_off_all_leds_2000ms():turn_on_all_leds_2000ms();
 8000732:	f000 f86d 	bl	8000810 <turn_on_all_leds_2000ms>
}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	2000000c 	.word	0x2000000c

08000740 <turn_on_all_leds>:

void turn_on_all_leds(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000744:	2201      	movs	r2, #1
 8000746:	2120      	movs	r1, #32
 8000748:	4802      	ldr	r0, [pc, #8]	@ (8000754 <turn_on_all_leds+0x14>)
 800074a:	f001 fd09 	bl	8002160 <HAL_GPIO_WritePin>
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40020000 	.word	0x40020000

08000758 <turn_off_all_leds>:

void turn_off_all_leds(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	2120      	movs	r1, #32
 8000760:	4802      	ldr	r0, [pc, #8]	@ (800076c <turn_off_all_leds+0x14>)
 8000762:	f001 fcfd 	bl	8002160 <HAL_GPIO_WritePin>
}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40020000 	.word	0x40020000

08000770 <turn_off_all_leds_500ms>:

void turn_off_all_leds_500ms(void )
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8000774:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000778:	f001 f9c6 	bl	8001b08 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	2120      	movs	r1, #32
 8000780:	4802      	ldr	r0, [pc, #8]	@ (800078c <turn_off_all_leds_500ms+0x1c>)
 8000782:	f001 fced 	bl	8002160 <HAL_GPIO_WritePin>
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40020000 	.word	0x40020000

08000790 <turn_on_all_leds_500ms>:

void turn_on_all_leds_500ms(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 8000794:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000798:	f001 f9b6 	bl	8001b08 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800079c:	2201      	movs	r2, #1
 800079e:	2120      	movs	r1, #32
 80007a0:	4802      	ldr	r0, [pc, #8]	@ (80007ac <turn_on_all_leds_500ms+0x1c>)
 80007a2:	f001 fcdd 	bl	8002160 <HAL_GPIO_WritePin>
}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40020000 	.word	0x40020000

080007b0 <turn_off_all_leds_1000ms>:

void turn_off_all_leds_1000ms(void )
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 80007b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007b8:	f001 f9a6 	bl	8001b08 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007bc:	2200      	movs	r2, #0
 80007be:	2120      	movs	r1, #32
 80007c0:	4802      	ldr	r0, [pc, #8]	@ (80007cc <turn_off_all_leds_1000ms+0x1c>)
 80007c2:	f001 fccd 	bl	8002160 <HAL_GPIO_WritePin>
}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	40020000 	.word	0x40020000

080007d0 <turn_on_all_leds_1000ms>:

void turn_on_all_leds_1000ms(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 80007d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007d8:	f001 f996 	bl	8001b08 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80007dc:	2201      	movs	r2, #1
 80007de:	2120      	movs	r1, #32
 80007e0:	4802      	ldr	r0, [pc, #8]	@ (80007ec <turn_on_all_leds_1000ms+0x1c>)
 80007e2:	f001 fcbd 	bl	8002160 <HAL_GPIO_WritePin>
}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40020000 	.word	0x40020000

080007f0 <turn_off_all_leds_2000ms>:

void turn_off_all_leds_2000ms(void )
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	HAL_Delay(2000);
 80007f4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80007f8:	f001 f986 	bl	8001b08 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	2120      	movs	r1, #32
 8000800:	4802      	ldr	r0, [pc, #8]	@ (800080c <turn_off_all_leds_2000ms+0x1c>)
 8000802:	f001 fcad 	bl	8002160 <HAL_GPIO_WritePin>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40020000 	.word	0x40020000

08000810 <turn_on_all_leds_2000ms>:

void turn_on_all_leds_2000ms(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	HAL_Delay(2000);
 8000814:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000818:	f001 f976 	bl	8001b08 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800081c:	2201      	movs	r2, #1
 800081e:	2120      	movs	r1, #32
 8000820:	4802      	ldr	r0, [pc, #8]	@ (800082c <turn_on_all_leds_2000ms+0x1c>)
 8000822:	f001 fc9d 	bl	8002160 <HAL_GPIO_WritePin>
}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	40020000 	.word	0x40020000

08000830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	@ 0x28
 8000834:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000836:	f001 f925 	bl	8001a84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800083a:	f000 f919 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800083e:	f000 f9d9 	bl	8000bf4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000842:	f000 f987 	bl	8000b54 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000846:	f000 f9ab 	bl	8000ba0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  status=xTaskCreate(menu_task,"Menu task",200,NULL,2,&handle_menu_task);
 800084a:	4b72      	ldr	r3, [pc, #456]	@ (8000a14 <main+0x1e4>)
 800084c:	9301      	str	r3, [sp, #4]
 800084e:	2302      	movs	r3, #2
 8000850:	9300      	str	r3, [sp, #0]
 8000852:	2300      	movs	r3, #0
 8000854:	22c8      	movs	r2, #200	@ 0xc8
 8000856:	4970      	ldr	r1, [pc, #448]	@ (8000a18 <main+0x1e8>)
 8000858:	4870      	ldr	r0, [pc, #448]	@ (8000a1c <main+0x1ec>)
 800085a:	f005 fa3d 	bl	8005cd8 <xTaskCreate>
 800085e:	4603      	mov	r3, r0
 8000860:	4a6f      	ldr	r2, [pc, #444]	@ (8000a20 <main+0x1f0>)
 8000862:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000864:	4b6e      	ldr	r3, [pc, #440]	@ (8000a20 <main+0x1f0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d00b      	beq.n	8000884 <main+0x54>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800086c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000870:	f383 8811 	msr	BASEPRI, r3
 8000874:	f3bf 8f6f 	isb	sy
 8000878:	f3bf 8f4f 	dsb	sy
 800087c:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800087e:	bf00      	nop
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <main+0x50>

  status=xTaskCreate(cmd_task,"CMD task",200,NULL,2,&handle_cmd_task);
 8000884:	4b67      	ldr	r3, [pc, #412]	@ (8000a24 <main+0x1f4>)
 8000886:	9301      	str	r3, [sp, #4]
 8000888:	2302      	movs	r3, #2
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	2300      	movs	r3, #0
 800088e:	22c8      	movs	r2, #200	@ 0xc8
 8000890:	4965      	ldr	r1, [pc, #404]	@ (8000a28 <main+0x1f8>)
 8000892:	4866      	ldr	r0, [pc, #408]	@ (8000a2c <main+0x1fc>)
 8000894:	f005 fa20 	bl	8005cd8 <xTaskCreate>
 8000898:	4603      	mov	r3, r0
 800089a:	4a61      	ldr	r2, [pc, #388]	@ (8000a20 <main+0x1f0>)
 800089c:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 800089e:	4b60      	ldr	r3, [pc, #384]	@ (8000a20 <main+0x1f0>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	2b01      	cmp	r3, #1
 80008a4:	d00b      	beq.n	80008be <main+0x8e>
        __asm volatile
 80008a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008aa:	f383 8811 	msr	BASEPRI, r3
 80008ae:	f3bf 8f6f 	isb	sy
 80008b2:	f3bf 8f4f 	dsb	sy
 80008b6:	617b      	str	r3, [r7, #20]
    }
 80008b8:	bf00      	nop
 80008ba:	bf00      	nop
 80008bc:	e7fd      	b.n	80008ba <main+0x8a>

  status=xTaskCreate(print_task,"Print task",200,NULL,2,&handle_print_task);
 80008be:	4b5c      	ldr	r3, [pc, #368]	@ (8000a30 <main+0x200>)
 80008c0:	9301      	str	r3, [sp, #4]
 80008c2:	2302      	movs	r3, #2
 80008c4:	9300      	str	r3, [sp, #0]
 80008c6:	2300      	movs	r3, #0
 80008c8:	22c8      	movs	r2, #200	@ 0xc8
 80008ca:	495a      	ldr	r1, [pc, #360]	@ (8000a34 <main+0x204>)
 80008cc:	485a      	ldr	r0, [pc, #360]	@ (8000a38 <main+0x208>)
 80008ce:	f005 fa03 	bl	8005cd8 <xTaskCreate>
 80008d2:	4603      	mov	r3, r0
 80008d4:	4a52      	ldr	r2, [pc, #328]	@ (8000a20 <main+0x1f0>)
 80008d6:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 80008d8:	4b51      	ldr	r3, [pc, #324]	@ (8000a20 <main+0x1f0>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d00b      	beq.n	80008f8 <main+0xc8>
        __asm volatile
 80008e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008e4:	f383 8811 	msr	BASEPRI, r3
 80008e8:	f3bf 8f6f 	isb	sy
 80008ec:	f3bf 8f4f 	dsb	sy
 80008f0:	613b      	str	r3, [r7, #16]
    }
 80008f2:	bf00      	nop
 80008f4:	bf00      	nop
 80008f6:	e7fd      	b.n	80008f4 <main+0xc4>

  status=xTaskCreate(led_task,"LED task",200,NULL,2,&handle_led_task);
 80008f8:	4b50      	ldr	r3, [pc, #320]	@ (8000a3c <main+0x20c>)
 80008fa:	9301      	str	r3, [sp, #4]
 80008fc:	2302      	movs	r3, #2
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	2300      	movs	r3, #0
 8000902:	22c8      	movs	r2, #200	@ 0xc8
 8000904:	494e      	ldr	r1, [pc, #312]	@ (8000a40 <main+0x210>)
 8000906:	484f      	ldr	r0, [pc, #316]	@ (8000a44 <main+0x214>)
 8000908:	f005 f9e6 	bl	8005cd8 <xTaskCreate>
 800090c:	4603      	mov	r3, r0
 800090e:	4a44      	ldr	r2, [pc, #272]	@ (8000a20 <main+0x1f0>)
 8000910:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000912:	4b43      	ldr	r3, [pc, #268]	@ (8000a20 <main+0x1f0>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d00b      	beq.n	8000932 <main+0x102>
        __asm volatile
 800091a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800091e:	f383 8811 	msr	BASEPRI, r3
 8000922:	f3bf 8f6f 	isb	sy
 8000926:	f3bf 8f4f 	dsb	sy
 800092a:	60fb      	str	r3, [r7, #12]
    }
 800092c:	bf00      	nop
 800092e:	bf00      	nop
 8000930:	e7fd      	b.n	800092e <main+0xfe>

  status=xTaskCreate(rtc_task,"RTC task",200,NULL,2,&handle_rtc_task);
 8000932:	4b45      	ldr	r3, [pc, #276]	@ (8000a48 <main+0x218>)
 8000934:	9301      	str	r3, [sp, #4]
 8000936:	2302      	movs	r3, #2
 8000938:	9300      	str	r3, [sp, #0]
 800093a:	2300      	movs	r3, #0
 800093c:	22c8      	movs	r2, #200	@ 0xc8
 800093e:	4943      	ldr	r1, [pc, #268]	@ (8000a4c <main+0x21c>)
 8000940:	4843      	ldr	r0, [pc, #268]	@ (8000a50 <main+0x220>)
 8000942:	f005 f9c9 	bl	8005cd8 <xTaskCreate>
 8000946:	4603      	mov	r3, r0
 8000948:	4a35      	ldr	r2, [pc, #212]	@ (8000a20 <main+0x1f0>)
 800094a:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 800094c:	4b34      	ldr	r3, [pc, #208]	@ (8000a20 <main+0x1f0>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d00b      	beq.n	800096c <main+0x13c>
        __asm volatile
 8000954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000958:	f383 8811 	msr	BASEPRI, r3
 800095c:	f3bf 8f6f 	isb	sy
 8000960:	f3bf 8f4f 	dsb	sy
 8000964:	60bb      	str	r3, [r7, #8]
    }
 8000966:	bf00      	nop
 8000968:	bf00      	nop
 800096a:	e7fd      	b.n	8000968 <main+0x138>

   // Queue creation
   q_data = xQueueCreate(10,sizeof(char)); // no of items is 10 and each item is of size char
 800096c:	2200      	movs	r2, #0
 800096e:	2101      	movs	r1, #1
 8000970:	200a      	movs	r0, #10
 8000972:	f004 fc75 	bl	8005260 <xQueueGenericCreate>
 8000976:	4603      	mov	r3, r0
 8000978:	4a36      	ldr	r2, [pc, #216]	@ (8000a54 <main+0x224>)
 800097a:	6013      	str	r3, [r2, #0]
   configASSERT(q_data != NULL); // xQueueCreate returns NULL id queue is not created
 800097c:	4b35      	ldr	r3, [pc, #212]	@ (8000a54 <main+0x224>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d10b      	bne.n	800099c <main+0x16c>
        __asm volatile
 8000984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000988:	f383 8811 	msr	BASEPRI, r3
 800098c:	f3bf 8f6f 	isb	sy
 8000990:	f3bf 8f4f 	dsb	sy
 8000994:	607b      	str	r3, [r7, #4]
    }
 8000996:	bf00      	nop
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <main+0x168>

   q_print= xQueueCreate(10,sizeof(size_t)); //size of the pointer pointed to
 800099c:	2200      	movs	r2, #0
 800099e:	2104      	movs	r1, #4
 80009a0:	200a      	movs	r0, #10
 80009a2:	f004 fc5d 	bl	8005260 <xQueueGenericCreate>
 80009a6:	4603      	mov	r3, r0
 80009a8:	4a2b      	ldr	r2, [pc, #172]	@ (8000a58 <main+0x228>)
 80009aa:	6013      	str	r3, [r2, #0]
   configASSERT(q_print != NULL);
 80009ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000a58 <main+0x228>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d10b      	bne.n	80009cc <main+0x19c>
        __asm volatile
 80009b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80009b8:	f383 8811 	msr	BASEPRI, r3
 80009bc:	f3bf 8f6f 	isb	sy
 80009c0:	f3bf 8f4f 	dsb	sy
 80009c4:	603b      	str	r3, [r7, #0]
    }
 80009c6:	bf00      	nop
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <main+0x198>

   //Create software timer for the LED effects

   for(int i=0;i<4;i++)
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
 80009d0:	e013      	b.n	80009fa <main+0x1ca>
   {
	   handle_led_timer[i]=xTimerCreate("Led_Timer",pdMS_TO_TICKS(500),pdTRUE,(void *)(i+1),led_effect_callback);
 80009d2:	69fb      	ldr	r3, [r7, #28]
 80009d4:	3301      	adds	r3, #1
 80009d6:	461a      	mov	r2, r3
 80009d8:	4b20      	ldr	r3, [pc, #128]	@ (8000a5c <main+0x22c>)
 80009da:	9300      	str	r3, [sp, #0]
 80009dc:	4613      	mov	r3, r2
 80009de:	2201      	movs	r2, #1
 80009e0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80009e4:	481e      	ldr	r0, [pc, #120]	@ (8000a60 <main+0x230>)
 80009e6:	f006 fa1d 	bl	8006e24 <xTimerCreate>
 80009ea:	4602      	mov	r2, r0
 80009ec:	491d      	ldr	r1, [pc, #116]	@ (8000a64 <main+0x234>)
 80009ee:	69fb      	ldr	r3, [r7, #28]
 80009f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   for(int i=0;i<4;i++)
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	3301      	adds	r3, #1
 80009f8:	61fb      	str	r3, [r7, #28]
 80009fa:	69fb      	ldr	r3, [r7, #28]
 80009fc:	2b03      	cmp	r3, #3
 80009fe:	dde8      	ble.n	80009d2 <main+0x1a2>
   }

   // Prepares the UART peripheral to receive data in interrupt mode
   HAL_UART_Receive_IT(&huart2, (uint8_t *)&user_data, 1);
 8000a00:	2201      	movs	r2, #1
 8000a02:	4919      	ldr	r1, [pc, #100]	@ (8000a68 <main+0x238>)
 8000a04:	4819      	ldr	r0, [pc, #100]	@ (8000a6c <main+0x23c>)
 8000a06:	f003 fb8a 	bl	800411e <HAL_UART_Receive_IT>

   //Start task scheduler
   vTaskStartScheduler();
 8000a0a:	f005 fa9d 	bl	8005f48 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a0e:	bf00      	nop
 8000a10:	e7fd      	b.n	8000a0e <main+0x1de>
 8000a12:	bf00      	nop
 8000a14:	20000104 	.word	0x20000104
 8000a18:	0800876c 	.word	0x0800876c
 8000a1c:	08001205 	.word	0x08001205
 8000a20:	20000120 	.word	0x20000120
 8000a24:	20000108 	.word	0x20000108
 8000a28:	08008778 	.word	0x08008778
 8000a2c:	080012f1 	.word	0x080012f1
 8000a30:	2000010c 	.word	0x2000010c
 8000a34:	08008784 	.word	0x08008784
 8000a38:	08001321 	.word	0x08001321
 8000a3c:	20000110 	.word	0x20000110
 8000a40:	08008790 	.word	0x08008790
 8000a44:	08001361 	.word	0x08001361
 8000a48:	20000114 	.word	0x20000114
 8000a4c:	0800879c 	.word	0x0800879c
 8000a50:	080014d1 	.word	0x080014d1
 8000a54:	20000118 	.word	0x20000118
 8000a58:	2000011c 	.word	0x2000011c
 8000a5c:	08000ca5 	.word	0x08000ca5
 8000a60:	080087a8 	.word	0x080087a8
 8000a64:	20000128 	.word	0x20000128
 8000a68:	20000124 	.word	0x20000124
 8000a6c:	200000bc 	.word	0x200000bc

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b094      	sub	sp, #80	@ 0x50
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	2234      	movs	r2, #52	@ 0x34
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f007 f9e2 	bl	8007e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 0308 	add.w	r3, r7, #8
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	4b2c      	ldr	r3, [pc, #176]	@ (8000b4c <SystemClock_Config+0xdc>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9c:	4a2b      	ldr	r2, [pc, #172]	@ (8000b4c <SystemClock_Config+0xdc>)
 8000a9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa4:	4b29      	ldr	r3, [pc, #164]	@ (8000b4c <SystemClock_Config+0xdc>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aac:	607b      	str	r3, [r7, #4]
 8000aae:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	4b26      	ldr	r3, [pc, #152]	@ (8000b50 <SystemClock_Config+0xe0>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000abc:	4a24      	ldr	r2, [pc, #144]	@ (8000b50 <SystemClock_Config+0xe0>)
 8000abe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ac2:	6013      	str	r3, [r2, #0]
 8000ac4:	4b22      	ldr	r3, [pc, #136]	@ (8000b50 <SystemClock_Config+0xe0>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000ad0:	230a      	movs	r3, #10
 8000ad2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000adc:	2310      	movs	r3, #16
 8000ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000aec:	2310      	movs	r3, #16
 8000aee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000af0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000af4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000af6:	2304      	movs	r3, #4
 8000af8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000afa:	2302      	movs	r3, #2
 8000afc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000afe:	2302      	movs	r3, #2
 8000b00:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b02:	f107 031c 	add.w	r3, r7, #28
 8000b06:	4618      	mov	r0, r3
 8000b08:	f002 f9ea 	bl	8002ee0 <HAL_RCC_OscConfig>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000b12:	f000 f94b 	bl	8000dac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b16:	230f      	movs	r3, #15
 8000b18:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b2c:	f107 0308 	add.w	r3, r7, #8
 8000b30:	2102      	movs	r1, #2
 8000b32:	4618      	mov	r0, r3
 8000b34:	f001 fb2e 	bl	8002194 <HAL_RCC_ClockConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000b3e:	f000 f935 	bl	8000dac <Error_Handler>
  }
}
 8000b42:	bf00      	nop
 8000b44:	3750      	adds	r7, #80	@ 0x50
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023800 	.word	0x40023800
 8000b50:	40007000 	.word	0x40007000

08000b54 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000b58:	4b0f      	ldr	r3, [pc, #60]	@ (8000b98 <MX_RTC_Init+0x44>)
 8000b5a:	4a10      	ldr	r2, [pc, #64]	@ (8000b9c <MX_RTC_Init+0x48>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b98 <MX_RTC_Init+0x44>)
 8000b60:	2240      	movs	r2, #64	@ 0x40
 8000b62:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <MX_RTC_Init+0x44>)
 8000b66:	227f      	movs	r2, #127	@ 0x7f
 8000b68:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b98 <MX_RTC_Init+0x44>)
 8000b6c:	22ff      	movs	r2, #255	@ 0xff
 8000b6e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000b70:	4b09      	ldr	r3, [pc, #36]	@ (8000b98 <MX_RTC_Init+0x44>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000b76:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <MX_RTC_Init+0x44>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <MX_RTC_Init+0x44>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000b82:	4805      	ldr	r0, [pc, #20]	@ (8000b98 <MX_RTC_Init+0x44>)
 8000b84:	f002 fc4a 	bl	800341c <HAL_RTC_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000b8e:	f000 f90d 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	2000009c 	.word	0x2000009c
 8000b9c:	40002800 	.word	0x40002800

08000ba0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ba4:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <MX_USART2_UART_Init+0x4c>)
 8000ba6:	4a12      	ldr	r2, [pc, #72]	@ (8000bf0 <MX_USART2_UART_Init+0x50>)
 8000ba8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000baa:	4b10      	ldr	r3, [pc, #64]	@ (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc4:	4b09      	ldr	r3, [pc, #36]	@ (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bc6:	220c      	movs	r2, #12
 8000bc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bca:	4b08      	ldr	r3, [pc, #32]	@ (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd0:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bd6:	4805      	ldr	r0, [pc, #20]	@ (8000bec <MX_USART2_UART_Init+0x4c>)
 8000bd8:	f003 f9c6 	bl	8003f68 <HAL_UART_Init>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000be2:	f000 f8e3 	bl	8000dac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200000bc 	.word	0x200000bc
 8000bf0:	40004400 	.word	0x40004400

08000bf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	@ 0x28
 8000bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
 8000c0e:	4b23      	ldr	r3, [pc, #140]	@ (8000c9c <MX_GPIO_Init+0xa8>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c12:	4a22      	ldr	r2, [pc, #136]	@ (8000c9c <MX_GPIO_Init+0xa8>)
 8000c14:	f043 0304 	orr.w	r3, r3, #4
 8000c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1a:	4b20      	ldr	r3, [pc, #128]	@ (8000c9c <MX_GPIO_Init+0xa8>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c1e:	f003 0304 	and.w	r3, r3, #4
 8000c22:	613b      	str	r3, [r7, #16]
 8000c24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c9c <MX_GPIO_Init+0xa8>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	4a1b      	ldr	r2, [pc, #108]	@ (8000c9c <MX_GPIO_Init+0xa8>)
 8000c30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c36:	4b19      	ldr	r3, [pc, #100]	@ (8000c9c <MX_GPIO_Init+0xa8>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	4b15      	ldr	r3, [pc, #84]	@ (8000c9c <MX_GPIO_Init+0xa8>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	4a14      	ldr	r2, [pc, #80]	@ (8000c9c <MX_GPIO_Init+0xa8>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c52:	4b12      	ldr	r3, [pc, #72]	@ (8000c9c <MX_GPIO_Init+0xa8>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <MX_GPIO_Init+0xa8>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	4a0d      	ldr	r2, [pc, #52]	@ (8000c9c <MX_GPIO_Init+0xa8>)
 8000c68:	f043 0302 	orr.w	r3, r3, #2
 8000c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c9c <MX_GPIO_Init+0xa8>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c7a:	2320      	movs	r3, #32
 8000c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c7e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000c82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	4804      	ldr	r0, [pc, #16]	@ (8000ca0 <MX_GPIO_Init+0xac>)
 8000c90:	f001 f8d2 	bl	8001e38 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c94:	bf00      	nop
 8000c96:	3728      	adds	r7, #40	@ 0x28
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40020000 	.word	0x40020000

08000ca4 <led_effect_callback>:

/* USER CODE BEGIN 4 */

void led_effect_callback(TimerHandle_t xTimer)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
	int id;
	id=(uint32_t)pvTimerGetTimerID(xTimer);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f006 fc2b 	bl	8007508 <pvTimerGetTimerID>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	60fb      	str	r3, [r7, #12]
	switch(id)
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	3b01      	subs	r3, #1
 8000cba:	2b03      	cmp	r3, #3
 8000cbc:	d816      	bhi.n	8000cec <led_effect_callback+0x48>
 8000cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8000cc4 <led_effect_callback+0x20>)
 8000cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cc4:	08000cd5 	.word	0x08000cd5
 8000cc8:	08000cdb 	.word	0x08000cdb
 8000ccc:	08000ce1 	.word	0x08000ce1
 8000cd0:	08000ce7 	.word	0x08000ce7
	{
	case 1:
		led_effect1();
 8000cd4:	f7ff fcdc 	bl	8000690 <led_effect1>
		break;
 8000cd8:	e008      	b.n	8000cec <led_effect_callback+0x48>
	case 2:
		led_effect2();
 8000cda:	f7ff fcef 	bl	80006bc <led_effect2>
		break;
 8000cde:	e005      	b.n	8000cec <led_effect_callback+0x48>
	case 3:
		led_effect3();
 8000ce0:	f7ff fd02 	bl	80006e8 <led_effect3>
		break;
 8000ce4:	e002      	b.n	8000cec <led_effect_callback+0x48>
	case 4:
		led_effect4();
 8000ce6:	f7ff fd15 	bl	8000714 <led_effect4>
		break;
 8000cea:	bf00      	nop
	}
}
 8000cec:	bf00      	nop
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_UART_RxCpltCallback>:
// This function is called once the data from the user is received by the UART peripheral
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b086      	sub	sp, #24
 8000cf8:	af02      	add	r7, sp, #8
 8000cfa:	6078      	str	r0, [r7, #4]

	uint8_t dummy;
	/*TODO: check : is queue full ? */
	if(xQueueIsQueueFullFromISR(q_data)==pdFALSE)
 8000cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8000d78 <HAL_UART_RxCpltCallback+0x84>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f004 ff64 	bl	8005bce <xQueueIsQueueFullFromISR>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d107      	bne.n	8000d1c <HAL_UART_RxCpltCallback+0x28>
		{
			/*Queue is not full if the body of the if condition is entered */

			/* Enqueue data byte - add data item to the end of queue*/
		xQueueSendFromISR(q_data, (void *)&user_data, NULL);
 8000d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000d78 <HAL_UART_RxCpltCallback+0x84>)
 8000d0e:	6818      	ldr	r0, [r3, #0]
 8000d10:	2300      	movs	r3, #0
 8000d12:	2200      	movs	r2, #0
 8000d14:	4919      	ldr	r1, [pc, #100]	@ (8000d7c <HAL_UART_RxCpltCallback+0x88>)
 8000d16:	f004 fc13 	bl	8005540 <xQueueGenericSendFromISR>
 8000d1a:	e013      	b.n	8000d44 <HAL_UART_RxCpltCallback+0x50>
		}
	else
	{
			/*Queue is full */

			if(user_data == '\n')
 8000d1c:	4b17      	ldr	r3, [pc, #92]	@ (8000d7c <HAL_UART_RxCpltCallback+0x88>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	2b0a      	cmp	r3, #10
 8000d24:	d10e      	bne.n	8000d44 <HAL_UART_RxCpltCallback+0x50>
			{
				/*user_data = '\n' */

				/*TODO: make sure that last data byte of the queue is '\n' */
				xQueueReceiveFromISR(q_data, (void *)&dummy, NULL);
 8000d26:	4b14      	ldr	r3, [pc, #80]	@ (8000d78 <HAL_UART_RxCpltCallback+0x84>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f107 010f 	add.w	r1, r7, #15
 8000d2e:	2200      	movs	r2, #0
 8000d30:	4618      	mov	r0, r3
 8000d32:	f004 fd8b 	bl	800584c <xQueueReceiveFromISR>
				xQueueSendFromISR(q_data, (void *)&user_data, NULL);
 8000d36:	4b10      	ldr	r3, [pc, #64]	@ (8000d78 <HAL_UART_RxCpltCallback+0x84>)
 8000d38:	6818      	ldr	r0, [r3, #0]
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	490f      	ldr	r1, [pc, #60]	@ (8000d7c <HAL_UART_RxCpltCallback+0x88>)
 8000d40:	f004 fbfe 	bl	8005540 <xQueueGenericSendFromISR>
		     }

	}
		/*TODO: send notification to command handling task if user_data = '\n' */
        if(user_data == '\n')
 8000d44:	4b0d      	ldr	r3, [pc, #52]	@ (8000d7c <HAL_UART_RxCpltCallback+0x88>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b0a      	cmp	r3, #10
 8000d4c:	d10a      	bne.n	8000d64 <HAL_UART_RxCpltCallback+0x70>
        	xTaskNotifyFromISR(handle_cmd_task,0,eNoAction,NULL);
 8000d4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d80 <HAL_UART_RxCpltCallback+0x8c>)
 8000d50:	6818      	ldr	r0, [r3, #0]
 8000d52:	2300      	movs	r3, #0
 8000d54:	9301      	str	r3, [sp, #4]
 8000d56:	2300      	movs	r3, #0
 8000d58:	9300      	str	r3, [sp, #0]
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2100      	movs	r1, #0
 8000d60:	f005 fec0 	bl	8006ae4 <xTaskGenericNotifyFromISR>


		/* TODO: Enable UART data byte reception again in IT mode */
        HAL_UART_Receive_IT(&huart2,(uint8_t *) &user_data, 1);
 8000d64:	2201      	movs	r2, #1
 8000d66:	4905      	ldr	r1, [pc, #20]	@ (8000d7c <HAL_UART_RxCpltCallback+0x88>)
 8000d68:	4806      	ldr	r0, [pc, #24]	@ (8000d84 <HAL_UART_RxCpltCallback+0x90>)
 8000d6a:	f003 f9d8 	bl	800411e <HAL_UART_Receive_IT>
}
 8000d6e:	bf00      	nop
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	20000118 	.word	0x20000118
 8000d7c:	20000124 	.word	0x20000124
 8000d80:	20000108 	.word	0x20000108
 8000d84:	200000bc 	.word	0x200000bc

08000d88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a04      	ldr	r2, [pc, #16]	@ (8000da8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d101      	bne.n	8000d9e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000d9a:	f000 fe95 	bl	8001ac8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40001000 	.word	0x40001000

08000dac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db0:	b672      	cpsid	i
}
 8000db2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <Error_Handler+0x8>

08000db8 <show_time_date>:
	printf("\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);

 }

void show_time_date(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08c      	sub	sp, #48	@ 0x30
 8000dbc:	af04      	add	r7, sp, #16
	RTC_TimeTypeDef rtc_time;

	static char *time = showtime;
	static char *date = showdate;

	memset(&rtc_date,0,sizeof(rtc_date));
 8000dbe:	f107 0318 	add.w	r3, r7, #24
 8000dc2:	2204      	movs	r2, #4
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f007 f83e 	bl	8007e48 <memset>
	memset(&rtc_time,0,sizeof(rtc_time));
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2214      	movs	r2, #20
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f007 f838 	bl	8007e48 <memset>

	/* Get the RTC current Time */
	HAL_RTC_GetTime(&hrtc, &rtc_time, RTC_FORMAT_BIN);
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	2200      	movs	r2, #0
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4821      	ldr	r0, [pc, #132]	@ (8000e64 <show_time_date+0xac>)
 8000de0:	f002 fc37 	bl	8003652 <HAL_RTC_GetTime>
	/* Get the RTC current Date */
	HAL_RTC_GetDate(&hrtc, &rtc_date, RTC_FORMAT_BIN);
 8000de4:	f107 0318 	add.w	r3, r7, #24
 8000de8:	2200      	movs	r2, #0
 8000dea:	4619      	mov	r1, r3
 8000dec:	481d      	ldr	r0, [pc, #116]	@ (8000e64 <show_time_date+0xac>)
 8000dee:	f002 fd12 	bl	8003816 <HAL_RTC_GetDate>

	char *format;
	format = (rtc_time.TimeFormat == RTC_HOURFORMAT12_AM) ? "AM" : "PM";
 8000df2:	79fb      	ldrb	r3, [r7, #7]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d101      	bne.n	8000dfc <show_time_date+0x44>
 8000df8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e68 <show_time_date+0xb0>)
 8000dfa:	e000      	b.n	8000dfe <show_time_date+0x46>
 8000dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8000e6c <show_time_date+0xb4>)
 8000dfe:	61fb      	str	r3, [r7, #28]

	/* Display time Format : hh:mm:ss [AM/PM] */
	sprintf((char*)showtime,"%s:\t%02d:%02d:%02d [%s]","\nCurrent Time&Date",rtc_time.Hours, rtc_time.Minutes, rtc_time.Seconds,format);
 8000e00:	793b      	ldrb	r3, [r7, #4]
 8000e02:	4618      	mov	r0, r3
 8000e04:	797b      	ldrb	r3, [r7, #5]
 8000e06:	461a      	mov	r2, r3
 8000e08:	79bb      	ldrb	r3, [r7, #6]
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	9302      	str	r3, [sp, #8]
 8000e10:	9101      	str	r1, [sp, #4]
 8000e12:	9200      	str	r2, [sp, #0]
 8000e14:	4603      	mov	r3, r0
 8000e16:	4a16      	ldr	r2, [pc, #88]	@ (8000e70 <show_time_date+0xb8>)
 8000e18:	4916      	ldr	r1, [pc, #88]	@ (8000e74 <show_time_date+0xbc>)
 8000e1a:	4817      	ldr	r0, [pc, #92]	@ (8000e78 <show_time_date+0xc0>)
 8000e1c:	f006 fff2 	bl	8007e04 <siprintf>
	xQueueSend(q_print,&time,portMAX_DELAY);
 8000e20:	4b16      	ldr	r3, [pc, #88]	@ (8000e7c <show_time_date+0xc4>)
 8000e22:	6818      	ldr	r0, [r3, #0]
 8000e24:	2300      	movs	r3, #0
 8000e26:	f04f 32ff 	mov.w	r2, #4294967295
 8000e2a:	4915      	ldr	r1, [pc, #84]	@ (8000e80 <show_time_date+0xc8>)
 8000e2c:	f004 fa9e 	bl	800536c <xQueueGenericSend>

	/* Display date Format : date-month-year */
	sprintf((char*)showdate,"\t%02d-%02d-%2d\n",rtc_date.Month, rtc_date.Date, 2000 + rtc_date.Year);
 8000e30:	7e7b      	ldrb	r3, [r7, #25]
 8000e32:	461a      	mov	r2, r3
 8000e34:	7ebb      	ldrb	r3, [r7, #26]
 8000e36:	4619      	mov	r1, r3
 8000e38:	7efb      	ldrb	r3, [r7, #27]
 8000e3a:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000e3e:	9300      	str	r3, [sp, #0]
 8000e40:	460b      	mov	r3, r1
 8000e42:	4910      	ldr	r1, [pc, #64]	@ (8000e84 <show_time_date+0xcc>)
 8000e44:	4810      	ldr	r0, [pc, #64]	@ (8000e88 <show_time_date+0xd0>)
 8000e46:	f006 ffdd 	bl	8007e04 <siprintf>
	xQueueSend(q_print,&date,portMAX_DELAY);
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e7c <show_time_date+0xc4>)
 8000e4c:	6818      	ldr	r0, [r3, #0]
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f04f 32ff 	mov.w	r2, #4294967295
 8000e54:	490d      	ldr	r1, [pc, #52]	@ (8000e8c <show_time_date+0xd4>)
 8000e56:	f004 fa89 	bl	800536c <xQueueGenericSend>
}
 8000e5a:	bf00      	nop
 8000e5c:	3720      	adds	r7, #32
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	2000009c 	.word	0x2000009c
 8000e68:	080087b4 	.word	0x080087b4
 8000e6c:	080087b8 	.word	0x080087b8
 8000e70:	080087e0 	.word	0x080087e0
 8000e74:	080087f4 	.word	0x080087f4
 8000e78:	2000013c 	.word	0x2000013c
 8000e7c:	2000011c 	.word	0x2000011c
 8000e80:	20000010 	.word	0x20000010
 8000e84:	080087d0 	.word	0x080087d0
 8000e88:	20000164 	.word	0x20000164
 8000e8c:	20000014 	.word	0x20000014

08000e90 <rtc_configure_time>:


void rtc_configure_time(RTC_TimeTypeDef *time)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b082      	sub	sp, #8
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]

	time->TimeFormat = RTC_HOURFORMAT12_AM;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	70da      	strb	r2, [r3, #3]
	time->DayLightSaving = RTC_DAYLIGHTSAVING_NONE ;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	60da      	str	r2, [r3, #12]
	time->StoreOperation = RTC_STOREOPERATION_RESET;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]

	HAL_RTC_SetTime(&hrtc,time,RTC_FORMAT_BIN);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	6879      	ldr	r1, [r7, #4]
 8000eae:	4803      	ldr	r0, [pc, #12]	@ (8000ebc <rtc_configure_time+0x2c>)
 8000eb0:	f002 fb35 	bl	800351e <HAL_RTC_SetTime>
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	2000009c 	.word	0x2000009c

08000ec0 <rtc_configure_date>:


void rtc_configure_date(RTC_DateTypeDef *date)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
	HAL_RTC_SetDate(&hrtc,date,RTC_FORMAT_BIN);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	4803      	ldr	r0, [pc, #12]	@ (8000edc <rtc_configure_date+0x1c>)
 8000ece:	f002 fc1e 	bl	800370e <HAL_RTC_SetDate>
}
 8000ed2:	bf00      	nop
 8000ed4:	3708      	adds	r7, #8
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	2000009c 	.word	0x2000009c

08000ee0 <validate_rtc_information>:


int validate_rtc_information(RTC_TimeTypeDef *time , RTC_DateTypeDef *date)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	6039      	str	r1, [r7, #0]
	if(time){
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d00d      	beq.n	8000f0c <validate_rtc_information+0x2c>
		if( (time->Hours > 12) || (time->Minutes > 59) || (time->Seconds > 59) )
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b0c      	cmp	r3, #12
 8000ef6:	d807      	bhi.n	8000f08 <validate_rtc_information+0x28>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	785b      	ldrb	r3, [r3, #1]
 8000efc:	2b3b      	cmp	r3, #59	@ 0x3b
 8000efe:	d803      	bhi.n	8000f08 <validate_rtc_information+0x28>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	789b      	ldrb	r3, [r3, #2]
 8000f04:	2b3b      	cmp	r3, #59	@ 0x3b
 8000f06:	d901      	bls.n	8000f0c <validate_rtc_information+0x2c>
			return 1;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e015      	b.n	8000f38 <validate_rtc_information+0x58>
	}

	if(date){
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d011      	beq.n	8000f36 <validate_rtc_information+0x56>
		if( (date->Date > 31) || (date->WeekDay > 7) || (date->Year > 99) || (date->Month > 12) )
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	789b      	ldrb	r3, [r3, #2]
 8000f16:	2b1f      	cmp	r3, #31
 8000f18:	d80b      	bhi.n	8000f32 <validate_rtc_information+0x52>
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b07      	cmp	r3, #7
 8000f20:	d807      	bhi.n	8000f32 <validate_rtc_information+0x52>
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	78db      	ldrb	r3, [r3, #3]
 8000f26:	2b63      	cmp	r3, #99	@ 0x63
 8000f28:	d803      	bhi.n	8000f32 <validate_rtc_information+0x52>
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	785b      	ldrb	r3, [r3, #1]
 8000f2e:	2b0c      	cmp	r3, #12
 8000f30:	d901      	bls.n	8000f36 <validate_rtc_information+0x56>
			return 1;
 8000f32:	2301      	movs	r3, #1
 8000f34:	e000      	b.n	8000f38 <validate_rtc_information+0x58>
	}

	return 0;
 8000f36:	2300      	movs	r3, #0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	370c      	adds	r7, #12
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	607b      	str	r3, [r7, #4]
 8000f4e:	4b10      	ldr	r3, [pc, #64]	@ (8000f90 <HAL_MspInit+0x4c>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f52:	4a0f      	ldr	r2, [pc, #60]	@ (8000f90 <HAL_MspInit+0x4c>)
 8000f54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f58:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f90 <HAL_MspInit+0x4c>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f62:	607b      	str	r3, [r7, #4]
 8000f64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	603b      	str	r3, [r7, #0]
 8000f6a:	4b09      	ldr	r3, [pc, #36]	@ (8000f90 <HAL_MspInit+0x4c>)
 8000f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f6e:	4a08      	ldr	r2, [pc, #32]	@ (8000f90 <HAL_MspInit+0x4c>)
 8000f70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f74:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f76:	4b06      	ldr	r3, [pc, #24]	@ (8000f90 <HAL_MspInit+0x4c>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f7e:	603b      	str	r3, [r7, #0]
 8000f80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f82:	bf00      	nop
 8000f84:	370c      	adds	r7, #12
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40023800 	.word	0x40023800

08000f94 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b09a      	sub	sp, #104	@ 0x68
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f9c:	f107 030c 	add.w	r3, r7, #12
 8000fa0:	225c      	movs	r2, #92	@ 0x5c
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f006 ff4f 	bl	8007e48 <memset>
  if(hrtc->Instance==RTC)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a0c      	ldr	r2, [pc, #48]	@ (8000fe0 <HAL_RTC_MspInit+0x4c>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d111      	bne.n	8000fd8 <HAL_RTC_MspInit+0x44>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000fb4:	2320      	movs	r3, #32
 8000fb6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000fb8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fbe:	f107 030c 	add.w	r3, r7, #12
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f001 fa32 	bl	800242c <HAL_RCCEx_PeriphCLKConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000fce:	f7ff feed 	bl	8000dac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000fd2:	4b04      	ldr	r3, [pc, #16]	@ (8000fe4 <HAL_RTC_MspInit+0x50>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000fd8:	bf00      	nop
 8000fda:	3768      	adds	r7, #104	@ 0x68
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40002800 	.word	0x40002800
 8000fe4:	42470e3c 	.word	0x42470e3c

08000fe8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	@ 0x28
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a1d      	ldr	r2, [pc, #116]	@ (800107c <HAL_UART_MspInit+0x94>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d133      	bne.n	8001072 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
 800100e:	4b1c      	ldr	r3, [pc, #112]	@ (8001080 <HAL_UART_MspInit+0x98>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001012:	4a1b      	ldr	r2, [pc, #108]	@ (8001080 <HAL_UART_MspInit+0x98>)
 8001014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001018:	6413      	str	r3, [r2, #64]	@ 0x40
 800101a:	4b19      	ldr	r3, [pc, #100]	@ (8001080 <HAL_UART_MspInit+0x98>)
 800101c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001022:	613b      	str	r3, [r7, #16]
 8001024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	60fb      	str	r3, [r7, #12]
 800102a:	4b15      	ldr	r3, [pc, #84]	@ (8001080 <HAL_UART_MspInit+0x98>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	4a14      	ldr	r2, [pc, #80]	@ (8001080 <HAL_UART_MspInit+0x98>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6313      	str	r3, [r2, #48]	@ 0x30
 8001036:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <HAL_UART_MspInit+0x98>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001042:	230c      	movs	r3, #12
 8001044:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	2302      	movs	r3, #2
 8001048:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104e:	2303      	movs	r3, #3
 8001050:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001052:	2307      	movs	r3, #7
 8001054:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001056:	f107 0314 	add.w	r3, r7, #20
 800105a:	4619      	mov	r1, r3
 800105c:	4809      	ldr	r0, [pc, #36]	@ (8001084 <HAL_UART_MspInit+0x9c>)
 800105e:	f000 feeb 	bl	8001e38 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2106      	movs	r1, #6
 8001066:	2026      	movs	r0, #38	@ 0x26
 8001068:	f000 fe2a 	bl	8001cc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800106c:	2026      	movs	r0, #38	@ 0x26
 800106e:	f000 fe43 	bl	8001cf8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001072:	bf00      	nop
 8001074:	3728      	adds	r7, #40	@ 0x28
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40004400 	.word	0x40004400
 8001080:	40023800 	.word	0x40023800
 8001084:	40020000 	.word	0x40020000

08001088 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08e      	sub	sp, #56	@ 0x38
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001090:	2300      	movs	r3, #0
 8001092:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001094:	2300      	movs	r3, #0
 8001096:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	4b33      	ldr	r3, [pc, #204]	@ (800116c <HAL_InitTick+0xe4>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a0:	4a32      	ldr	r2, [pc, #200]	@ (800116c <HAL_InitTick+0xe4>)
 80010a2:	f043 0310 	orr.w	r3, r3, #16
 80010a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80010a8:	4b30      	ldr	r3, [pc, #192]	@ (800116c <HAL_InitTick+0xe4>)
 80010aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ac:	f003 0310 	and.w	r3, r3, #16
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010b4:	f107 0210 	add.w	r2, r7, #16
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4611      	mov	r1, r2
 80010be:	4618      	mov	r0, r3
 80010c0:	f001 f982 	bl	80023c8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010c4:	6a3b      	ldr	r3, [r7, #32]
 80010c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d103      	bne.n	80010d6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010ce:	f001 f953 	bl	8002378 <HAL_RCC_GetPCLK1Freq>
 80010d2:	6378      	str	r0, [r7, #52]	@ 0x34
 80010d4:	e004      	b.n	80010e0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010d6:	f001 f94f 	bl	8002378 <HAL_RCC_GetPCLK1Freq>
 80010da:	4603      	mov	r3, r0
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010e2:	4a23      	ldr	r2, [pc, #140]	@ (8001170 <HAL_InitTick+0xe8>)
 80010e4:	fba2 2303 	umull	r2, r3, r2, r3
 80010e8:	0c9b      	lsrs	r3, r3, #18
 80010ea:	3b01      	subs	r3, #1
 80010ec:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80010ee:	4b21      	ldr	r3, [pc, #132]	@ (8001174 <HAL_InitTick+0xec>)
 80010f0:	4a21      	ldr	r2, [pc, #132]	@ (8001178 <HAL_InitTick+0xf0>)
 80010f2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80010f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001174 <HAL_InitTick+0xec>)
 80010f6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010fa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80010fc:	4a1d      	ldr	r2, [pc, #116]	@ (8001174 <HAL_InitTick+0xec>)
 80010fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001100:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001102:	4b1c      	ldr	r3, [pc, #112]	@ (8001174 <HAL_InitTick+0xec>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001108:	4b1a      	ldr	r3, [pc, #104]	@ (8001174 <HAL_InitTick+0xec>)
 800110a:	2200      	movs	r2, #0
 800110c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110e:	4b19      	ldr	r3, [pc, #100]	@ (8001174 <HAL_InitTick+0xec>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001114:	4817      	ldr	r0, [pc, #92]	@ (8001174 <HAL_InitTick+0xec>)
 8001116:	f002 fc8b 	bl	8003a30 <HAL_TIM_Base_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001120:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001124:	2b00      	cmp	r3, #0
 8001126:	d11b      	bne.n	8001160 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001128:	4812      	ldr	r0, [pc, #72]	@ (8001174 <HAL_InitTick+0xec>)
 800112a:	f002 fcdb 	bl	8003ae4 <HAL_TIM_Base_Start_IT>
 800112e:	4603      	mov	r3, r0
 8001130:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001134:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001138:	2b00      	cmp	r3, #0
 800113a:	d111      	bne.n	8001160 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800113c:	2036      	movs	r0, #54	@ 0x36
 800113e:	f000 fddb 	bl	8001cf8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b0f      	cmp	r3, #15
 8001146:	d808      	bhi.n	800115a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001148:	2200      	movs	r2, #0
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	2036      	movs	r0, #54	@ 0x36
 800114e:	f000 fdb7 	bl	8001cc0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001152:	4a0a      	ldr	r2, [pc, #40]	@ (800117c <HAL_InitTick+0xf4>)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6013      	str	r3, [r2, #0]
 8001158:	e002      	b.n	8001160 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001160:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001164:	4618      	mov	r0, r3
 8001166:	3738      	adds	r7, #56	@ 0x38
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40023800 	.word	0x40023800
 8001170:	431bde83 	.word	0x431bde83
 8001174:	2000018c 	.word	0x2000018c
 8001178:	40001000 	.word	0x40001000
 800117c:	20000024 	.word	0x20000024

08001180 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <NMI_Handler+0x4>

08001188 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <HardFault_Handler+0x4>

08001190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <MemManage_Handler+0x4>

08001198 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <BusFault_Handler+0x4>

080011a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a4:	bf00      	nop
 80011a6:	e7fd      	b.n	80011a4 <UsageFault_Handler+0x4>

080011a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
	...

080011b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011bc:	4802      	ldr	r0, [pc, #8]	@ (80011c8 <USART2_IRQHandler+0x10>)
 80011be:	f002 ffd3 	bl	8004168 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200000bc 	.word	0x200000bc

080011cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80011d0:	4802      	ldr	r0, [pc, #8]	@ (80011dc <TIM6_DAC_IRQHandler+0x10>)
 80011d2:	f002 fcf7 	bl	8003bc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	2000018c 	.word	0x2000018c

080011e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <SystemInit+0x20>)
 80011e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ea:	4a05      	ldr	r2, [pc, #20]	@ (8001200 <SystemInit+0x20>)
 80011ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <menu_task>:

const char* msg_invalid="Invalid option";
const char *msg_inv = "////Invalid option////\n";

void menu_task(void *param)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08a      	sub	sp, #40	@ 0x28
 8001208:	af02      	add	r7, sp, #8
 800120a:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	int option;
	state_t curr_state=sMainMenu;
 800120c:	2300      	movs	r3, #0
 800120e:	77fb      	strb	r3, [r7, #31]
	// Create the string that is printed first
			const char* msg_menu="===============================\n"
 8001210:	4b32      	ldr	r3, [pc, #200]	@ (80012dc <menu_task+0xd8>)
 8001212:	60fb      	str	r3, [r7, #12]
					         "==============================\n"
					         "LED Effect ------------->0     \n"
					         "Date and Time ---------->1     \n"
					         "Exit ------------------->2      \n"
			                 "Enter your choice here  :       ";
			const char* msg_invalid="Invalid option \n";
 8001214:	4b32      	ldr	r3, [pc, #200]	@ (80012e0 <menu_task+0xdc>)
 8001216:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 8001218:	4b32      	ldr	r3, [pc, #200]	@ (80012e4 <menu_task+0xe0>)
 800121a:	6818      	ldr	r0, [r3, #0]
 800121c:	f107 010c 	add.w	r1, r7, #12
 8001220:	2300      	movs	r3, #0
 8001222:	f04f 32ff 	mov.w	r2, #4294967295
 8001226:	f004 f8a1 	bl	800536c <xQueueGenericSend>
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	f04f 32ff 	mov.w	r2, #4294967295
 8001232:	9200      	str	r2, [sp, #0]
 8001234:	2200      	movs	r2, #0
 8001236:	2100      	movs	r1, #0
 8001238:	2000      	movs	r0, #0
 800123a:	f005 fafd 	bl	8006838 <xTaskGenericNotifyWait>
		cmd=(command_t *)cmd_addr;
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	61bb      	str	r3, [r7, #24]

		if(cmd->len == 1)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d132      	bne.n	80012b0 <menu_task+0xac>
		{
			option = cmd->payload[0]-48; // convert ASCII to number
 800124a:	69bb      	ldr	r3, [r7, #24]
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	3b30      	subs	r3, #48	@ 0x30
 8001250:	617b      	str	r3, [r7, #20]
			switch(option)
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	2b02      	cmp	r3, #2
 8001256:	d035      	beq.n	80012c4 <menu_task+0xc0>
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	2b02      	cmp	r3, #2
 800125c:	dc1e      	bgt.n	800129c <menu_task+0x98>
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d003      	beq.n	800126c <menu_task+0x68>
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d00c      	beq.n	8001284 <menu_task+0x80>
 800126a:	e017      	b.n	800129c <menu_task+0x98>
			{
			case 0:
				curr_state=sLedEffect;
 800126c:	2301      	movs	r3, #1
 800126e:	77fb      	strb	r3, [r7, #31]
				xTaskNotify(handle_led_task,0,eNoAction);
 8001270:	4b1d      	ldr	r3, [pc, #116]	@ (80012e8 <menu_task+0xe4>)
 8001272:	6818      	ldr	r0, [r3, #0]
 8001274:	2300      	movs	r3, #0
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	2300      	movs	r3, #0
 800127a:	2200      	movs	r2, #0
 800127c:	2100      	movs	r1, #0
 800127e:	f005 fb5b 	bl	8006938 <xTaskGenericNotify>
				break;
 8001282:	e020      	b.n	80012c6 <menu_task+0xc2>
			case 1:
				curr_state=sRtcMenu;
 8001284:	2302      	movs	r3, #2
 8001286:	77fb      	strb	r3, [r7, #31]
				xTaskNotify(handle_rtc_task,0,eNoAction);
 8001288:	4b18      	ldr	r3, [pc, #96]	@ (80012ec <menu_task+0xe8>)
 800128a:	6818      	ldr	r0, [r3, #0]
 800128c:	2300      	movs	r3, #0
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2300      	movs	r3, #0
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	f005 fb4f 	bl	8006938 <xTaskGenericNotify>
				break;
 800129a:	e014      	b.n	80012c6 <menu_task+0xc2>
			case 2:
				break;
			default:
				xQueueSend(q_print,&msg_invalid,portMAX_DELAY);
 800129c:	4b11      	ldr	r3, [pc, #68]	@ (80012e4 <menu_task+0xe0>)
 800129e:	6818      	ldr	r0, [r3, #0]
 80012a0:	f107 0108 	add.w	r1, r7, #8
 80012a4:	2300      	movs	r3, #0
 80012a6:	f04f 32ff 	mov.w	r2, #4294967295
 80012aa:	f004 f85f 	bl	800536c <xQueueGenericSend>
				continue;
 80012ae:	e013      	b.n	80012d8 <menu_task+0xd4>
			}
		}
		else
		{
			//Invalid option
			xQueueSend(q_print,&msg_invalid,portMAX_DELAY);
 80012b0:	4b0c      	ldr	r3, [pc, #48]	@ (80012e4 <menu_task+0xe0>)
 80012b2:	6818      	ldr	r0, [r3, #0]
 80012b4:	f107 0108 	add.w	r1, r7, #8
 80012b8:	2300      	movs	r3, #0
 80012ba:	f04f 32ff 	mov.w	r2, #4294967295
 80012be:	f004 f855 	bl	800536c <xQueueGenericSend>
			continue;
 80012c2:	e009      	b.n	80012d8 <menu_task+0xd4>
				break;
 80012c4:	bf00      	nop
		}

		//Exit for this
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2300      	movs	r3, #0
 80012ce:	2200      	movs	r2, #0
 80012d0:	2100      	movs	r1, #0
 80012d2:	2000      	movs	r0, #0
 80012d4:	f005 fab0 	bl	8006838 <xTaskGenericNotifyWait>
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 80012d8:	e79e      	b.n	8001218 <menu_task+0x14>
 80012da:	bf00      	nop
 80012dc:	08008834 	.word	0x08008834
 80012e0:	08008918 	.word	0x08008918
 80012e4:	2000011c 	.word	0x2000011c
 80012e8:	20000110 	.word	0x20000110
 80012ec:	20000114 	.word	0x20000114

080012f0 <cmd_task>:
	}
}

void cmd_task(void *param)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	@ 0x28
 80012f4:	af02      	add	r7, sp, #8
 80012f6:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	command_t cmd;
	while(1)
	{
		//Implement notify wait
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // waits indefinitely
 80012f8:	f04f 33ff 	mov.w	r3, #4294967295
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	2300      	movs	r3, #0
 8001300:	2200      	movs	r2, #0
 8001302:	2100      	movs	r1, #0
 8001304:	2000      	movs	r0, #0
 8001306:	f005 fa97 	bl	8006838 <xTaskGenericNotifyWait>
 800130a:	61f8      	str	r0, [r7, #28]
		if(ret == pdTRUE)                              // Notification received
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d1f2      	bne.n	80012f8 <cmd_task+0x8>
		{
			process_command(&cmd);
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	4618      	mov	r0, r3
 8001318:	f000 fb16 	bl	8001948 <process_command>
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // waits indefinitely
 800131c:	e7ec      	b.n	80012f8 <cmd_task+0x8>
	...

08001320 <print_task>:
		}
	}
}

void print_task(void *param)
{
 8001320:	b590      	push	{r4, r7, lr}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	uint32_t *msg;
	while(1)
	{
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001328:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <print_task+0x38>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f107 010c 	add.w	r1, r7, #12
 8001330:	f04f 32ff 	mov.w	r2, #4294967295
 8001334:	4618      	mov	r0, r3
 8001336:	f004 f9b1 	bl	800569c <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen((char *)msg), HAL_MAX_DELAY);
 800133a:	68fc      	ldr	r4, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	4618      	mov	r0, r3
 8001340:	f7fe ff70 	bl	8000224 <strlen>
 8001344:	4603      	mov	r3, r0
 8001346:	b29a      	uxth	r2, r3
 8001348:	f04f 33ff 	mov.w	r3, #4294967295
 800134c:	4621      	mov	r1, r4
 800134e:	4803      	ldr	r0, [pc, #12]	@ (800135c <print_task+0x3c>)
 8001350:	f002 fe5a 	bl	8004008 <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 8001354:	bf00      	nop
 8001356:	e7e7      	b.n	8001328 <print_task+0x8>
 8001358:	2000011c 	.word	0x2000011c
 800135c:	200000bc 	.word	0x200000bc

08001360 <led_task>:
	}
}

void led_task(void *param)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b088      	sub	sp, #32
 8001364:	af02      	add	r7, sp, #8
 8001366:	6078      	str	r0, [r7, #4]
	while(1)
	{
		uint32_t cmd_addr;
			command_t *cmd;
			state_t curr_state=sMainMenu;
 8001368:	2300      	movs	r3, #0
 800136a:	75fb      	strb	r3, [r7, #23]
			const char* msg_led = "========================\n"
 800136c:	4b3d      	ldr	r3, [pc, #244]	@ (8001464 <led_task+0x104>)
 800136e:	60bb      	str	r3, [r7, #8]
								  "(none,e1,e2,e3,e4)\n"
								  "Enter your choice here : ";

			while(1){
				/*TODO: Wait for notification (Notify wait) */
				xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001370:	f04f 33ff 	mov.w	r3, #4294967295
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2300      	movs	r3, #0
 8001378:	2200      	movs	r2, #0
 800137a:	2100      	movs	r1, #0
 800137c:	2000      	movs	r0, #0
 800137e:	f005 fa5b 	bl	8006838 <xTaskGenericNotifyWait>
				/*TODO: Print LED menu */
				xQueueSend(q_print,&msg_led,portMAX_DELAY);
 8001382:	4b39      	ldr	r3, [pc, #228]	@ (8001468 <led_task+0x108>)
 8001384:	6818      	ldr	r0, [r3, #0]
 8001386:	f107 0108 	add.w	r1, r7, #8
 800138a:	2300      	movs	r3, #0
 800138c:	f04f 32ff 	mov.w	r2, #4294967295
 8001390:	f003 ffec 	bl	800536c <xQueueGenericSend>
				/*TODO: wait for LED command (Notify wait) */
				xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8001394:	f107 030c 	add.w	r3, r7, #12
 8001398:	f04f 32ff 	mov.w	r2, #4294967295
 800139c:	9200      	str	r2, [sp, #0]
 800139e:	2200      	movs	r2, #0
 80013a0:	2100      	movs	r1, #0
 80013a2:	2000      	movs	r0, #0
 80013a4:	f005 fa48 	bl	8006838 <xTaskGenericNotifyWait>
				cmd=(command_t*)cmd_addr;
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	613b      	str	r3, [r7, #16]
				if(cmd->len <= 4)
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b04      	cmp	r3, #4
 80013b2:	d843      	bhi.n	800143c <led_task+0xdc>
				{
					if(! strcmp((char*)cmd->payload,"none"))
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	492d      	ldr	r1, [pc, #180]	@ (800146c <led_task+0x10c>)
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7fe ff29 	bl	8000210 <strcmp>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d102      	bne.n	80013ca <led_task+0x6a>
						led_effect_stop();
 80013c4:	f7ff f922 	bl	800060c <led_effect_stop>
 80013c8:	e040      	b.n	800144c <led_task+0xec>
					else if (! strcmp((char*)cmd->payload,"e1"))
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	4928      	ldr	r1, [pc, #160]	@ (8001470 <led_task+0x110>)
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7fe ff1e 	bl	8000210 <strcmp>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d103      	bne.n	80013e2 <led_task+0x82>
						led_effect(1);
 80013da:	2001      	movs	r0, #1
 80013dc:	f7ff f93c 	bl	8000658 <led_effect>
 80013e0:	e034      	b.n	800144c <led_task+0xec>
					else if (! strcmp((char*)cmd->payload,"e2"))
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4923      	ldr	r1, [pc, #140]	@ (8001474 <led_task+0x114>)
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7fe ff12 	bl	8000210 <strcmp>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d103      	bne.n	80013fa <led_task+0x9a>
						led_effect(2);
 80013f2:	2002      	movs	r0, #2
 80013f4:	f7ff f930 	bl	8000658 <led_effect>
 80013f8:	e028      	b.n	800144c <led_task+0xec>
					else if (! strcmp((char*)cmd->payload,"e3"))
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	491e      	ldr	r1, [pc, #120]	@ (8001478 <led_task+0x118>)
 80013fe:	4618      	mov	r0, r3
 8001400:	f7fe ff06 	bl	8000210 <strcmp>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d103      	bne.n	8001412 <led_task+0xb2>
						led_effect(3);
 800140a:	2003      	movs	r0, #3
 800140c:	f7ff f924 	bl	8000658 <led_effect>
 8001410:	e01c      	b.n	800144c <led_task+0xec>
					else if (! strcmp((char*)cmd->payload,"e4"))
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	4919      	ldr	r1, [pc, #100]	@ (800147c <led_task+0x11c>)
 8001416:	4618      	mov	r0, r3
 8001418:	f7fe fefa 	bl	8000210 <strcmp>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d103      	bne.n	800142a <led_task+0xca>
						led_effect(4);
 8001422:	2004      	movs	r0, #4
 8001424:	f7ff f918 	bl	8000658 <led_effect>
 8001428:	e010      	b.n	800144c <led_task+0xec>
					else
						/*TODO: print invalid message */
						xQueueSend(q_print,&msg_invalid,portMAX_DELAY);
 800142a:	4b0f      	ldr	r3, [pc, #60]	@ (8001468 <led_task+0x108>)
 800142c:	6818      	ldr	r0, [r3, #0]
 800142e:	2300      	movs	r3, #0
 8001430:	f04f 32ff 	mov.w	r2, #4294967295
 8001434:	4912      	ldr	r1, [pc, #72]	@ (8001480 <led_task+0x120>)
 8001436:	f003 ff99 	bl	800536c <xQueueGenericSend>
 800143a:	e007      	b.n	800144c <led_task+0xec>
				}else
					/*TODO: print invalid message */
					xQueueSend(q_print,&msg_invalid,portMAX_DELAY);
 800143c:	4b0a      	ldr	r3, [pc, #40]	@ (8001468 <led_task+0x108>)
 800143e:	6818      	ldr	r0, [r3, #0]
 8001440:	2300      	movs	r3, #0
 8001442:	f04f 32ff 	mov.w	r2, #4294967295
 8001446:	490e      	ldr	r1, [pc, #56]	@ (8001480 <led_task+0x120>)
 8001448:	f003 ff90 	bl	800536c <xQueueGenericSend>
				/*TODO : update state variable */
				curr_state = sMainMenu;
 800144c:	2300      	movs	r3, #0
 800144e:	75fb      	strb	r3, [r7, #23]

				/*TODO : Notify menu task */
				xTaskNotify(handle_menu_task,0,eNoAction);
 8001450:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <led_task+0x124>)
 8001452:	6818      	ldr	r0, [r3, #0]
 8001454:	2300      	movs	r3, #0
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	2300      	movs	r3, #0
 800145a:	2200      	movs	r2, #0
 800145c:	2100      	movs	r1, #0
 800145e:	f005 fa6b 	bl	8006938 <xTaskGenericNotify>
				xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001462:	e785      	b.n	8001370 <led_task+0x10>
 8001464:	0800892c 	.word	0x0800892c
 8001468:	2000011c 	.word	0x2000011c
 800146c:	080089a4 	.word	0x080089a4
 8001470:	080089ac 	.word	0x080089ac
 8001474:	080089b0 	.word	0x080089b0
 8001478:	080089b4 	.word	0x080089b4
 800147c:	080089b8 	.word	0x080089b8
 8001480:	2000001c 	.word	0x2000001c
 8001484:	20000104 	.word	0x20000104

08001488 <getnumber>:
			}
	}
}

uint8_t getnumber(uint8_t *p , int len)
{
 8001488:	b480      	push	{r7}
 800148a:	b085      	sub	sp, #20
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	6039      	str	r1, [r7, #0]

	int value ;

	if(len > 1)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	2b01      	cmp	r3, #1
 8001496:	dd0f      	ble.n	80014b8 <getnumber+0x30>
	   value =  ( ((p[0]-48) * 10) + (p[1] - 48) );
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	f1a3 0230 	sub.w	r2, r3, #48	@ 0x30
 80014a0:	4613      	mov	r3, r2
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	461a      	mov	r2, r3
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	3301      	adds	r3, #1
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	3b30      	subs	r3, #48	@ 0x30
 80014b2:	4413      	add	r3, r2
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	e003      	b.n	80014c0 <getnumber+0x38>
	else
		value = p[0] - 48;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	3b30      	subs	r3, #48	@ 0x30
 80014be:	60fb      	str	r3, [r7, #12]

	return value;
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	b2db      	uxtb	r3, r3

}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <rtc_task>:


void rtc_task(void *param)
{
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b09b      	sub	sp, #108	@ 0x6c
 80014d4:	af02      	add	r7, sp, #8
 80014d6:	6078      	str	r0, [r7, #4]
	const char* msg_rtc1 = "========================\n"
 80014d8:	4bb3      	ldr	r3, [pc, #716]	@ (80017a8 <rtc_task+0x2d8>)
 80014da:	64fb      	str	r3, [r7, #76]	@ 0x4c
								"|         RTC          |\n"
								"========================\n";

		const char* msg_rtc2 = "Configure Time            ----> 0\n"
 80014dc:	4bb3      	ldr	r3, [pc, #716]	@ (80017ac <rtc_task+0x2dc>)
 80014de:	64bb      	str	r3, [r7, #72]	@ 0x48
								"Enable reporting          ----> 2\n"
								"Exit                      ----> 3\n"
								"Enter your choice here : ";


		const char *msg_rtc_hh = "Enter hour(1-12):";
 80014e0:	4bb3      	ldr	r3, [pc, #716]	@ (80017b0 <rtc_task+0x2e0>)
 80014e2:	647b      	str	r3, [r7, #68]	@ 0x44
		const char *msg_rtc_mm = "Enter minutes(0-59):";
 80014e4:	4bb3      	ldr	r3, [pc, #716]	@ (80017b4 <rtc_task+0x2e4>)
 80014e6:	643b      	str	r3, [r7, #64]	@ 0x40
		const char *msg_rtc_ss = "Enter seconds(0-59):";
 80014e8:	4bb3      	ldr	r3, [pc, #716]	@ (80017b8 <rtc_task+0x2e8>)
 80014ea:	63fb      	str	r3, [r7, #60]	@ 0x3c

		const char *msg_rtc_dd  = "Enter date(1-31):";
 80014ec:	4bb3      	ldr	r3, [pc, #716]	@ (80017bc <rtc_task+0x2ec>)
 80014ee:	63bb      	str	r3, [r7, #56]	@ 0x38
		const char *msg_rtc_mo  ="Enter month(1-12):";
 80014f0:	4bb3      	ldr	r3, [pc, #716]	@ (80017c0 <rtc_task+0x2f0>)
 80014f2:	637b      	str	r3, [r7, #52]	@ 0x34
		const char *msg_rtc_dow  = "Enter day(1-7 sun:1):";
 80014f4:	4bb3      	ldr	r3, [pc, #716]	@ (80017c4 <rtc_task+0x2f4>)
 80014f6:	633b      	str	r3, [r7, #48]	@ 0x30
		const char *msg_rtc_yr  = "Enter year(0-99):";
 80014f8:	4bb3      	ldr	r3, [pc, #716]	@ (80017c8 <rtc_task+0x2f8>)
 80014fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

		const char *msg_conf = "Configuration successful\n";
 80014fc:	4bb3      	ldr	r3, [pc, #716]	@ (80017cc <rtc_task+0x2fc>)
 80014fe:	62bb      	str	r3, [r7, #40]	@ 0x28
		const char *msg_rtc_report = "Enable time&date reporting(y/n)?: ";
 8001500:	4bb3      	ldr	r3, [pc, #716]	@ (80017d0 <rtc_task+0x300>)
 8001502:	627b      	str	r3, [r7, #36]	@ 0x24
	#define DAY_CONFIG 		3


		while(1){
			/*Notify wait (wait till someone notifies) */
			xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001504:	f04f 33ff 	mov.w	r3, #4294967295
 8001508:	9300      	str	r3, [sp, #0]
 800150a:	2300      	movs	r3, #0
 800150c:	2200      	movs	r2, #0
 800150e:	2100      	movs	r1, #0
 8001510:	2000      	movs	r0, #0
 8001512:	f005 f991 	bl	8006838 <xTaskGenericNotifyWait>

			/*Print the menu and show current date and time information */
			xQueueSend(q_print,&msg_rtc1,portMAX_DELAY);
 8001516:	4baf      	ldr	r3, [pc, #700]	@ (80017d4 <rtc_task+0x304>)
 8001518:	6818      	ldr	r0, [r3, #0]
 800151a:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 800151e:	2300      	movs	r3, #0
 8001520:	f04f 32ff 	mov.w	r2, #4294967295
 8001524:	f003 ff22 	bl	800536c <xQueueGenericSend>
			show_time_date();
 8001528:	f7ff fc46 	bl	8000db8 <show_time_date>
			xQueueSend(q_print,&msg_rtc2,portMAX_DELAY);
 800152c:	4ba9      	ldr	r3, [pc, #676]	@ (80017d4 <rtc_task+0x304>)
 800152e:	6818      	ldr	r0, [r3, #0]
 8001530:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001534:	2300      	movs	r3, #0
 8001536:	f04f 32ff 	mov.w	r2, #4294967295
 800153a:	f003 ff17 	bl	800536c <xQueueGenericSend>


			while(curr_state != sMainMenu){
 800153e:	e1e7      	b.n	8001910 <rtc_task+0x440>

				/*Wait for command notification (Notify wait) */
				xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8001540:	f107 0320 	add.w	r3, r7, #32
 8001544:	f04f 32ff 	mov.w	r2, #4294967295
 8001548:	9200      	str	r2, [sp, #0]
 800154a:	2200      	movs	r2, #0
 800154c:	2100      	movs	r1, #0
 800154e:	2000      	movs	r0, #0
 8001550:	f005 f972 	bl	8006838 <xTaskGenericNotifyWait>
				cmd = (command_t*)cmd_addr;
 8001554:	6a3b      	ldr	r3, [r7, #32]
 8001556:	65fb      	str	r3, [r7, #92]	@ 0x5c

				switch(curr_state)
 8001558:	4b9f      	ldr	r3, [pc, #636]	@ (80017d8 <rtc_task+0x308>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	3b02      	subs	r3, #2
 800155e:	2b03      	cmp	r3, #3
 8001560:	f200 81d6 	bhi.w	8001910 <rtc_task+0x440>
 8001564:	a201      	add	r2, pc, #4	@ (adr r2, 800156c <rtc_task+0x9c>)
 8001566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800156a:	bf00      	nop
 800156c:	0800157d 	.word	0x0800157d
 8001570:	08001631 	.word	0x08001631
 8001574:	0800171f 	.word	0x0800171f
 8001578:	08001887 	.word	0x08001887
				{
					case sRtcMenu:{
						/*process RTC menu commands */
						if(cmd->len == 1)
 800157c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d148      	bne.n	8001616 <rtc_task+0x146>
						{
							menu_code = cmd->payload[0] - 48;
 8001584:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	3b30      	subs	r3, #48	@ 0x30
 800158a:	653b      	str	r3, [r7, #80]	@ 0x50
							switch(menu_code)
 800158c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800158e:	2b03      	cmp	r3, #3
 8001590:	d835      	bhi.n	80015fe <rtc_task+0x12e>
 8001592:	a201      	add	r2, pc, #4	@ (adr r2, 8001598 <rtc_task+0xc8>)
 8001594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001598:	080015a9 	.word	0x080015a9
 800159c:	080015c3 	.word	0x080015c3
 80015a0:	080015dd 	.word	0x080015dd
 80015a4:	080015f7 	.word	0x080015f7
							{
							case 0:
								curr_state = sRtcTimeConfig;
 80015a8:	4b8b      	ldr	r3, [pc, #556]	@ (80017d8 <rtc_task+0x308>)
 80015aa:	2203      	movs	r2, #3
 80015ac:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_hh,portMAX_DELAY);
 80015ae:	4b89      	ldr	r3, [pc, #548]	@ (80017d4 <rtc_task+0x304>)
 80015b0:	6818      	ldr	r0, [r3, #0]
 80015b2:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 80015b6:	2300      	movs	r3, #0
 80015b8:	f04f 32ff 	mov.w	r2, #4294967295
 80015bc:	f003 fed6 	bl	800536c <xQueueGenericSend>
								break;
 80015c0:	e035      	b.n	800162e <rtc_task+0x15e>
							case 1:
								curr_state = sRtcDateConfig;
 80015c2:	4b85      	ldr	r3, [pc, #532]	@ (80017d8 <rtc_task+0x308>)
 80015c4:	2204      	movs	r2, #4
 80015c6:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_dd,portMAX_DELAY);
 80015c8:	4b82      	ldr	r3, [pc, #520]	@ (80017d4 <rtc_task+0x304>)
 80015ca:	6818      	ldr	r0, [r3, #0]
 80015cc:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80015d0:	2300      	movs	r3, #0
 80015d2:	f04f 32ff 	mov.w	r2, #4294967295
 80015d6:	f003 fec9 	bl	800536c <xQueueGenericSend>
								break;
 80015da:	e028      	b.n	800162e <rtc_task+0x15e>
							case 2 :
								curr_state = sRtcReport;
 80015dc:	4b7e      	ldr	r3, [pc, #504]	@ (80017d8 <rtc_task+0x308>)
 80015de:	2205      	movs	r2, #5
 80015e0:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_print,&msg_rtc_report,portMAX_DELAY);
 80015e2:	4b7c      	ldr	r3, [pc, #496]	@ (80017d4 <rtc_task+0x304>)
 80015e4:	6818      	ldr	r0, [r3, #0]
 80015e6:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 80015ea:	2300      	movs	r3, #0
 80015ec:	f04f 32ff 	mov.w	r2, #4294967295
 80015f0:	f003 febc 	bl	800536c <xQueueGenericSend>
								break;
 80015f4:	e01b      	b.n	800162e <rtc_task+0x15e>
							case 3 :
								curr_state = sMainMenu;
 80015f6:	4b78      	ldr	r3, [pc, #480]	@ (80017d8 <rtc_task+0x308>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	701a      	strb	r2, [r3, #0]
								break;
 80015fc:	e017      	b.n	800162e <rtc_task+0x15e>
							default:
								curr_state = sMainMenu;
 80015fe:	4b76      	ldr	r3, [pc, #472]	@ (80017d8 <rtc_task+0x308>)
 8001600:	2200      	movs	r2, #0
 8001602:	701a      	strb	r2, [r3, #0]
								xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001604:	4b73      	ldr	r3, [pc, #460]	@ (80017d4 <rtc_task+0x304>)
 8001606:	6818      	ldr	r0, [r3, #0]
 8001608:	2300      	movs	r3, #0
 800160a:	f04f 32ff 	mov.w	r2, #4294967295
 800160e:	4973      	ldr	r1, [pc, #460]	@ (80017dc <rtc_task+0x30c>)
 8001610:	f003 feac 	bl	800536c <xQueueGenericSend>

						}else{
							curr_state = sMainMenu;
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
						}
						break;}
 8001614:	e17c      	b.n	8001910 <rtc_task+0x440>
							curr_state = sMainMenu;
 8001616:	4b70      	ldr	r3, [pc, #448]	@ (80017d8 <rtc_task+0x308>)
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
							xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 800161c:	4b6d      	ldr	r3, [pc, #436]	@ (80017d4 <rtc_task+0x304>)
 800161e:	6818      	ldr	r0, [r3, #0]
 8001620:	2300      	movs	r3, #0
 8001622:	f04f 32ff 	mov.w	r2, #4294967295
 8001626:	496d      	ldr	r1, [pc, #436]	@ (80017dc <rtc_task+0x30c>)
 8001628:	f003 fea0 	bl	800536c <xQueueGenericSend>
						break;}
 800162c:	e170      	b.n	8001910 <rtc_task+0x440>
 800162e:	e16f      	b.n	8001910 <rtc_task+0x440>

					case sRtcTimeConfig:{
						/*get hh, mm, ss infor and configure RTC */
						/*take care of invalid entries */
						switch(rtc_state)
 8001630:	4b6b      	ldr	r3, [pc, #428]	@ (80017e0 <rtc_task+0x310>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d03b      	beq.n	80016b0 <rtc_task+0x1e0>
 8001638:	2b02      	cmp	r3, #2
 800163a:	f300 8166 	bgt.w	800190a <rtc_task+0x43a>
 800163e:	2b00      	cmp	r3, #0
 8001640:	d002      	beq.n	8001648 <rtc_task+0x178>
 8001642:	2b01      	cmp	r3, #1
 8001644:	d01a      	beq.n	800167c <rtc_task+0x1ac>
									curr_state = sMainMenu;
									rtc_state = 0;
									break;}
							}

						break;}
 8001646:	e160      	b.n	800190a <rtc_task+0x43a>
									uint8_t hour = getnumber(cmd->payload , cmd->len);
 8001648:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800164a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800164c:	68db      	ldr	r3, [r3, #12]
 800164e:	4619      	mov	r1, r3
 8001650:	4610      	mov	r0, r2
 8001652:	f7ff ff19 	bl	8001488 <getnumber>
 8001656:	4603      	mov	r3, r0
 8001658:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
									time.Hours = hour;
 800165c:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001660:	733b      	strb	r3, [r7, #12]
									rtc_state = MM_CONFIG;
 8001662:	4b5f      	ldr	r3, [pc, #380]	@ (80017e0 <rtc_task+0x310>)
 8001664:	2201      	movs	r2, #1
 8001666:	601a      	str	r2, [r3, #0]
									xQueueSend(q_print,&msg_rtc_mm,portMAX_DELAY);
 8001668:	4b5a      	ldr	r3, [pc, #360]	@ (80017d4 <rtc_task+0x304>)
 800166a:	6818      	ldr	r0, [r3, #0]
 800166c:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8001670:	2300      	movs	r3, #0
 8001672:	f04f 32ff 	mov.w	r2, #4294967295
 8001676:	f003 fe79 	bl	800536c <xQueueGenericSend>
									break;}
 800167a:	e04f      	b.n	800171c <rtc_task+0x24c>
									uint8_t min = getnumber(cmd->payload , cmd->len);
 800167c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800167e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	4619      	mov	r1, r3
 8001684:	4610      	mov	r0, r2
 8001686:	f7ff feff 	bl	8001488 <getnumber>
 800168a:	4603      	mov	r3, r0
 800168c:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
									time.Minutes = min;
 8001690:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8001694:	737b      	strb	r3, [r7, #13]
									rtc_state = SS_CONFIG;
 8001696:	4b52      	ldr	r3, [pc, #328]	@ (80017e0 <rtc_task+0x310>)
 8001698:	2202      	movs	r2, #2
 800169a:	601a      	str	r2, [r3, #0]
									xQueueSend(q_print,&msg_rtc_ss,portMAX_DELAY);
 800169c:	4b4d      	ldr	r3, [pc, #308]	@ (80017d4 <rtc_task+0x304>)
 800169e:	6818      	ldr	r0, [r3, #0]
 80016a0:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80016a4:	2300      	movs	r3, #0
 80016a6:	f04f 32ff 	mov.w	r2, #4294967295
 80016aa:	f003 fe5f 	bl	800536c <xQueueGenericSend>
									break;}
 80016ae:	e035      	b.n	800171c <rtc_task+0x24c>
									uint8_t sec = getnumber(cmd->payload , cmd->len);
 80016b0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80016b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	4619      	mov	r1, r3
 80016b8:	4610      	mov	r0, r2
 80016ba:	f7ff fee5 	bl	8001488 <getnumber>
 80016be:	4603      	mov	r3, r0
 80016c0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
									time.Seconds = sec;
 80016c4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80016c8:	73bb      	strb	r3, [r7, #14]
									if(!validate_rtc_information(&time,NULL))
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	2100      	movs	r1, #0
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fc05 	bl	8000ee0 <validate_rtc_information>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d110      	bne.n	80016fe <rtc_task+0x22e>
										rtc_configure_time(&time);
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fbd5 	bl	8000e90 <rtc_configure_time>
										xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 80016e6:	4b3b      	ldr	r3, [pc, #236]	@ (80017d4 <rtc_task+0x304>)
 80016e8:	6818      	ldr	r0, [r3, #0]
 80016ea:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80016ee:	2300      	movs	r3, #0
 80016f0:	f04f 32ff 	mov.w	r2, #4294967295
 80016f4:	f003 fe3a 	bl	800536c <xQueueGenericSend>
										show_time_date();
 80016f8:	f7ff fb5e 	bl	8000db8 <show_time_date>
 80016fc:	e007      	b.n	800170e <rtc_task+0x23e>
										xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80016fe:	4b35      	ldr	r3, [pc, #212]	@ (80017d4 <rtc_task+0x304>)
 8001700:	6818      	ldr	r0, [r3, #0]
 8001702:	2300      	movs	r3, #0
 8001704:	f04f 32ff 	mov.w	r2, #4294967295
 8001708:	4934      	ldr	r1, [pc, #208]	@ (80017dc <rtc_task+0x30c>)
 800170a:	f003 fe2f 	bl	800536c <xQueueGenericSend>
									curr_state = sMainMenu;
 800170e:	4b32      	ldr	r3, [pc, #200]	@ (80017d8 <rtc_task+0x308>)
 8001710:	2200      	movs	r2, #0
 8001712:	701a      	strb	r2, [r3, #0]
									rtc_state = 0;
 8001714:	4b32      	ldr	r3, [pc, #200]	@ (80017e0 <rtc_task+0x310>)
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
									break;}
 800171a:	bf00      	nop
						break;}
 800171c:	e0f5      	b.n	800190a <rtc_task+0x43a>
					case sRtcDateConfig:{

						/*get date, month, day , year info and configure RTC */

						/*take care of invalid entries */
						switch(rtc_state)
 800171e:	4b30      	ldr	r3, [pc, #192]	@ (80017e0 <rtc_task+0x310>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b03      	cmp	r3, #3
 8001724:	f200 80f3 	bhi.w	800190e <rtc_task+0x43e>
 8001728:	a201      	add	r2, pc, #4	@ (adr r2, 8001730 <rtc_task+0x260>)
 800172a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800172e:	bf00      	nop
 8001730:	08001741 	.word	0x08001741
 8001734:	08001775 	.word	0x08001775
 8001738:	08001819 	.word	0x08001819
 800173c:	080017e5 	.word	0x080017e5
							{
								case DATE_CONFIG:{
									uint8_t d = getnumber(cmd->payload , cmd->len);
 8001740:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001742:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	4619      	mov	r1, r3
 8001748:	4610      	mov	r0, r2
 800174a:	f7ff fe9d 	bl	8001488 <getnumber>
 800174e:	4603      	mov	r3, r0
 8001750:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
									date.Date = d;
 8001754:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8001758:	72bb      	strb	r3, [r7, #10]
									rtc_state = MONTH_CONFIG;
 800175a:	4b21      	ldr	r3, [pc, #132]	@ (80017e0 <rtc_task+0x310>)
 800175c:	2201      	movs	r2, #1
 800175e:	601a      	str	r2, [r3, #0]
									xQueueSend(q_print,&msg_rtc_mo,portMAX_DELAY);
 8001760:	4b1c      	ldr	r3, [pc, #112]	@ (80017d4 <rtc_task+0x304>)
 8001762:	6818      	ldr	r0, [r3, #0]
 8001764:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001768:	2300      	movs	r3, #0
 800176a:	f04f 32ff 	mov.w	r2, #4294967295
 800176e:	f003 fdfd 	bl	800536c <xQueueGenericSend>
									break;}
 8001772:	e087      	b.n	8001884 <rtc_task+0x3b4>
								case MONTH_CONFIG:{
									uint8_t month = getnumber(cmd->payload , cmd->len);
 8001774:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001776:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001778:	68db      	ldr	r3, [r3, #12]
 800177a:	4619      	mov	r1, r3
 800177c:	4610      	mov	r0, r2
 800177e:	f7ff fe83 	bl	8001488 <getnumber>
 8001782:	4603      	mov	r3, r0
 8001784:	f887 3059 	strb.w	r3, [r7, #89]	@ 0x59
									date.Month = month;
 8001788:	f897 3059 	ldrb.w	r3, [r7, #89]	@ 0x59
 800178c:	727b      	strb	r3, [r7, #9]
									rtc_state = DAY_CONFIG;
 800178e:	4b14      	ldr	r3, [pc, #80]	@ (80017e0 <rtc_task+0x310>)
 8001790:	2203      	movs	r2, #3
 8001792:	601a      	str	r2, [r3, #0]
									xQueueSend(q_print,&msg_rtc_dow,portMAX_DELAY);
 8001794:	4b0f      	ldr	r3, [pc, #60]	@ (80017d4 <rtc_task+0x304>)
 8001796:	6818      	ldr	r0, [r3, #0]
 8001798:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800179c:	2300      	movs	r3, #0
 800179e:	f04f 32ff 	mov.w	r2, #4294967295
 80017a2:	f003 fde3 	bl	800536c <xQueueGenericSend>
									break;}
 80017a6:	e06d      	b.n	8001884 <rtc_task+0x3b4>
 80017a8:	080089bc 	.word	0x080089bc
 80017ac:	08008a08 	.word	0x08008a08
 80017b0:	08008aac 	.word	0x08008aac
 80017b4:	08008ac0 	.word	0x08008ac0
 80017b8:	08008ad8 	.word	0x08008ad8
 80017bc:	08008af0 	.word	0x08008af0
 80017c0:	08008b04 	.word	0x08008b04
 80017c4:	08008b18 	.word	0x08008b18
 80017c8:	08008b30 	.word	0x08008b30
 80017cc:	08008b44 	.word	0x08008b44
 80017d0:	08008b60 	.word	0x08008b60
 80017d4:	2000011c 	.word	0x2000011c
 80017d8:	20000125 	.word	0x20000125
 80017dc:	20000020 	.word	0x20000020
 80017e0:	200001d4 	.word	0x200001d4
								case DAY_CONFIG:{
									uint8_t day = getnumber(cmd->payload , cmd->len);
 80017e4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80017e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	4619      	mov	r1, r3
 80017ec:	4610      	mov	r0, r2
 80017ee:	f7ff fe4b 	bl	8001488 <getnumber>
 80017f2:	4603      	mov	r3, r0
 80017f4:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
									date.WeekDay = day;
 80017f8:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80017fc:	723b      	strb	r3, [r7, #8]
									rtc_state = YEAR_CONFIG;
 80017fe:	4b4c      	ldr	r3, [pc, #304]	@ (8001930 <rtc_task+0x460>)
 8001800:	2202      	movs	r2, #2
 8001802:	601a      	str	r2, [r3, #0]
									xQueueSend(q_print,&msg_rtc_yr,portMAX_DELAY);
 8001804:	4b4b      	ldr	r3, [pc, #300]	@ (8001934 <rtc_task+0x464>)
 8001806:	6818      	ldr	r0, [r3, #0]
 8001808:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800180c:	2300      	movs	r3, #0
 800180e:	f04f 32ff 	mov.w	r2, #4294967295
 8001812:	f003 fdab 	bl	800536c <xQueueGenericSend>
									break;}
 8001816:	e035      	b.n	8001884 <rtc_task+0x3b4>
								case YEAR_CONFIG:{
									uint8_t year = getnumber(cmd->payload , cmd->len);
 8001818:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800181a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800181c:	68db      	ldr	r3, [r3, #12]
 800181e:	4619      	mov	r1, r3
 8001820:	4610      	mov	r0, r2
 8001822:	f7ff fe31 	bl	8001488 <getnumber>
 8001826:	4603      	mov	r3, r0
 8001828:	f887 305a 	strb.w	r3, [r7, #90]	@ 0x5a
									date.Year = year;
 800182c:	f897 305a 	ldrb.w	r3, [r7, #90]	@ 0x5a
 8001830:	72fb      	strb	r3, [r7, #11]

									if(!validate_rtc_information(NULL,&date))
 8001832:	f107 0308 	add.w	r3, r7, #8
 8001836:	4619      	mov	r1, r3
 8001838:	2000      	movs	r0, #0
 800183a:	f7ff fb51 	bl	8000ee0 <validate_rtc_information>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d110      	bne.n	8001866 <rtc_task+0x396>
									{
										rtc_configure_date(&date);
 8001844:	f107 0308 	add.w	r3, r7, #8
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fb39 	bl	8000ec0 <rtc_configure_date>
										xQueueSend(q_print,&msg_conf,portMAX_DELAY);
 800184e:	4b39      	ldr	r3, [pc, #228]	@ (8001934 <rtc_task+0x464>)
 8001850:	6818      	ldr	r0, [r3, #0]
 8001852:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8001856:	2300      	movs	r3, #0
 8001858:	f04f 32ff 	mov.w	r2, #4294967295
 800185c:	f003 fd86 	bl	800536c <xQueueGenericSend>
										show_time_date();
 8001860:	f7ff faaa 	bl	8000db8 <show_time_date>
 8001864:	e007      	b.n	8001876 <rtc_task+0x3a6>
									}else
										xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 8001866:	4b33      	ldr	r3, [pc, #204]	@ (8001934 <rtc_task+0x464>)
 8001868:	6818      	ldr	r0, [r3, #0]
 800186a:	2300      	movs	r3, #0
 800186c:	f04f 32ff 	mov.w	r2, #4294967295
 8001870:	4931      	ldr	r1, [pc, #196]	@ (8001938 <rtc_task+0x468>)
 8001872:	f003 fd7b 	bl	800536c <xQueueGenericSend>

									curr_state = sMainMenu;
 8001876:	4b31      	ldr	r3, [pc, #196]	@ (800193c <rtc_task+0x46c>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
									rtc_state = 0;
 800187c:	4b2c      	ldr	r3, [pc, #176]	@ (8001930 <rtc_task+0x460>)
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
									break;}
 8001882:	bf00      	nop
							}


						break;}
 8001884:	e043      	b.n	800190e <rtc_task+0x43e>

					case sRtcReport:{
						/*enable or disable RTC current time reporting over ITM printf */
						if(cmd->len == 1)
 8001886:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d131      	bne.n	80018f2 <rtc_task+0x422>
						{
							if(cmd->payload[0] == 'y'){
 800188e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b79      	cmp	r3, #121	@ 0x79
 8001894:	d115      	bne.n	80018c2 <rtc_task+0x3f2>
								if(xTimerIsTimerActive(rtc_timer) == pdFALSE)
 8001896:	4b2a      	ldr	r3, [pc, #168]	@ (8001940 <rtc_task+0x470>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f005 fe0a 	bl	80074b4 <xTimerIsTimerActive>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d12d      	bne.n	8001902 <rtc_task+0x432>
									xTimerStart(rtc_timer,portMAX_DELAY);
 80018a6:	4b26      	ldr	r3, [pc, #152]	@ (8001940 <rtc_task+0x470>)
 80018a8:	681c      	ldr	r4, [r3, #0]
 80018aa:	f004 fc3d 	bl	8006128 <xTaskGetTickCount>
 80018ae:	4602      	mov	r2, r0
 80018b0:	f04f 33ff 	mov.w	r3, #4294967295
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	2300      	movs	r3, #0
 80018b8:	2101      	movs	r1, #1
 80018ba:	4620      	mov	r0, r4
 80018bc:	f005 fb10 	bl	8006ee0 <xTimerGenericCommand>
 80018c0:	e01f      	b.n	8001902 <rtc_task+0x432>
							}else if (cmd->payload[0] == 'n'){
 80018c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b6e      	cmp	r3, #110	@ 0x6e
 80018c8:	d10a      	bne.n	80018e0 <rtc_task+0x410>
								xTimerStop(rtc_timer,portMAX_DELAY);
 80018ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001940 <rtc_task+0x470>)
 80018cc:	6818      	ldr	r0, [r3, #0]
 80018ce:	f04f 33ff 	mov.w	r3, #4294967295
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	2300      	movs	r3, #0
 80018d6:	2200      	movs	r2, #0
 80018d8:	2103      	movs	r1, #3
 80018da:	f005 fb01 	bl	8006ee0 <xTimerGenericCommand>
 80018de:	e010      	b.n	8001902 <rtc_task+0x432>
							}else{
								xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80018e0:	4b14      	ldr	r3, [pc, #80]	@ (8001934 <rtc_task+0x464>)
 80018e2:	6818      	ldr	r0, [r3, #0]
 80018e4:	2300      	movs	r3, #0
 80018e6:	f04f 32ff 	mov.w	r2, #4294967295
 80018ea:	4913      	ldr	r1, [pc, #76]	@ (8001938 <rtc_task+0x468>)
 80018ec:	f003 fd3e 	bl	800536c <xQueueGenericSend>
 80018f0:	e007      	b.n	8001902 <rtc_task+0x432>
							}

						}else
						    xQueueSend(q_print,&msg_inv,portMAX_DELAY);
 80018f2:	4b10      	ldr	r3, [pc, #64]	@ (8001934 <rtc_task+0x464>)
 80018f4:	6818      	ldr	r0, [r3, #0]
 80018f6:	2300      	movs	r3, #0
 80018f8:	f04f 32ff 	mov.w	r2, #4294967295
 80018fc:	490e      	ldr	r1, [pc, #56]	@ (8001938 <rtc_task+0x468>)
 80018fe:	f003 fd35 	bl	800536c <xQueueGenericSend>

						curr_state = sMainMenu;
 8001902:	4b0e      	ldr	r3, [pc, #56]	@ (800193c <rtc_task+0x46c>)
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
						break;}
 8001908:	e002      	b.n	8001910 <rtc_task+0x440>
						break;}
 800190a:	bf00      	nop
 800190c:	e000      	b.n	8001910 <rtc_task+0x440>
						break;}
 800190e:	bf00      	nop
			while(curr_state != sMainMenu){
 8001910:	4b0a      	ldr	r3, [pc, #40]	@ (800193c <rtc_task+0x46c>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	f47f ae13 	bne.w	8001540 <rtc_task+0x70>

			} //while end


			/*Notify menu task */
			xTaskNotify(handle_menu_task,0,eNoAction);
 800191a:	4b0a      	ldr	r3, [pc, #40]	@ (8001944 <rtc_task+0x474>)
 800191c:	6818      	ldr	r0, [r3, #0]
 800191e:	2300      	movs	r3, #0
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	2300      	movs	r3, #0
 8001924:	2200      	movs	r2, #0
 8001926:	2100      	movs	r1, #0
 8001928:	f005 f806 	bl	8006938 <xTaskGenericNotify>
			xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800192c:	e5ea      	b.n	8001504 <rtc_task+0x34>
 800192e:	bf00      	nop
 8001930:	200001d4 	.word	0x200001d4
 8001934:	2000011c 	.word	0x2000011c
 8001938:	20000020 	.word	0x20000020
 800193c:	20000125 	.word	0x20000125
 8001940:	20000138 	.word	0x20000138
 8001944:	20000104 	.word	0x20000104

08001948 <process_command>:

			}//while super loop end
}

void process_command(command_t *cmd)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af02      	add	r7, sp, #8
 800194e:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f000 f835 	bl	80019c0 <extract_command>
	switch(curr_state)               // based on the state do the further processing
 8001956:	4b16      	ldr	r3, [pc, #88]	@ (80019b0 <process_command+0x68>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b05      	cmp	r3, #5
 800195c:	dc24      	bgt.n	80019a8 <process_command+0x60>
 800195e:	2b02      	cmp	r3, #2
 8001960:	da18      	bge.n	8001994 <process_command+0x4c>
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <process_command+0x24>
 8001966:	2b01      	cmp	r3, #1
 8001968:	d00a      	beq.n	8001980 <process_command+0x38>
	    case sRtcDateConfig:
	    case sRtcReport:
	    	 xTaskNotify(handle_rtc_task,(uint32_t)cmd,eSetValueWithOverwrite);
	    break;
	}
}
 800196a:	e01d      	b.n	80019a8 <process_command+0x60>
		  xTaskNotify(handle_menu_task,(uint32_t)cmd,eSetValueWithOverwrite);// notify menu task with the command
 800196c:	4b11      	ldr	r3, [pc, #68]	@ (80019b4 <process_command+0x6c>)
 800196e:	6818      	ldr	r0, [r3, #0]
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	2300      	movs	r3, #0
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	2303      	movs	r3, #3
 8001978:	2100      	movs	r1, #0
 800197a:	f004 ffdd 	bl	8006938 <xTaskGenericNotify>
		break;
 800197e:	e013      	b.n	80019a8 <process_command+0x60>
	      xTaskNotify(handle_led_task,(uint32_t)cmd,eSetValueWithOverwrite);
 8001980:	4b0d      	ldr	r3, [pc, #52]	@ (80019b8 <process_command+0x70>)
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	2300      	movs	r3, #0
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	2303      	movs	r3, #3
 800198c:	2100      	movs	r1, #0
 800198e:	f004 ffd3 	bl	8006938 <xTaskGenericNotify>
	    break;
 8001992:	e009      	b.n	80019a8 <process_command+0x60>
	    	 xTaskNotify(handle_rtc_task,(uint32_t)cmd,eSetValueWithOverwrite);
 8001994:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <process_command+0x74>)
 8001996:	6818      	ldr	r0, [r3, #0]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	2300      	movs	r3, #0
 800199c:	9300      	str	r3, [sp, #0]
 800199e:	2303      	movs	r3, #3
 80019a0:	2100      	movs	r1, #0
 80019a2:	f004 ffc9 	bl	8006938 <xTaskGenericNotify>
	    break;
 80019a6:	bf00      	nop
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000125 	.word	0x20000125
 80019b4:	20000104 	.word	0x20000104
 80019b8:	20000110 	.word	0x20000110
 80019bc:	20000114 	.word	0x20000114

080019c0 <extract_command>:

int extract_command(command_t *cmd)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;

	// Check the status of the message queue q_data
	status= uxQueueMessagesWaiting(q_data);
 80019c8:	4b18      	ldr	r3, [pc, #96]	@ (8001a2c <extract_command+0x6c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f003 ffcf 	bl	8005970 <uxQueueMessagesWaiting>
 80019d2:	4603      	mov	r3, r0
 80019d4:	613b      	str	r3, [r7, #16]
	if(!status)                            // check if the queue is empty
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d102      	bne.n	80019e2 <extract_command+0x22>
		return -1;
 80019dc:	f04f 33ff 	mov.w	r3, #4294967295
 80019e0:	e020      	b.n	8001a24 <extract_command+0x64>
	uint8_t i;

	do
	{
		// Check what is in the queue and populate the structure member payload with command in placeholder till we receive end of line ie \n
		status=xQueueReceive(q_data, &item, 0);
 80019e2:	4b12      	ldr	r3, [pc, #72]	@ (8001a2c <extract_command+0x6c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f107 010f 	add.w	r1, r7, #15
 80019ea:	2200      	movs	r2, #0
 80019ec:	4618      	mov	r0, r3
 80019ee:	f003 fe55 	bl	800569c <xQueueReceive>
 80019f2:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE)
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d106      	bne.n	8001a08 <extract_command+0x48>
			cmd->payload[i++]=item;
 80019fa:	7dfb      	ldrb	r3, [r7, #23]
 80019fc:	1c5a      	adds	r2, r3, #1
 80019fe:	75fa      	strb	r2, [r7, #23]
 8001a00:	461a      	mov	r2, r3
 8001a02:	7bf9      	ldrb	r1, [r7, #15]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	5499      	strb	r1, [r3, r2]
	}while(item != '\n');
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
 8001a0a:	2b0a      	cmp	r3, #10
 8001a0c:	d1e9      	bne.n	80019e2 <extract_command+0x22>

     cmd->payload[i-1]='\0'; // replace the last element of the payload
 8001a0e:	7dfb      	ldrb	r3, [r7, #23]
 8001a10:	3b01      	subs	r3, #1
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	2100      	movs	r1, #0
 8001a16:	54d1      	strb	r1, [r2, r3]
     cmd->len=i-1;           // save the number of data bytes captured
 8001a18:	7dfb      	ldrb	r3, [r7, #23]
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	60da      	str	r2, [r3, #12]

     return 0;
 8001a22:	2300      	movs	r3, #0

}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000118 	.word	0x20000118

08001a30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a30:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a68 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a34:	f7ff fbd4 	bl	80011e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a38:	480c      	ldr	r0, [pc, #48]	@ (8001a6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a3a:	490d      	ldr	r1, [pc, #52]	@ (8001a70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a40:	e002      	b.n	8001a48 <LoopCopyDataInit>

08001a42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a46:	3304      	adds	r3, #4

08001a48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a4c:	d3f9      	bcc.n	8001a42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001a78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a50:	4c0a      	ldr	r4, [pc, #40]	@ (8001a7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a54:	e001      	b.n	8001a5a <LoopFillZerobss>

08001a56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a58:	3204      	adds	r2, #4

08001a5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a5c:	d3fb      	bcc.n	8001a56 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001a5e:	f006 f9fb 	bl	8007e58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a62:	f7fe fee5 	bl	8000830 <main>
  bx  lr    
 8001a66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a70:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001a74:	08008bfc 	.word	0x08008bfc
  ldr r2, =_sbss
 8001a78:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001a7c:	200130d0 	.word	0x200130d0

08001a80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a80:	e7fe      	b.n	8001a80 <ADC_IRQHandler>
	...

08001a84 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a88:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac4 <HAL_Init+0x40>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ac4 <HAL_Init+0x40>)
 8001a8e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a92:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a94:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac4 <HAL_Init+0x40>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac4 <HAL_Init+0x40>)
 8001a9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a9e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001aa0:	4b08      	ldr	r3, [pc, #32]	@ (8001ac4 <HAL_Init+0x40>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a07      	ldr	r2, [pc, #28]	@ (8001ac4 <HAL_Init+0x40>)
 8001aa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aaa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aac:	2003      	movs	r0, #3
 8001aae:	f000 f8fc 	bl	8001caa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f7ff fae8 	bl	8001088 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ab8:	f7ff fa44 	bl	8000f44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001abc:	2300      	movs	r3, #0
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40023c00 	.word	0x40023c00

08001ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001acc:	4b06      	ldr	r3, [pc, #24]	@ (8001ae8 <HAL_IncTick+0x20>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <HAL_IncTick+0x24>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	4a04      	ldr	r2, [pc, #16]	@ (8001aec <HAL_IncTick+0x24>)
 8001ada:	6013      	str	r3, [r2, #0]
}
 8001adc:	bf00      	nop
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	20000028 	.word	0x20000028
 8001aec:	200001d8 	.word	0x200001d8

08001af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return uwTick;
 8001af4:	4b03      	ldr	r3, [pc, #12]	@ (8001b04 <HAL_GetTick+0x14>)
 8001af6:	681b      	ldr	r3, [r3, #0]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	200001d8 	.word	0x200001d8

08001b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b10:	f7ff ffee 	bl	8001af0 <HAL_GetTick>
 8001b14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b20:	d005      	beq.n	8001b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b22:	4b0a      	ldr	r3, [pc, #40]	@ (8001b4c <HAL_Delay+0x44>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	461a      	mov	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b2e:	bf00      	nop
 8001b30:	f7ff ffde 	bl	8001af0 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d8f7      	bhi.n	8001b30 <HAL_Delay+0x28>
  {
  }
}
 8001b40:	bf00      	nop
 8001b42:	bf00      	nop
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000028 	.word	0x20000028

08001b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b60:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b78:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b82:	4a04      	ldr	r2, [pc, #16]	@ (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	60d3      	str	r3, [r2, #12]
}
 8001b88:	bf00      	nop
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b9c:	4b04      	ldr	r3, [pc, #16]	@ (8001bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	f003 0307 	and.w	r3, r3, #7
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	db0b      	blt.n	8001bde <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	f003 021f 	and.w	r2, r3, #31
 8001bcc:	4907      	ldr	r1, [pc, #28]	@ (8001bec <__NVIC_EnableIRQ+0x38>)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	095b      	lsrs	r3, r3, #5
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000e100 	.word	0xe000e100

08001bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	6039      	str	r1, [r7, #0]
 8001bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	db0a      	blt.n	8001c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	490c      	ldr	r1, [pc, #48]	@ (8001c3c <__NVIC_SetPriority+0x4c>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	0112      	lsls	r2, r2, #4
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	440b      	add	r3, r1
 8001c14:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c18:	e00a      	b.n	8001c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4908      	ldr	r1, [pc, #32]	@ (8001c40 <__NVIC_SetPriority+0x50>)
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	3b04      	subs	r3, #4
 8001c28:	0112      	lsls	r2, r2, #4
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	761a      	strb	r2, [r3, #24]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000e100 	.word	0xe000e100
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	@ 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f1c3 0307 	rsb	r3, r3, #7
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	bf28      	it	cs
 8001c62:	2304      	movcs	r3, #4
 8001c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d902      	bls.n	8001c74 <NVIC_EncodePriority+0x30>
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3b03      	subs	r3, #3
 8001c72:	e000      	b.n	8001c76 <NVIC_EncodePriority+0x32>
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	f04f 32ff 	mov.w	r2, #4294967295
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43da      	mvns	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	401a      	ands	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	fa01 f303 	lsl.w	r3, r1, r3
 8001c96:	43d9      	mvns	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	4313      	orrs	r3, r2
         );
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3724      	adds	r7, #36	@ 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr

08001caa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b082      	sub	sp, #8
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f7ff ff4c 	bl	8001b50 <__NVIC_SetPriorityGrouping>
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
 8001ccc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cd2:	f7ff ff61 	bl	8001b98 <__NVIC_GetPriorityGrouping>
 8001cd6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	68b9      	ldr	r1, [r7, #8]
 8001cdc:	6978      	ldr	r0, [r7, #20]
 8001cde:	f7ff ffb1 	bl	8001c44 <NVIC_EncodePriority>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce8:	4611      	mov	r1, r2
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ff80 	bl	8001bf0 <__NVIC_SetPriority>
}
 8001cf0:	bf00      	nop
 8001cf2:	3718      	adds	r7, #24
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4603      	mov	r3, r0
 8001d00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	4618      	mov	r0, r3
 8001d08:	f7ff ff54 	bl	8001bb4 <__NVIC_EnableIRQ>
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d22:	f7ff fee5 	bl	8001af0 <HAL_GetTick>
 8001d26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d008      	beq.n	8001d46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2280      	movs	r2, #128	@ 0x80
 8001d38:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e052      	b.n	8001dec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0216 	bic.w	r2, r2, #22
 8001d54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	695a      	ldr	r2, [r3, #20]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d103      	bne.n	8001d76 <HAL_DMA_Abort+0x62>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d007      	beq.n	8001d86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 0208 	bic.w	r2, r2, #8
 8001d84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f022 0201 	bic.w	r2, r2, #1
 8001d94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d96:	e013      	b.n	8001dc0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d98:	f7ff feaa 	bl	8001af0 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b05      	cmp	r3, #5
 8001da4:	d90c      	bls.n	8001dc0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2220      	movs	r2, #32
 8001daa:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2203      	movs	r2, #3
 8001db0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e015      	b.n	8001dec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1e4      	bne.n	8001d98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dd2:	223f      	movs	r2, #63	@ 0x3f
 8001dd4:	409a      	lsls	r2, r3
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d004      	beq.n	8001e12 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2280      	movs	r2, #128	@ 0x80
 8001e0c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e00c      	b.n	8001e2c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2205      	movs	r2, #5
 8001e16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f022 0201 	bic.w	r2, r2, #1
 8001e28:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	@ 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e46:	2300      	movs	r3, #0
 8001e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e4e:	2300      	movs	r3, #0
 8001e50:	61fb      	str	r3, [r7, #28]
 8001e52:	e165      	b.n	8002120 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e54:	2201      	movs	r2, #1
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4013      	ands	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	f040 8154 	bne.w	800211a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d005      	beq.n	8001e8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e86:	2b02      	cmp	r3, #2
 8001e88:	d130      	bne.n	8001eec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	2203      	movs	r2, #3
 8001e96:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f003 0201 	and.w	r2, r3, #1
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69ba      	ldr	r2, [r7, #24]
 8001eea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f003 0303 	and.w	r3, r3, #3
 8001ef4:	2b03      	cmp	r3, #3
 8001ef6:	d017      	beq.n	8001f28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	005b      	lsls	r3, r3, #1
 8001f02:	2203      	movs	r2, #3
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	69ba      	ldr	r2, [r7, #24]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	689a      	ldr	r2, [r3, #8]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 0303 	and.w	r3, r3, #3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d123      	bne.n	8001f7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	08da      	lsrs	r2, r3, #3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3208      	adds	r2, #8
 8001f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	f003 0307 	and.w	r3, r3, #7
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	220f      	movs	r2, #15
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	f003 0307 	and.w	r3, r3, #7
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	fa02 f303 	lsl.w	r3, r2, r3
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	08da      	lsrs	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3208      	adds	r2, #8
 8001f76:	69b9      	ldr	r1, [r7, #24]
 8001f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	2203      	movs	r2, #3
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0203 	and.w	r2, r3, #3
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 80ae 	beq.w	800211a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	60fb      	str	r3, [r7, #12]
 8001fc2:	4b5d      	ldr	r3, [pc, #372]	@ (8002138 <HAL_GPIO_Init+0x300>)
 8001fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc6:	4a5c      	ldr	r2, [pc, #368]	@ (8002138 <HAL_GPIO_Init+0x300>)
 8001fc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fce:	4b5a      	ldr	r3, [pc, #360]	@ (8002138 <HAL_GPIO_Init+0x300>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fda:	4a58      	ldr	r2, [pc, #352]	@ (800213c <HAL_GPIO_Init+0x304>)
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	3302      	adds	r3, #2
 8001fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	220f      	movs	r2, #15
 8001ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff6:	43db      	mvns	r3, r3
 8001ff8:	69ba      	ldr	r2, [r7, #24]
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a4f      	ldr	r2, [pc, #316]	@ (8002140 <HAL_GPIO_Init+0x308>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d025      	beq.n	8002052 <HAL_GPIO_Init+0x21a>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a4e      	ldr	r2, [pc, #312]	@ (8002144 <HAL_GPIO_Init+0x30c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d01f      	beq.n	800204e <HAL_GPIO_Init+0x216>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a4d      	ldr	r2, [pc, #308]	@ (8002148 <HAL_GPIO_Init+0x310>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d019      	beq.n	800204a <HAL_GPIO_Init+0x212>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a4c      	ldr	r2, [pc, #304]	@ (800214c <HAL_GPIO_Init+0x314>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d013      	beq.n	8002046 <HAL_GPIO_Init+0x20e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a4b      	ldr	r2, [pc, #300]	@ (8002150 <HAL_GPIO_Init+0x318>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d00d      	beq.n	8002042 <HAL_GPIO_Init+0x20a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a4a      	ldr	r2, [pc, #296]	@ (8002154 <HAL_GPIO_Init+0x31c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d007      	beq.n	800203e <HAL_GPIO_Init+0x206>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a49      	ldr	r2, [pc, #292]	@ (8002158 <HAL_GPIO_Init+0x320>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d101      	bne.n	800203a <HAL_GPIO_Init+0x202>
 8002036:	2306      	movs	r3, #6
 8002038:	e00c      	b.n	8002054 <HAL_GPIO_Init+0x21c>
 800203a:	2307      	movs	r3, #7
 800203c:	e00a      	b.n	8002054 <HAL_GPIO_Init+0x21c>
 800203e:	2305      	movs	r3, #5
 8002040:	e008      	b.n	8002054 <HAL_GPIO_Init+0x21c>
 8002042:	2304      	movs	r3, #4
 8002044:	e006      	b.n	8002054 <HAL_GPIO_Init+0x21c>
 8002046:	2303      	movs	r3, #3
 8002048:	e004      	b.n	8002054 <HAL_GPIO_Init+0x21c>
 800204a:	2302      	movs	r3, #2
 800204c:	e002      	b.n	8002054 <HAL_GPIO_Init+0x21c>
 800204e:	2301      	movs	r3, #1
 8002050:	e000      	b.n	8002054 <HAL_GPIO_Init+0x21c>
 8002052:	2300      	movs	r3, #0
 8002054:	69fa      	ldr	r2, [r7, #28]
 8002056:	f002 0203 	and.w	r2, r2, #3
 800205a:	0092      	lsls	r2, r2, #2
 800205c:	4093      	lsls	r3, r2
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002064:	4935      	ldr	r1, [pc, #212]	@ (800213c <HAL_GPIO_Init+0x304>)
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	089b      	lsrs	r3, r3, #2
 800206a:	3302      	adds	r3, #2
 800206c:	69ba      	ldr	r2, [r7, #24]
 800206e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002072:	4b3a      	ldr	r3, [pc, #232]	@ (800215c <HAL_GPIO_Init+0x324>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	43db      	mvns	r3, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4013      	ands	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002096:	4a31      	ldr	r2, [pc, #196]	@ (800215c <HAL_GPIO_Init+0x324>)
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800209c:	4b2f      	ldr	r3, [pc, #188]	@ (800215c <HAL_GPIO_Init+0x324>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d003      	beq.n	80020c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020c0:	4a26      	ldr	r2, [pc, #152]	@ (800215c <HAL_GPIO_Init+0x324>)
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020c6:	4b25      	ldr	r3, [pc, #148]	@ (800215c <HAL_GPIO_Init+0x324>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4013      	ands	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80020e2:	69ba      	ldr	r2, [r7, #24]
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ea:	4a1c      	ldr	r2, [pc, #112]	@ (800215c <HAL_GPIO_Init+0x324>)
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020f0:	4b1a      	ldr	r3, [pc, #104]	@ (800215c <HAL_GPIO_Init+0x324>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	43db      	mvns	r3, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d003      	beq.n	8002114 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002114:	4a11      	ldr	r2, [pc, #68]	@ (800215c <HAL_GPIO_Init+0x324>)
 8002116:	69bb      	ldr	r3, [r7, #24]
 8002118:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	3301      	adds	r3, #1
 800211e:	61fb      	str	r3, [r7, #28]
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	2b0f      	cmp	r3, #15
 8002124:	f67f ae96 	bls.w	8001e54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002128:	bf00      	nop
 800212a:	bf00      	nop
 800212c:	3724      	adds	r7, #36	@ 0x24
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	40023800 	.word	0x40023800
 800213c:	40013800 	.word	0x40013800
 8002140:	40020000 	.word	0x40020000
 8002144:	40020400 	.word	0x40020400
 8002148:	40020800 	.word	0x40020800
 800214c:	40020c00 	.word	0x40020c00
 8002150:	40021000 	.word	0x40021000
 8002154:	40021400 	.word	0x40021400
 8002158:	40021800 	.word	0x40021800
 800215c:	40013c00 	.word	0x40013c00

08002160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	807b      	strh	r3, [r7, #2]
 800216c:	4613      	mov	r3, r2
 800216e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002170:	787b      	ldrb	r3, [r7, #1]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d003      	beq.n	800217e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002176:	887a      	ldrh	r2, [r7, #2]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800217c:	e003      	b.n	8002186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800217e:	887b      	ldrh	r3, [r7, #2]
 8002180:	041a      	lsls	r2, r3, #16
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	619a      	str	r2, [r3, #24]
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr
	...

08002194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0cc      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021a8:	4b68      	ldr	r3, [pc, #416]	@ (800234c <HAL_RCC_ClockConfig+0x1b8>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 030f 	and.w	r3, r3, #15
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d90c      	bls.n	80021d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b6:	4b65      	ldr	r3, [pc, #404]	@ (800234c <HAL_RCC_ClockConfig+0x1b8>)
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021be:	4b63      	ldr	r3, [pc, #396]	@ (800234c <HAL_RCC_ClockConfig+0x1b8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d001      	beq.n	80021d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0b8      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d020      	beq.n	800221e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0304 	and.w	r3, r3, #4
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d005      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021e8:	4b59      	ldr	r3, [pc, #356]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	4a58      	ldr	r2, [pc, #352]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 80021ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80021f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002200:	4b53      	ldr	r3, [pc, #332]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	4a52      	ldr	r2, [pc, #328]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002206:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800220a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800220c:	4b50      	ldr	r3, [pc, #320]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	494d      	ldr	r1, [pc, #308]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 800221a:	4313      	orrs	r3, r2
 800221c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d044      	beq.n	80022b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b01      	cmp	r3, #1
 8002230:	d107      	bne.n	8002242 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002232:	4b47      	ldr	r3, [pc, #284]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d119      	bne.n	8002272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e07f      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b02      	cmp	r3, #2
 8002248:	d003      	beq.n	8002252 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800224e:	2b03      	cmp	r3, #3
 8002250:	d107      	bne.n	8002262 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002252:	4b3f      	ldr	r3, [pc, #252]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d109      	bne.n	8002272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e06f      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002262:	4b3b      	ldr	r3, [pc, #236]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e067      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002272:	4b37      	ldr	r3, [pc, #220]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f023 0203 	bic.w	r2, r3, #3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	4934      	ldr	r1, [pc, #208]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002280:	4313      	orrs	r3, r2
 8002282:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002284:	f7ff fc34 	bl	8001af0 <HAL_GetTick>
 8002288:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228a:	e00a      	b.n	80022a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800228c:	f7ff fc30 	bl	8001af0 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	f241 3288 	movw	r2, #5000	@ 0x1388
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e04f      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f003 020c 	and.w	r2, r3, #12
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d1eb      	bne.n	800228c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022b4:	4b25      	ldr	r3, [pc, #148]	@ (800234c <HAL_RCC_ClockConfig+0x1b8>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 030f 	and.w	r3, r3, #15
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d20c      	bcs.n	80022dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022c2:	4b22      	ldr	r3, [pc, #136]	@ (800234c <HAL_RCC_ClockConfig+0x1b8>)
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	b2d2      	uxtb	r2, r2
 80022c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ca:	4b20      	ldr	r3, [pc, #128]	@ (800234c <HAL_RCC_ClockConfig+0x1b8>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	683a      	ldr	r2, [r7, #0]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d001      	beq.n	80022dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e032      	b.n	8002342 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0304 	and.w	r3, r3, #4
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d008      	beq.n	80022fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022e8:	4b19      	ldr	r3, [pc, #100]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	4916      	ldr	r1, [pc, #88]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	2b00      	cmp	r3, #0
 8002304:	d009      	beq.n	800231a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002306:	4b12      	ldr	r3, [pc, #72]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	00db      	lsls	r3, r3, #3
 8002314:	490e      	ldr	r1, [pc, #56]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002316:	4313      	orrs	r3, r2
 8002318:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800231a:	f000 fbb1 	bl	8002a80 <HAL_RCC_GetSysClockFreq>
 800231e:	4602      	mov	r2, r0
 8002320:	4b0b      	ldr	r3, [pc, #44]	@ (8002350 <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	490a      	ldr	r1, [pc, #40]	@ (8002354 <HAL_RCC_ClockConfig+0x1c0>)
 800232c:	5ccb      	ldrb	r3, [r1, r3]
 800232e:	fa22 f303 	lsr.w	r3, r2, r3
 8002332:	4a09      	ldr	r2, [pc, #36]	@ (8002358 <HAL_RCC_ClockConfig+0x1c4>)
 8002334:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002336:	4b09      	ldr	r3, [pc, #36]	@ (800235c <HAL_RCC_ClockConfig+0x1c8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe fea4 	bl	8001088 <HAL_InitTick>

  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	40023c00 	.word	0x40023c00
 8002350:	40023800 	.word	0x40023800
 8002354:	08008b9c 	.word	0x08008b9c
 8002358:	20000018 	.word	0x20000018
 800235c:	20000024 	.word	0x20000024

08002360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002364:	4b03      	ldr	r3, [pc, #12]	@ (8002374 <HAL_RCC_GetHCLKFreq+0x14>)
 8002366:	681b      	ldr	r3, [r3, #0]
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	20000018 	.word	0x20000018

08002378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800237c:	f7ff fff0 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 8002380:	4602      	mov	r2, r0
 8002382:	4b05      	ldr	r3, [pc, #20]	@ (8002398 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	0a9b      	lsrs	r3, r3, #10
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	4903      	ldr	r1, [pc, #12]	@ (800239c <HAL_RCC_GetPCLK1Freq+0x24>)
 800238e:	5ccb      	ldrb	r3, [r1, r3]
 8002390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002394:	4618      	mov	r0, r3
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40023800 	.word	0x40023800
 800239c:	08008bac 	.word	0x08008bac

080023a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023a4:	f7ff ffdc 	bl	8002360 <HAL_RCC_GetHCLKFreq>
 80023a8:	4602      	mov	r2, r0
 80023aa:	4b05      	ldr	r3, [pc, #20]	@ (80023c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	0b5b      	lsrs	r3, r3, #13
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	4903      	ldr	r1, [pc, #12]	@ (80023c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023b6:	5ccb      	ldrb	r3, [r1, r3]
 80023b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023bc:	4618      	mov	r0, r3
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40023800 	.word	0x40023800
 80023c4:	08008bac 	.word	0x08008bac

080023c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	220f      	movs	r2, #15
 80023d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80023d8:	4b12      	ldr	r3, [pc, #72]	@ (8002424 <HAL_RCC_GetClockConfig+0x5c>)
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 0203 	and.w	r2, r3, #3
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80023e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002424 <HAL_RCC_GetClockConfig+0x5c>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80023f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002424 <HAL_RCC_GetClockConfig+0x5c>)
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80023fc:	4b09      	ldr	r3, [pc, #36]	@ (8002424 <HAL_RCC_GetClockConfig+0x5c>)
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	08db      	lsrs	r3, r3, #3
 8002402:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800240a:	4b07      	ldr	r3, [pc, #28]	@ (8002428 <HAL_RCC_GetClockConfig+0x60>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 020f 	and.w	r2, r3, #15
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	601a      	str	r2, [r3, #0]
}
 8002416:	bf00      	nop
 8002418:	370c      	adds	r7, #12
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40023800 	.word	0x40023800
 8002428:	40023c00 	.word	0x40023c00

0800242c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b08c      	sub	sp, #48	@ 0x30
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002440:	2300      	movs	r3, #0
 8002442:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002450:	2300      	movs	r3, #0
 8002452:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0301 	and.w	r3, r3, #1
 8002460:	2b00      	cmp	r3, #0
 8002462:	d010      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002464:	4b6f      	ldr	r3, [pc, #444]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002466:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800246a:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002472:	496c      	ldr	r1, [pc, #432]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002482:	2301      	movs	r3, #1
 8002484:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d010      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002492:	4b64      	ldr	r3, [pc, #400]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002494:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002498:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a0:	4960      	ldr	r1, [pc, #384]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80024b0:	2301      	movs	r3, #1
 80024b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d017      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024c0:	4b58      	ldr	r3, [pc, #352]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024c6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	4955      	ldr	r1, [pc, #340]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80024de:	d101      	bne.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80024e0:	2301      	movs	r3, #1
 80024e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d101      	bne.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80024ec:	2301      	movs	r3, #1
 80024ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0308 	and.w	r3, r3, #8
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d017      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024fc:	4b49      	ldr	r3, [pc, #292]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002502:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800250a:	4946      	ldr	r1, [pc, #280]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002516:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800251a:	d101      	bne.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 800251c:	2301      	movs	r3, #1
 800251e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002524:	2b00      	cmp	r3, #0
 8002526:	d101      	bne.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002528:	2301      	movs	r3, #1
 800252a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0320 	and.w	r3, r3, #32
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 808a 	beq.w	800264e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	60bb      	str	r3, [r7, #8]
 800253e:	4b39      	ldr	r3, [pc, #228]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002542:	4a38      	ldr	r2, [pc, #224]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002544:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002548:	6413      	str	r3, [r2, #64]	@ 0x40
 800254a:	4b36      	ldr	r3, [pc, #216]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800254e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002556:	4b34      	ldr	r3, [pc, #208]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a33      	ldr	r2, [pc, #204]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800255c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002560:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002562:	f7ff fac5 	bl	8001af0 <HAL_GetTick>
 8002566:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002568:	e008      	b.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800256a:	f7ff fac1 	bl	8001af0 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e278      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800257c:	4b2a      	ldr	r3, [pc, #168]	@ (8002628 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f0      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002588:	4b26      	ldr	r3, [pc, #152]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800258a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800258c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002590:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d02f      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800259c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025a0:	6a3a      	ldr	r2, [r7, #32]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d028      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025a6:	4b1f      	ldr	r3, [pc, #124]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025ae:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025b0:	4b1e      	ldr	r3, [pc, #120]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025b6:	4b1d      	ldr	r3, [pc, #116]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80025bc:	4a19      	ldr	r2, [pc, #100]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025be:	6a3b      	ldr	r3, [r7, #32]
 80025c0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025c2:	4b18      	ldr	r3, [pc, #96]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d114      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80025ce:	f7ff fa8f 	bl	8001af0 <HAL_GetTick>
 80025d2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d4:	e00a      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d6:	f7ff fa8b 	bl	8001af0 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d901      	bls.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e240      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ec:	4b0d      	ldr	r3, [pc, #52]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0ee      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002600:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002604:	d114      	bne.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002606:	4b07      	ldr	r3, [pc, #28]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002612:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002616:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800261a:	4902      	ldr	r1, [pc, #8]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800261c:	4313      	orrs	r3, r2
 800261e:	608b      	str	r3, [r1, #8]
 8002620:	e00c      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002622:	bf00      	nop
 8002624:	40023800 	.word	0x40023800
 8002628:	40007000 	.word	0x40007000
 800262c:	42470e40 	.word	0x42470e40
 8002630:	4b4a      	ldr	r3, [pc, #296]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	4a49      	ldr	r2, [pc, #292]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002636:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800263a:	6093      	str	r3, [r2, #8]
 800263c:	4b47      	ldr	r3, [pc, #284]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800263e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002644:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002648:	4944      	ldr	r1, [pc, #272]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800264a:	4313      	orrs	r3, r2
 800264c:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0310 	and.w	r3, r3, #16
 8002656:	2b00      	cmp	r3, #0
 8002658:	d004      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002660:	4b3f      	ldr	r3, [pc, #252]	@ (8002760 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002662:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00a      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002670:	4b3a      	ldr	r3, [pc, #232]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002672:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002676:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800267e:	4937      	ldr	r1, [pc, #220]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002680:	4313      	orrs	r3, r2
 8002682:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00a      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002692:	4b32      	ldr	r3, [pc, #200]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002694:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002698:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026a0:	492e      	ldr	r1, [pc, #184]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d011      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80026b4:	4b29      	ldr	r3, [pc, #164]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026ba:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c2:	4926      	ldr	r1, [pc, #152]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026d2:	d101      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80026d4:	2301      	movs	r3, #1
 80026d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00a      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80026e4:	4b1d      	ldr	r3, [pc, #116]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026ea:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f2:	491a      	ldr	r1, [pc, #104]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002702:	2b00      	cmp	r3, #0
 8002704:	d011      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002706:	4b15      	ldr	r3, [pc, #84]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002708:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800270c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002714:	4911      	ldr	r1, [pc, #68]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002716:	4313      	orrs	r3, r2
 8002718:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002720:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002724:	d101      	bne.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002726:	2301      	movs	r3, #1
 8002728:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800272a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800272c:	2b01      	cmp	r3, #1
 800272e:	d005      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002738:	f040 80ff 	bne.w	800293a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800273c:	4b09      	ldr	r3, [pc, #36]	@ (8002764 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002742:	f7ff f9d5 	bl	8001af0 <HAL_GetTick>
 8002746:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002748:	e00e      	b.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800274a:	f7ff f9d1 	bl	8001af0 <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d907      	bls.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e188      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800275c:	40023800 	.word	0x40023800
 8002760:	424711e0 	.word	0x424711e0
 8002764:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002768:	4b7e      	ldr	r3, [pc, #504]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1ea      	bne.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	d003      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002784:	2b00      	cmp	r3, #0
 8002786:	d009      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002790:	2b00      	cmp	r3, #0
 8002792:	d028      	beq.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002798:	2b00      	cmp	r3, #0
 800279a:	d124      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800279c:	4b71      	ldr	r3, [pc, #452]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800279e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027a2:	0c1b      	lsrs	r3, r3, #16
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	3301      	adds	r3, #1
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027b4:	0e1b      	lsrs	r3, r3, #24
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685a      	ldr	r2, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	019b      	lsls	r3, r3, #6
 80027c6:	431a      	orrs	r2, r3
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	085b      	lsrs	r3, r3, #1
 80027cc:	3b01      	subs	r3, #1
 80027ce:	041b      	lsls	r3, r3, #16
 80027d0:	431a      	orrs	r2, r3
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	061b      	lsls	r3, r3, #24
 80027d6:	431a      	orrs	r2, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	071b      	lsls	r3, r3, #28
 80027de:	4961      	ldr	r1, [pc, #388]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d004      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027fa:	d00a      	beq.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002804:	2b00      	cmp	r3, #0
 8002806:	d035      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800280c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002810:	d130      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002812:	4b54      	ldr	r3, [pc, #336]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002814:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002818:	0c1b      	lsrs	r3, r3, #16
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	3301      	adds	r3, #1
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002824:	4b4f      	ldr	r3, [pc, #316]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002826:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800282a:	0f1b      	lsrs	r3, r3, #28
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685a      	ldr	r2, [r3, #4]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	019b      	lsls	r3, r3, #6
 800283c:	431a      	orrs	r2, r3
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	085b      	lsrs	r3, r3, #1
 8002842:	3b01      	subs	r3, #1
 8002844:	041b      	lsls	r3, r3, #16
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	061b      	lsls	r3, r3, #24
 800284e:	431a      	orrs	r2, r3
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	071b      	lsls	r3, r3, #28
 8002854:	4943      	ldr	r1, [pc, #268]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002856:	4313      	orrs	r3, r2
 8002858:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800285c:	4b41      	ldr	r3, [pc, #260]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800285e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002862:	f023 021f 	bic.w	r2, r3, #31
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800286a:	3b01      	subs	r3, #1
 800286c:	493d      	ldr	r1, [pc, #244]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800287c:	2b00      	cmp	r3, #0
 800287e:	d029      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002884:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002888:	d124      	bne.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800288a:	4b36      	ldr	r3, [pc, #216]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800288c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002890:	0c1b      	lsrs	r3, r3, #16
 8002892:	f003 0303 	and.w	r3, r3, #3
 8002896:	3301      	adds	r3, #1
 8002898:	005b      	lsls	r3, r3, #1
 800289a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800289c:	4b31      	ldr	r3, [pc, #196]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800289e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80028a2:	0f1b      	lsrs	r3, r3, #28
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	019b      	lsls	r3, r3, #6
 80028b4:	431a      	orrs	r2, r3
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	085b      	lsrs	r3, r3, #1
 80028bc:	3b01      	subs	r3, #1
 80028be:	041b      	lsls	r3, r3, #16
 80028c0:	431a      	orrs	r2, r3
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	061b      	lsls	r3, r3, #24
 80028c6:	431a      	orrs	r2, r3
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	071b      	lsls	r3, r3, #28
 80028cc:	4925      	ldr	r1, [pc, #148]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d016      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	019b      	lsls	r3, r3, #6
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	085b      	lsrs	r3, r3, #1
 80028f2:	3b01      	subs	r3, #1
 80028f4:	041b      	lsls	r3, r3, #16
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	061b      	lsls	r3, r3, #24
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	071b      	lsls	r3, r3, #28
 8002906:	4917      	ldr	r1, [pc, #92]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800290e:	4b16      	ldr	r3, [pc, #88]	@ (8002968 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002910:	2201      	movs	r2, #1
 8002912:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002914:	f7ff f8ec 	bl	8001af0 <HAL_GetTick>
 8002918:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800291a:	e008      	b.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800291c:	f7ff f8e8 	bl	8001af0 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e09f      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800292e:	4b0d      	ldr	r3, [pc, #52]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 800293a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800293c:	2b01      	cmp	r3, #1
 800293e:	f040 8095 	bne.w	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002942:	4b0a      	ldr	r3, [pc, #40]	@ (800296c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002944:	2200      	movs	r2, #0
 8002946:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002948:	f7ff f8d2 	bl	8001af0 <HAL_GetTick>
 800294c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800294e:	e00f      	b.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002950:	f7ff f8ce 	bl	8001af0 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b02      	cmp	r3, #2
 800295c:	d908      	bls.n	8002970 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e085      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002962:	bf00      	nop
 8002964:	40023800 	.word	0x40023800
 8002968:	42470068 	.word	0x42470068
 800296c:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002970:	4b41      	ldr	r3, [pc, #260]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002978:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800297c:	d0e8      	beq.n	8002950 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298e:	2b00      	cmp	r3, #0
 8002990:	d009      	beq.n	80029a6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800299a:	2b00      	cmp	r3, #0
 800299c:	d02b      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d127      	bne.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80029a6:	4b34      	ldr	r3, [pc, #208]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ac:	0c1b      	lsrs	r3, r3, #16
 80029ae:	f003 0303 	and.w	r3, r3, #3
 80029b2:	3301      	adds	r3, #1
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699a      	ldr	r2, [r3, #24]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69db      	ldr	r3, [r3, #28]
 80029c0:	019b      	lsls	r3, r3, #6
 80029c2:	431a      	orrs	r2, r3
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	085b      	lsrs	r3, r3, #1
 80029c8:	3b01      	subs	r3, #1
 80029ca:	041b      	lsls	r3, r3, #16
 80029cc:	431a      	orrs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d2:	061b      	lsls	r3, r3, #24
 80029d4:	4928      	ldr	r1, [pc, #160]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80029dc:	4b26      	ldr	r3, [pc, #152]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029de:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029e2:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029ea:	3b01      	subs	r3, #1
 80029ec:	021b      	lsls	r3, r3, #8
 80029ee:	4922      	ldr	r1, [pc, #136]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d01d      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a06:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a0a:	d118      	bne.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a12:	0e1b      	lsrs	r3, r3, #24
 8002a14:	f003 030f 	and.w	r3, r3, #15
 8002a18:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699a      	ldr	r2, [r3, #24]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	019b      	lsls	r3, r3, #6
 8002a24:	431a      	orrs	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a1b      	ldr	r3, [r3, #32]
 8002a2a:	085b      	lsrs	r3, r3, #1
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	041b      	lsls	r3, r3, #16
 8002a30:	431a      	orrs	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	061b      	lsls	r3, r3, #24
 8002a36:	4910      	ldr	r1, [pc, #64]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002a40:	2201      	movs	r2, #1
 8002a42:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a44:	f7ff f854 	bl	8001af0 <HAL_GetTick>
 8002a48:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a4c:	f7ff f850 	bl	8001af0 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e007      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a5e:	4b06      	ldr	r3, [pc, #24]	@ (8002a78 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a6a:	d1ef      	bne.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3730      	adds	r7, #48	@ 0x30
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	42470070 	.word	0x42470070

08002a80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a84:	b0ae      	sub	sp, #184	@ 0xb8
 8002a86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aa6:	4bcb      	ldr	r3, [pc, #812]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	f003 030c 	and.w	r3, r3, #12
 8002aae:	2b0c      	cmp	r3, #12
 8002ab0:	f200 8206 	bhi.w	8002ec0 <HAL_RCC_GetSysClockFreq+0x440>
 8002ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8002abc <HAL_RCC_GetSysClockFreq+0x3c>)
 8002ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002aba:	bf00      	nop
 8002abc:	08002af1 	.word	0x08002af1
 8002ac0:	08002ec1 	.word	0x08002ec1
 8002ac4:	08002ec1 	.word	0x08002ec1
 8002ac8:	08002ec1 	.word	0x08002ec1
 8002acc:	08002af9 	.word	0x08002af9
 8002ad0:	08002ec1 	.word	0x08002ec1
 8002ad4:	08002ec1 	.word	0x08002ec1
 8002ad8:	08002ec1 	.word	0x08002ec1
 8002adc:	08002b01 	.word	0x08002b01
 8002ae0:	08002ec1 	.word	0x08002ec1
 8002ae4:	08002ec1 	.word	0x08002ec1
 8002ae8:	08002ec1 	.word	0x08002ec1
 8002aec:	08002cf1 	.word	0x08002cf1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002af0:	4bb9      	ldr	r3, [pc, #740]	@ (8002dd8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002af2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002af6:	e1e7      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002af8:	4bb8      	ldr	r3, [pc, #736]	@ (8002ddc <HAL_RCC_GetSysClockFreq+0x35c>)
 8002afa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002afe:	e1e3      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b00:	4bb4      	ldr	r3, [pc, #720]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b08:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b0c:	4bb1      	ldr	r3, [pc, #708]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d071      	beq.n	8002bfc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b18:	4bae      	ldr	r3, [pc, #696]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	099b      	lsrs	r3, r3, #6
 8002b1e:	2200      	movs	r2, #0
 8002b20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b24:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002b28:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b30:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b34:	2300      	movs	r3, #0
 8002b36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002b3a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b3e:	4622      	mov	r2, r4
 8002b40:	462b      	mov	r3, r5
 8002b42:	f04f 0000 	mov.w	r0, #0
 8002b46:	f04f 0100 	mov.w	r1, #0
 8002b4a:	0159      	lsls	r1, r3, #5
 8002b4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b50:	0150      	lsls	r0, r2, #5
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4621      	mov	r1, r4
 8002b58:	1a51      	subs	r1, r2, r1
 8002b5a:	6439      	str	r1, [r7, #64]	@ 0x40
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b62:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b64:	f04f 0200 	mov.w	r2, #0
 8002b68:	f04f 0300 	mov.w	r3, #0
 8002b6c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002b70:	4649      	mov	r1, r9
 8002b72:	018b      	lsls	r3, r1, #6
 8002b74:	4641      	mov	r1, r8
 8002b76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b7a:	4641      	mov	r1, r8
 8002b7c:	018a      	lsls	r2, r1, #6
 8002b7e:	4641      	mov	r1, r8
 8002b80:	1a51      	subs	r1, r2, r1
 8002b82:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b84:	4649      	mov	r1, r9
 8002b86:	eb63 0301 	sbc.w	r3, r3, r1
 8002b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002b98:	4649      	mov	r1, r9
 8002b9a:	00cb      	lsls	r3, r1, #3
 8002b9c:	4641      	mov	r1, r8
 8002b9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ba2:	4641      	mov	r1, r8
 8002ba4:	00ca      	lsls	r2, r1, #3
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4603      	mov	r3, r0
 8002bac:	4622      	mov	r2, r4
 8002bae:	189b      	adds	r3, r3, r2
 8002bb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002bb2:	462b      	mov	r3, r5
 8002bb4:	460a      	mov	r2, r1
 8002bb6:	eb42 0303 	adc.w	r3, r2, r3
 8002bba:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002bc8:	4629      	mov	r1, r5
 8002bca:	024b      	lsls	r3, r1, #9
 8002bcc:	4621      	mov	r1, r4
 8002bce:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bd2:	4621      	mov	r1, r4
 8002bd4:	024a      	lsls	r2, r1, #9
 8002bd6:	4610      	mov	r0, r2
 8002bd8:	4619      	mov	r1, r3
 8002bda:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bde:	2200      	movs	r2, #0
 8002be0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002be4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002be8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002bec:	f7fd fb78 	bl	80002e0 <__aeabi_uldivmod>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002bfa:	e067      	b.n	8002ccc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bfc:	4b75      	ldr	r3, [pc, #468]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	099b      	lsrs	r3, r3, #6
 8002c02:	2200      	movs	r2, #0
 8002c04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c08:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002c0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c16:	2300      	movs	r3, #0
 8002c18:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c1a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002c1e:	4622      	mov	r2, r4
 8002c20:	462b      	mov	r3, r5
 8002c22:	f04f 0000 	mov.w	r0, #0
 8002c26:	f04f 0100 	mov.w	r1, #0
 8002c2a:	0159      	lsls	r1, r3, #5
 8002c2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c30:	0150      	lsls	r0, r2, #5
 8002c32:	4602      	mov	r2, r0
 8002c34:	460b      	mov	r3, r1
 8002c36:	4621      	mov	r1, r4
 8002c38:	1a51      	subs	r1, r2, r1
 8002c3a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002c3c:	4629      	mov	r1, r5
 8002c3e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c44:	f04f 0200 	mov.w	r2, #0
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002c50:	4649      	mov	r1, r9
 8002c52:	018b      	lsls	r3, r1, #6
 8002c54:	4641      	mov	r1, r8
 8002c56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c5a:	4641      	mov	r1, r8
 8002c5c:	018a      	lsls	r2, r1, #6
 8002c5e:	4641      	mov	r1, r8
 8002c60:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c64:	4649      	mov	r1, r9
 8002c66:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	f04f 0300 	mov.w	r3, #0
 8002c72:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c76:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c7e:	4692      	mov	sl, r2
 8002c80:	469b      	mov	fp, r3
 8002c82:	4623      	mov	r3, r4
 8002c84:	eb1a 0303 	adds.w	r3, sl, r3
 8002c88:	623b      	str	r3, [r7, #32]
 8002c8a:	462b      	mov	r3, r5
 8002c8c:	eb4b 0303 	adc.w	r3, fp, r3
 8002c90:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c9e:	4629      	mov	r1, r5
 8002ca0:	028b      	lsls	r3, r1, #10
 8002ca2:	4621      	mov	r1, r4
 8002ca4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ca8:	4621      	mov	r1, r4
 8002caa:	028a      	lsls	r2, r1, #10
 8002cac:	4610      	mov	r0, r2
 8002cae:	4619      	mov	r1, r3
 8002cb0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	673b      	str	r3, [r7, #112]	@ 0x70
 8002cb8:	677a      	str	r2, [r7, #116]	@ 0x74
 8002cba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002cbe:	f7fd fb0f 	bl	80002e0 <__aeabi_uldivmod>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ccc:	4b41      	ldr	r3, [pc, #260]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	0c1b      	lsrs	r3, r3, #16
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	005b      	lsls	r3, r3, #1
 8002cda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002cde:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ce2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002cee:	e0eb      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cf0:	4b38      	ldr	r3, [pc, #224]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cf8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cfc:	4b35      	ldr	r3, [pc, #212]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d06b      	beq.n	8002de0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d08:	4b32      	ldr	r3, [pc, #200]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	099b      	lsrs	r3, r3, #6
 8002d0e:	2200      	movs	r2, #0
 8002d10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d12:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d14:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d1a:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d20:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002d24:	4622      	mov	r2, r4
 8002d26:	462b      	mov	r3, r5
 8002d28:	f04f 0000 	mov.w	r0, #0
 8002d2c:	f04f 0100 	mov.w	r1, #0
 8002d30:	0159      	lsls	r1, r3, #5
 8002d32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d36:	0150      	lsls	r0, r2, #5
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4621      	mov	r1, r4
 8002d3e:	1a51      	subs	r1, r2, r1
 8002d40:	61b9      	str	r1, [r7, #24]
 8002d42:	4629      	mov	r1, r5
 8002d44:	eb63 0301 	sbc.w	r3, r3, r1
 8002d48:	61fb      	str	r3, [r7, #28]
 8002d4a:	f04f 0200 	mov.w	r2, #0
 8002d4e:	f04f 0300 	mov.w	r3, #0
 8002d52:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002d56:	4659      	mov	r1, fp
 8002d58:	018b      	lsls	r3, r1, #6
 8002d5a:	4651      	mov	r1, sl
 8002d5c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d60:	4651      	mov	r1, sl
 8002d62:	018a      	lsls	r2, r1, #6
 8002d64:	4651      	mov	r1, sl
 8002d66:	ebb2 0801 	subs.w	r8, r2, r1
 8002d6a:	4659      	mov	r1, fp
 8002d6c:	eb63 0901 	sbc.w	r9, r3, r1
 8002d70:	f04f 0200 	mov.w	r2, #0
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d7c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d80:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d84:	4690      	mov	r8, r2
 8002d86:	4699      	mov	r9, r3
 8002d88:	4623      	mov	r3, r4
 8002d8a:	eb18 0303 	adds.w	r3, r8, r3
 8002d8e:	613b      	str	r3, [r7, #16]
 8002d90:	462b      	mov	r3, r5
 8002d92:	eb49 0303 	adc.w	r3, r9, r3
 8002d96:	617b      	str	r3, [r7, #20]
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	f04f 0300 	mov.w	r3, #0
 8002da0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002da4:	4629      	mov	r1, r5
 8002da6:	024b      	lsls	r3, r1, #9
 8002da8:	4621      	mov	r1, r4
 8002daa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002dae:	4621      	mov	r1, r4
 8002db0:	024a      	lsls	r2, r1, #9
 8002db2:	4610      	mov	r0, r2
 8002db4:	4619      	mov	r1, r3
 8002db6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002dba:	2200      	movs	r2, #0
 8002dbc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002dbe:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002dc0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002dc4:	f7fd fa8c 	bl	80002e0 <__aeabi_uldivmod>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	460b      	mov	r3, r1
 8002dcc:	4613      	mov	r3, r2
 8002dce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002dd2:	e065      	b.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x420>
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	00f42400 	.word	0x00f42400
 8002ddc:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de0:	4b3d      	ldr	r3, [pc, #244]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	099b      	lsrs	r3, r3, #6
 8002de6:	2200      	movs	r2, #0
 8002de8:	4618      	mov	r0, r3
 8002dea:	4611      	mov	r1, r2
 8002dec:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002df0:	653b      	str	r3, [r7, #80]	@ 0x50
 8002df2:	2300      	movs	r3, #0
 8002df4:	657b      	str	r3, [r7, #84]	@ 0x54
 8002df6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002dfa:	4642      	mov	r2, r8
 8002dfc:	464b      	mov	r3, r9
 8002dfe:	f04f 0000 	mov.w	r0, #0
 8002e02:	f04f 0100 	mov.w	r1, #0
 8002e06:	0159      	lsls	r1, r3, #5
 8002e08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e0c:	0150      	lsls	r0, r2, #5
 8002e0e:	4602      	mov	r2, r0
 8002e10:	460b      	mov	r3, r1
 8002e12:	4641      	mov	r1, r8
 8002e14:	1a51      	subs	r1, r2, r1
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	4649      	mov	r1, r9
 8002e1a:	eb63 0301 	sbc.w	r3, r3, r1
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	f04f 0200 	mov.w	r2, #0
 8002e24:	f04f 0300 	mov.w	r3, #0
 8002e28:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002e2c:	4659      	mov	r1, fp
 8002e2e:	018b      	lsls	r3, r1, #6
 8002e30:	4651      	mov	r1, sl
 8002e32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e36:	4651      	mov	r1, sl
 8002e38:	018a      	lsls	r2, r1, #6
 8002e3a:	4651      	mov	r1, sl
 8002e3c:	1a54      	subs	r4, r2, r1
 8002e3e:	4659      	mov	r1, fp
 8002e40:	eb63 0501 	sbc.w	r5, r3, r1
 8002e44:	f04f 0200 	mov.w	r2, #0
 8002e48:	f04f 0300 	mov.w	r3, #0
 8002e4c:	00eb      	lsls	r3, r5, #3
 8002e4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e52:	00e2      	lsls	r2, r4, #3
 8002e54:	4614      	mov	r4, r2
 8002e56:	461d      	mov	r5, r3
 8002e58:	4643      	mov	r3, r8
 8002e5a:	18e3      	adds	r3, r4, r3
 8002e5c:	603b      	str	r3, [r7, #0]
 8002e5e:	464b      	mov	r3, r9
 8002e60:	eb45 0303 	adc.w	r3, r5, r3
 8002e64:	607b      	str	r3, [r7, #4]
 8002e66:	f04f 0200 	mov.w	r2, #0
 8002e6a:	f04f 0300 	mov.w	r3, #0
 8002e6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e72:	4629      	mov	r1, r5
 8002e74:	028b      	lsls	r3, r1, #10
 8002e76:	4621      	mov	r1, r4
 8002e78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e7c:	4621      	mov	r1, r4
 8002e7e:	028a      	lsls	r2, r1, #10
 8002e80:	4610      	mov	r0, r2
 8002e82:	4619      	mov	r1, r3
 8002e84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e88:	2200      	movs	r2, #0
 8002e8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e8c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002e8e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e92:	f7fd fa25 	bl	80002e0 <__aeabi_uldivmod>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	0f1b      	lsrs	r3, r3, #28
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002eae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002eb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ebe:	e003      	b.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ec0:	4b06      	ldr	r3, [pc, #24]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x45c>)
 8002ec2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ec6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ec8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	37b8      	adds	r7, #184	@ 0xb8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40023800 	.word	0x40023800
 8002edc:	00f42400 	.word	0x00f42400

08002ee0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e28d      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 8083 	beq.w	8003006 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002f00:	4b94      	ldr	r3, [pc, #592]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	f003 030c 	and.w	r3, r3, #12
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	d019      	beq.n	8002f40 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f0c:	4b91      	ldr	r3, [pc, #580]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 030c 	and.w	r3, r3, #12
        || \
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d106      	bne.n	8002f26 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f18:	4b8e      	ldr	r3, [pc, #568]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f24:	d00c      	beq.n	8002f40 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f26:	4b8b      	ldr	r3, [pc, #556]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f2e:	2b0c      	cmp	r3, #12
 8002f30:	d112      	bne.n	8002f58 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f32:	4b88      	ldr	r3, [pc, #544]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f3a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f3e:	d10b      	bne.n	8002f58 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f40:	4b84      	ldr	r3, [pc, #528]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d05b      	beq.n	8003004 <HAL_RCC_OscConfig+0x124>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d157      	bne.n	8003004 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e25a      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f60:	d106      	bne.n	8002f70 <HAL_RCC_OscConfig+0x90>
 8002f62:	4b7c      	ldr	r3, [pc, #496]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a7b      	ldr	r2, [pc, #492]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f6c:	6013      	str	r3, [r2, #0]
 8002f6e:	e01d      	b.n	8002fac <HAL_RCC_OscConfig+0xcc>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f78:	d10c      	bne.n	8002f94 <HAL_RCC_OscConfig+0xb4>
 8002f7a:	4b76      	ldr	r3, [pc, #472]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a75      	ldr	r2, [pc, #468]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f84:	6013      	str	r3, [r2, #0]
 8002f86:	4b73      	ldr	r3, [pc, #460]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a72      	ldr	r2, [pc, #456]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f90:	6013      	str	r3, [r2, #0]
 8002f92:	e00b      	b.n	8002fac <HAL_RCC_OscConfig+0xcc>
 8002f94:	4b6f      	ldr	r3, [pc, #444]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a6e      	ldr	r2, [pc, #440]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002f9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f9e:	6013      	str	r3, [r2, #0]
 8002fa0:	4b6c      	ldr	r3, [pc, #432]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a6b      	ldr	r2, [pc, #428]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002fa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002faa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d013      	beq.n	8002fdc <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb4:	f7fe fd9c 	bl	8001af0 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fbc:	f7fe fd98 	bl	8001af0 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b64      	cmp	r3, #100	@ 0x64
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e21f      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fce:	4b61      	ldr	r3, [pc, #388]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d0f0      	beq.n	8002fbc <HAL_RCC_OscConfig+0xdc>
 8002fda:	e014      	b.n	8003006 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fe fd88 	bl	8001af0 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fe4:	f7fe fd84 	bl	8001af0 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	@ 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e20b      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff6:	4b57      	ldr	r3, [pc, #348]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x104>
 8003002:	e000      	b.n	8003006 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003004:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d06f      	beq.n	80030f2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003012:	4b50      	ldr	r3, [pc, #320]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f003 030c 	and.w	r3, r3, #12
 800301a:	2b00      	cmp	r3, #0
 800301c:	d017      	beq.n	800304e <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800301e:	4b4d      	ldr	r3, [pc, #308]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 030c 	and.w	r3, r3, #12
        || \
 8003026:	2b08      	cmp	r3, #8
 8003028:	d105      	bne.n	8003036 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800302a:	4b4a      	ldr	r3, [pc, #296]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00b      	beq.n	800304e <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003036:	4b47      	ldr	r3, [pc, #284]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800303e:	2b0c      	cmp	r3, #12
 8003040:	d11c      	bne.n	800307c <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003042:	4b44      	ldr	r3, [pc, #272]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d116      	bne.n	800307c <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304e:	4b41      	ldr	r3, [pc, #260]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d005      	beq.n	8003066 <HAL_RCC_OscConfig+0x186>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d001      	beq.n	8003066 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e1d3      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003066:	4b3b      	ldr	r3, [pc, #236]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	691b      	ldr	r3, [r3, #16]
 8003072:	00db      	lsls	r3, r3, #3
 8003074:	4937      	ldr	r1, [pc, #220]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8003076:	4313      	orrs	r3, r2
 8003078:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800307a:	e03a      	b.n	80030f2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d020      	beq.n	80030c6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003084:	4b34      	ldr	r3, [pc, #208]	@ (8003158 <HAL_RCC_OscConfig+0x278>)
 8003086:	2201      	movs	r2, #1
 8003088:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308a:	f7fe fd31 	bl	8001af0 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003092:	f7fe fd2d 	bl	8001af0 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e1b4      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a4:	4b2b      	ldr	r3, [pc, #172]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0f0      	beq.n	8003092 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b0:	4b28      	ldr	r3, [pc, #160]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	00db      	lsls	r3, r3, #3
 80030be:	4925      	ldr	r1, [pc, #148]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	600b      	str	r3, [r1, #0]
 80030c4:	e015      	b.n	80030f2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030c6:	4b24      	ldr	r3, [pc, #144]	@ (8003158 <HAL_RCC_OscConfig+0x278>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030cc:	f7fe fd10 	bl	8001af0 <HAL_GetTick>
 80030d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d2:	e008      	b.n	80030e6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d4:	f7fe fd0c 	bl	8001af0 <HAL_GetTick>
 80030d8:	4602      	mov	r2, r0
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e193      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f0      	bne.n	80030d4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d036      	beq.n	800316c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	695b      	ldr	r3, [r3, #20]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d016      	beq.n	8003134 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003106:	4b15      	ldr	r3, [pc, #84]	@ (800315c <HAL_RCC_OscConfig+0x27c>)
 8003108:	2201      	movs	r2, #1
 800310a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310c:	f7fe fcf0 	bl	8001af0 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003114:	f7fe fcec 	bl	8001af0 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e173      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003126:	4b0b      	ldr	r3, [pc, #44]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 8003128:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCC_OscConfig+0x234>
 8003132:	e01b      	b.n	800316c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003134:	4b09      	ldr	r3, [pc, #36]	@ (800315c <HAL_RCC_OscConfig+0x27c>)
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800313a:	f7fe fcd9 	bl	8001af0 <HAL_GetTick>
 800313e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003140:	e00e      	b.n	8003160 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003142:	f7fe fcd5 	bl	8001af0 <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	2b02      	cmp	r3, #2
 800314e:	d907      	bls.n	8003160 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e15c      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
 8003154:	40023800 	.word	0x40023800
 8003158:	42470000 	.word	0x42470000
 800315c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003160:	4b8a      	ldr	r3, [pc, #552]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003162:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d1ea      	bne.n	8003142 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0304 	and.w	r3, r3, #4
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 8097 	beq.w	80032a8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800317a:	2300      	movs	r3, #0
 800317c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800317e:	4b83      	ldr	r3, [pc, #524]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003182:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10f      	bne.n	80031aa <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800318a:	2300      	movs	r3, #0
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	4b7f      	ldr	r3, [pc, #508]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003192:	4a7e      	ldr	r2, [pc, #504]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003198:	6413      	str	r3, [r2, #64]	@ 0x40
 800319a:	4b7c      	ldr	r3, [pc, #496]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 800319c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031a2:	60bb      	str	r3, [r7, #8]
 80031a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a6:	2301      	movs	r3, #1
 80031a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031aa:	4b79      	ldr	r3, [pc, #484]	@ (8003390 <HAL_RCC_OscConfig+0x4b0>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d118      	bne.n	80031e8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031b6:	4b76      	ldr	r3, [pc, #472]	@ (8003390 <HAL_RCC_OscConfig+0x4b0>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a75      	ldr	r2, [pc, #468]	@ (8003390 <HAL_RCC_OscConfig+0x4b0>)
 80031bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c2:	f7fe fc95 	bl	8001af0 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ca:	f7fe fc91 	bl	8001af0 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e118      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031dc:	4b6c      	ldr	r3, [pc, #432]	@ (8003390 <HAL_RCC_OscConfig+0x4b0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0f0      	beq.n	80031ca <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d106      	bne.n	80031fe <HAL_RCC_OscConfig+0x31e>
 80031f0:	4b66      	ldr	r3, [pc, #408]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 80031f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f4:	4a65      	ldr	r2, [pc, #404]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80031fc:	e01c      	b.n	8003238 <HAL_RCC_OscConfig+0x358>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	2b05      	cmp	r3, #5
 8003204:	d10c      	bne.n	8003220 <HAL_RCC_OscConfig+0x340>
 8003206:	4b61      	ldr	r3, [pc, #388]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003208:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800320a:	4a60      	ldr	r2, [pc, #384]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 800320c:	f043 0304 	orr.w	r3, r3, #4
 8003210:	6713      	str	r3, [r2, #112]	@ 0x70
 8003212:	4b5e      	ldr	r3, [pc, #376]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003214:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003216:	4a5d      	ldr	r2, [pc, #372]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003218:	f043 0301 	orr.w	r3, r3, #1
 800321c:	6713      	str	r3, [r2, #112]	@ 0x70
 800321e:	e00b      	b.n	8003238 <HAL_RCC_OscConfig+0x358>
 8003220:	4b5a      	ldr	r3, [pc, #360]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003222:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003224:	4a59      	ldr	r2, [pc, #356]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003226:	f023 0301 	bic.w	r3, r3, #1
 800322a:	6713      	str	r3, [r2, #112]	@ 0x70
 800322c:	4b57      	ldr	r3, [pc, #348]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 800322e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003230:	4a56      	ldr	r2, [pc, #344]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003232:	f023 0304 	bic.w	r3, r3, #4
 8003236:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d015      	beq.n	800326c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003240:	f7fe fc56 	bl	8001af0 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003246:	e00a      	b.n	800325e <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003248:	f7fe fc52 	bl	8001af0 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003256:	4293      	cmp	r3, r2
 8003258:	d901      	bls.n	800325e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800325a:	2303      	movs	r3, #3
 800325c:	e0d7      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325e:	4b4b      	ldr	r3, [pc, #300]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003262:	f003 0302 	and.w	r3, r3, #2
 8003266:	2b00      	cmp	r3, #0
 8003268:	d0ee      	beq.n	8003248 <HAL_RCC_OscConfig+0x368>
 800326a:	e014      	b.n	8003296 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326c:	f7fe fc40 	bl	8001af0 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003272:	e00a      	b.n	800328a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003274:	f7fe fc3c 	bl	8001af0 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003282:	4293      	cmp	r3, r2
 8003284:	d901      	bls.n	800328a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e0c1      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800328a:	4b40      	ldr	r3, [pc, #256]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 800328c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800328e:	f003 0302 	and.w	r3, r3, #2
 8003292:	2b00      	cmp	r3, #0
 8003294:	d1ee      	bne.n	8003274 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003296:	7dfb      	ldrb	r3, [r7, #23]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d105      	bne.n	80032a8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800329c:	4b3b      	ldr	r3, [pc, #236]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 800329e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a0:	4a3a      	ldr	r2, [pc, #232]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 80032a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032a6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	699b      	ldr	r3, [r3, #24]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 80ad 	beq.w	800340c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032b2:	4b36      	ldr	r3, [pc, #216]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	f003 030c 	and.w	r3, r3, #12
 80032ba:	2b08      	cmp	r3, #8
 80032bc:	d060      	beq.n	8003380 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	699b      	ldr	r3, [r3, #24]
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d145      	bne.n	8003352 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032c6:	4b33      	ldr	r3, [pc, #204]	@ (8003394 <HAL_RCC_OscConfig+0x4b4>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032cc:	f7fe fc10 	bl	8001af0 <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d2:	e008      	b.n	80032e6 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d4:	f7fe fc0c 	bl	8001af0 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d901      	bls.n	80032e6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e093      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e6:	4b29      	ldr	r3, [pc, #164]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f0      	bne.n	80032d4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69da      	ldr	r2, [r3, #28]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003300:	019b      	lsls	r3, r3, #6
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003308:	085b      	lsrs	r3, r3, #1
 800330a:	3b01      	subs	r3, #1
 800330c:	041b      	lsls	r3, r3, #16
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003314:	061b      	lsls	r3, r3, #24
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331c:	071b      	lsls	r3, r3, #28
 800331e:	491b      	ldr	r1, [pc, #108]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003320:	4313      	orrs	r3, r2
 8003322:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003324:	4b1b      	ldr	r3, [pc, #108]	@ (8003394 <HAL_RCC_OscConfig+0x4b4>)
 8003326:	2201      	movs	r2, #1
 8003328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332a:	f7fe fbe1 	bl	8001af0 <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003332:	f7fe fbdd 	bl	8001af0 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e064      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003344:	4b11      	ldr	r3, [pc, #68]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0f0      	beq.n	8003332 <HAL_RCC_OscConfig+0x452>
 8003350:	e05c      	b.n	800340c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003352:	4b10      	ldr	r3, [pc, #64]	@ (8003394 <HAL_RCC_OscConfig+0x4b4>)
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003358:	f7fe fbca 	bl	8001af0 <HAL_GetTick>
 800335c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335e:	e008      	b.n	8003372 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003360:	f7fe fbc6 	bl	8001af0 <HAL_GetTick>
 8003364:	4602      	mov	r2, r0
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	2b02      	cmp	r3, #2
 800336c:	d901      	bls.n	8003372 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e04d      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003372:	4b06      	ldr	r3, [pc, #24]	@ (800338c <HAL_RCC_OscConfig+0x4ac>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d1f0      	bne.n	8003360 <HAL_RCC_OscConfig+0x480>
 800337e:	e045      	b.n	800340c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d107      	bne.n	8003398 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e040      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
 800338c:	40023800 	.word	0x40023800
 8003390:	40007000 	.word	0x40007000
 8003394:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003398:	4b1f      	ldr	r3, [pc, #124]	@ (8003418 <HAL_RCC_OscConfig+0x538>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d030      	beq.n	8003408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d129      	bne.n	8003408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033be:	429a      	cmp	r2, r3
 80033c0:	d122      	bne.n	8003408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033c8:	4013      	ands	r3, r2
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d119      	bne.n	8003408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033de:	085b      	lsrs	r3, r3, #1
 80033e0:	3b01      	subs	r3, #1
 80033e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d10f      	bne.n	8003408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d107      	bne.n	8003408 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003402:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003404:	429a      	cmp	r2, r3
 8003406:	d001      	beq.n	800340c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e000      	b.n	800340e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40023800 	.word	0x40023800

0800341c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d101      	bne.n	800342e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e073      	b.n	8003516 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	7f5b      	ldrb	r3, [r3, #29]
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	d105      	bne.n	8003444 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7fd fda8 	bl	8000f94 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2202      	movs	r2, #2
 8003448:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f003 0310 	and.w	r3, r3, #16
 8003454:	2b10      	cmp	r3, #16
 8003456:	d055      	beq.n	8003504 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	22ca      	movs	r2, #202	@ 0xca
 800345e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2253      	movs	r2, #83	@ 0x53
 8003466:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 fa49 	bl	8003900 <RTC_EnterInitMode>
 800346e:	4603      	mov	r3, r0
 8003470:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003472:	7bfb      	ldrb	r3, [r7, #15]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d12c      	bne.n	80034d2 <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	6812      	ldr	r2, [r2, #0]
 8003482:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003486:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800348a:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6899      	ldr	r1, [r3, #8]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685a      	ldr	r2, [r3, #4]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	431a      	orrs	r2, r3
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	695b      	ldr	r3, [r3, #20]
 80034a0:	431a      	orrs	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	68d2      	ldr	r2, [r2, #12]
 80034b2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6919      	ldr	r1, [r3, #16]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	041a      	lsls	r2, r3, #16
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 fa50 	bl	800396e <RTC_ExitInitMode>
 80034ce:	4603      	mov	r3, r0
 80034d0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d110      	bne.n	80034fa <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80034e6:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699a      	ldr	r2, [r3, #24]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	22ff      	movs	r2, #255	@ 0xff
 8003500:	625a      	str	r2, [r3, #36]	@ 0x24
 8003502:	e001      	b.n	8003508 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8003504:	2300      	movs	r3, #0
 8003506:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003508:	7bfb      	ldrb	r3, [r7, #15]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d102      	bne.n	8003514 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8003514:	7bfb      	ldrb	r3, [r7, #15]
}
 8003516:	4618      	mov	r0, r3
 8003518:	3710      	adds	r7, #16
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800351e:	b590      	push	{r4, r7, lr}
 8003520:	b087      	sub	sp, #28
 8003522:	af00      	add	r7, sp, #0
 8003524:	60f8      	str	r0, [r7, #12]
 8003526:	60b9      	str	r1, [r7, #8]
 8003528:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800352a:	2300      	movs	r3, #0
 800352c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	7f1b      	ldrb	r3, [r3, #28]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <HAL_RTC_SetTime+0x1c>
 8003536:	2302      	movs	r3, #2
 8003538:	e087      	b.n	800364a <HAL_RTC_SetTime+0x12c>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2201      	movs	r2, #1
 800353e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2202      	movs	r2, #2
 8003544:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d126      	bne.n	800359a <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d102      	bne.n	8003560 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2200      	movs	r2, #0
 800355e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f000 fa27 	bl	80039b8 <RTC_ByteToBcd2>
 800356a:	4603      	mov	r3, r0
 800356c:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	785b      	ldrb	r3, [r3, #1]
 8003572:	4618      	mov	r0, r3
 8003574:	f000 fa20 	bl	80039b8 <RTC_ByteToBcd2>
 8003578:	4603      	mov	r3, r0
 800357a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800357c:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	789b      	ldrb	r3, [r3, #2]
 8003582:	4618      	mov	r0, r3
 8003584:	f000 fa18 	bl	80039b8 <RTC_ByteToBcd2>
 8003588:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800358a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	78db      	ldrb	r3, [r3, #3]
 8003592:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8003594:	4313      	orrs	r3, r2
 8003596:	617b      	str	r3, [r7, #20]
 8003598:	e018      	b.n	80035cc <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d102      	bne.n	80035ae <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	2200      	movs	r2, #0
 80035ac:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	785b      	ldrb	r3, [r3, #1]
 80035b8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80035ba:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80035bc:	68ba      	ldr	r2, [r7, #8]
 80035be:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80035c0:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	78db      	ldrb	r3, [r3, #3]
 80035c6:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	22ca      	movs	r2, #202	@ 0xca
 80035d2:	625a      	str	r2, [r3, #36]	@ 0x24
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2253      	movs	r2, #83	@ 0x53
 80035da:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80035dc:	68f8      	ldr	r0, [r7, #12]
 80035de:	f000 f98f 	bl	8003900 <RTC_EnterInitMode>
 80035e2:	4603      	mov	r3, r0
 80035e4:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80035e6:	7cfb      	ldrb	r3, [r7, #19]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d120      	bne.n	800362e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80035f6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80035fa:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800360a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6899      	ldr	r1, [r3, #8]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	431a      	orrs	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	430a      	orrs	r2, r1
 8003622:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 f9a2 	bl	800396e <RTC_ExitInitMode>
 800362a:	4603      	mov	r3, r0
 800362c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800362e:	7cfb      	ldrb	r3, [r7, #19]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d102      	bne.n	800363a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2201      	movs	r2, #1
 8003638:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	22ff      	movs	r2, #255	@ 0xff
 8003640:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	771a      	strb	r2, [r3, #28]

  return status;
 8003648:	7cfb      	ldrb	r3, [r7, #19]
}
 800364a:	4618      	mov	r0, r3
 800364c:	371c      	adds	r7, #28
 800364e:	46bd      	mov	sp, r7
 8003650:	bd90      	pop	{r4, r7, pc}

08003652 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003652:	b580      	push	{r7, lr}
 8003654:	b086      	sub	sp, #24
 8003656:	af00      	add	r7, sp, #0
 8003658:	60f8      	str	r0, [r7, #12]
 800365a:	60b9      	str	r1, [r7, #8]
 800365c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800365e:	2300      	movs	r3, #0
 8003660:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003684:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003688:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	0c1b      	lsrs	r3, r3, #16
 800368e:	b2db      	uxtb	r3, r3
 8003690:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003694:	b2da      	uxtb	r2, r3
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	0a1b      	lsrs	r3, r3, #8
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80036a4:	b2da      	uxtb	r2, r3
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	0d9b      	lsrs	r3, r3, #22
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d11a      	bne.n	8003704 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f000 f98e 	bl	80039f4 <RTC_Bcd2ToByte>
 80036d8:	4603      	mov	r3, r0
 80036da:	461a      	mov	r2, r3
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	785b      	ldrb	r3, [r3, #1]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 f985 	bl	80039f4 <RTC_Bcd2ToByte>
 80036ea:	4603      	mov	r3, r0
 80036ec:	461a      	mov	r2, r3
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	789b      	ldrb	r3, [r3, #2]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 f97c 	bl	80039f4 <RTC_Bcd2ToByte>
 80036fc:	4603      	mov	r3, r0
 80036fe:	461a      	mov	r2, r3
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}

0800370e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800370e:	b590      	push	{r4, r7, lr}
 8003710:	b087      	sub	sp, #28
 8003712:	af00      	add	r7, sp, #0
 8003714:	60f8      	str	r0, [r7, #12]
 8003716:	60b9      	str	r1, [r7, #8]
 8003718:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	7f1b      	ldrb	r3, [r3, #28]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <HAL_RTC_SetDate+0x1c>
 8003726:	2302      	movs	r3, #2
 8003728:	e071      	b.n	800380e <HAL_RTC_SetDate+0x100>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2201      	movs	r2, #1
 800372e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2202      	movs	r2, #2
 8003734:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d10e      	bne.n	800375a <HAL_RTC_SetDate+0x4c>
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	785b      	ldrb	r3, [r3, #1]
 8003740:	f003 0310 	and.w	r3, r3, #16
 8003744:	2b00      	cmp	r3, #0
 8003746:	d008      	beq.n	800375a <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	785b      	ldrb	r3, [r3, #1]
 800374c:	f023 0310 	bic.w	r3, r3, #16
 8003750:	b2db      	uxtb	r3, r3
 8003752:	330a      	adds	r3, #10
 8003754:	b2da      	uxtb	r2, r3
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d11c      	bne.n	800379a <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	78db      	ldrb	r3, [r3, #3]
 8003764:	4618      	mov	r0, r3
 8003766:	f000 f927 	bl	80039b8 <RTC_ByteToBcd2>
 800376a:	4603      	mov	r3, r0
 800376c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	785b      	ldrb	r3, [r3, #1]
 8003772:	4618      	mov	r0, r3
 8003774:	f000 f920 	bl	80039b8 <RTC_ByteToBcd2>
 8003778:	4603      	mov	r3, r0
 800377a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800377c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	789b      	ldrb	r3, [r3, #2]
 8003782:	4618      	mov	r0, r3
 8003784:	f000 f918 	bl	80039b8 <RTC_ByteToBcd2>
 8003788:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800378a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8003794:	4313      	orrs	r3, r2
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	e00e      	b.n	80037b8 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	78db      	ldrb	r3, [r3, #3]
 800379e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	785b      	ldrb	r3, [r3, #1]
 80037a4:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80037a6:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80037ac:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80037b4:	4313      	orrs	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	22ca      	movs	r2, #202	@ 0xca
 80037be:	625a      	str	r2, [r3, #36]	@ 0x24
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2253      	movs	r2, #83	@ 0x53
 80037c6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 f899 	bl	8003900 <RTC_EnterInitMode>
 80037ce:	4603      	mov	r3, r0
 80037d0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80037d2:	7cfb      	ldrb	r3, [r7, #19]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10c      	bne.n	80037f2 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80037e2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80037e6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 f8c0 	bl	800396e <RTC_ExitInitMode>
 80037ee:	4603      	mov	r3, r0
 80037f0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80037f2:	7cfb      	ldrb	r3, [r7, #19]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d102      	bne.n	80037fe <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2201      	movs	r2, #1
 80037fc:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	22ff      	movs	r2, #255	@ 0xff
 8003804:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	771a      	strb	r2, [r3, #28]

  return status;
 800380c:	7cfb      	ldrb	r3, [r7, #19]
}
 800380e:	4618      	mov	r0, r3
 8003810:	371c      	adds	r7, #28
 8003812:	46bd      	mov	sp, r7
 8003814:	bd90      	pop	{r4, r7, pc}

08003816 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b086      	sub	sp, #24
 800381a:	af00      	add	r7, sp, #0
 800381c:	60f8      	str	r0, [r7, #12]
 800381e:	60b9      	str	r1, [r7, #8]
 8003820:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003822:	2300      	movs	r3, #0
 8003824:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003830:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003834:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	0c1b      	lsrs	r3, r3, #16
 800383a:	b2da      	uxtb	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	0a1b      	lsrs	r3, r3, #8
 8003844:	b2db      	uxtb	r3, r3
 8003846:	f003 031f 	and.w	r3, r3, #31
 800384a:	b2da      	uxtb	r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	b2db      	uxtb	r3, r3
 8003854:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003858:	b2da      	uxtb	r2, r3
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	0b5b      	lsrs	r3, r3, #13
 8003862:	b2db      	uxtb	r3, r3
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	b2da      	uxtb	r2, r3
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d11a      	bne.n	80038aa <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	78db      	ldrb	r3, [r3, #3]
 8003878:	4618      	mov	r0, r3
 800387a:	f000 f8bb 	bl	80039f4 <RTC_Bcd2ToByte>
 800387e:	4603      	mov	r3, r0
 8003880:	461a      	mov	r2, r3
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	785b      	ldrb	r3, [r3, #1]
 800388a:	4618      	mov	r0, r3
 800388c:	f000 f8b2 	bl	80039f4 <RTC_Bcd2ToByte>
 8003890:	4603      	mov	r3, r0
 8003892:	461a      	mov	r2, r3
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	789b      	ldrb	r3, [r3, #2]
 800389c:	4618      	mov	r0, r3
 800389e:	f000 f8a9 	bl	80039f4 <RTC_Bcd2ToByte>
 80038a2:	4603      	mov	r3, r0
 80038a4:	461a      	mov	r2, r3
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80038aa:	2300      	movs	r3, #0
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038bc:	2300      	movs	r3, #0
 80038be:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a0d      	ldr	r2, [pc, #52]	@ (80038fc <HAL_RTC_WaitForSynchro+0x48>)
 80038c6:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80038c8:	f7fe f912 	bl	8001af0 <HAL_GetTick>
 80038cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80038ce:	e009      	b.n	80038e4 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80038d0:	f7fe f90e 	bl	8001af0 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80038de:	d901      	bls.n	80038e4 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80038e0:	2303      	movs	r3, #3
 80038e2:	e007      	b.n	80038f4 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f003 0320 	and.w	r3, r3, #32
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0ee      	beq.n	80038d0 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	00017f5f 	.word	0x00017f5f

08003900 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d122      	bne.n	8003964 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800392c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800392e:	f7fe f8df 	bl	8001af0 <HAL_GetTick>
 8003932:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003934:	e00c      	b.n	8003950 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003936:	f7fe f8db 	bl	8001af0 <HAL_GetTick>
 800393a:	4602      	mov	r2, r0
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003944:	d904      	bls.n	8003950 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2204      	movs	r2, #4
 800394a:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800395a:	2b00      	cmp	r3, #0
 800395c:	d102      	bne.n	8003964 <RTC_EnterInitMode+0x64>
 800395e:	7bfb      	ldrb	r3, [r7, #15]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d1e8      	bne.n	8003936 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003964:	7bfb      	ldrb	r3, [r7, #15]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b084      	sub	sp, #16
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003988:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f003 0320 	and.w	r3, r3, #32
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7ff ff8b 	bl	80038b4 <HAL_RTC_WaitForSynchro>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d004      	beq.n	80039ae <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2204      	movs	r2, #4
 80039a8:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3710      	adds	r7, #16
 80039b4:	46bd      	mov	sp, r7
 80039b6:	bd80      	pop	{r7, pc}

080039b8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	4603      	mov	r3, r0
 80039c0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80039c6:	e005      	b.n	80039d4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	3301      	adds	r3, #1
 80039cc:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80039ce:	79fb      	ldrb	r3, [r7, #7]
 80039d0:	3b0a      	subs	r3, #10
 80039d2:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80039d4:	79fb      	ldrb	r3, [r7, #7]
 80039d6:	2b09      	cmp	r3, #9
 80039d8:	d8f6      	bhi.n	80039c8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	011b      	lsls	r3, r3, #4
 80039e0:	b2da      	uxtb	r2, r3
 80039e2:	79fb      	ldrb	r3, [r7, #7]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	b2db      	uxtb	r3, r3
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3714      	adds	r7, #20
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	4603      	mov	r3, r0
 80039fc:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003a02:	79fb      	ldrb	r3, [r7, #7]
 8003a04:	091b      	lsrs	r3, r3, #4
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	461a      	mov	r2, r3
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	4413      	add	r3, r2
 8003a10:	005b      	lsls	r3, r3, #1
 8003a12:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	b2da      	uxtb	r2, r3
 8003a18:	79fb      	ldrb	r3, [r7, #7]
 8003a1a:	f003 030f 	and.w	r3, r3, #15
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	4413      	add	r3, r2
 8003a22:	b2db      	uxtb	r3, r3
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e041      	b.n	8003ac6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f000 f839 	bl	8003ace <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4610      	mov	r0, r2
 8003a70:	f000 f9c0 	bl	8003df4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3708      	adds	r7, #8
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b083      	sub	sp, #12
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ad6:	bf00      	nop
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
	...

08003ae4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d001      	beq.n	8003afc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e04e      	b.n	8003b9a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2202      	movs	r2, #2
 8003b00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68da      	ldr	r2, [r3, #12]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f042 0201 	orr.w	r2, r2, #1
 8003b12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a23      	ldr	r2, [pc, #140]	@ (8003ba8 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d022      	beq.n	8003b64 <HAL_TIM_Base_Start_IT+0x80>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b26:	d01d      	beq.n	8003b64 <HAL_TIM_Base_Start_IT+0x80>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1f      	ldr	r2, [pc, #124]	@ (8003bac <HAL_TIM_Base_Start_IT+0xc8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d018      	beq.n	8003b64 <HAL_TIM_Base_Start_IT+0x80>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1e      	ldr	r2, [pc, #120]	@ (8003bb0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d013      	beq.n	8003b64 <HAL_TIM_Base_Start_IT+0x80>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a1c      	ldr	r2, [pc, #112]	@ (8003bb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d00e      	beq.n	8003b64 <HAL_TIM_Base_Start_IT+0x80>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a1b      	ldr	r2, [pc, #108]	@ (8003bb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d009      	beq.n	8003b64 <HAL_TIM_Base_Start_IT+0x80>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a19      	ldr	r2, [pc, #100]	@ (8003bbc <HAL_TIM_Base_Start_IT+0xd8>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d004      	beq.n	8003b64 <HAL_TIM_Base_Start_IT+0x80>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a18      	ldr	r2, [pc, #96]	@ (8003bc0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d111      	bne.n	8003b88 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 0307 	and.w	r3, r3, #7
 8003b6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2b06      	cmp	r3, #6
 8003b74:	d010      	beq.n	8003b98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f042 0201 	orr.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b86:	e007      	b.n	8003b98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f042 0201 	orr.w	r2, r2, #1
 8003b96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr
 8003ba6:	bf00      	nop
 8003ba8:	40010000 	.word	0x40010000
 8003bac:	40000400 	.word	0x40000400
 8003bb0:	40000800 	.word	0x40000800
 8003bb4:	40000c00 	.word	0x40000c00
 8003bb8:	40010400 	.word	0x40010400
 8003bbc:	40014000 	.word	0x40014000
 8003bc0:	40001800 	.word	0x40001800

08003bc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d020      	beq.n	8003c28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d01b      	beq.n	8003c28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f06f 0202 	mvn.w	r2, #2
 8003bf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f8d2 	bl	8003db8 <HAL_TIM_IC_CaptureCallback>
 8003c14:	e005      	b.n	8003c22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f8c4 	bl	8003da4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f8d5 	bl	8003dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	f003 0304 	and.w	r3, r3, #4
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d020      	beq.n	8003c74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d01b      	beq.n	8003c74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f06f 0204 	mvn.w	r2, #4
 8003c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2202      	movs	r2, #2
 8003c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d003      	beq.n	8003c62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f8ac 	bl	8003db8 <HAL_TIM_IC_CaptureCallback>
 8003c60:	e005      	b.n	8003c6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f89e 	bl	8003da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f8af 	bl	8003dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d020      	beq.n	8003cc0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d01b      	beq.n	8003cc0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f06f 0208 	mvn.w	r2, #8
 8003c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2204      	movs	r2, #4
 8003c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 f886 	bl	8003db8 <HAL_TIM_IC_CaptureCallback>
 8003cac:	e005      	b.n	8003cba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f878 	bl	8003da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f889 	bl	8003dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f003 0310 	and.w	r3, r3, #16
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d020      	beq.n	8003d0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f003 0310 	and.w	r3, r3, #16
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d01b      	beq.n	8003d0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f06f 0210 	mvn.w	r2, #16
 8003cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2208      	movs	r2, #8
 8003ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	69db      	ldr	r3, [r3, #28]
 8003cea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f860 	bl	8003db8 <HAL_TIM_IC_CaptureCallback>
 8003cf8:	e005      	b.n	8003d06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f852 	bl	8003da4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f863 	bl	8003dcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	f003 0301 	and.w	r3, r3, #1
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00c      	beq.n	8003d30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	f003 0301 	and.w	r3, r3, #1
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d007      	beq.n	8003d30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f06f 0201 	mvn.w	r2, #1
 8003d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7fd f82c 	bl	8000d88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00c      	beq.n	8003d54 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d007      	beq.n	8003d54 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 f900 	bl	8003f54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00c      	beq.n	8003d78 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d007      	beq.n	8003d78 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f834 	bl	8003de0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	f003 0320 	and.w	r3, r3, #32
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00c      	beq.n	8003d9c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d007      	beq.n	8003d9c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f06f 0220 	mvn.w	r2, #32
 8003d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f000 f8d2 	bl	8003f40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d9c:	bf00      	nop
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr

08003db8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003dc0:	bf00      	nop
 8003dc2:	370c      	adds	r7, #12
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr

08003dcc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b085      	sub	sp, #20
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a43      	ldr	r2, [pc, #268]	@ (8003f14 <TIM_Base_SetConfig+0x120>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d013      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e12:	d00f      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	4a40      	ldr	r2, [pc, #256]	@ (8003f18 <TIM_Base_SetConfig+0x124>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d00b      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a3f      	ldr	r2, [pc, #252]	@ (8003f1c <TIM_Base_SetConfig+0x128>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d007      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a3e      	ldr	r2, [pc, #248]	@ (8003f20 <TIM_Base_SetConfig+0x12c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d003      	beq.n	8003e34 <TIM_Base_SetConfig+0x40>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a3d      	ldr	r2, [pc, #244]	@ (8003f24 <TIM_Base_SetConfig+0x130>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d108      	bne.n	8003e46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a32      	ldr	r2, [pc, #200]	@ (8003f14 <TIM_Base_SetConfig+0x120>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d02b      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e54:	d027      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a2f      	ldr	r2, [pc, #188]	@ (8003f18 <TIM_Base_SetConfig+0x124>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d023      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a2e      	ldr	r2, [pc, #184]	@ (8003f1c <TIM_Base_SetConfig+0x128>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d01f      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a2d      	ldr	r2, [pc, #180]	@ (8003f20 <TIM_Base_SetConfig+0x12c>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d01b      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a2c      	ldr	r2, [pc, #176]	@ (8003f24 <TIM_Base_SetConfig+0x130>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d017      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a2b      	ldr	r2, [pc, #172]	@ (8003f28 <TIM_Base_SetConfig+0x134>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d013      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a2a      	ldr	r2, [pc, #168]	@ (8003f2c <TIM_Base_SetConfig+0x138>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00f      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a29      	ldr	r2, [pc, #164]	@ (8003f30 <TIM_Base_SetConfig+0x13c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d00b      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a28      	ldr	r2, [pc, #160]	@ (8003f34 <TIM_Base_SetConfig+0x140>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d007      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a27      	ldr	r2, [pc, #156]	@ (8003f38 <TIM_Base_SetConfig+0x144>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d003      	beq.n	8003ea6 <TIM_Base_SetConfig+0xb2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a26      	ldr	r2, [pc, #152]	@ (8003f3c <TIM_Base_SetConfig+0x148>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d108      	bne.n	8003eb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	689a      	ldr	r2, [r3, #8]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a0e      	ldr	r2, [pc, #56]	@ (8003f14 <TIM_Base_SetConfig+0x120>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d003      	beq.n	8003ee6 <TIM_Base_SetConfig+0xf2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a10      	ldr	r2, [pc, #64]	@ (8003f24 <TIM_Base_SetConfig+0x130>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d103      	bne.n	8003eee <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	691a      	ldr	r2, [r3, #16]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f043 0204 	orr.w	r2, r3, #4
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	601a      	str	r2, [r3, #0]
}
 8003f06:	bf00      	nop
 8003f08:	3714      	adds	r7, #20
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	40010000 	.word	0x40010000
 8003f18:	40000400 	.word	0x40000400
 8003f1c:	40000800 	.word	0x40000800
 8003f20:	40000c00 	.word	0x40000c00
 8003f24:	40010400 	.word	0x40010400
 8003f28:	40014000 	.word	0x40014000
 8003f2c:	40014400 	.word	0x40014400
 8003f30:	40014800 	.word	0x40014800
 8003f34:	40001800 	.word	0x40001800
 8003f38:	40001c00 	.word	0x40001c00
 8003f3c:	40002000 	.word	0x40002000

08003f40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b083      	sub	sp, #12
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d101      	bne.n	8003f7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e042      	b.n	8004000 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d106      	bne.n	8003f94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f7fd f82a 	bl	8000fe8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2224      	movs	r2, #36	@ 0x24
 8003f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68da      	ldr	r2, [r3, #12]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003faa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 fdd3 	bl	8004b58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	691a      	ldr	r2, [r3, #16]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003fc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	695a      	ldr	r2, [r3, #20]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003fd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003fe0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2220      	movs	r2, #32
 8003ff4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003ffe:	2300      	movs	r3, #0
}
 8004000:	4618      	mov	r0, r3
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08a      	sub	sp, #40	@ 0x28
 800400c:	af02      	add	r7, sp, #8
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	603b      	str	r3, [r7, #0]
 8004014:	4613      	mov	r3, r2
 8004016:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004018:	2300      	movs	r3, #0
 800401a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b20      	cmp	r3, #32
 8004026:	d175      	bne.n	8004114 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <HAL_UART_Transmit+0x2c>
 800402e:	88fb      	ldrh	r3, [r7, #6]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d101      	bne.n	8004038 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e06e      	b.n	8004116 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	2221      	movs	r2, #33	@ 0x21
 8004042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004046:	f7fd fd53 	bl	8001af0 <HAL_GetTick>
 800404a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	88fa      	ldrh	r2, [r7, #6]
 8004050:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	88fa      	ldrh	r2, [r7, #6]
 8004056:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004060:	d108      	bne.n	8004074 <HAL_UART_Transmit+0x6c>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	691b      	ldr	r3, [r3, #16]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d104      	bne.n	8004074 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800406a:	2300      	movs	r3, #0
 800406c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800406e:	68bb      	ldr	r3, [r7, #8]
 8004070:	61bb      	str	r3, [r7, #24]
 8004072:	e003      	b.n	800407c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004078:	2300      	movs	r3, #0
 800407a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800407c:	e02e      	b.n	80040dc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	9300      	str	r3, [sp, #0]
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	2200      	movs	r2, #0
 8004086:	2180      	movs	r1, #128	@ 0x80
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 fb37 	bl	80046fc <UART_WaitOnFlagUntilTimeout>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d005      	beq.n	80040a0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800409c:	2303      	movs	r3, #3
 800409e:	e03a      	b.n	8004116 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10b      	bne.n	80040be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	461a      	mov	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80040b6:	69bb      	ldr	r3, [r7, #24]
 80040b8:	3302      	adds	r3, #2
 80040ba:	61bb      	str	r3, [r7, #24]
 80040bc:	e007      	b.n	80040ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	781a      	ldrb	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	3301      	adds	r3, #1
 80040cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	3b01      	subs	r3, #1
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1cb      	bne.n	800407e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	2200      	movs	r2, #0
 80040ee:	2140      	movs	r1, #64	@ 0x40
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 fb03 	bl	80046fc <UART_WaitOnFlagUntilTimeout>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d005      	beq.n	8004108 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2220      	movs	r2, #32
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e006      	b.n	8004116 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004110:	2300      	movs	r3, #0
 8004112:	e000      	b.n	8004116 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004114:	2302      	movs	r3, #2
  }
}
 8004116:	4618      	mov	r0, r3
 8004118:	3720      	adds	r7, #32
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800411e:	b580      	push	{r7, lr}
 8004120:	b084      	sub	sp, #16
 8004122:	af00      	add	r7, sp, #0
 8004124:	60f8      	str	r0, [r7, #12]
 8004126:	60b9      	str	r1, [r7, #8]
 8004128:	4613      	mov	r3, r2
 800412a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b20      	cmp	r3, #32
 8004136:	d112      	bne.n	800415e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d002      	beq.n	8004144 <HAL_UART_Receive_IT+0x26>
 800413e:	88fb      	ldrh	r3, [r7, #6]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e00b      	b.n	8004160 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	2200      	movs	r2, #0
 800414c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800414e:	88fb      	ldrh	r3, [r7, #6]
 8004150:	461a      	mov	r2, r3
 8004152:	68b9      	ldr	r1, [r7, #8]
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 fb2a 	bl	80047ae <UART_Start_Receive_IT>
 800415a:	4603      	mov	r3, r0
 800415c:	e000      	b.n	8004160 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800415e:	2302      	movs	r3, #2
  }
}
 8004160:	4618      	mov	r0, r3
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b0ba      	sub	sp, #232	@ 0xe8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800418e:	2300      	movs	r3, #0
 8004190:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004194:	2300      	movs	r3, #0
 8004196:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800419a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800419e:	f003 030f 	and.w	r3, r3, #15
 80041a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80041a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10f      	bne.n	80041ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041b2:	f003 0320 	and.w	r3, r3, #32
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d009      	beq.n	80041ce <HAL_UART_IRQHandler+0x66>
 80041ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041be:	f003 0320 	and.w	r3, r3, #32
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d003      	beq.n	80041ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 fc07 	bl	80049da <UART_Receive_IT>
      return;
 80041cc:	e273      	b.n	80046b6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80041ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	f000 80de 	beq.w	8004394 <HAL_UART_IRQHandler+0x22c>
 80041d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d106      	bne.n	80041f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80041e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041e8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f000 80d1 	beq.w	8004394 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80041f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00b      	beq.n	8004216 <HAL_UART_IRQHandler+0xae>
 80041fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004202:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004206:	2b00      	cmp	r3, #0
 8004208:	d005      	beq.n	8004216 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800420e:	f043 0201 	orr.w	r2, r3, #1
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800421a:	f003 0304 	and.w	r3, r3, #4
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00b      	beq.n	800423a <HAL_UART_IRQHandler+0xd2>
 8004222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004226:	f003 0301 	and.w	r3, r3, #1
 800422a:	2b00      	cmp	r3, #0
 800422c:	d005      	beq.n	800423a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004232:	f043 0202 	orr.w	r2, r3, #2
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800423a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d00b      	beq.n	800425e <HAL_UART_IRQHandler+0xf6>
 8004246:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d005      	beq.n	800425e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004256:	f043 0204 	orr.w	r2, r3, #4
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800425e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	2b00      	cmp	r3, #0
 8004268:	d011      	beq.n	800428e <HAL_UART_IRQHandler+0x126>
 800426a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800426e:	f003 0320 	and.w	r3, r3, #32
 8004272:	2b00      	cmp	r3, #0
 8004274:	d105      	bne.n	8004282 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d005      	beq.n	800428e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004286:	f043 0208 	orr.w	r2, r3, #8
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 820a 	beq.w	80046ac <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004298:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800429c:	f003 0320 	and.w	r3, r3, #32
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d008      	beq.n	80042b6 <HAL_UART_IRQHandler+0x14e>
 80042a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042a8:	f003 0320 	and.w	r3, r3, #32
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 fb92 	bl	80049da <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	695b      	ldr	r3, [r3, #20]
 80042bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042c0:	2b40      	cmp	r3, #64	@ 0x40
 80042c2:	bf0c      	ite	eq
 80042c4:	2301      	moveq	r3, #1
 80042c6:	2300      	movne	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d2:	f003 0308 	and.w	r3, r3, #8
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d103      	bne.n	80042e2 <HAL_UART_IRQHandler+0x17a>
 80042da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d04f      	beq.n	8004382 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 fa9d 	bl	8004822 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f2:	2b40      	cmp	r3, #64	@ 0x40
 80042f4:	d141      	bne.n	800437a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	3314      	adds	r3, #20
 80042fc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004300:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004304:	e853 3f00 	ldrex	r3, [r3]
 8004308:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800430c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004310:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004314:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3314      	adds	r3, #20
 800431e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004322:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004326:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800432a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800432e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004332:	e841 2300 	strex	r3, r2, [r1]
 8004336:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800433a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1d9      	bne.n	80042f6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004346:	2b00      	cmp	r3, #0
 8004348:	d013      	beq.n	8004372 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800434e:	4a8a      	ldr	r2, [pc, #552]	@ (8004578 <HAL_UART_IRQHandler+0x410>)
 8004350:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004356:	4618      	mov	r0, r3
 8004358:	f7fd fd4c 	bl	8001df4 <HAL_DMA_Abort_IT>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d016      	beq.n	8004390 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800436c:	4610      	mov	r0, r2
 800436e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004370:	e00e      	b.n	8004390 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f9ac 	bl	80046d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004378:	e00a      	b.n	8004390 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f9a8 	bl	80046d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004380:	e006      	b.n	8004390 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f9a4 	bl	80046d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800438e:	e18d      	b.n	80046ac <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004390:	bf00      	nop
    return;
 8004392:	e18b      	b.n	80046ac <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004398:	2b01      	cmp	r3, #1
 800439a:	f040 8167 	bne.w	800466c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800439e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043a2:	f003 0310 	and.w	r3, r3, #16
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 8160 	beq.w	800466c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80043ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043b0:	f003 0310 	and.w	r3, r3, #16
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	f000 8159 	beq.w	800466c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043ba:	2300      	movs	r3, #0
 80043bc:	60bb      	str	r3, [r7, #8]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	60bb      	str	r3, [r7, #8]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	60bb      	str	r3, [r7, #8]
 80043ce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	695b      	ldr	r3, [r3, #20]
 80043d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043da:	2b40      	cmp	r3, #64	@ 0x40
 80043dc:	f040 80ce 	bne.w	800457c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80043ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 80a9 	beq.w	8004548 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80043fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80043fe:	429a      	cmp	r2, r3
 8004400:	f080 80a2 	bcs.w	8004548 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800440a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004416:	f000 8088 	beq.w	800452a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	330c      	adds	r3, #12
 8004420:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004424:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004428:	e853 3f00 	ldrex	r3, [r3]
 800442c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004430:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004434:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004438:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	330c      	adds	r3, #12
 8004442:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004446:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800444a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004452:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004456:	e841 2300 	strex	r3, r2, [r1]
 800445a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800445e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1d9      	bne.n	800441a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	3314      	adds	r3, #20
 800446c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800446e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004470:	e853 3f00 	ldrex	r3, [r3]
 8004474:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004476:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004478:	f023 0301 	bic.w	r3, r3, #1
 800447c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	3314      	adds	r3, #20
 8004486:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800448a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800448e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004490:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004492:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004496:	e841 2300 	strex	r3, r2, [r1]
 800449a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800449c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1e1      	bne.n	8004466 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3314      	adds	r3, #20
 80044a8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80044ac:	e853 3f00 	ldrex	r3, [r3]
 80044b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80044b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	3314      	adds	r3, #20
 80044c2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80044c6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80044c8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044ca:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80044cc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80044ce:	e841 2300 	strex	r3, r2, [r1]
 80044d2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80044d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d1e3      	bne.n	80044a2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2220      	movs	r2, #32
 80044de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	330c      	adds	r3, #12
 80044ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80044f2:	e853 3f00 	ldrex	r3, [r3]
 80044f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80044f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80044fa:	f023 0310 	bic.w	r3, r3, #16
 80044fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	330c      	adds	r3, #12
 8004508:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800450c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800450e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004510:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004512:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004514:	e841 2300 	strex	r3, r2, [r1]
 8004518:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800451a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800451c:	2b00      	cmp	r3, #0
 800451e:	d1e3      	bne.n	80044e8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004524:	4618      	mov	r0, r3
 8004526:	f7fd fbf5 	bl	8001d14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2202      	movs	r2, #2
 800452e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004538:	b29b      	uxth	r3, r3
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	b29b      	uxth	r3, r3
 800453e:	4619      	mov	r1, r3
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f8cf 	bl	80046e4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004546:	e0b3      	b.n	80046b0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800454c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004550:	429a      	cmp	r2, r3
 8004552:	f040 80ad 	bne.w	80046b0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004560:	f040 80a6 	bne.w	80046b0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2202      	movs	r2, #2
 8004568:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800456e:	4619      	mov	r1, r3
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f8b7 	bl	80046e4 <HAL_UARTEx_RxEventCallback>
      return;
 8004576:	e09b      	b.n	80046b0 <HAL_UART_IRQHandler+0x548>
 8004578:	080048e9 	.word	0x080048e9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004584:	b29b      	uxth	r3, r3
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004590:	b29b      	uxth	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	f000 808e 	beq.w	80046b4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004598:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800459c:	2b00      	cmp	r3, #0
 800459e:	f000 8089 	beq.w	80046b4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	330c      	adds	r3, #12
 80045a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045ac:	e853 3f00 	ldrex	r3, [r3]
 80045b0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045b4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	330c      	adds	r3, #12
 80045c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80045c6:	647a      	str	r2, [r7, #68]	@ 0x44
 80045c8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045ce:	e841 2300 	strex	r3, r2, [r1]
 80045d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1e3      	bne.n	80045a2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	3314      	adds	r3, #20
 80045e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e4:	e853 3f00 	ldrex	r3, [r3]
 80045e8:	623b      	str	r3, [r7, #32]
   return(result);
 80045ea:	6a3b      	ldr	r3, [r7, #32]
 80045ec:	f023 0301 	bic.w	r3, r3, #1
 80045f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3314      	adds	r3, #20
 80045fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80045fe:	633a      	str	r2, [r7, #48]	@ 0x30
 8004600:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004602:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004604:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004606:	e841 2300 	strex	r3, r2, [r1]
 800460a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800460c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1e3      	bne.n	80045da <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2220      	movs	r2, #32
 8004616:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	330c      	adds	r3, #12
 8004626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	e853 3f00 	ldrex	r3, [r3]
 800462e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f023 0310 	bic.w	r3, r3, #16
 8004636:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	330c      	adds	r3, #12
 8004640:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004644:	61fa      	str	r2, [r7, #28]
 8004646:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004648:	69b9      	ldr	r1, [r7, #24]
 800464a:	69fa      	ldr	r2, [r7, #28]
 800464c:	e841 2300 	strex	r3, r2, [r1]
 8004650:	617b      	str	r3, [r7, #20]
   return(result);
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1e3      	bne.n	8004620 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800465e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004662:	4619      	mov	r1, r3
 8004664:	6878      	ldr	r0, [r7, #4]
 8004666:	f000 f83d 	bl	80046e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800466a:	e023      	b.n	80046b4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800466c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004670:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004674:	2b00      	cmp	r3, #0
 8004676:	d009      	beq.n	800468c <HAL_UART_IRQHandler+0x524>
 8004678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800467c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f940 	bl	800490a <UART_Transmit_IT>
    return;
 800468a:	e014      	b.n	80046b6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800468c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004690:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004694:	2b00      	cmp	r3, #0
 8004696:	d00e      	beq.n	80046b6 <HAL_UART_IRQHandler+0x54e>
 8004698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800469c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d008      	beq.n	80046b6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f980 	bl	80049aa <UART_EndTransmit_IT>
    return;
 80046aa:	e004      	b.n	80046b6 <HAL_UART_IRQHandler+0x54e>
    return;
 80046ac:	bf00      	nop
 80046ae:	e002      	b.n	80046b6 <HAL_UART_IRQHandler+0x54e>
      return;
 80046b0:	bf00      	nop
 80046b2:	e000      	b.n	80046b6 <HAL_UART_IRQHandler+0x54e>
      return;
 80046b4:	bf00      	nop
  }
}
 80046b6:	37e8      	adds	r7, #232	@ 0xe8
 80046b8:	46bd      	mov	sp, r7
 80046ba:	bd80      	pop	{r7, pc}

080046bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
 80046ec:	460b      	mov	r3, r1
 80046ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	603b      	str	r3, [r7, #0]
 8004708:	4613      	mov	r3, r2
 800470a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800470c:	e03b      	b.n	8004786 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004714:	d037      	beq.n	8004786 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004716:	f7fd f9eb 	bl	8001af0 <HAL_GetTick>
 800471a:	4602      	mov	r2, r0
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	1ad3      	subs	r3, r2, r3
 8004720:	6a3a      	ldr	r2, [r7, #32]
 8004722:	429a      	cmp	r2, r3
 8004724:	d302      	bcc.n	800472c <UART_WaitOnFlagUntilTimeout+0x30>
 8004726:	6a3b      	ldr	r3, [r7, #32]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d101      	bne.n	8004730 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e03a      	b.n	80047a6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	f003 0304 	and.w	r3, r3, #4
 800473a:	2b00      	cmp	r3, #0
 800473c:	d023      	beq.n	8004786 <UART_WaitOnFlagUntilTimeout+0x8a>
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	2b80      	cmp	r3, #128	@ 0x80
 8004742:	d020      	beq.n	8004786 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	2b40      	cmp	r3, #64	@ 0x40
 8004748:	d01d      	beq.n	8004786 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0308 	and.w	r3, r3, #8
 8004754:	2b08      	cmp	r3, #8
 8004756:	d116      	bne.n	8004786 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004758:	2300      	movs	r3, #0
 800475a:	617b      	str	r3, [r7, #20]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	617b      	str	r3, [r7, #20]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	617b      	str	r3, [r7, #20]
 800476c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800476e:	68f8      	ldr	r0, [r7, #12]
 8004770:	f000 f857 	bl	8004822 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2208      	movs	r2, #8
 8004778:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e00f      	b.n	80047a6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	681a      	ldr	r2, [r3, #0]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	4013      	ands	r3, r2
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	429a      	cmp	r2, r3
 8004794:	bf0c      	ite	eq
 8004796:	2301      	moveq	r3, #1
 8004798:	2300      	movne	r3, #0
 800479a:	b2db      	uxtb	r3, r3
 800479c:	461a      	mov	r2, r3
 800479e:	79fb      	ldrb	r3, [r7, #7]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d0b4      	beq.n	800470e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b085      	sub	sp, #20
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	60f8      	str	r0, [r7, #12]
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	4613      	mov	r3, r2
 80047ba:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	88fa      	ldrh	r2, [r7, #6]
 80047c6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	88fa      	ldrh	r2, [r7, #6]
 80047cc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2222      	movs	r2, #34	@ 0x22
 80047d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d007      	beq.n	80047f4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68da      	ldr	r2, [r3, #12]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047f2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695a      	ldr	r2, [r3, #20]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0201 	orr.w	r2, r2, #1
 8004802:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68da      	ldr	r2, [r3, #12]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f042 0220 	orr.w	r2, r2, #32
 8004812:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004822:	b480      	push	{r7}
 8004824:	b095      	sub	sp, #84	@ 0x54
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	330c      	adds	r3, #12
 8004830:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004834:	e853 3f00 	ldrex	r3, [r3]
 8004838:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800483a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800483c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004840:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	330c      	adds	r3, #12
 8004848:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800484a:	643a      	str	r2, [r7, #64]	@ 0x40
 800484c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004850:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004852:	e841 2300 	strex	r3, r2, [r1]
 8004856:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1e5      	bne.n	800482a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	3314      	adds	r3, #20
 8004864:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004866:	6a3b      	ldr	r3, [r7, #32]
 8004868:	e853 3f00 	ldrex	r3, [r3]
 800486c:	61fb      	str	r3, [r7, #28]
   return(result);
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	f023 0301 	bic.w	r3, r3, #1
 8004874:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	3314      	adds	r3, #20
 800487c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800487e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004880:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004882:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004884:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004886:	e841 2300 	strex	r3, r2, [r1]
 800488a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800488c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1e5      	bne.n	800485e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004896:	2b01      	cmp	r3, #1
 8004898:	d119      	bne.n	80048ce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	330c      	adds	r3, #12
 80048a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	e853 3f00 	ldrex	r3, [r3]
 80048a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	f023 0310 	bic.w	r3, r3, #16
 80048b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	330c      	adds	r3, #12
 80048b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048ba:	61ba      	str	r2, [r7, #24]
 80048bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048be:	6979      	ldr	r1, [r7, #20]
 80048c0:	69ba      	ldr	r2, [r7, #24]
 80048c2:	e841 2300 	strex	r3, r2, [r1]
 80048c6:	613b      	str	r3, [r7, #16]
   return(result);
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1e5      	bne.n	800489a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2220      	movs	r2, #32
 80048d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80048dc:	bf00      	nop
 80048de:	3754      	adds	r7, #84	@ 0x54
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2200      	movs	r2, #0
 80048fa:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f7ff fee7 	bl	80046d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004902:	bf00      	nop
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800490a:	b480      	push	{r7}
 800490c:	b085      	sub	sp, #20
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b21      	cmp	r3, #33	@ 0x21
 800491c:	d13e      	bne.n	800499c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004926:	d114      	bne.n	8004952 <UART_Transmit_IT+0x48>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d110      	bne.n	8004952 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6a1b      	ldr	r3, [r3, #32]
 8004934:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	881b      	ldrh	r3, [r3, #0]
 800493a:	461a      	mov	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004944:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	1c9a      	adds	r2, r3, #2
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	621a      	str	r2, [r3, #32]
 8004950:	e008      	b.n	8004964 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a1b      	ldr	r3, [r3, #32]
 8004956:	1c59      	adds	r1, r3, #1
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	6211      	str	r1, [r2, #32]
 800495c:	781a      	ldrb	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004968:	b29b      	uxth	r3, r3
 800496a:	3b01      	subs	r3, #1
 800496c:	b29b      	uxth	r3, r3
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	4619      	mov	r1, r3
 8004972:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004974:	2b00      	cmp	r3, #0
 8004976:	d10f      	bne.n	8004998 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	68da      	ldr	r2, [r3, #12]
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004986:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004996:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004998:	2300      	movs	r3, #0
 800499a:	e000      	b.n	800499e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800499c:	2302      	movs	r3, #2
  }
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3714      	adds	r7, #20
 80049a2:	46bd      	mov	sp, r7
 80049a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a8:	4770      	bx	lr

080049aa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b082      	sub	sp, #8
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68da      	ldr	r2, [r3, #12]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80049c0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7ff fe76 	bl	80046bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3708      	adds	r7, #8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049da:	b580      	push	{r7, lr}
 80049dc:	b08c      	sub	sp, #48	@ 0x30
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80049e2:	2300      	movs	r3, #0
 80049e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80049e6:	2300      	movs	r3, #0
 80049e8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	2b22      	cmp	r3, #34	@ 0x22
 80049f4:	f040 80aa 	bne.w	8004b4c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a00:	d115      	bne.n	8004a2e <UART_Receive_IT+0x54>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d111      	bne.n	8004a2e <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a0e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a1c:	b29a      	uxth	r2, r3
 8004a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a26:	1c9a      	adds	r2, r3, #2
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a2c:	e024      	b.n	8004a78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a3c:	d007      	beq.n	8004a4e <UART_Receive_IT+0x74>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d10a      	bne.n	8004a5c <UART_Receive_IT+0x82>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d106      	bne.n	8004a5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a58:	701a      	strb	r2, [r3, #0]
 8004a5a:	e008      	b.n	8004a6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	4619      	mov	r1, r3
 8004a86:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d15d      	bne.n	8004b48 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68da      	ldr	r2, [r3, #12]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 0220 	bic.w	r2, r2, #32
 8004a9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	68da      	ldr	r2, [r3, #12]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004aaa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695a      	ldr	r2, [r3, #20]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0201 	bic.w	r2, r2, #1
 8004aba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d135      	bne.n	8004b3e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	330c      	adds	r3, #12
 8004ade:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	e853 3f00 	ldrex	r3, [r3]
 8004ae6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	f023 0310 	bic.w	r3, r3, #16
 8004aee:	627b      	str	r3, [r7, #36]	@ 0x24
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	330c      	adds	r3, #12
 8004af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004af8:	623a      	str	r2, [r7, #32]
 8004afa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004afc:	69f9      	ldr	r1, [r7, #28]
 8004afe:	6a3a      	ldr	r2, [r7, #32]
 8004b00:	e841 2300 	strex	r3, r2, [r1]
 8004b04:	61bb      	str	r3, [r7, #24]
   return(result);
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d1e5      	bne.n	8004ad8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0310 	and.w	r3, r3, #16
 8004b16:	2b10      	cmp	r3, #16
 8004b18:	d10a      	bne.n	8004b30 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	60fb      	str	r3, [r7, #12]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b34:	4619      	mov	r1, r3
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7ff fdd4 	bl	80046e4 <HAL_UARTEx_RxEventCallback>
 8004b3c:	e002      	b.n	8004b44 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7fc f8d8 	bl	8000cf4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b44:	2300      	movs	r3, #0
 8004b46:	e002      	b.n	8004b4e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	e000      	b.n	8004b4e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004b4c:	2302      	movs	r3, #2
  }
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3730      	adds	r7, #48	@ 0x30
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
	...

08004b58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b5c:	b0c0      	sub	sp, #256	@ 0x100
 8004b5e:	af00      	add	r7, sp, #0
 8004b60:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	691b      	ldr	r3, [r3, #16]
 8004b6c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b74:	68d9      	ldr	r1, [r3, #12]
 8004b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b7a:	681a      	ldr	r2, [r3, #0]
 8004b7c:	ea40 0301 	orr.w	r3, r0, r1
 8004b80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b86:	689a      	ldr	r2, [r3, #8]
 8004b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	431a      	orrs	r2, r3
 8004b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	68db      	ldr	r3, [r3, #12]
 8004bac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004bb0:	f021 010c 	bic.w	r1, r1, #12
 8004bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004bbe:	430b      	orrs	r3, r1
 8004bc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd2:	6999      	ldr	r1, [r3, #24]
 8004bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	ea40 0301 	orr.w	r3, r0, r1
 8004bde:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	4b8f      	ldr	r3, [pc, #572]	@ (8004e24 <UART_SetConfig+0x2cc>)
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d005      	beq.n	8004bf8 <UART_SetConfig+0xa0>
 8004bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	4b8d      	ldr	r3, [pc, #564]	@ (8004e28 <UART_SetConfig+0x2d0>)
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d104      	bne.n	8004c02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bf8:	f7fd fbd2 	bl	80023a0 <HAL_RCC_GetPCLK2Freq>
 8004bfc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004c00:	e003      	b.n	8004c0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c02:	f7fd fbb9 	bl	8002378 <HAL_RCC_GetPCLK1Freq>
 8004c06:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c14:	f040 810c 	bne.w	8004e30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004c22:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c2a:	4622      	mov	r2, r4
 8004c2c:	462b      	mov	r3, r5
 8004c2e:	1891      	adds	r1, r2, r2
 8004c30:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c32:	415b      	adcs	r3, r3
 8004c34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c3a:	4621      	mov	r1, r4
 8004c3c:	eb12 0801 	adds.w	r8, r2, r1
 8004c40:	4629      	mov	r1, r5
 8004c42:	eb43 0901 	adc.w	r9, r3, r1
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	f04f 0300 	mov.w	r3, #0
 8004c4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c5a:	4690      	mov	r8, r2
 8004c5c:	4699      	mov	r9, r3
 8004c5e:	4623      	mov	r3, r4
 8004c60:	eb18 0303 	adds.w	r3, r8, r3
 8004c64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c68:	462b      	mov	r3, r5
 8004c6a:	eb49 0303 	adc.w	r3, r9, r3
 8004c6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c7e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c86:	460b      	mov	r3, r1
 8004c88:	18db      	adds	r3, r3, r3
 8004c8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c8c:	4613      	mov	r3, r2
 8004c8e:	eb42 0303 	adc.w	r3, r2, r3
 8004c92:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c9c:	f7fb fb20 	bl	80002e0 <__aeabi_uldivmod>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	4b61      	ldr	r3, [pc, #388]	@ (8004e2c <UART_SetConfig+0x2d4>)
 8004ca6:	fba3 2302 	umull	r2, r3, r3, r2
 8004caa:	095b      	lsrs	r3, r3, #5
 8004cac:	011c      	lsls	r4, r3, #4
 8004cae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004cb8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004cbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004cc0:	4642      	mov	r2, r8
 8004cc2:	464b      	mov	r3, r9
 8004cc4:	1891      	adds	r1, r2, r2
 8004cc6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004cc8:	415b      	adcs	r3, r3
 8004cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ccc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004cd0:	4641      	mov	r1, r8
 8004cd2:	eb12 0a01 	adds.w	sl, r2, r1
 8004cd6:	4649      	mov	r1, r9
 8004cd8:	eb43 0b01 	adc.w	fp, r3, r1
 8004cdc:	f04f 0200 	mov.w	r2, #0
 8004ce0:	f04f 0300 	mov.w	r3, #0
 8004ce4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004ce8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cf0:	4692      	mov	sl, r2
 8004cf2:	469b      	mov	fp, r3
 8004cf4:	4643      	mov	r3, r8
 8004cf6:	eb1a 0303 	adds.w	r3, sl, r3
 8004cfa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cfe:	464b      	mov	r3, r9
 8004d00:	eb4b 0303 	adc.w	r3, fp, r3
 8004d04:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d14:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004d18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	18db      	adds	r3, r3, r3
 8004d20:	643b      	str	r3, [r7, #64]	@ 0x40
 8004d22:	4613      	mov	r3, r2
 8004d24:	eb42 0303 	adc.w	r3, r2, r3
 8004d28:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d32:	f7fb fad5 	bl	80002e0 <__aeabi_uldivmod>
 8004d36:	4602      	mov	r2, r0
 8004d38:	460b      	mov	r3, r1
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	4b3b      	ldr	r3, [pc, #236]	@ (8004e2c <UART_SetConfig+0x2d4>)
 8004d3e:	fba3 2301 	umull	r2, r3, r3, r1
 8004d42:	095b      	lsrs	r3, r3, #5
 8004d44:	2264      	movs	r2, #100	@ 0x64
 8004d46:	fb02 f303 	mul.w	r3, r2, r3
 8004d4a:	1acb      	subs	r3, r1, r3
 8004d4c:	00db      	lsls	r3, r3, #3
 8004d4e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d52:	4b36      	ldr	r3, [pc, #216]	@ (8004e2c <UART_SetConfig+0x2d4>)
 8004d54:	fba3 2302 	umull	r2, r3, r3, r2
 8004d58:	095b      	lsrs	r3, r3, #5
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d60:	441c      	add	r4, r3
 8004d62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d66:	2200      	movs	r2, #0
 8004d68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d6c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d74:	4642      	mov	r2, r8
 8004d76:	464b      	mov	r3, r9
 8004d78:	1891      	adds	r1, r2, r2
 8004d7a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d7c:	415b      	adcs	r3, r3
 8004d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d84:	4641      	mov	r1, r8
 8004d86:	1851      	adds	r1, r2, r1
 8004d88:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d8a:	4649      	mov	r1, r9
 8004d8c:	414b      	adcs	r3, r1
 8004d8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d90:	f04f 0200 	mov.w	r2, #0
 8004d94:	f04f 0300 	mov.w	r3, #0
 8004d98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d9c:	4659      	mov	r1, fp
 8004d9e:	00cb      	lsls	r3, r1, #3
 8004da0:	4651      	mov	r1, sl
 8004da2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004da6:	4651      	mov	r1, sl
 8004da8:	00ca      	lsls	r2, r1, #3
 8004daa:	4610      	mov	r0, r2
 8004dac:	4619      	mov	r1, r3
 8004dae:	4603      	mov	r3, r0
 8004db0:	4642      	mov	r2, r8
 8004db2:	189b      	adds	r3, r3, r2
 8004db4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004db8:	464b      	mov	r3, r9
 8004dba:	460a      	mov	r2, r1
 8004dbc:	eb42 0303 	adc.w	r3, r2, r3
 8004dc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004dd0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004dd4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004dd8:	460b      	mov	r3, r1
 8004dda:	18db      	adds	r3, r3, r3
 8004ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dde:	4613      	mov	r3, r2
 8004de0:	eb42 0303 	adc.w	r3, r2, r3
 8004de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004de6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004dea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004dee:	f7fb fa77 	bl	80002e0 <__aeabi_uldivmod>
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	4b0d      	ldr	r3, [pc, #52]	@ (8004e2c <UART_SetConfig+0x2d4>)
 8004df8:	fba3 1302 	umull	r1, r3, r3, r2
 8004dfc:	095b      	lsrs	r3, r3, #5
 8004dfe:	2164      	movs	r1, #100	@ 0x64
 8004e00:	fb01 f303 	mul.w	r3, r1, r3
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	3332      	adds	r3, #50	@ 0x32
 8004e0a:	4a08      	ldr	r2, [pc, #32]	@ (8004e2c <UART_SetConfig+0x2d4>)
 8004e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e10:	095b      	lsrs	r3, r3, #5
 8004e12:	f003 0207 	and.w	r2, r3, #7
 8004e16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4422      	add	r2, r4
 8004e1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e20:	e106      	b.n	8005030 <UART_SetConfig+0x4d8>
 8004e22:	bf00      	nop
 8004e24:	40011000 	.word	0x40011000
 8004e28:	40011400 	.word	0x40011400
 8004e2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e34:	2200      	movs	r2, #0
 8004e36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e3a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e42:	4642      	mov	r2, r8
 8004e44:	464b      	mov	r3, r9
 8004e46:	1891      	adds	r1, r2, r2
 8004e48:	6239      	str	r1, [r7, #32]
 8004e4a:	415b      	adcs	r3, r3
 8004e4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e52:	4641      	mov	r1, r8
 8004e54:	1854      	adds	r4, r2, r1
 8004e56:	4649      	mov	r1, r9
 8004e58:	eb43 0501 	adc.w	r5, r3, r1
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	f04f 0300 	mov.w	r3, #0
 8004e64:	00eb      	lsls	r3, r5, #3
 8004e66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e6a:	00e2      	lsls	r2, r4, #3
 8004e6c:	4614      	mov	r4, r2
 8004e6e:	461d      	mov	r5, r3
 8004e70:	4643      	mov	r3, r8
 8004e72:	18e3      	adds	r3, r4, r3
 8004e74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e78:	464b      	mov	r3, r9
 8004e7a:	eb45 0303 	adc.w	r3, r5, r3
 8004e7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e92:	f04f 0200 	mov.w	r2, #0
 8004e96:	f04f 0300 	mov.w	r3, #0
 8004e9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e9e:	4629      	mov	r1, r5
 8004ea0:	008b      	lsls	r3, r1, #2
 8004ea2:	4621      	mov	r1, r4
 8004ea4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ea8:	4621      	mov	r1, r4
 8004eaa:	008a      	lsls	r2, r1, #2
 8004eac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004eb0:	f7fb fa16 	bl	80002e0 <__aeabi_uldivmod>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	4b60      	ldr	r3, [pc, #384]	@ (800503c <UART_SetConfig+0x4e4>)
 8004eba:	fba3 2302 	umull	r2, r3, r3, r2
 8004ebe:	095b      	lsrs	r3, r3, #5
 8004ec0:	011c      	lsls	r4, r3, #4
 8004ec2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ecc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004ed0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004ed4:	4642      	mov	r2, r8
 8004ed6:	464b      	mov	r3, r9
 8004ed8:	1891      	adds	r1, r2, r2
 8004eda:	61b9      	str	r1, [r7, #24]
 8004edc:	415b      	adcs	r3, r3
 8004ede:	61fb      	str	r3, [r7, #28]
 8004ee0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ee4:	4641      	mov	r1, r8
 8004ee6:	1851      	adds	r1, r2, r1
 8004ee8:	6139      	str	r1, [r7, #16]
 8004eea:	4649      	mov	r1, r9
 8004eec:	414b      	adcs	r3, r1
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004efc:	4659      	mov	r1, fp
 8004efe:	00cb      	lsls	r3, r1, #3
 8004f00:	4651      	mov	r1, sl
 8004f02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f06:	4651      	mov	r1, sl
 8004f08:	00ca      	lsls	r2, r1, #3
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	4619      	mov	r1, r3
 8004f0e:	4603      	mov	r3, r0
 8004f10:	4642      	mov	r2, r8
 8004f12:	189b      	adds	r3, r3, r2
 8004f14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004f18:	464b      	mov	r3, r9
 8004f1a:	460a      	mov	r2, r1
 8004f1c:	eb42 0303 	adc.w	r3, r2, r3
 8004f20:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f2e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f30:	f04f 0200 	mov.w	r2, #0
 8004f34:	f04f 0300 	mov.w	r3, #0
 8004f38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f3c:	4649      	mov	r1, r9
 8004f3e:	008b      	lsls	r3, r1, #2
 8004f40:	4641      	mov	r1, r8
 8004f42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f46:	4641      	mov	r1, r8
 8004f48:	008a      	lsls	r2, r1, #2
 8004f4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f4e:	f7fb f9c7 	bl	80002e0 <__aeabi_uldivmod>
 8004f52:	4602      	mov	r2, r0
 8004f54:	460b      	mov	r3, r1
 8004f56:	4611      	mov	r1, r2
 8004f58:	4b38      	ldr	r3, [pc, #224]	@ (800503c <UART_SetConfig+0x4e4>)
 8004f5a:	fba3 2301 	umull	r2, r3, r3, r1
 8004f5e:	095b      	lsrs	r3, r3, #5
 8004f60:	2264      	movs	r2, #100	@ 0x64
 8004f62:	fb02 f303 	mul.w	r3, r2, r3
 8004f66:	1acb      	subs	r3, r1, r3
 8004f68:	011b      	lsls	r3, r3, #4
 8004f6a:	3332      	adds	r3, #50	@ 0x32
 8004f6c:	4a33      	ldr	r2, [pc, #204]	@ (800503c <UART_SetConfig+0x4e4>)
 8004f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f72:	095b      	lsrs	r3, r3, #5
 8004f74:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f78:	441c      	add	r4, r3
 8004f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f7e:	2200      	movs	r2, #0
 8004f80:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f82:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f84:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f88:	4642      	mov	r2, r8
 8004f8a:	464b      	mov	r3, r9
 8004f8c:	1891      	adds	r1, r2, r2
 8004f8e:	60b9      	str	r1, [r7, #8]
 8004f90:	415b      	adcs	r3, r3
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f98:	4641      	mov	r1, r8
 8004f9a:	1851      	adds	r1, r2, r1
 8004f9c:	6039      	str	r1, [r7, #0]
 8004f9e:	4649      	mov	r1, r9
 8004fa0:	414b      	adcs	r3, r1
 8004fa2:	607b      	str	r3, [r7, #4]
 8004fa4:	f04f 0200 	mov.w	r2, #0
 8004fa8:	f04f 0300 	mov.w	r3, #0
 8004fac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fb0:	4659      	mov	r1, fp
 8004fb2:	00cb      	lsls	r3, r1, #3
 8004fb4:	4651      	mov	r1, sl
 8004fb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fba:	4651      	mov	r1, sl
 8004fbc:	00ca      	lsls	r2, r1, #3
 8004fbe:	4610      	mov	r0, r2
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	4642      	mov	r2, r8
 8004fc6:	189b      	adds	r3, r3, r2
 8004fc8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fca:	464b      	mov	r3, r9
 8004fcc:	460a      	mov	r2, r1
 8004fce:	eb42 0303 	adc.w	r3, r2, r3
 8004fd2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004fd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fde:	667a      	str	r2, [r7, #100]	@ 0x64
 8004fe0:	f04f 0200 	mov.w	r2, #0
 8004fe4:	f04f 0300 	mov.w	r3, #0
 8004fe8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004fec:	4649      	mov	r1, r9
 8004fee:	008b      	lsls	r3, r1, #2
 8004ff0:	4641      	mov	r1, r8
 8004ff2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ff6:	4641      	mov	r1, r8
 8004ff8:	008a      	lsls	r2, r1, #2
 8004ffa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004ffe:	f7fb f96f 	bl	80002e0 <__aeabi_uldivmod>
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
 8005006:	4b0d      	ldr	r3, [pc, #52]	@ (800503c <UART_SetConfig+0x4e4>)
 8005008:	fba3 1302 	umull	r1, r3, r3, r2
 800500c:	095b      	lsrs	r3, r3, #5
 800500e:	2164      	movs	r1, #100	@ 0x64
 8005010:	fb01 f303 	mul.w	r3, r1, r3
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	011b      	lsls	r3, r3, #4
 8005018:	3332      	adds	r3, #50	@ 0x32
 800501a:	4a08      	ldr	r2, [pc, #32]	@ (800503c <UART_SetConfig+0x4e4>)
 800501c:	fba2 2303 	umull	r2, r3, r2, r3
 8005020:	095b      	lsrs	r3, r3, #5
 8005022:	f003 020f 	and.w	r2, r3, #15
 8005026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4422      	add	r2, r4
 800502e:	609a      	str	r2, [r3, #8]
}
 8005030:	bf00      	nop
 8005032:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005036:	46bd      	mov	sp, r7
 8005038:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800503c:	51eb851f 	.word	0x51eb851f

08005040 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f103 0208 	add.w	r2, r3, #8
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f04f 32ff 	mov.w	r2, #4294967295
 8005058:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f103 0208 	add.w	r2, r3, #8
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f103 0208 	add.w	r2, r3, #8
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800508e:	bf00      	nop
 8005090:	370c      	adds	r7, #12
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr

0800509a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800509a:	b480      	push	{r7}
 800509c:	b085      	sub	sp, #20
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	689a      	ldr	r2, [r3, #8]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	1c5a      	adds	r2, r3, #1
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	601a      	str	r2, [r3, #0]
}
 80050d6:	bf00      	nop
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80050e2:	b480      	push	{r7}
 80050e4:	b085      	sub	sp, #20
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f8:	d103      	bne.n	8005102 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	60fb      	str	r3, [r7, #12]
 8005100:	e00c      	b.n	800511c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	3308      	adds	r3, #8
 8005106:	60fb      	str	r3, [r7, #12]
 8005108:	e002      	b.n	8005110 <vListInsert+0x2e>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	60fb      	str	r3, [r7, #12]
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68ba      	ldr	r2, [r7, #8]
 8005118:	429a      	cmp	r2, r3
 800511a:	d2f6      	bcs.n	800510a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	685a      	ldr	r2, [r3, #4]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	683a      	ldr	r2, [r7, #0]
 8005136:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	1c5a      	adds	r2, r3, #1
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	601a      	str	r2, [r3, #0]
}
 8005148:	bf00      	nop
 800514a:	3714      	adds	r7, #20
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6892      	ldr	r2, [r2, #8]
 800516a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6852      	ldr	r2, [r2, #4]
 8005174:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	429a      	cmp	r2, r3
 800517e:	d103      	bne.n	8005188 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689a      	ldr	r2, [r3, #8]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2200      	movs	r2, #0
 800518c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	1e5a      	subs	r2, r3, #1
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
}
 800519c:	4618      	mov	r0, r3
 800519e:	3714      	adds	r7, #20
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b084      	sub	sp, #16
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10b      	bne.n	80051d4 <xQueueGenericReset+0x2c>
        __asm volatile
 80051bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051c0:	f383 8811 	msr	BASEPRI, r3
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	60bb      	str	r3, [r7, #8]
    }
 80051ce:	bf00      	nop
 80051d0:	bf00      	nop
 80051d2:	e7fd      	b.n	80051d0 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80051d4:	f002 faea 	bl	80077ac <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051e0:	68f9      	ldr	r1, [r7, #12]
 80051e2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80051e4:	fb01 f303 	mul.w	r3, r1, r3
 80051e8:	441a      	add	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005204:	3b01      	subs	r3, #1
 8005206:	68f9      	ldr	r1, [r7, #12]
 8005208:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800520a:	fb01 f303 	mul.w	r3, r1, r3
 800520e:	441a      	add	r2, r3
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	22ff      	movs	r2, #255	@ 0xff
 8005218:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	22ff      	movs	r2, #255	@ 0xff
 8005220:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d109      	bne.n	800523e <xQueueGenericReset+0x96>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00f      	beq.n	8005252 <xQueueGenericReset+0xaa>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	3310      	adds	r3, #16
 8005236:	4618      	mov	r0, r3
 8005238:	f001 f8ca 	bl	80063d0 <xTaskRemoveFromEventList>
 800523c:	e009      	b.n	8005252 <xQueueGenericReset+0xaa>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	3310      	adds	r3, #16
 8005242:	4618      	mov	r0, r3
 8005244:	f7ff fefc 	bl	8005040 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	3324      	adds	r3, #36	@ 0x24
 800524c:	4618      	mov	r0, r3
 800524e:	f7ff fef7 	bl	8005040 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8005252:	f002 fadd 	bl	8007810 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8005256:	2301      	movs	r3, #1
}
 8005258:	4618      	mov	r0, r3
 800525a:	3710      	adds	r7, #16
 800525c:	46bd      	mov	sp, r7
 800525e:	bd80      	pop	{r7, pc}

08005260 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8005260:	b580      	push	{r7, lr}
 8005262:	b08c      	sub	sp, #48	@ 0x30
 8005264:	af02      	add	r7, sp, #8
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	4613      	mov	r3, r2
 800526c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10b      	bne.n	800528c <xQueueGenericCreate+0x2c>
        __asm volatile
 8005274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005278:	f383 8811 	msr	BASEPRI, r3
 800527c:	f3bf 8f6f 	isb	sy
 8005280:	f3bf 8f4f 	dsb	sy
 8005284:	61bb      	str	r3, [r7, #24]
    }
 8005286:	bf00      	nop
 8005288:	bf00      	nop
 800528a:	e7fd      	b.n	8005288 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	68ba      	ldr	r2, [r7, #8]
 8005290:	fb02 f303 	mul.w	r3, r2, r3
 8005294:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d006      	beq.n	80052aa <xQueueGenericCreate+0x4a>
 800529c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d101      	bne.n	80052ae <xQueueGenericCreate+0x4e>
 80052aa:	2301      	movs	r3, #1
 80052ac:	e000      	b.n	80052b0 <xQueueGenericCreate+0x50>
 80052ae:	2300      	movs	r3, #0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10b      	bne.n	80052cc <xQueueGenericCreate+0x6c>
        __asm volatile
 80052b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b8:	f383 8811 	msr	BASEPRI, r3
 80052bc:	f3bf 8f6f 	isb	sy
 80052c0:	f3bf 8f4f 	dsb	sy
 80052c4:	617b      	str	r3, [r7, #20]
    }
 80052c6:	bf00      	nop
 80052c8:	bf00      	nop
 80052ca:	e7fd      	b.n	80052c8 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 80052cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ce:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80052d2:	d90b      	bls.n	80052ec <xQueueGenericCreate+0x8c>
        __asm volatile
 80052d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d8:	f383 8811 	msr	BASEPRI, r3
 80052dc:	f3bf 8f6f 	isb	sy
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	613b      	str	r3, [r7, #16]
    }
 80052e6:	bf00      	nop
 80052e8:	bf00      	nop
 80052ea:	e7fd      	b.n	80052e8 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80052ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ee:	3350      	adds	r3, #80	@ 0x50
 80052f0:	4618      	mov	r0, r3
 80052f2:	f002 fb85 	bl	8007a00 <pvPortMalloc>
 80052f6:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80052f8:	6a3b      	ldr	r3, [r7, #32]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00d      	beq.n	800531a <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80052fe:	6a3b      	ldr	r3, [r7, #32]
 8005300:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	3350      	adds	r3, #80	@ 0x50
 8005306:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005308:	79fa      	ldrb	r2, [r7, #7]
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	9300      	str	r3, [sp, #0]
 800530e:	4613      	mov	r3, r2
 8005310:	69fa      	ldr	r2, [r7, #28]
 8005312:	68b9      	ldr	r1, [r7, #8]
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 f805 	bl	8005324 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800531a:	6a3b      	ldr	r3, [r7, #32]
    }
 800531c:	4618      	mov	r0, r3
 800531e:	3728      	adds	r7, #40	@ 0x28
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
 8005330:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d103      	bne.n	8005340 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	69ba      	ldr	r2, [r7, #24]
 800533c:	601a      	str	r2, [r3, #0]
 800533e:	e002      	b.n	8005346 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	687a      	ldr	r2, [r7, #4]
 8005344:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	68fa      	ldr	r2, [r7, #12]
 800534a:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005352:	2101      	movs	r1, #1
 8005354:	69b8      	ldr	r0, [r7, #24]
 8005356:	f7ff ff27 	bl	80051a8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	78fa      	ldrb	r2, [r7, #3]
 800535e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8005362:	bf00      	nop
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
	...

0800536c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b08e      	sub	sp, #56	@ 0x38
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	607a      	str	r2, [r7, #4]
 8005378:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800537a:	2300      	movs	r3, #0
 800537c:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8005382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10b      	bne.n	80053a0 <xQueueGenericSend+0x34>
        __asm volatile
 8005388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800538c:	f383 8811 	msr	BASEPRI, r3
 8005390:	f3bf 8f6f 	isb	sy
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800539a:	bf00      	nop
 800539c:	bf00      	nop
 800539e:	e7fd      	b.n	800539c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d103      	bne.n	80053ae <xQueueGenericSend+0x42>
 80053a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d101      	bne.n	80053b2 <xQueueGenericSend+0x46>
 80053ae:	2301      	movs	r3, #1
 80053b0:	e000      	b.n	80053b4 <xQueueGenericSend+0x48>
 80053b2:	2300      	movs	r3, #0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d10b      	bne.n	80053d0 <xQueueGenericSend+0x64>
        __asm volatile
 80053b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053bc:	f383 8811 	msr	BASEPRI, r3
 80053c0:	f3bf 8f6f 	isb	sy
 80053c4:	f3bf 8f4f 	dsb	sy
 80053c8:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80053ca:	bf00      	nop
 80053cc:	bf00      	nop
 80053ce:	e7fd      	b.n	80053cc <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	2b02      	cmp	r3, #2
 80053d4:	d103      	bne.n	80053de <xQueueGenericSend+0x72>
 80053d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d101      	bne.n	80053e2 <xQueueGenericSend+0x76>
 80053de:	2301      	movs	r3, #1
 80053e0:	e000      	b.n	80053e4 <xQueueGenericSend+0x78>
 80053e2:	2300      	movs	r3, #0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d10b      	bne.n	8005400 <xQueueGenericSend+0x94>
        __asm volatile
 80053e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ec:	f383 8811 	msr	BASEPRI, r3
 80053f0:	f3bf 8f6f 	isb	sy
 80053f4:	f3bf 8f4f 	dsb	sy
 80053f8:	623b      	str	r3, [r7, #32]
    }
 80053fa:	bf00      	nop
 80053fc:	bf00      	nop
 80053fe:	e7fd      	b.n	80053fc <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005400:	f001 f980 	bl	8006704 <xTaskGetSchedulerState>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d102      	bne.n	8005410 <xQueueGenericSend+0xa4>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <xQueueGenericSend+0xa8>
 8005410:	2301      	movs	r3, #1
 8005412:	e000      	b.n	8005416 <xQueueGenericSend+0xaa>
 8005414:	2300      	movs	r3, #0
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10b      	bne.n	8005432 <xQueueGenericSend+0xc6>
        __asm volatile
 800541a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541e:	f383 8811 	msr	BASEPRI, r3
 8005422:	f3bf 8f6f 	isb	sy
 8005426:	f3bf 8f4f 	dsb	sy
 800542a:	61fb      	str	r3, [r7, #28]
    }
 800542c:	bf00      	nop
 800542e:	bf00      	nop
 8005430:	e7fd      	b.n	800542e <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005432:	f002 f9bb 	bl	80077ac <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005438:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800543a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800543c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800543e:	429a      	cmp	r2, r3
 8005440:	d302      	bcc.n	8005448 <xQueueGenericSend+0xdc>
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	2b02      	cmp	r3, #2
 8005446:	d112      	bne.n	800546e <xQueueGenericSend+0x102>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	68b9      	ldr	r1, [r7, #8]
 800544c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800544e:	f000 faae 	bl	80059ae <prvCopyDataToQueue>
 8005452:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005458:	2b00      	cmp	r3, #0
 800545a:	d004      	beq.n	8005466 <xQueueGenericSend+0xfa>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800545c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545e:	3324      	adds	r3, #36	@ 0x24
 8005460:	4618      	mov	r0, r3
 8005462:	f000 ffb5 	bl	80063d0 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8005466:	f002 f9d3 	bl	8007810 <vPortExitCritical>
                return pdPASS;
 800546a:	2301      	movs	r3, #1
 800546c:	e062      	b.n	8005534 <xQueueGenericSend+0x1c8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d103      	bne.n	800547c <xQueueGenericSend+0x110>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005474:	f002 f9cc 	bl	8007810 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8005478:	2300      	movs	r3, #0
 800547a:	e05b      	b.n	8005534 <xQueueGenericSend+0x1c8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800547c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800547e:	2b00      	cmp	r3, #0
 8005480:	d106      	bne.n	8005490 <xQueueGenericSend+0x124>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8005482:	f107 0314 	add.w	r3, r7, #20
 8005486:	4618      	mov	r0, r3
 8005488:	f001 f806 	bl	8006498 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800548c:	2301      	movs	r3, #1
 800548e:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8005490:	f002 f9be 	bl	8007810 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005494:	f000 fdaa 	bl	8005fec <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005498:	f002 f988 	bl	80077ac <vPortEnterCritical>
 800549c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054a2:	b25b      	sxtb	r3, r3
 80054a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a8:	d103      	bne.n	80054b2 <xQueueGenericSend+0x146>
 80054aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054b8:	b25b      	sxtb	r3, r3
 80054ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054be:	d103      	bne.n	80054c8 <xQueueGenericSend+0x15c>
 80054c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054c2:	2200      	movs	r2, #0
 80054c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054c8:	f002 f9a2 	bl	8007810 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054cc:	1d3a      	adds	r2, r7, #4
 80054ce:	f107 0314 	add.w	r3, r7, #20
 80054d2:	4611      	mov	r1, r2
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 fff5 	bl	80064c4 <xTaskCheckForTimeOut>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d123      	bne.n	8005528 <xQueueGenericSend+0x1bc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80054e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054e2:	f000 fb5c 	bl	8005b9e <prvIsQueueFull>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d017      	beq.n	800551c <xQueueGenericSend+0x1b0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80054ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ee:	3310      	adds	r3, #16
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	4611      	mov	r1, r2
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 ff19 	bl	800632c <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80054fa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054fc:	f000 fae7 	bl	8005ace <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8005500:	f000 fd82 	bl	8006008 <xTaskResumeAll>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d193      	bne.n	8005432 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 800550a:	4b0c      	ldr	r3, [pc, #48]	@ (800553c <xQueueGenericSend+0x1d0>)
 800550c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005510:	601a      	str	r2, [r3, #0]
 8005512:	f3bf 8f4f 	dsb	sy
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	e78a      	b.n	8005432 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800551c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800551e:	f000 fad6 	bl	8005ace <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8005522:	f000 fd71 	bl	8006008 <xTaskResumeAll>
 8005526:	e784      	b.n	8005432 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8005528:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800552a:	f000 fad0 	bl	8005ace <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800552e:	f000 fd6b 	bl	8006008 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8005532:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8005534:	4618      	mov	r0, r3
 8005536:	3738      	adds	r7, #56	@ 0x38
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	e000ed04 	.word	0xe000ed04

08005540 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b090      	sub	sp, #64	@ 0x40
 8005544:	af00      	add	r7, sp, #0
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	607a      	str	r2, [r7, #4]
 800554c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8005552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10b      	bne.n	8005570 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8005558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800555c:	f383 8811 	msr	BASEPRI, r3
 8005560:	f3bf 8f6f 	isb	sy
 8005564:	f3bf 8f4f 	dsb	sy
 8005568:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800556a:	bf00      	nop
 800556c:	bf00      	nop
 800556e:	e7fd      	b.n	800556c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d103      	bne.n	800557e <xQueueGenericSendFromISR+0x3e>
 8005576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <xQueueGenericSendFromISR+0x42>
 800557e:	2301      	movs	r3, #1
 8005580:	e000      	b.n	8005584 <xQueueGenericSendFromISR+0x44>
 8005582:	2300      	movs	r3, #0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d10b      	bne.n	80055a0 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8005588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800558c:	f383 8811 	msr	BASEPRI, r3
 8005590:	f3bf 8f6f 	isb	sy
 8005594:	f3bf 8f4f 	dsb	sy
 8005598:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800559a:	bf00      	nop
 800559c:	bf00      	nop
 800559e:	e7fd      	b.n	800559c <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d103      	bne.n	80055ae <xQueueGenericSendFromISR+0x6e>
 80055a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d101      	bne.n	80055b2 <xQueueGenericSendFromISR+0x72>
 80055ae:	2301      	movs	r3, #1
 80055b0:	e000      	b.n	80055b4 <xQueueGenericSendFromISR+0x74>
 80055b2:	2300      	movs	r3, #0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d10b      	bne.n	80055d0 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 80055b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055bc:	f383 8811 	msr	BASEPRI, r3
 80055c0:	f3bf 8f6f 	isb	sy
 80055c4:	f3bf 8f4f 	dsb	sy
 80055c8:	623b      	str	r3, [r7, #32]
    }
 80055ca:	bf00      	nop
 80055cc:	bf00      	nop
 80055ce:	e7fd      	b.n	80055cc <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055d0:	f002 f9d4 	bl	800797c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80055d4:	f3ef 8211 	mrs	r2, BASEPRI
 80055d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055dc:	f383 8811 	msr	BASEPRI, r3
 80055e0:	f3bf 8f6f 	isb	sy
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	61fa      	str	r2, [r7, #28]
 80055ea:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80055ec:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055ee:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80055f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d302      	bcc.n	8005602 <xQueueGenericSendFromISR+0xc2>
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d13f      	bne.n	8005682 <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8005602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005604:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005608:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800560c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800560e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005610:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	68b9      	ldr	r1, [r7, #8]
 8005616:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005618:	f000 f9c9 	bl	80059ae <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 800561c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005624:	d112      	bne.n	800564c <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800562a:	2b00      	cmp	r3, #0
 800562c:	d026      	beq.n	800567c <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800562e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005630:	3324      	adds	r3, #36	@ 0x24
 8005632:	4618      	mov	r0, r3
 8005634:	f000 fecc 	bl	80063d0 <xTaskRemoveFromEventList>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d01e      	beq.n	800567c <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d01b      	beq.n	800567c <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	e017      	b.n	800567c <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 800564c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005650:	2b7f      	cmp	r3, #127	@ 0x7f
 8005652:	d10b      	bne.n	800566c <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 8005654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	617b      	str	r3, [r7, #20]
    }
 8005666:	bf00      	nop
 8005668:	bf00      	nop
 800566a:	e7fd      	b.n	8005668 <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800566c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005670:	3301      	adds	r3, #1
 8005672:	b2db      	uxtb	r3, r3
 8005674:	b25a      	sxtb	r2, r3
 8005676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005678:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 800567c:	2301      	movs	r3, #1
 800567e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8005680:	e001      	b.n	8005686 <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8005682:	2300      	movs	r3, #0
 8005684:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005686:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005688:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8005690:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005694:	4618      	mov	r0, r3
 8005696:	3740      	adds	r7, #64	@ 0x40
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b08c      	sub	sp, #48	@ 0x30
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80056a8:	2300      	movs	r3, #0
 80056aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80056b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10b      	bne.n	80056ce <xQueueReceive+0x32>
        __asm volatile
 80056b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ba:	f383 8811 	msr	BASEPRI, r3
 80056be:	f3bf 8f6f 	isb	sy
 80056c2:	f3bf 8f4f 	dsb	sy
 80056c6:	623b      	str	r3, [r7, #32]
    }
 80056c8:	bf00      	nop
 80056ca:	bf00      	nop
 80056cc:	e7fd      	b.n	80056ca <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d103      	bne.n	80056dc <xQueueReceive+0x40>
 80056d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <xQueueReceive+0x44>
 80056dc:	2301      	movs	r3, #1
 80056de:	e000      	b.n	80056e2 <xQueueReceive+0x46>
 80056e0:	2300      	movs	r3, #0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10b      	bne.n	80056fe <xQueueReceive+0x62>
        __asm volatile
 80056e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	61fb      	str	r3, [r7, #28]
    }
 80056f8:	bf00      	nop
 80056fa:	bf00      	nop
 80056fc:	e7fd      	b.n	80056fa <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056fe:	f001 f801 	bl	8006704 <xTaskGetSchedulerState>
 8005702:	4603      	mov	r3, r0
 8005704:	2b00      	cmp	r3, #0
 8005706:	d102      	bne.n	800570e <xQueueReceive+0x72>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <xQueueReceive+0x76>
 800570e:	2301      	movs	r3, #1
 8005710:	e000      	b.n	8005714 <xQueueReceive+0x78>
 8005712:	2300      	movs	r3, #0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10b      	bne.n	8005730 <xQueueReceive+0x94>
        __asm volatile
 8005718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800571c:	f383 8811 	msr	BASEPRI, r3
 8005720:	f3bf 8f6f 	isb	sy
 8005724:	f3bf 8f4f 	dsb	sy
 8005728:	61bb      	str	r3, [r7, #24]
    }
 800572a:	bf00      	nop
 800572c:	bf00      	nop
 800572e:	e7fd      	b.n	800572c <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8005730:	f002 f83c 	bl	80077ac <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005738:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800573a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573c:	2b00      	cmp	r3, #0
 800573e:	d014      	beq.n	800576a <xQueueReceive+0xce>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005740:	68b9      	ldr	r1, [r7, #8]
 8005742:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005744:	f000 f99d 	bl	8005a82 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574a:	1e5a      	subs	r2, r3, #1
 800574c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800574e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d004      	beq.n	8005762 <xQueueReceive+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800575a:	3310      	adds	r3, #16
 800575c:	4618      	mov	r0, r3
 800575e:	f000 fe37 	bl	80063d0 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8005762:	f002 f855 	bl	8007810 <vPortExitCritical>
                return pdPASS;
 8005766:	2301      	movs	r3, #1
 8005768:	e069      	b.n	800583e <xQueueReceive+0x1a2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d103      	bne.n	8005778 <xQueueReceive+0xdc>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8005770:	f002 f84e 	bl	8007810 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8005774:	2300      	movs	r3, #0
 8005776:	e062      	b.n	800583e <xQueueReceive+0x1a2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8005778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800577a:	2b00      	cmp	r3, #0
 800577c:	d106      	bne.n	800578c <xQueueReceive+0xf0>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800577e:	f107 0310 	add.w	r3, r7, #16
 8005782:	4618      	mov	r0, r3
 8005784:	f000 fe88 	bl	8006498 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8005788:	2301      	movs	r3, #1
 800578a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800578c:	f002 f840 	bl	8007810 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8005790:	f000 fc2c 	bl	8005fec <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8005794:	f002 f80a 	bl	80077ac <vPortEnterCritical>
 8005798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800579a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800579e:	b25b      	sxtb	r3, r3
 80057a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a4:	d103      	bne.n	80057ae <xQueueReceive+0x112>
 80057a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057b4:	b25b      	sxtb	r3, r3
 80057b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ba:	d103      	bne.n	80057c4 <xQueueReceive+0x128>
 80057bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057be:	2200      	movs	r2, #0
 80057c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057c4:	f002 f824 	bl	8007810 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057c8:	1d3a      	adds	r2, r7, #4
 80057ca:	f107 0310 	add.w	r3, r7, #16
 80057ce:	4611      	mov	r1, r2
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 fe77 	bl	80064c4 <xTaskCheckForTimeOut>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d123      	bne.n	8005824 <xQueueReceive+0x188>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057de:	f000 f9c8 	bl	8005b72 <prvIsQueueEmpty>
 80057e2:	4603      	mov	r3, r0
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d017      	beq.n	8005818 <xQueueReceive+0x17c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ea:	3324      	adds	r3, #36	@ 0x24
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	4611      	mov	r1, r2
 80057f0:	4618      	mov	r0, r3
 80057f2:	f000 fd9b 	bl	800632c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80057f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057f8:	f000 f969 	bl	8005ace <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80057fc:	f000 fc04 	bl	8006008 <xTaskResumeAll>
 8005800:	4603      	mov	r3, r0
 8005802:	2b00      	cmp	r3, #0
 8005804:	d194      	bne.n	8005730 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8005806:	4b10      	ldr	r3, [pc, #64]	@ (8005848 <xQueueReceive+0x1ac>)
 8005808:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800580c:	601a      	str	r2, [r3, #0]
 800580e:	f3bf 8f4f 	dsb	sy
 8005812:	f3bf 8f6f 	isb	sy
 8005816:	e78b      	b.n	8005730 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8005818:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800581a:	f000 f958 	bl	8005ace <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800581e:	f000 fbf3 	bl	8006008 <xTaskResumeAll>
 8005822:	e785      	b.n	8005730 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8005824:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005826:	f000 f952 	bl	8005ace <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800582a:	f000 fbed 	bl	8006008 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800582e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005830:	f000 f99f 	bl	8005b72 <prvIsQueueEmpty>
 8005834:	4603      	mov	r3, r0
 8005836:	2b00      	cmp	r3, #0
 8005838:	f43f af7a 	beq.w	8005730 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800583c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800583e:	4618      	mov	r0, r3
 8005840:	3730      	adds	r7, #48	@ 0x30
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	e000ed04 	.word	0xe000ed04

0800584c <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b090      	sub	sp, #64	@ 0x40
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 800585c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10b      	bne.n	800587a <xQueueReceiveFromISR+0x2e>
        __asm volatile
 8005862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005866:	f383 8811 	msr	BASEPRI, r3
 800586a:	f3bf 8f6f 	isb	sy
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8005874:	bf00      	nop
 8005876:	bf00      	nop
 8005878:	e7fd      	b.n	8005876 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d103      	bne.n	8005888 <xQueueReceiveFromISR+0x3c>
 8005880:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <xQueueReceiveFromISR+0x40>
 8005888:	2301      	movs	r3, #1
 800588a:	e000      	b.n	800588e <xQueueReceiveFromISR+0x42>
 800588c:	2300      	movs	r3, #0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10b      	bne.n	80058aa <xQueueReceiveFromISR+0x5e>
        __asm volatile
 8005892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80058a4:	bf00      	nop
 80058a6:	bf00      	nop
 80058a8:	e7fd      	b.n	80058a6 <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058aa:	f002 f867 	bl	800797c <vPortValidateInterruptPriority>
        __asm volatile
 80058ae:	f3ef 8211 	mrs	r2, BASEPRI
 80058b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b6:	f383 8811 	msr	BASEPRI, r3
 80058ba:	f3bf 8f6f 	isb	sy
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	623a      	str	r2, [r7, #32]
 80058c4:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 80058c6:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058c8:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058ce:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d03f      	beq.n	8005956 <xQueueReceiveFromISR+0x10a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 80058d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 80058e0:	68b9      	ldr	r1, [r7, #8]
 80058e2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80058e4:	f000 f8cd 	bl	8005a82 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80058e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058ea:	1e5a      	subs	r2, r3, #1
 80058ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ee:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 80058f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 80058f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f8:	d112      	bne.n	8005920 <xQueueReceiveFromISR+0xd4>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058fc:	691b      	ldr	r3, [r3, #16]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d026      	beq.n	8005950 <xQueueReceiveFromISR+0x104>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005904:	3310      	adds	r3, #16
 8005906:	4618      	mov	r0, r3
 8005908:	f000 fd62 	bl	80063d0 <xTaskRemoveFromEventList>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	d01e      	beq.n	8005950 <xQueueReceiveFromISR+0x104>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d01b      	beq.n	8005950 <xQueueReceiveFromISR+0x104>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	601a      	str	r2, [r3, #0]
 800591e:	e017      	b.n	8005950 <xQueueReceiveFromISR+0x104>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8005920:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8005924:	2b7f      	cmp	r3, #127	@ 0x7f
 8005926:	d10b      	bne.n	8005940 <xQueueReceiveFromISR+0xf4>
        __asm volatile
 8005928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800592c:	f383 8811 	msr	BASEPRI, r3
 8005930:	f3bf 8f6f 	isb	sy
 8005934:	f3bf 8f4f 	dsb	sy
 8005938:	61bb      	str	r3, [r7, #24]
    }
 800593a:	bf00      	nop
 800593c:	bf00      	nop
 800593e:	e7fd      	b.n	800593c <xQueueReceiveFromISR+0xf0>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005940:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005944:	3301      	adds	r3, #1
 8005946:	b2db      	uxtb	r3, r3
 8005948:	b25a      	sxtb	r2, r3
 800594a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800594c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 8005950:	2301      	movs	r3, #1
 8005952:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005954:	e001      	b.n	800595a <xQueueReceiveFromISR+0x10e>
        }
        else
        {
            xReturn = pdFAIL;
 8005956:	2300      	movs	r3, #0
 8005958:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800595a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800595c:	617b      	str	r3, [r7, #20]
        __asm volatile
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f383 8811 	msr	BASEPRI, r3
    }
 8005964:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8005966:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005968:	4618      	mov	r0, r3
 800596a:	3740      	adds	r7, #64	@ 0x40
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10b      	bne.n	8005996 <uxQueueMessagesWaiting+0x26>
        __asm volatile
 800597e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005982:	f383 8811 	msr	BASEPRI, r3
 8005986:	f3bf 8f6f 	isb	sy
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	60bb      	str	r3, [r7, #8]
    }
 8005990:	bf00      	nop
 8005992:	bf00      	nop
 8005994:	e7fd      	b.n	8005992 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8005996:	f001 ff09 	bl	80077ac <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800599e:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 80059a0:	f001 ff36 	bl	8007810 <vPortExitCritical>

    return uxReturn;
 80059a4:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b086      	sub	sp, #24
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	60f8      	str	r0, [r7, #12]
 80059b6:	60b9      	str	r1, [r7, #8]
 80059b8:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80059ba:	2300      	movs	r3, #0
 80059bc:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c2:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d10d      	bne.n	80059e8 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d14d      	bne.n	8005a70 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	4618      	mov	r0, r3
 80059da:	f000 feb1 	bl	8006740 <xTaskPriorityDisinherit>
 80059de:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	609a      	str	r2, [r3, #8]
 80059e6:	e043      	b.n	8005a70 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d119      	bne.n	8005a22 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6858      	ldr	r0, [r3, #4]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f6:	461a      	mov	r2, r3
 80059f8:	68b9      	ldr	r1, [r7, #8]
 80059fa:	f002 fa53 	bl	8007ea4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	685a      	ldr	r2, [r3, #4]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a06:	441a      	add	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d32b      	bcc.n	8005a70 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681a      	ldr	r2, [r3, #0]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	605a      	str	r2, [r3, #4]
 8005a20:	e026      	b.n	8005a70 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	68d8      	ldr	r0, [r3, #12]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	68b9      	ldr	r1, [r7, #8]
 8005a2e:	f002 fa39 	bl	8007ea4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	68da      	ldr	r2, [r3, #12]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a3a:	425b      	negs	r3, r3
 8005a3c:	441a      	add	r2, r3
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	68da      	ldr	r2, [r3, #12]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d207      	bcs.n	8005a5e <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	689a      	ldr	r2, [r3, #8]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a56:	425b      	negs	r3, r3
 8005a58:	441a      	add	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d105      	bne.n	8005a70 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	1c5a      	adds	r2, r3, #1
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8005a78:	697b      	ldr	r3, [r7, #20]
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3718      	adds	r7, #24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}

08005a82 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b082      	sub	sp, #8
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d018      	beq.n	8005ac6 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	68da      	ldr	r2, [r3, #12]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9c:	441a      	add	r2, r3
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68da      	ldr	r2, [r3, #12]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d303      	bcc.n	8005ab6 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68d9      	ldr	r1, [r3, #12]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005abe:	461a      	mov	r2, r3
 8005ac0:	6838      	ldr	r0, [r7, #0]
 8005ac2:	f002 f9ef 	bl	8007ea4 <memcpy>
    }
}
 8005ac6:	bf00      	nop
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b084      	sub	sp, #16
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8005ad6:	f001 fe69 	bl	80077ac <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ae0:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ae2:	e011      	b.n	8005b08 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d012      	beq.n	8005b12 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3324      	adds	r3, #36	@ 0x24
 8005af0:	4618      	mov	r0, r3
 8005af2:	f000 fc6d 	bl	80063d0 <xTaskRemoveFromEventList>
 8005af6:	4603      	mov	r3, r0
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d001      	beq.n	8005b00 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8005afc:	f000 fd4a 	bl	8006594 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8005b00:	7bfb      	ldrb	r3, [r7, #15]
 8005b02:	3b01      	subs	r3, #1
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	dce9      	bgt.n	8005ae4 <prvUnlockQueue+0x16>
 8005b10:	e000      	b.n	8005b14 <prvUnlockQueue+0x46>
                        break;
 8005b12:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	22ff      	movs	r2, #255	@ 0xff
 8005b18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8005b1c:	f001 fe78 	bl	8007810 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8005b20:	f001 fe44 	bl	80077ac <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b2a:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b2c:	e011      	b.n	8005b52 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	691b      	ldr	r3, [r3, #16]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d012      	beq.n	8005b5c <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	3310      	adds	r3, #16
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f000 fc48 	bl	80063d0 <xTaskRemoveFromEventList>
 8005b40:	4603      	mov	r3, r0
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d001      	beq.n	8005b4a <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8005b46:	f000 fd25 	bl	8006594 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8005b4a:	7bbb      	ldrb	r3, [r7, #14]
 8005b4c:	3b01      	subs	r3, #1
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b52:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	dce9      	bgt.n	8005b2e <prvUnlockQueue+0x60>
 8005b5a:	e000      	b.n	8005b5e <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8005b5c:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	22ff      	movs	r2, #255	@ 0xff
 8005b62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8005b66:	f001 fe53 	bl	8007810 <vPortExitCritical>
}
 8005b6a:	bf00      	nop
 8005b6c:	3710      	adds	r7, #16
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}

08005b72 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005b72:	b580      	push	{r7, lr}
 8005b74:	b084      	sub	sp, #16
 8005b76:	af00      	add	r7, sp, #0
 8005b78:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005b7a:	f001 fe17 	bl	80077ac <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d102      	bne.n	8005b8c <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005b86:	2301      	movs	r3, #1
 8005b88:	60fb      	str	r3, [r7, #12]
 8005b8a:	e001      	b.n	8005b90 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005b90:	f001 fe3e 	bl	8007810 <vPortExitCritical>

    return xReturn;
 8005b94:	68fb      	ldr	r3, [r7, #12]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b084      	sub	sp, #16
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005ba6:	f001 fe01 	bl	80077ac <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d102      	bne.n	8005bbc <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	60fb      	str	r3, [r7, #12]
 8005bba:	e001      	b.n	8005bc0 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005bc0:	f001 fe26 	bl	8007810 <vPortExitCritical>

    return xReturn;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}

08005bce <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b087      	sub	sp, #28
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10b      	bne.n	8005bf8 <xQueueIsQueueFullFromISR+0x2a>
        __asm volatile
 8005be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	60fb      	str	r3, [r7, #12]
    }
 8005bf2:	bf00      	nop
 8005bf4:	bf00      	nop
 8005bf6:	e7fd      	b.n	8005bf4 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d102      	bne.n	8005c0a <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 8005c04:	2301      	movs	r3, #1
 8005c06:	617b      	str	r3, [r7, #20]
 8005c08:	e001      	b.n	8005c0e <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005c0e:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005c10:	4618      	mov	r0, r3
 8005c12:	371c      	adds	r7, #28
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8005c1c:	b480      	push	{r7}
 8005c1e:	b085      	sub	sp, #20
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c26:	2300      	movs	r3, #0
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	e014      	b.n	8005c56 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005c2c:	4a0f      	ldr	r2, [pc, #60]	@ (8005c6c <vQueueAddToRegistry+0x50>)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10b      	bne.n	8005c50 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005c38:	490c      	ldr	r1, [pc, #48]	@ (8005c6c <vQueueAddToRegistry+0x50>)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	683a      	ldr	r2, [r7, #0]
 8005c3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8005c42:	4a0a      	ldr	r2, [pc, #40]	@ (8005c6c <vQueueAddToRegistry+0x50>)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	00db      	lsls	r3, r3, #3
 8005c48:	4413      	add	r3, r2
 8005c4a:	687a      	ldr	r2, [r7, #4]
 8005c4c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8005c4e:	e006      	b.n	8005c5e <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	3301      	adds	r3, #1
 8005c54:	60fb      	str	r3, [r7, #12]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2b07      	cmp	r3, #7
 8005c5a:	d9e7      	bls.n	8005c2c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8005c5c:	bf00      	nop
 8005c5e:	bf00      	nop
 8005c60:	3714      	adds	r7, #20
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr
 8005c6a:	bf00      	nop
 8005c6c:	200001dc 	.word	0x200001dc

08005c70 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005c80:	f001 fd94 	bl	80077ac <vPortEnterCritical>
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c8a:	b25b      	sxtb	r3, r3
 8005c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c90:	d103      	bne.n	8005c9a <vQueueWaitForMessageRestricted+0x2a>
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ca0:	b25b      	sxtb	r3, r3
 8005ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ca6:	d103      	bne.n	8005cb0 <vQueueWaitForMessageRestricted+0x40>
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cb0:	f001 fdae 	bl	8007810 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d106      	bne.n	8005cca <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	3324      	adds	r3, #36	@ 0x24
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	68b9      	ldr	r1, [r7, #8]
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 fb57 	bl	8006378 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8005cca:	6978      	ldr	r0, [r7, #20]
 8005ccc:	f7ff feff 	bl	8005ace <prvUnlockQueue>
    }
 8005cd0:	bf00      	nop
 8005cd2:	3718      	adds	r7, #24
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b08c      	sub	sp, #48	@ 0x30
 8005cdc:	af04      	add	r7, sp, #16
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	603b      	str	r3, [r7, #0]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ce8:	88fb      	ldrh	r3, [r7, #6]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4618      	mov	r0, r3
 8005cee:	f001 fe87 	bl	8007a00 <pvPortMalloc>
 8005cf2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d00e      	beq.n	8005d18 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005cfa:	2058      	movs	r0, #88	@ 0x58
 8005cfc:	f001 fe80 	bl	8007a00 <pvPortMalloc>
 8005d00:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8005d02:	69fb      	ldr	r3, [r7, #28]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d003      	beq.n	8005d10 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	697a      	ldr	r2, [r7, #20]
 8005d0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d0e:	e005      	b.n	8005d1c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8005d10:	6978      	ldr	r0, [r7, #20]
 8005d12:	f001 ff57 	bl	8007bc4 <vPortFree>
 8005d16:	e001      	b.n	8005d1c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8005d18:	2300      	movs	r3, #0
 8005d1a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d013      	beq.n	8005d4a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d22:	88fa      	ldrh	r2, [r7, #6]
 8005d24:	2300      	movs	r3, #0
 8005d26:	9303      	str	r3, [sp, #12]
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	9302      	str	r3, [sp, #8]
 8005d2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d2e:	9301      	str	r3, [sp, #4]
 8005d30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d32:	9300      	str	r3, [sp, #0]
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	68b9      	ldr	r1, [r7, #8]
 8005d38:	68f8      	ldr	r0, [r7, #12]
 8005d3a:	f000 f80e 	bl	8005d5a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8005d3e:	69f8      	ldr	r0, [r7, #28]
 8005d40:	f000 f8a2 	bl	8005e88 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8005d44:	2301      	movs	r3, #1
 8005d46:	61bb      	str	r3, [r7, #24]
 8005d48:	e002      	b.n	8005d50 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8005d4e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005d50:	69bb      	ldr	r3, [r7, #24]
    }
 8005d52:	4618      	mov	r0, r3
 8005d54:	3720      	adds	r7, #32
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b088      	sub	sp, #32
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	60f8      	str	r0, [r7, #12]
 8005d62:	60b9      	str	r1, [r7, #8]
 8005d64:	607a      	str	r2, [r7, #4]
 8005d66:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d6a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	461a      	mov	r2, r3
 8005d72:	21a5      	movs	r1, #165	@ 0xa5
 8005d74:	f002 f868 	bl	8007e48 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d7a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005d82:	3b01      	subs	r3, #1
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	4413      	add	r3, r2
 8005d88:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	f023 0307 	bic.w	r3, r3, #7
 8005d90:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d92:	69bb      	ldr	r3, [r7, #24]
 8005d94:	f003 0307 	and.w	r3, r3, #7
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d00b      	beq.n	8005db4 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8005d9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da0:	f383 8811 	msr	BASEPRI, r3
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	617b      	str	r3, [r7, #20]
    }
 8005dae:	bf00      	nop
 8005db0:	bf00      	nop
 8005db2:	e7fd      	b.n	8005db0 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d01f      	beq.n	8005dfa <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005dba:	2300      	movs	r3, #0
 8005dbc:	61fb      	str	r3, [r7, #28]
 8005dbe:	e012      	b.n	8005de6 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	69fb      	ldr	r3, [r7, #28]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	7819      	ldrb	r1, [r3, #0]
 8005dc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	4413      	add	r3, r2
 8005dce:	3334      	adds	r3, #52	@ 0x34
 8005dd0:	460a      	mov	r2, r1
 8005dd2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	4413      	add	r3, r2
 8005dda:	781b      	ldrb	r3, [r3, #0]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d006      	beq.n	8005dee <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005de0:	69fb      	ldr	r3, [r7, #28]
 8005de2:	3301      	adds	r3, #1
 8005de4:	61fb      	str	r3, [r7, #28]
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	2b09      	cmp	r3, #9
 8005dea:	d9e9      	bls.n	8005dc0 <prvInitialiseNewTask+0x66>
 8005dec:	e000      	b.n	8005df0 <prvInitialiseNewTask+0x96>
            {
                break;
 8005dee:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005df0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005df8:	e003      	b.n	8005e02 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e04:	2b04      	cmp	r3, #4
 8005e06:	d901      	bls.n	8005e0c <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e08:	2304      	movs	r3, #4
 8005e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e10:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8005e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e16:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8005e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e20:	3304      	adds	r3, #4
 8005e22:	4618      	mov	r0, r3
 8005e24:	f7ff f92c 	bl	8005080 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2a:	3318      	adds	r3, #24
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f7ff f927 	bl	8005080 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e36:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e3a:	f1c3 0205 	rsb	r2, r3, #5
 8005e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e40:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e46:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8005e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4a:	3350      	adds	r3, #80	@ 0x50
 8005e4c:	2204      	movs	r2, #4
 8005e4e:	2100      	movs	r1, #0
 8005e50:	4618      	mov	r0, r3
 8005e52:	f001 fff9 	bl	8007e48 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8005e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e58:	3354      	adds	r3, #84	@ 0x54
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f001 fff2 	bl	8007e48 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e64:	683a      	ldr	r2, [r7, #0]
 8005e66:	68f9      	ldr	r1, [r7, #12]
 8005e68:	69b8      	ldr	r0, [r7, #24]
 8005e6a:	f001 fb6f 	bl	800754c <pxPortInitialiseStack>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e72:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d002      	beq.n	8005e80 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e7e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005e80:	bf00      	nop
 8005e82:	3720      	adds	r7, #32
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}

08005e88 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005e90:	f001 fc8c 	bl	80077ac <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005e94:	4b26      	ldr	r3, [pc, #152]	@ (8005f30 <prvAddNewTaskToReadyList+0xa8>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	4a25      	ldr	r2, [pc, #148]	@ (8005f30 <prvAddNewTaskToReadyList+0xa8>)
 8005e9c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8005e9e:	4b25      	ldr	r3, [pc, #148]	@ (8005f34 <prvAddNewTaskToReadyList+0xac>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d109      	bne.n	8005eba <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8005ea6:	4a23      	ldr	r2, [pc, #140]	@ (8005f34 <prvAddNewTaskToReadyList+0xac>)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005eac:	4b20      	ldr	r3, [pc, #128]	@ (8005f30 <prvAddNewTaskToReadyList+0xa8>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d110      	bne.n	8005ed6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005eb4:	f000 fb8c 	bl	80065d0 <prvInitialiseTaskLists>
 8005eb8:	e00d      	b.n	8005ed6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8005eba:	4b1f      	ldr	r3, [pc, #124]	@ (8005f38 <prvAddNewTaskToReadyList+0xb0>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d109      	bne.n	8005ed6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ec2:	4b1c      	ldr	r3, [pc, #112]	@ (8005f34 <prvAddNewTaskToReadyList+0xac>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d802      	bhi.n	8005ed6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005ed0:	4a18      	ldr	r2, [pc, #96]	@ (8005f34 <prvAddNewTaskToReadyList+0xac>)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005ed6:	4b19      	ldr	r3, [pc, #100]	@ (8005f3c <prvAddNewTaskToReadyList+0xb4>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	3301      	adds	r3, #1
 8005edc:	4a17      	ldr	r2, [pc, #92]	@ (8005f3c <prvAddNewTaskToReadyList+0xb4>)
 8005ede:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005ee0:	4b16      	ldr	r3, [pc, #88]	@ (8005f3c <prvAddNewTaskToReadyList+0xb4>)
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eec:	2201      	movs	r2, #1
 8005eee:	409a      	lsls	r2, r3
 8005ef0:	4b13      	ldr	r3, [pc, #76]	@ (8005f40 <prvAddNewTaskToReadyList+0xb8>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	4a12      	ldr	r2, [pc, #72]	@ (8005f40 <prvAddNewTaskToReadyList+0xb8>)
 8005ef8:	6013      	str	r3, [r2, #0]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005efe:	4613      	mov	r3, r2
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4413      	add	r3, r2
 8005f04:	009b      	lsls	r3, r3, #2
 8005f06:	4a0f      	ldr	r2, [pc, #60]	@ (8005f44 <prvAddNewTaskToReadyList+0xbc>)
 8005f08:	441a      	add	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	3304      	adds	r3, #4
 8005f0e:	4619      	mov	r1, r3
 8005f10:	4610      	mov	r0, r2
 8005f12:	f7ff f8c2 	bl	800509a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8005f16:	f001 fc7b 	bl	8007810 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8005f1a:	4b07      	ldr	r3, [pc, #28]	@ (8005f38 <prvAddNewTaskToReadyList+0xb0>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <prvAddNewTaskToReadyList+0x9e>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f22:	4b04      	ldr	r3, [pc, #16]	@ (8005f34 <prvAddNewTaskToReadyList+0xac>)
 8005f24:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005f26:	bf00      	nop
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	200002f4 	.word	0x200002f4
 8005f34:	2000021c 	.word	0x2000021c
 8005f38:	20000300 	.word	0x20000300
 8005f3c:	20000310 	.word	0x20000310
 8005f40:	200002fc 	.word	0x200002fc
 8005f44:	20000220 	.word	0x20000220

08005f48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b086      	sub	sp, #24
 8005f4c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8005f4e:	4b20      	ldr	r3, [pc, #128]	@ (8005fd0 <vTaskStartScheduler+0x88>)
 8005f50:	9301      	str	r3, [sp, #4]
 8005f52:	2300      	movs	r3, #0
 8005f54:	9300      	str	r3, [sp, #0]
 8005f56:	2300      	movs	r3, #0
 8005f58:	2282      	movs	r2, #130	@ 0x82
 8005f5a:	491e      	ldr	r1, [pc, #120]	@ (8005fd4 <vTaskStartScheduler+0x8c>)
 8005f5c:	481e      	ldr	r0, [pc, #120]	@ (8005fd8 <vTaskStartScheduler+0x90>)
 8005f5e:	f7ff febb 	bl	8005cd8 <xTaskCreate>
 8005f62:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d102      	bne.n	8005f70 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8005f6a:	f000 ff27 	bl	8006dbc <xTimerCreateTimerTask>
 8005f6e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d116      	bne.n	8005fa4 <vTaskStartScheduler+0x5c>
        __asm volatile
 8005f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	60bb      	str	r3, [r7, #8]
    }
 8005f88:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8005f8a:	4b14      	ldr	r3, [pc, #80]	@ (8005fdc <vTaskStartScheduler+0x94>)
 8005f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f90:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005f92:	4b13      	ldr	r3, [pc, #76]	@ (8005fe0 <vTaskStartScheduler+0x98>)
 8005f94:	2201      	movs	r2, #1
 8005f96:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f98:	4b12      	ldr	r3, [pc, #72]	@ (8005fe4 <vTaskStartScheduler+0x9c>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8005f9e:	f001 fb61 	bl	8007664 <xPortStartScheduler>
 8005fa2:	e00f      	b.n	8005fc4 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005faa:	d10b      	bne.n	8005fc4 <vTaskStartScheduler+0x7c>
        __asm volatile
 8005fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb0:	f383 8811 	msr	BASEPRI, r3
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	607b      	str	r3, [r7, #4]
    }
 8005fbe:	bf00      	nop
 8005fc0:	bf00      	nop
 8005fc2:	e7fd      	b.n	8005fc0 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005fc4:	4b08      	ldr	r3, [pc, #32]	@ (8005fe8 <vTaskStartScheduler+0xa0>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
}
 8005fc8:	bf00      	nop
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}
 8005fd0:	20000318 	.word	0x20000318
 8005fd4:	08008b84 	.word	0x08008b84
 8005fd8:	080065ad 	.word	0x080065ad
 8005fdc:	20000314 	.word	0x20000314
 8005fe0:	20000300 	.word	0x20000300
 8005fe4:	200002f8 	.word	0x200002f8
 8005fe8:	08008bb4 	.word	0x08008bb4

08005fec <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005fec:	b480      	push	{r7}
 8005fee:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8005ff0:	4b04      	ldr	r3, [pc, #16]	@ (8006004 <vTaskSuspendAll+0x18>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	4a03      	ldr	r2, [pc, #12]	@ (8006004 <vTaskSuspendAll+0x18>)
 8005ff8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8005ffa:	bf00      	nop
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr
 8006004:	2000031c 	.word	0x2000031c

08006008 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800600e:	2300      	movs	r3, #0
 8006010:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8006012:	2300      	movs	r3, #0
 8006014:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8006016:	4b3c      	ldr	r3, [pc, #240]	@ (8006108 <xTaskResumeAll+0x100>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10b      	bne.n	8006036 <xTaskResumeAll+0x2e>
        __asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	603b      	str	r3, [r7, #0]
    }
 8006030:	bf00      	nop
 8006032:	bf00      	nop
 8006034:	e7fd      	b.n	8006032 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8006036:	f001 fbb9 	bl	80077ac <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800603a:	4b33      	ldr	r3, [pc, #204]	@ (8006108 <xTaskResumeAll+0x100>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	3b01      	subs	r3, #1
 8006040:	4a31      	ldr	r2, [pc, #196]	@ (8006108 <xTaskResumeAll+0x100>)
 8006042:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006044:	4b30      	ldr	r3, [pc, #192]	@ (8006108 <xTaskResumeAll+0x100>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d155      	bne.n	80060f8 <xTaskResumeAll+0xf0>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800604c:	4b2f      	ldr	r3, [pc, #188]	@ (800610c <xTaskResumeAll+0x104>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d051      	beq.n	80060f8 <xTaskResumeAll+0xf0>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006054:	e02e      	b.n	80060b4 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006056:	4b2e      	ldr	r3, [pc, #184]	@ (8006110 <xTaskResumeAll+0x108>)
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	68db      	ldr	r3, [r3, #12]
 800605c:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	3318      	adds	r3, #24
 8006062:	4618      	mov	r0, r3
 8006064:	f7ff f876 	bl	8005154 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	3304      	adds	r3, #4
 800606c:	4618      	mov	r0, r3
 800606e:	f7ff f871 	bl	8005154 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006076:	2201      	movs	r2, #1
 8006078:	409a      	lsls	r2, r3
 800607a:	4b26      	ldr	r3, [pc, #152]	@ (8006114 <xTaskResumeAll+0x10c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4313      	orrs	r3, r2
 8006080:	4a24      	ldr	r2, [pc, #144]	@ (8006114 <xTaskResumeAll+0x10c>)
 8006082:	6013      	str	r3, [r2, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006088:	4613      	mov	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4413      	add	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4a21      	ldr	r2, [pc, #132]	@ (8006118 <xTaskResumeAll+0x110>)
 8006092:	441a      	add	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	3304      	adds	r3, #4
 8006098:	4619      	mov	r1, r3
 800609a:	4610      	mov	r0, r2
 800609c:	f7fe fffd 	bl	800509a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060a4:	4b1d      	ldr	r3, [pc, #116]	@ (800611c <xTaskResumeAll+0x114>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d302      	bcc.n	80060b4 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 80060ae:	4b1c      	ldr	r3, [pc, #112]	@ (8006120 <xTaskResumeAll+0x118>)
 80060b0:	2201      	movs	r2, #1
 80060b2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80060b4:	4b16      	ldr	r3, [pc, #88]	@ (8006110 <xTaskResumeAll+0x108>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1cc      	bne.n	8006056 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80060c2:	f000 fb03 	bl	80066cc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80060c6:	4b17      	ldr	r3, [pc, #92]	@ (8006124 <xTaskResumeAll+0x11c>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d010      	beq.n	80060f4 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80060d2:	f000 f839 	bl	8006148 <xTaskIncrementTick>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 80060dc:	4b10      	ldr	r3, [pc, #64]	@ (8006120 <xTaskResumeAll+0x118>)
 80060de:	2201      	movs	r2, #1
 80060e0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	3b01      	subs	r3, #1
 80060e6:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1f1      	bne.n	80060d2 <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 80060ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006124 <xTaskResumeAll+0x11c>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80060f4:	4b0a      	ldr	r3, [pc, #40]	@ (8006120 <xTaskResumeAll+0x118>)
 80060f6:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80060f8:	f001 fb8a 	bl	8007810 <vPortExitCritical>

    return xAlreadyYielded;
 80060fc:	687b      	ldr	r3, [r7, #4]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	2000031c 	.word	0x2000031c
 800610c:	200002f4 	.word	0x200002f4
 8006110:	200002b4 	.word	0x200002b4
 8006114:	200002fc 	.word	0x200002fc
 8006118:	20000220 	.word	0x20000220
 800611c:	2000021c 	.word	0x2000021c
 8006120:	20000308 	.word	0x20000308
 8006124:	20000304 	.word	0x20000304

08006128 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800612e:	4b05      	ldr	r3, [pc, #20]	@ (8006144 <xTaskGetTickCount+0x1c>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8006134:	687b      	ldr	r3, [r7, #4]
}
 8006136:	4618      	mov	r0, r3
 8006138:	370c      	adds	r7, #12
 800613a:	46bd      	mov	sp, r7
 800613c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006140:	4770      	bx	lr
 8006142:	bf00      	nop
 8006144:	200002f8 	.word	0x200002f8

08006148 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800614e:	2300      	movs	r3, #0
 8006150:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006152:	4b3f      	ldr	r3, [pc, #252]	@ (8006250 <xTaskIncrementTick+0x108>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d170      	bne.n	800623c <xTaskIncrementTick+0xf4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800615a:	4b3e      	ldr	r3, [pc, #248]	@ (8006254 <xTaskIncrementTick+0x10c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	3301      	adds	r3, #1
 8006160:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8006162:	4a3c      	ldr	r2, [pc, #240]	@ (8006254 <xTaskIncrementTick+0x10c>)
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d121      	bne.n	80061b2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800616e:	4b3a      	ldr	r3, [pc, #232]	@ (8006258 <xTaskIncrementTick+0x110>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d00b      	beq.n	8006190 <xTaskIncrementTick+0x48>
        __asm volatile
 8006178:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	603b      	str	r3, [r7, #0]
    }
 800618a:	bf00      	nop
 800618c:	bf00      	nop
 800618e:	e7fd      	b.n	800618c <xTaskIncrementTick+0x44>
 8006190:	4b31      	ldr	r3, [pc, #196]	@ (8006258 <xTaskIncrementTick+0x110>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	60fb      	str	r3, [r7, #12]
 8006196:	4b31      	ldr	r3, [pc, #196]	@ (800625c <xTaskIncrementTick+0x114>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a2f      	ldr	r2, [pc, #188]	@ (8006258 <xTaskIncrementTick+0x110>)
 800619c:	6013      	str	r3, [r2, #0]
 800619e:	4a2f      	ldr	r2, [pc, #188]	@ (800625c <xTaskIncrementTick+0x114>)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	6013      	str	r3, [r2, #0]
 80061a4:	4b2e      	ldr	r3, [pc, #184]	@ (8006260 <xTaskIncrementTick+0x118>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	3301      	adds	r3, #1
 80061aa:	4a2d      	ldr	r2, [pc, #180]	@ (8006260 <xTaskIncrementTick+0x118>)
 80061ac:	6013      	str	r3, [r2, #0]
 80061ae:	f000 fa8d 	bl	80066cc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80061b2:	4b2c      	ldr	r3, [pc, #176]	@ (8006264 <xTaskIncrementTick+0x11c>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d344      	bcc.n	8006246 <xTaskIncrementTick+0xfe>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061bc:	4b26      	ldr	r3, [pc, #152]	@ (8006258 <xTaskIncrementTick+0x110>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d104      	bne.n	80061d0 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061c6:	4b27      	ldr	r3, [pc, #156]	@ (8006264 <xTaskIncrementTick+0x11c>)
 80061c8:	f04f 32ff 	mov.w	r2, #4294967295
 80061cc:	601a      	str	r2, [r3, #0]
                    break;
 80061ce:	e03a      	b.n	8006246 <xTaskIncrementTick+0xfe>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061d0:	4b21      	ldr	r3, [pc, #132]	@ (8006258 <xTaskIncrementTick+0x110>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80061e0:	693a      	ldr	r2, [r7, #16]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d203      	bcs.n	80061f0 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80061e8:	4a1e      	ldr	r2, [pc, #120]	@ (8006264 <xTaskIncrementTick+0x11c>)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80061ee:	e02a      	b.n	8006246 <xTaskIncrementTick+0xfe>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	3304      	adds	r3, #4
 80061f4:	4618      	mov	r0, r3
 80061f6:	f7fe ffad 	bl	8005154 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d004      	beq.n	800620c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	3318      	adds	r3, #24
 8006206:	4618      	mov	r0, r3
 8006208:	f7fe ffa4 	bl	8005154 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006210:	2201      	movs	r2, #1
 8006212:	409a      	lsls	r2, r3
 8006214:	4b14      	ldr	r3, [pc, #80]	@ (8006268 <xTaskIncrementTick+0x120>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4313      	orrs	r3, r2
 800621a:	4a13      	ldr	r2, [pc, #76]	@ (8006268 <xTaskIncrementTick+0x120>)
 800621c:	6013      	str	r3, [r2, #0]
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006222:	4613      	mov	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	4413      	add	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4a10      	ldr	r2, [pc, #64]	@ (800626c <xTaskIncrementTick+0x124>)
 800622c:	441a      	add	r2, r3
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	3304      	adds	r3, #4
 8006232:	4619      	mov	r1, r3
 8006234:	4610      	mov	r0, r2
 8006236:	f7fe ff30 	bl	800509a <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800623a:	e7bf      	b.n	80061bc <xTaskIncrementTick+0x74>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800623c:	4b0c      	ldr	r3, [pc, #48]	@ (8006270 <xTaskIncrementTick+0x128>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	3301      	adds	r3, #1
 8006242:	4a0b      	ldr	r2, [pc, #44]	@ (8006270 <xTaskIncrementTick+0x128>)
 8006244:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8006246:	697b      	ldr	r3, [r7, #20]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3718      	adds	r7, #24
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	2000031c 	.word	0x2000031c
 8006254:	200002f8 	.word	0x200002f8
 8006258:	200002ac 	.word	0x200002ac
 800625c:	200002b0 	.word	0x200002b0
 8006260:	2000030c 	.word	0x2000030c
 8006264:	20000314 	.word	0x20000314
 8006268:	200002fc 	.word	0x200002fc
 800626c:	20000220 	.word	0x20000220
 8006270:	20000304 	.word	0x20000304

08006274 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006274:	b480      	push	{r7}
 8006276:	b087      	sub	sp, #28
 8006278:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800627a:	4b27      	ldr	r3, [pc, #156]	@ (8006318 <vTaskSwitchContext+0xa4>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d003      	beq.n	800628a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8006282:	4b26      	ldr	r3, [pc, #152]	@ (800631c <vTaskSwitchContext+0xa8>)
 8006284:	2201      	movs	r2, #1
 8006286:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8006288:	e040      	b.n	800630c <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 800628a:	4b24      	ldr	r3, [pc, #144]	@ (800631c <vTaskSwitchContext+0xa8>)
 800628c:	2200      	movs	r2, #0
 800628e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006290:	4b23      	ldr	r3, [pc, #140]	@ (8006320 <vTaskSwitchContext+0xac>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	fab3 f383 	clz	r3, r3
 800629c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800629e:	7afb      	ldrb	r3, [r7, #11]
 80062a0:	f1c3 031f 	rsb	r3, r3, #31
 80062a4:	617b      	str	r3, [r7, #20]
 80062a6:	491f      	ldr	r1, [pc, #124]	@ (8006324 <vTaskSwitchContext+0xb0>)
 80062a8:	697a      	ldr	r2, [r7, #20]
 80062aa:	4613      	mov	r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4413      	add	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	440b      	add	r3, r1
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10b      	bne.n	80062d2 <vTaskSwitchContext+0x5e>
        __asm volatile
 80062ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062be:	f383 8811 	msr	BASEPRI, r3
 80062c2:	f3bf 8f6f 	isb	sy
 80062c6:	f3bf 8f4f 	dsb	sy
 80062ca:	607b      	str	r3, [r7, #4]
    }
 80062cc:	bf00      	nop
 80062ce:	bf00      	nop
 80062d0:	e7fd      	b.n	80062ce <vTaskSwitchContext+0x5a>
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	4613      	mov	r3, r2
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	4413      	add	r3, r2
 80062da:	009b      	lsls	r3, r3, #2
 80062dc:	4a11      	ldr	r2, [pc, #68]	@ (8006324 <vTaskSwitchContext+0xb0>)
 80062de:	4413      	add	r3, r2
 80062e0:	613b      	str	r3, [r7, #16]
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	685a      	ldr	r2, [r3, #4]
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	605a      	str	r2, [r3, #4]
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	685a      	ldr	r2, [r3, #4]
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	3308      	adds	r3, #8
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d104      	bne.n	8006302 <vTaskSwitchContext+0x8e>
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	685a      	ldr	r2, [r3, #4]
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	605a      	str	r2, [r3, #4]
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	4a07      	ldr	r2, [pc, #28]	@ (8006328 <vTaskSwitchContext+0xb4>)
 800630a:	6013      	str	r3, [r2, #0]
}
 800630c:	bf00      	nop
 800630e:	371c      	adds	r7, #28
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	2000031c 	.word	0x2000031c
 800631c:	20000308 	.word	0x20000308
 8006320:	200002fc 	.word	0x200002fc
 8006324:	20000220 	.word	0x20000220
 8006328:	2000021c 	.word	0x2000021c

0800632c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d10b      	bne.n	8006354 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 800633c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006340:	f383 8811 	msr	BASEPRI, r3
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	60fb      	str	r3, [r7, #12]
    }
 800634e:	bf00      	nop
 8006350:	bf00      	nop
 8006352:	e7fd      	b.n	8006350 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006354:	4b07      	ldr	r3, [pc, #28]	@ (8006374 <vTaskPlaceOnEventList+0x48>)
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	3318      	adds	r3, #24
 800635a:	4619      	mov	r1, r3
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f7fe fec0 	bl	80050e2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006362:	2101      	movs	r1, #1
 8006364:	6838      	ldr	r0, [r7, #0]
 8006366:	f000 fcc3 	bl	8006cf0 <prvAddCurrentTaskToDelayedList>
}
 800636a:	bf00      	nop
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	2000021c 	.word	0x2000021c

08006378 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10b      	bne.n	80063a2 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 800638a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800638e:	f383 8811 	msr	BASEPRI, r3
 8006392:	f3bf 8f6f 	isb	sy
 8006396:	f3bf 8f4f 	dsb	sy
 800639a:	617b      	str	r3, [r7, #20]
    }
 800639c:	bf00      	nop
 800639e:	bf00      	nop
 80063a0:	e7fd      	b.n	800639e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80063a2:	4b0a      	ldr	r3, [pc, #40]	@ (80063cc <vTaskPlaceOnEventListRestricted+0x54>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	3318      	adds	r3, #24
 80063a8:	4619      	mov	r1, r3
 80063aa:	68f8      	ldr	r0, [r7, #12]
 80063ac:	f7fe fe75 	bl	800509a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d002      	beq.n	80063bc <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 80063b6:	f04f 33ff 	mov.w	r3, #4294967295
 80063ba:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80063bc:	6879      	ldr	r1, [r7, #4]
 80063be:	68b8      	ldr	r0, [r7, #8]
 80063c0:	f000 fc96 	bl	8006cf0 <prvAddCurrentTaskToDelayedList>
    }
 80063c4:	bf00      	nop
 80063c6:	3718      	adds	r7, #24
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	2000021c 	.word	0x2000021c

080063d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d10b      	bne.n	80063fe <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 80063e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ea:	f383 8811 	msr	BASEPRI, r3
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	60fb      	str	r3, [r7, #12]
    }
 80063f8:	bf00      	nop
 80063fa:	bf00      	nop
 80063fc:	e7fd      	b.n	80063fa <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	3318      	adds	r3, #24
 8006402:	4618      	mov	r0, r3
 8006404:	f7fe fea6 	bl	8005154 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006408:	4b1d      	ldr	r3, [pc, #116]	@ (8006480 <xTaskRemoveFromEventList+0xb0>)
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d11c      	bne.n	800644a <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	3304      	adds	r3, #4
 8006414:	4618      	mov	r0, r3
 8006416:	f7fe fe9d 	bl	8005154 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800641e:	2201      	movs	r2, #1
 8006420:	409a      	lsls	r2, r3
 8006422:	4b18      	ldr	r3, [pc, #96]	@ (8006484 <xTaskRemoveFromEventList+0xb4>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4313      	orrs	r3, r2
 8006428:	4a16      	ldr	r2, [pc, #88]	@ (8006484 <xTaskRemoveFromEventList+0xb4>)
 800642a:	6013      	str	r3, [r2, #0]
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006430:	4613      	mov	r3, r2
 8006432:	009b      	lsls	r3, r3, #2
 8006434:	4413      	add	r3, r2
 8006436:	009b      	lsls	r3, r3, #2
 8006438:	4a13      	ldr	r2, [pc, #76]	@ (8006488 <xTaskRemoveFromEventList+0xb8>)
 800643a:	441a      	add	r2, r3
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	3304      	adds	r3, #4
 8006440:	4619      	mov	r1, r3
 8006442:	4610      	mov	r0, r2
 8006444:	f7fe fe29 	bl	800509a <vListInsertEnd>
 8006448:	e005      	b.n	8006456 <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	3318      	adds	r3, #24
 800644e:	4619      	mov	r1, r3
 8006450:	480e      	ldr	r0, [pc, #56]	@ (800648c <xTaskRemoveFromEventList+0xbc>)
 8006452:	f7fe fe22 	bl	800509a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800645a:	4b0d      	ldr	r3, [pc, #52]	@ (8006490 <xTaskRemoveFromEventList+0xc0>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006460:	429a      	cmp	r2, r3
 8006462:	d905      	bls.n	8006470 <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8006464:	2301      	movs	r3, #1
 8006466:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8006468:	4b0a      	ldr	r3, [pc, #40]	@ (8006494 <xTaskRemoveFromEventList+0xc4>)
 800646a:	2201      	movs	r2, #1
 800646c:	601a      	str	r2, [r3, #0]
 800646e:	e001      	b.n	8006474 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 8006470:	2300      	movs	r3, #0
 8006472:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8006474:	697b      	ldr	r3, [r7, #20]
}
 8006476:	4618      	mov	r0, r3
 8006478:	3718      	adds	r7, #24
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
 800647e:	bf00      	nop
 8006480:	2000031c 	.word	0x2000031c
 8006484:	200002fc 	.word	0x200002fc
 8006488:	20000220 	.word	0x20000220
 800648c:	200002b4 	.word	0x200002b4
 8006490:	2000021c 	.word	0x2000021c
 8006494:	20000308 	.word	0x20000308

08006498 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80064a0:	4b06      	ldr	r3, [pc, #24]	@ (80064bc <vTaskInternalSetTimeOutState+0x24>)
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80064a8:	4b05      	ldr	r3, [pc, #20]	@ (80064c0 <vTaskInternalSetTimeOutState+0x28>)
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	605a      	str	r2, [r3, #4]
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr
 80064bc:	2000030c 	.word	0x2000030c
 80064c0:	200002f8 	.word	0x200002f8

080064c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b088      	sub	sp, #32
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10b      	bne.n	80064ec <xTaskCheckForTimeOut+0x28>
        __asm volatile
 80064d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	613b      	str	r3, [r7, #16]
    }
 80064e6:	bf00      	nop
 80064e8:	bf00      	nop
 80064ea:	e7fd      	b.n	80064e8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d10b      	bne.n	800650a <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80064f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064f6:	f383 8811 	msr	BASEPRI, r3
 80064fa:	f3bf 8f6f 	isb	sy
 80064fe:	f3bf 8f4f 	dsb	sy
 8006502:	60fb      	str	r3, [r7, #12]
    }
 8006504:	bf00      	nop
 8006506:	bf00      	nop
 8006508:	e7fd      	b.n	8006506 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800650a:	f001 f94f 	bl	80077ac <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800650e:	4b1f      	ldr	r3, [pc, #124]	@ (800658c <xTaskCheckForTimeOut+0xc8>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	69ba      	ldr	r2, [r7, #24]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006526:	d102      	bne.n	800652e <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8006528:	2300      	movs	r3, #0
 800652a:	61fb      	str	r3, [r7, #28]
 800652c:	e026      	b.n	800657c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681a      	ldr	r2, [r3, #0]
 8006532:	4b17      	ldr	r3, [pc, #92]	@ (8006590 <xTaskCheckForTimeOut+0xcc>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	429a      	cmp	r2, r3
 8006538:	d00a      	beq.n	8006550 <xTaskCheckForTimeOut+0x8c>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	69ba      	ldr	r2, [r7, #24]
 8006540:	429a      	cmp	r2, r3
 8006542:	d305      	bcc.n	8006550 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8006544:	2301      	movs	r3, #1
 8006546:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	2200      	movs	r2, #0
 800654c:	601a      	str	r2, [r3, #0]
 800654e:	e015      	b.n	800657c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	429a      	cmp	r2, r3
 8006558:	d20b      	bcs.n	8006572 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	681a      	ldr	r2, [r3, #0]
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	1ad2      	subs	r2, r2, r3
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f7ff ff96 	bl	8006498 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800656c:	2300      	movs	r3, #0
 800656e:	61fb      	str	r3, [r7, #28]
 8006570:	e004      	b.n	800657c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2200      	movs	r2, #0
 8006576:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8006578:	2301      	movs	r3, #1
 800657a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800657c:	f001 f948 	bl	8007810 <vPortExitCritical>

    return xReturn;
 8006580:	69fb      	ldr	r3, [r7, #28]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3720      	adds	r7, #32
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
 800658a:	bf00      	nop
 800658c:	200002f8 	.word	0x200002f8
 8006590:	2000030c 	.word	0x2000030c

08006594 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006594:	b480      	push	{r7}
 8006596:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8006598:	4b03      	ldr	r3, [pc, #12]	@ (80065a8 <vTaskMissedYield+0x14>)
 800659a:	2201      	movs	r2, #1
 800659c:	601a      	str	r2, [r3, #0]
}
 800659e:	bf00      	nop
 80065a0:	46bd      	mov	sp, r7
 80065a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a6:	4770      	bx	lr
 80065a8:	20000308 	.word	0x20000308

080065ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80065b4:	f000 f84c 	bl	8006650 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 80065b8:	4b04      	ldr	r3, [pc, #16]	@ (80065cc <prvIdleTask+0x20>)
 80065ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065be:	601a      	str	r2, [r3, #0]
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80065c8:	bf00      	nop
 80065ca:	e7f3      	b.n	80065b4 <prvIdleTask+0x8>
 80065cc:	e000ed04 	.word	0xe000ed04

080065d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065d6:	2300      	movs	r3, #0
 80065d8:	607b      	str	r3, [r7, #4]
 80065da:	e00c      	b.n	80065f6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	4613      	mov	r3, r2
 80065e0:	009b      	lsls	r3, r3, #2
 80065e2:	4413      	add	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4a12      	ldr	r2, [pc, #72]	@ (8006630 <prvInitialiseTaskLists+0x60>)
 80065e8:	4413      	add	r3, r2
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fe fd28 	bl	8005040 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	3301      	adds	r3, #1
 80065f4:	607b      	str	r3, [r7, #4]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2b04      	cmp	r3, #4
 80065fa:	d9ef      	bls.n	80065dc <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80065fc:	480d      	ldr	r0, [pc, #52]	@ (8006634 <prvInitialiseTaskLists+0x64>)
 80065fe:	f7fe fd1f 	bl	8005040 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8006602:	480d      	ldr	r0, [pc, #52]	@ (8006638 <prvInitialiseTaskLists+0x68>)
 8006604:	f7fe fd1c 	bl	8005040 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8006608:	480c      	ldr	r0, [pc, #48]	@ (800663c <prvInitialiseTaskLists+0x6c>)
 800660a:	f7fe fd19 	bl	8005040 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800660e:	480c      	ldr	r0, [pc, #48]	@ (8006640 <prvInitialiseTaskLists+0x70>)
 8006610:	f7fe fd16 	bl	8005040 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8006614:	480b      	ldr	r0, [pc, #44]	@ (8006644 <prvInitialiseTaskLists+0x74>)
 8006616:	f7fe fd13 	bl	8005040 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800661a:	4b0b      	ldr	r3, [pc, #44]	@ (8006648 <prvInitialiseTaskLists+0x78>)
 800661c:	4a05      	ldr	r2, [pc, #20]	@ (8006634 <prvInitialiseTaskLists+0x64>)
 800661e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006620:	4b0a      	ldr	r3, [pc, #40]	@ (800664c <prvInitialiseTaskLists+0x7c>)
 8006622:	4a05      	ldr	r2, [pc, #20]	@ (8006638 <prvInitialiseTaskLists+0x68>)
 8006624:	601a      	str	r2, [r3, #0]
}
 8006626:	bf00      	nop
 8006628:	3708      	adds	r7, #8
 800662a:	46bd      	mov	sp, r7
 800662c:	bd80      	pop	{r7, pc}
 800662e:	bf00      	nop
 8006630:	20000220 	.word	0x20000220
 8006634:	20000284 	.word	0x20000284
 8006638:	20000298 	.word	0x20000298
 800663c:	200002b4 	.word	0x200002b4
 8006640:	200002c8 	.word	0x200002c8
 8006644:	200002e0 	.word	0x200002e0
 8006648:	200002ac 	.word	0x200002ac
 800664c:	200002b0 	.word	0x200002b0

08006650 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006656:	e019      	b.n	800668c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8006658:	f001 f8a8 	bl	80077ac <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800665c:	4b10      	ldr	r3, [pc, #64]	@ (80066a0 <prvCheckTasksWaitingTermination+0x50>)
 800665e:	68db      	ldr	r3, [r3, #12]
 8006660:	68db      	ldr	r3, [r3, #12]
 8006662:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	3304      	adds	r3, #4
 8006668:	4618      	mov	r0, r3
 800666a:	f7fe fd73 	bl	8005154 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800666e:	4b0d      	ldr	r3, [pc, #52]	@ (80066a4 <prvCheckTasksWaitingTermination+0x54>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	3b01      	subs	r3, #1
 8006674:	4a0b      	ldr	r2, [pc, #44]	@ (80066a4 <prvCheckTasksWaitingTermination+0x54>)
 8006676:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8006678:	4b0b      	ldr	r3, [pc, #44]	@ (80066a8 <prvCheckTasksWaitingTermination+0x58>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3b01      	subs	r3, #1
 800667e:	4a0a      	ldr	r2, [pc, #40]	@ (80066a8 <prvCheckTasksWaitingTermination+0x58>)
 8006680:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8006682:	f001 f8c5 	bl	8007810 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 f810 	bl	80066ac <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800668c:	4b06      	ldr	r3, [pc, #24]	@ (80066a8 <prvCheckTasksWaitingTermination+0x58>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1e1      	bne.n	8006658 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8006694:	bf00      	nop
 8006696:	bf00      	nop
 8006698:	3708      	adds	r7, #8
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	200002c8 	.word	0x200002c8
 80066a4:	200002f4 	.word	0x200002f4
 80066a8:	200002dc 	.word	0x200002dc

080066ac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066b8:	4618      	mov	r0, r3
 80066ba:	f001 fa83 	bl	8007bc4 <vPortFree>
                vPortFree( pxTCB );
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f001 fa80 	bl	8007bc4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80066c4:	bf00      	nop
 80066c6:	3708      	adds	r7, #8
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80066cc:	b480      	push	{r7}
 80066ce:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066d0:	4b0a      	ldr	r3, [pc, #40]	@ (80066fc <prvResetNextTaskUnblockTime+0x30>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d104      	bne.n	80066e4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80066da:	4b09      	ldr	r3, [pc, #36]	@ (8006700 <prvResetNextTaskUnblockTime+0x34>)
 80066dc:	f04f 32ff 	mov.w	r2, #4294967295
 80066e0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80066e2:	e005      	b.n	80066f0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80066e4:	4b05      	ldr	r3, [pc, #20]	@ (80066fc <prvResetNextTaskUnblockTime+0x30>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68db      	ldr	r3, [r3, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a04      	ldr	r2, [pc, #16]	@ (8006700 <prvResetNextTaskUnblockTime+0x34>)
 80066ee:	6013      	str	r3, [r2, #0]
}
 80066f0:	bf00      	nop
 80066f2:	46bd      	mov	sp, r7
 80066f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	200002ac 	.word	0x200002ac
 8006700:	20000314 	.word	0x20000314

08006704 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8006704:	b480      	push	{r7}
 8006706:	b083      	sub	sp, #12
 8006708:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800670a:	4b0b      	ldr	r3, [pc, #44]	@ (8006738 <xTaskGetSchedulerState+0x34>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d102      	bne.n	8006718 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8006712:	2301      	movs	r3, #1
 8006714:	607b      	str	r3, [r7, #4]
 8006716:	e008      	b.n	800672a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006718:	4b08      	ldr	r3, [pc, #32]	@ (800673c <xTaskGetSchedulerState+0x38>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d102      	bne.n	8006726 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8006720:	2302      	movs	r3, #2
 8006722:	607b      	str	r3, [r7, #4]
 8006724:	e001      	b.n	800672a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8006726:	2300      	movs	r3, #0
 8006728:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800672a:	687b      	ldr	r3, [r7, #4]
    }
 800672c:	4618      	mov	r0, r3
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr
 8006738:	20000300 	.word	0x20000300
 800673c:	2000031c 	.word	0x2000031c

08006740 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8006740:	b580      	push	{r7, lr}
 8006742:	b086      	sub	sp, #24
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 800674c:	2300      	movs	r3, #0
 800674e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d065      	beq.n	8006822 <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8006756:	4b35      	ldr	r3, [pc, #212]	@ (800682c <xTaskPriorityDisinherit+0xec>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	429a      	cmp	r2, r3
 800675e:	d00b      	beq.n	8006778 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8006760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	60fb      	str	r3, [r7, #12]
    }
 8006772:	bf00      	nop
 8006774:	bf00      	nop
 8006776:	e7fd      	b.n	8006774 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10b      	bne.n	8006798 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8006780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006784:	f383 8811 	msr	BASEPRI, r3
 8006788:	f3bf 8f6f 	isb	sy
 800678c:	f3bf 8f4f 	dsb	sy
 8006790:	60bb      	str	r3, [r7, #8]
    }
 8006792:	bf00      	nop
 8006794:	bf00      	nop
 8006796:	e7fd      	b.n	8006794 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800679c:	1e5a      	subs	r2, r3, #1
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d039      	beq.n	8006822 <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d135      	bne.n	8006822 <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	3304      	adds	r3, #4
 80067ba:	4618      	mov	r0, r3
 80067bc:	f7fe fcca 	bl	8005154 <uxListRemove>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10a      	bne.n	80067dc <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ca:	2201      	movs	r2, #1
 80067cc:	fa02 f303 	lsl.w	r3, r2, r3
 80067d0:	43da      	mvns	r2, r3
 80067d2:	4b17      	ldr	r3, [pc, #92]	@ (8006830 <xTaskPriorityDisinherit+0xf0>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4013      	ands	r3, r2
 80067d8:	4a15      	ldr	r2, [pc, #84]	@ (8006830 <xTaskPriorityDisinherit+0xf0>)
 80067da:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067e8:	f1c3 0205 	rsb	r2, r3, #5
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f4:	2201      	movs	r2, #1
 80067f6:	409a      	lsls	r2, r3
 80067f8:	4b0d      	ldr	r3, [pc, #52]	@ (8006830 <xTaskPriorityDisinherit+0xf0>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	4a0c      	ldr	r2, [pc, #48]	@ (8006830 <xTaskPriorityDisinherit+0xf0>)
 8006800:	6013      	str	r3, [r2, #0]
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006806:	4613      	mov	r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	4413      	add	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	4a09      	ldr	r2, [pc, #36]	@ (8006834 <xTaskPriorityDisinherit+0xf4>)
 8006810:	441a      	add	r2, r3
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	3304      	adds	r3, #4
 8006816:	4619      	mov	r1, r3
 8006818:	4610      	mov	r0, r2
 800681a:	f7fe fc3e 	bl	800509a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800681e:	2301      	movs	r3, #1
 8006820:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006822:	697b      	ldr	r3, [r7, #20]
    }
 8006824:	4618      	mov	r0, r3
 8006826:	3718      	adds	r7, #24
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	2000021c 	.word	0x2000021c
 8006830:	200002fc 	.word	0x200002fc
 8006834:	20000220 	.word	0x20000220

08006838 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8006838:	b580      	push	{r7, lr}
 800683a:	b086      	sub	sp, #24
 800683c:	af00      	add	r7, sp, #0
 800683e:	60f8      	str	r0, [r7, #12]
 8006840:	60b9      	str	r1, [r7, #8]
 8006842:	607a      	str	r2, [r7, #4]
 8006844:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00b      	beq.n	8006864 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 800684c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006850:	f383 8811 	msr	BASEPRI, r3
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	613b      	str	r3, [r7, #16]
    }
 800685e:	bf00      	nop
 8006860:	bf00      	nop
 8006862:	e7fd      	b.n	8006860 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8006864:	f000 ffa2 	bl	80077ac <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8006868:	4b31      	ldr	r3, [pc, #196]	@ (8006930 <xTaskGenericNotifyWait+0xf8>)
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	4413      	add	r3, r2
 8006870:	3354      	adds	r3, #84	@ 0x54
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	b2db      	uxtb	r3, r3
 8006876:	2b02      	cmp	r3, #2
 8006878:	d022      	beq.n	80068c0 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800687a:	4b2d      	ldr	r3, [pc, #180]	@ (8006930 <xTaskGenericNotifyWait+0xf8>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	68fa      	ldr	r2, [r7, #12]
 8006880:	3214      	adds	r2, #20
 8006882:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006886:	68ba      	ldr	r2, [r7, #8]
 8006888:	43d2      	mvns	r2, r2
 800688a:	4011      	ands	r1, r2
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	3214      	adds	r2, #20
 8006890:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8006894:	4b26      	ldr	r3, [pc, #152]	@ (8006930 <xTaskGenericNotifyWait+0xf8>)
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	4413      	add	r3, r2
 800689c:	3354      	adds	r3, #84	@ 0x54
 800689e:	2201      	movs	r2, #1
 80068a0:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 80068a2:	6a3b      	ldr	r3, [r7, #32]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00b      	beq.n	80068c0 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80068a8:	2101      	movs	r1, #1
 80068aa:	6a38      	ldr	r0, [r7, #32]
 80068ac:	f000 fa20 	bl	8006cf0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 80068b0:	4b20      	ldr	r3, [pc, #128]	@ (8006934 <xTaskGenericNotifyWait+0xfc>)
 80068b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068b6:	601a      	str	r2, [r3, #0]
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80068c0:	f000 ffa6 	bl	8007810 <vPortExitCritical>

        taskENTER_CRITICAL();
 80068c4:	f000 ff72 	bl	80077ac <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d007      	beq.n	80068de <xTaskGenericNotifyWait+0xa6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 80068ce:	4b18      	ldr	r3, [pc, #96]	@ (8006930 <xTaskGenericNotifyWait+0xf8>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68fa      	ldr	r2, [r7, #12]
 80068d4:	3214      	adds	r2, #20
 80068d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80068de:	4b14      	ldr	r3, [pc, #80]	@ (8006930 <xTaskGenericNotifyWait+0xf8>)
 80068e0:	681a      	ldr	r2, [r3, #0]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	4413      	add	r3, r2
 80068e6:	3354      	adds	r3, #84	@ 0x54
 80068e8:	781b      	ldrb	r3, [r3, #0]
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d002      	beq.n	80068f6 <xTaskGenericNotifyWait+0xbe>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80068f0:	2300      	movs	r3, #0
 80068f2:	617b      	str	r3, [r7, #20]
 80068f4:	e00e      	b.n	8006914 <xTaskGenericNotifyWait+0xdc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80068f6:	4b0e      	ldr	r3, [pc, #56]	@ (8006930 <xTaskGenericNotifyWait+0xf8>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	3214      	adds	r2, #20
 80068fe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	43d2      	mvns	r2, r2
 8006906:	4011      	ands	r1, r2
 8006908:	68fa      	ldr	r2, [r7, #12]
 800690a:	3214      	adds	r2, #20
 800690c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8006910:	2301      	movs	r3, #1
 8006912:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8006914:	4b06      	ldr	r3, [pc, #24]	@ (8006930 <xTaskGenericNotifyWait+0xf8>)
 8006916:	681a      	ldr	r2, [r3, #0]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	4413      	add	r3, r2
 800691c:	3354      	adds	r3, #84	@ 0x54
 800691e:	2200      	movs	r2, #0
 8006920:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8006922:	f000 ff75 	bl	8007810 <vPortExitCritical>

        return xReturn;
 8006926:	697b      	ldr	r3, [r7, #20]
    }
 8006928:	4618      	mov	r0, r3
 800692a:	3718      	adds	r7, #24
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	2000021c 	.word	0x2000021c
 8006934:	e000ed04 	.word	0xe000ed04

08006938 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8006938:	b580      	push	{r7, lr}
 800693a:	b08c      	sub	sp, #48	@ 0x30
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
 8006944:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8006946:	2301      	movs	r3, #1
 8006948:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00b      	beq.n	8006968 <xTaskGenericNotify+0x30>
        __asm volatile
 8006950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006954:	f383 8811 	msr	BASEPRI, r3
 8006958:	f3bf 8f6f 	isb	sy
 800695c:	f3bf 8f4f 	dsb	sy
 8006960:	623b      	str	r3, [r7, #32]
    }
 8006962:	bf00      	nop
 8006964:	bf00      	nop
 8006966:	e7fd      	b.n	8006964 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10b      	bne.n	8006986 <xTaskGenericNotify+0x4e>
        __asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	61fb      	str	r3, [r7, #28]
    }
 8006980:	bf00      	nop
 8006982:	bf00      	nop
 8006984:	e7fd      	b.n	8006982 <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	62bb      	str	r3, [r7, #40]	@ 0x28

        taskENTER_CRITICAL();
 800698a:	f000 ff0f 	bl	80077ac <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 800698e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006990:	2b00      	cmp	r3, #0
 8006992:	d006      	beq.n	80069a2 <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	3214      	adds	r2, #20
 800699a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800699e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069a0:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 80069a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	4413      	add	r3, r2
 80069a8:	3354      	adds	r3, #84	@ 0x54
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 80069b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	4413      	add	r3, r2
 80069b6:	3354      	adds	r3, #84	@ 0x54
 80069b8:	2202      	movs	r2, #2
 80069ba:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 80069bc:	78fb      	ldrb	r3, [r7, #3]
 80069be:	2b04      	cmp	r3, #4
 80069c0:	d83b      	bhi.n	8006a3a <xTaskGenericNotify+0x102>
 80069c2:	a201      	add	r2, pc, #4	@ (adr r2, 80069c8 <xTaskGenericNotify+0x90>)
 80069c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069c8:	08006a5b 	.word	0x08006a5b
 80069cc:	080069dd 	.word	0x080069dd
 80069d0:	080069f9 	.word	0x080069f9
 80069d4:	08006a11 	.word	0x08006a11
 80069d8:	08006a1f 	.word	0x08006a1f
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 80069dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	3214      	adds	r2, #20
 80069e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	ea42 0103 	orr.w	r1, r2, r3
 80069ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	3214      	adds	r2, #20
 80069f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 80069f6:	e033      	b.n	8006a60 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80069f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	3214      	adds	r2, #20
 80069fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a02:	1c59      	adds	r1, r3, #1
 8006a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a06:	68ba      	ldr	r2, [r7, #8]
 8006a08:	3214      	adds	r2, #20
 8006a0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006a0e:	e027      	b.n	8006a60 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	3214      	adds	r2, #20
 8006a16:	6879      	ldr	r1, [r7, #4]
 8006a18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006a1c:	e020      	b.n	8006a60 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006a1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d006      	beq.n	8006a34 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	3214      	adds	r2, #20
 8006a2c:	6879      	ldr	r1, [r7, #4]
 8006a2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006a32:	e015      	b.n	8006a60 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 8006a34:	2300      	movs	r3, #0
 8006a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    break;
 8006a38:	e012      	b.n	8006a60 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006a3a:	4b26      	ldr	r3, [pc, #152]	@ (8006ad4 <xTaskGenericNotify+0x19c>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00d      	beq.n	8006a5e <xTaskGenericNotify+0x126>
        __asm volatile
 8006a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a46:	f383 8811 	msr	BASEPRI, r3
 8006a4a:	f3bf 8f6f 	isb	sy
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	61bb      	str	r3, [r7, #24]
    }
 8006a54:	bf00      	nop
 8006a56:	bf00      	nop
 8006a58:	e7fd      	b.n	8006a56 <xTaskGenericNotify+0x11e>
                    break;
 8006a5a:	bf00      	nop
 8006a5c:	e000      	b.n	8006a60 <xTaskGenericNotify+0x128>

                    break;
 8006a5e:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006a60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d12d      	bne.n	8006ac4 <xTaskGenericNotify+0x18c>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f7fe fb71 	bl	8005154 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8006a72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a76:	2201      	movs	r2, #1
 8006a78:	409a      	lsls	r2, r3
 8006a7a:	4b17      	ldr	r3, [pc, #92]	@ (8006ad8 <xTaskGenericNotify+0x1a0>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	4a15      	ldr	r2, [pc, #84]	@ (8006ad8 <xTaskGenericNotify+0x1a0>)
 8006a82:	6013      	str	r3, [r2, #0]
 8006a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a88:	4613      	mov	r3, r2
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	4413      	add	r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	4a12      	ldr	r2, [pc, #72]	@ (8006adc <xTaskGenericNotify+0x1a4>)
 8006a92:	441a      	add	r2, r3
 8006a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a96:	3304      	adds	r3, #4
 8006a98:	4619      	mov	r1, r3
 8006a9a:	4610      	mov	r0, r2
 8006a9c:	f7fe fafd 	bl	800509a <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00b      	beq.n	8006ac0 <xTaskGenericNotify+0x188>
        __asm volatile
 8006aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aac:	f383 8811 	msr	BASEPRI, r3
 8006ab0:	f3bf 8f6f 	isb	sy
 8006ab4:	f3bf 8f4f 	dsb	sy
 8006ab8:	617b      	str	r3, [r7, #20]
    }
 8006aba:	bf00      	nop
 8006abc:	bf00      	nop
 8006abe:	e7fd      	b.n	8006abc <xTaskGenericNotify+0x184>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ac0:	4b07      	ldr	r3, [pc, #28]	@ (8006ae0 <xTaskGenericNotify+0x1a8>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006ac4:	f000 fea4 	bl	8007810 <vPortExitCritical>

        return xReturn;
 8006ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8006aca:	4618      	mov	r0, r3
 8006acc:	3730      	adds	r7, #48	@ 0x30
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	200002f8 	.word	0x200002f8
 8006ad8:	200002fc 	.word	0x200002fc
 8006adc:	20000220 	.word	0x20000220
 8006ae0:	2000021c 	.word	0x2000021c

08006ae4 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b090      	sub	sp, #64	@ 0x40
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8006af2:	2301      	movs	r3, #1
 8006af4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d10b      	bne.n	8006b14 <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 8006afc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b00:	f383 8811 	msr	BASEPRI, r3
 8006b04:	f3bf 8f6f 	isb	sy
 8006b08:	f3bf 8f4f 	dsb	sy
 8006b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 8006b0e:	bf00      	nop
 8006b10:	bf00      	nop
 8006b12:	e7fd      	b.n	8006b10 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d00b      	beq.n	8006b32 <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 8006b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b1e:	f383 8811 	msr	BASEPRI, r3
 8006b22:	f3bf 8f6f 	isb	sy
 8006b26:	f3bf 8f4f 	dsb	sy
 8006b2a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8006b2c:	bf00      	nop
 8006b2e:	bf00      	nop
 8006b30:	e7fd      	b.n	8006b2e <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b32:	f000 ff23 	bl	800797c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	63bb      	str	r3, [r7, #56]	@ 0x38
        __asm volatile
 8006b3a:	f3ef 8211 	mrs	r2, BASEPRI
 8006b3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b42:	f383 8811 	msr	BASEPRI, r3
 8006b46:	f3bf 8f6f 	isb	sy
 8006b4a:	f3bf 8f4f 	dsb	sy
 8006b4e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b50:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8006b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b54:	637b      	str	r3, [r7, #52]	@ 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8006b56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d006      	beq.n	8006b6a <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8006b5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b5e:	68ba      	ldr	r2, [r7, #8]
 8006b60:	3214      	adds	r2, #20
 8006b62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006b66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b68:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8006b6a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b6c:	68bb      	ldr	r3, [r7, #8]
 8006b6e:	4413      	add	r3, r2
 8006b70:	3354      	adds	r3, #84	@ 0x54
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006b78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	4413      	add	r3, r2
 8006b7e:	3354      	adds	r3, #84	@ 0x54
 8006b80:	2202      	movs	r2, #2
 8006b82:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006b84:	78fb      	ldrb	r3, [r7, #3]
 8006b86:	2b04      	cmp	r3, #4
 8006b88:	d83b      	bhi.n	8006c02 <xTaskGenericNotifyFromISR+0x11e>
 8006b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b90 <xTaskGenericNotifyFromISR+0xac>)
 8006b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b90:	08006c23 	.word	0x08006c23
 8006b94:	08006ba5 	.word	0x08006ba5
 8006b98:	08006bc1 	.word	0x08006bc1
 8006b9c:	08006bd9 	.word	0x08006bd9
 8006ba0:	08006be7 	.word	0x08006be7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	3214      	adds	r2, #20
 8006baa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	ea42 0103 	orr.w	r1, r2, r3
 8006bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb6:	68ba      	ldr	r2, [r7, #8]
 8006bb8:	3214      	adds	r2, #20
 8006bba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006bbe:	e033      	b.n	8006c28 <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bc2:	68ba      	ldr	r2, [r7, #8]
 8006bc4:	3214      	adds	r2, #20
 8006bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bca:	1c59      	adds	r1, r3, #1
 8006bcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bce:	68ba      	ldr	r2, [r7, #8]
 8006bd0:	3214      	adds	r2, #20
 8006bd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006bd6:	e027      	b.n	8006c28 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006bd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	3214      	adds	r2, #20
 8006bde:	6879      	ldr	r1, [r7, #4]
 8006be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006be4:	e020      	b.n	8006c28 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006be6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d006      	beq.n	8006bfc <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006bee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	3214      	adds	r2, #20
 8006bf4:	6879      	ldr	r1, [r7, #4]
 8006bf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8006bfa:	e015      	b.n	8006c28 <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    break;
 8006c00:	e012      	b.n	8006c28 <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8006c02:	4b34      	ldr	r3, [pc, #208]	@ (8006cd4 <xTaskGenericNotifyFromISR+0x1f0>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00d      	beq.n	8006c26 <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 8006c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c0e:	f383 8811 	msr	BASEPRI, r3
 8006c12:	f3bf 8f6f 	isb	sy
 8006c16:	f3bf 8f4f 	dsb	sy
 8006c1a:	61fb      	str	r3, [r7, #28]
    }
 8006c1c:	bf00      	nop
 8006c1e:	bf00      	nop
 8006c20:	e7fd      	b.n	8006c1e <xTaskGenericNotifyFromISR+0x13a>
                    break;
 8006c22:	bf00      	nop
 8006c24:	e000      	b.n	8006c28 <xTaskGenericNotifyFromISR+0x144>
                    break;
 8006c26:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006c28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d146      	bne.n	8006cbe <xTaskGenericNotifyFromISR+0x1da>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00b      	beq.n	8006c50 <xTaskGenericNotifyFromISR+0x16c>
        __asm volatile
 8006c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c3c:	f383 8811 	msr	BASEPRI, r3
 8006c40:	f3bf 8f6f 	isb	sy
 8006c44:	f3bf 8f4f 	dsb	sy
 8006c48:	61bb      	str	r3, [r7, #24]
    }
 8006c4a:	bf00      	nop
 8006c4c:	bf00      	nop
 8006c4e:	e7fd      	b.n	8006c4c <xTaskGenericNotifyFromISR+0x168>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c50:	4b21      	ldr	r3, [pc, #132]	@ (8006cd8 <xTaskGenericNotifyFromISR+0x1f4>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d11c      	bne.n	8006c92 <xTaskGenericNotifyFromISR+0x1ae>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c5a:	3304      	adds	r3, #4
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7fe fa79 	bl	8005154 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c66:	2201      	movs	r2, #1
 8006c68:	409a      	lsls	r2, r3
 8006c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8006cdc <xTaskGenericNotifyFromISR+0x1f8>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	4a1a      	ldr	r2, [pc, #104]	@ (8006cdc <xTaskGenericNotifyFromISR+0x1f8>)
 8006c72:	6013      	str	r3, [r2, #0]
 8006c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c78:	4613      	mov	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	4a17      	ldr	r2, [pc, #92]	@ (8006ce0 <xTaskGenericNotifyFromISR+0x1fc>)
 8006c82:	441a      	add	r2, r3
 8006c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c86:	3304      	adds	r3, #4
 8006c88:	4619      	mov	r1, r3
 8006c8a:	4610      	mov	r0, r2
 8006c8c:	f7fe fa05 	bl	800509a <vListInsertEnd>
 8006c90:	e005      	b.n	8006c9e <xTaskGenericNotifyFromISR+0x1ba>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c94:	3318      	adds	r3, #24
 8006c96:	4619      	mov	r1, r3
 8006c98:	4812      	ldr	r0, [pc, #72]	@ (8006ce4 <xTaskGenericNotifyFromISR+0x200>)
 8006c9a:	f7fe f9fe 	bl	800509a <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ca2:	4b11      	ldr	r3, [pc, #68]	@ (8006ce8 <xTaskGenericNotifyFromISR+0x204>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d908      	bls.n	8006cbe <xTaskGenericNotifyFromISR+0x1da>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8006cac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d002      	beq.n	8006cb8 <xTaskGenericNotifyFromISR+0x1d4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8006cb2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8006cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8006cec <xTaskGenericNotifyFromISR+0x208>)
 8006cba:	2201      	movs	r2, #1
 8006cbc:	601a      	str	r2, [r3, #0]
 8006cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cc0:	617b      	str	r3, [r7, #20]
        __asm volatile
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	f383 8811 	msr	BASEPRI, r3
    }
 8006cc8:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8006cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3740      	adds	r7, #64	@ 0x40
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}
 8006cd4:	200002f8 	.word	0x200002f8
 8006cd8:	2000031c 	.word	0x2000031c
 8006cdc:	200002fc 	.word	0x200002fc
 8006ce0:	20000220 	.word	0x20000220
 8006ce4:	200002b4 	.word	0x200002b4
 8006ce8:	2000021c 	.word	0x2000021c
 8006cec:	20000308 	.word	0x20000308

08006cf0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b084      	sub	sp, #16
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8006cfa:	4b29      	ldr	r3, [pc, #164]	@ (8006da0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d00:	4b28      	ldr	r3, [pc, #160]	@ (8006da4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	3304      	adds	r3, #4
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fe fa24 	bl	8005154 <uxListRemove>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d10b      	bne.n	8006d2a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006d12:	4b24      	ldr	r3, [pc, #144]	@ (8006da4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d18:	2201      	movs	r2, #1
 8006d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d1e:	43da      	mvns	r2, r3
 8006d20:	4b21      	ldr	r3, [pc, #132]	@ (8006da8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4013      	ands	r3, r2
 8006d26:	4a20      	ldr	r2, [pc, #128]	@ (8006da8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d28:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d30:	d10a      	bne.n	8006d48 <prvAddCurrentTaskToDelayedList+0x58>
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d007      	beq.n	8006d48 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d38:	4b1a      	ldr	r3, [pc, #104]	@ (8006da4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	3304      	adds	r3, #4
 8006d3e:	4619      	mov	r1, r3
 8006d40:	481a      	ldr	r0, [pc, #104]	@ (8006dac <prvAddCurrentTaskToDelayedList+0xbc>)
 8006d42:	f7fe f9aa 	bl	800509a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8006d46:	e026      	b.n	8006d96 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4413      	add	r3, r2
 8006d4e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006d50:	4b14      	ldr	r3, [pc, #80]	@ (8006da4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68ba      	ldr	r2, [r7, #8]
 8006d56:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d209      	bcs.n	8006d74 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d60:	4b13      	ldr	r3, [pc, #76]	@ (8006db0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	4b0f      	ldr	r3, [pc, #60]	@ (8006da4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	3304      	adds	r3, #4
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	4610      	mov	r0, r2
 8006d6e:	f7fe f9b8 	bl	80050e2 <vListInsert>
}
 8006d72:	e010      	b.n	8006d96 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006d74:	4b0f      	ldr	r3, [pc, #60]	@ (8006db4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	4b0a      	ldr	r3, [pc, #40]	@ (8006da4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	3304      	adds	r3, #4
 8006d7e:	4619      	mov	r1, r3
 8006d80:	4610      	mov	r0, r2
 8006d82:	f7fe f9ae 	bl	80050e2 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8006d86:	4b0c      	ldr	r3, [pc, #48]	@ (8006db8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d202      	bcs.n	8006d96 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8006d90:	4a09      	ldr	r2, [pc, #36]	@ (8006db8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	6013      	str	r3, [r2, #0]
}
 8006d96:	bf00      	nop
 8006d98:	3710      	adds	r7, #16
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	200002f8 	.word	0x200002f8
 8006da4:	2000021c 	.word	0x2000021c
 8006da8:	200002fc 	.word	0x200002fc
 8006dac:	200002e0 	.word	0x200002e0
 8006db0:	200002b0 	.word	0x200002b0
 8006db4:	200002ac 	.word	0x200002ac
 8006db8:	20000314 	.word	0x20000314

08006dbc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006dc6:	f000 fb3f 	bl	8007448 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8006dca:	4b12      	ldr	r3, [pc, #72]	@ (8006e14 <xTimerCreateTimerTask+0x58>)
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00b      	beq.n	8006dea <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8006dd2:	4b11      	ldr	r3, [pc, #68]	@ (8006e18 <xTimerCreateTimerTask+0x5c>)
 8006dd4:	9301      	str	r3, [sp, #4]
 8006dd6:	2302      	movs	r3, #2
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	2300      	movs	r3, #0
 8006ddc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006de0:	490e      	ldr	r1, [pc, #56]	@ (8006e1c <xTimerCreateTimerTask+0x60>)
 8006de2:	480f      	ldr	r0, [pc, #60]	@ (8006e20 <xTimerCreateTimerTask+0x64>)
 8006de4:	f7fe ff78 	bl	8005cd8 <xTaskCreate>
 8006de8:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d10b      	bne.n	8006e08 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8006df0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df4:	f383 8811 	msr	BASEPRI, r3
 8006df8:	f3bf 8f6f 	isb	sy
 8006dfc:	f3bf 8f4f 	dsb	sy
 8006e00:	603b      	str	r3, [r7, #0]
    }
 8006e02:	bf00      	nop
 8006e04:	bf00      	nop
 8006e06:	e7fd      	b.n	8006e04 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8006e08:	687b      	ldr	r3, [r7, #4]
    }
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	3708      	adds	r7, #8
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
 8006e12:	bf00      	nop
 8006e14:	20000350 	.word	0x20000350
 8006e18:	20000354 	.word	0x20000354
 8006e1c:	08008b8c 	.word	0x08008b8c
 8006e20:	08007019 	.word	0x08007019

08006e24 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b088      	sub	sp, #32
 8006e28:	af02      	add	r7, sp, #8
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
 8006e30:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006e32:	202c      	movs	r0, #44	@ 0x2c
 8006e34:	f000 fde4 	bl	8007a00 <pvPortMalloc>
 8006e38:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00d      	beq.n	8006e5c <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	9301      	str	r3, [sp, #4]
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	9300      	str	r3, [sp, #0]
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	68b9      	ldr	r1, [r7, #8]
 8006e56:	68f8      	ldr	r0, [r7, #12]
 8006e58:	f000 f805 	bl	8006e66 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8006e5c:	697b      	ldr	r3, [r7, #20]
        }
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3718      	adds	r7, #24
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b086      	sub	sp, #24
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	60f8      	str	r0, [r7, #12]
 8006e6e:	60b9      	str	r1, [r7, #8]
 8006e70:	607a      	str	r2, [r7, #4]
 8006e72:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d10b      	bne.n	8006e92 <prvInitialiseNewTimer+0x2c>
        __asm volatile
 8006e7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e7e:	f383 8811 	msr	BASEPRI, r3
 8006e82:	f3bf 8f6f 	isb	sy
 8006e86:	f3bf 8f4f 	dsb	sy
 8006e8a:	617b      	str	r3, [r7, #20]
    }
 8006e8c:	bf00      	nop
 8006e8e:	bf00      	nop
 8006e90:	e7fd      	b.n	8006e8e <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8006e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d01e      	beq.n	8006ed6 <prvInitialiseNewTimer+0x70>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8006e98:	f000 fad6 	bl	8007448 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb0:	6a3a      	ldr	r2, [r7, #32]
 8006eb2:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb6:	3304      	adds	r3, #4
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7fe f8e1 	bl	8005080 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d008      	beq.n	8006ed6 <prvInitialiseNewTimer+0x70>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006eca:	f043 0304 	orr.w	r3, r3, #4
 8006ece:	b2da      	uxtb	r2, r3
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ed2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8006ed6:	bf00      	nop
 8006ed8:	3718      	adds	r7, #24
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
	...

08006ee0 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b08a      	sub	sp, #40	@ 0x28
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
 8006eec:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10b      	bne.n	8006f10 <xTimerGenericCommand+0x30>
        __asm volatile
 8006ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006efc:	f383 8811 	msr	BASEPRI, r3
 8006f00:	f3bf 8f6f 	isb	sy
 8006f04:	f3bf 8f4f 	dsb	sy
 8006f08:	623b      	str	r3, [r7, #32]
    }
 8006f0a:	bf00      	nop
 8006f0c:	bf00      	nop
 8006f0e:	e7fd      	b.n	8006f0c <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8006f10:	4b19      	ldr	r3, [pc, #100]	@ (8006f78 <xTimerGenericCommand+0x98>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d02a      	beq.n	8006f6e <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8006f18:	68bb      	ldr	r3, [r7, #8]
 8006f1a:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	2b05      	cmp	r3, #5
 8006f28:	dc18      	bgt.n	8006f5c <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006f2a:	f7ff fbeb 	bl	8006704 <xTaskGetSchedulerState>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d109      	bne.n	8006f48 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006f34:	4b10      	ldr	r3, [pc, #64]	@ (8006f78 <xTimerGenericCommand+0x98>)
 8006f36:	6818      	ldr	r0, [r3, #0]
 8006f38:	f107 0114 	add.w	r1, r7, #20
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f40:	f7fe fa14 	bl	800536c <xQueueGenericSend>
 8006f44:	6278      	str	r0, [r7, #36]	@ 0x24
 8006f46:	e012      	b.n	8006f6e <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006f48:	4b0b      	ldr	r3, [pc, #44]	@ (8006f78 <xTimerGenericCommand+0x98>)
 8006f4a:	6818      	ldr	r0, [r3, #0]
 8006f4c:	f107 0114 	add.w	r1, r7, #20
 8006f50:	2300      	movs	r3, #0
 8006f52:	2200      	movs	r2, #0
 8006f54:	f7fe fa0a 	bl	800536c <xQueueGenericSend>
 8006f58:	6278      	str	r0, [r7, #36]	@ 0x24
 8006f5a:	e008      	b.n	8006f6e <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006f5c:	4b06      	ldr	r3, [pc, #24]	@ (8006f78 <xTimerGenericCommand+0x98>)
 8006f5e:	6818      	ldr	r0, [r3, #0]
 8006f60:	f107 0114 	add.w	r1, r7, #20
 8006f64:	2300      	movs	r3, #0
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	f7fe faea 	bl	8005540 <xQueueGenericSendFromISR>
 8006f6c:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8006f70:	4618      	mov	r0, r3
 8006f72:	3728      	adds	r7, #40	@ 0x28
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}
 8006f78:	20000350 	.word	0x20000350

08006f7c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b088      	sub	sp, #32
 8006f80:	af02      	add	r7, sp, #8
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f86:	4b23      	ldr	r3, [pc, #140]	@ (8007014 <prvProcessExpiredTimer+0x98>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	68db      	ldr	r3, [r3, #12]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f90:	697b      	ldr	r3, [r7, #20]
 8006f92:	3304      	adds	r3, #4
 8006f94:	4618      	mov	r0, r3
 8006f96:	f7fe f8dd 	bl	8005154 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fa0:	f003 0304 	and.w	r3, r3, #4
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d023      	beq.n	8006ff0 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	699a      	ldr	r2, [r3, #24]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	18d1      	adds	r1, r2, r3
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	683a      	ldr	r2, [r7, #0]
 8006fb4:	6978      	ldr	r0, [r7, #20]
 8006fb6:	f000 f8d5 	bl	8007164 <prvInsertTimerInActiveList>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d020      	beq.n	8007002 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	9300      	str	r3, [sp, #0]
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	2100      	movs	r1, #0
 8006fca:	6978      	ldr	r0, [r7, #20]
 8006fcc:	f7ff ff88 	bl	8006ee0 <xTimerGenericCommand>
 8006fd0:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d114      	bne.n	8007002 <prvProcessExpiredTimer+0x86>
        __asm volatile
 8006fd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fdc:	f383 8811 	msr	BASEPRI, r3
 8006fe0:	f3bf 8f6f 	isb	sy
 8006fe4:	f3bf 8f4f 	dsb	sy
 8006fe8:	60fb      	str	r3, [r7, #12]
    }
 8006fea:	bf00      	nop
 8006fec:	bf00      	nop
 8006fee:	e7fd      	b.n	8006fec <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ff0:	697b      	ldr	r3, [r7, #20]
 8006ff2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ff6:	f023 0301 	bic.w	r3, r3, #1
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	6978      	ldr	r0, [r7, #20]
 8007008:	4798      	blx	r3
    }
 800700a:	bf00      	nop
 800700c:	3718      	adds	r7, #24
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	20000348 	.word	0x20000348

08007018 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007020:	f107 0308 	add.w	r3, r7, #8
 8007024:	4618      	mov	r0, r3
 8007026:	f000 f859 	bl	80070dc <prvGetNextExpireTime>
 800702a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	4619      	mov	r1, r3
 8007030:	68f8      	ldr	r0, [r7, #12]
 8007032:	f000 f805 	bl	8007040 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8007036:	f000 f8d7 	bl	80071e8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800703a:	bf00      	nop
 800703c:	e7f0      	b.n	8007020 <prvTimerTask+0x8>
	...

08007040 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800704a:	f7fe ffcf 	bl	8005fec <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800704e:	f107 0308 	add.w	r3, r7, #8
 8007052:	4618      	mov	r0, r3
 8007054:	f000 f866 	bl	8007124 <prvSampleTimeNow>
 8007058:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d130      	bne.n	80070c2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d10a      	bne.n	800707c <prvProcessTimerOrBlockTask+0x3c>
 8007066:	687a      	ldr	r2, [r7, #4]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	429a      	cmp	r2, r3
 800706c:	d806      	bhi.n	800707c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800706e:	f7fe ffcb 	bl	8006008 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007072:	68f9      	ldr	r1, [r7, #12]
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7ff ff81 	bl	8006f7c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800707a:	e024      	b.n	80070c6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d008      	beq.n	8007094 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007082:	4b13      	ldr	r3, [pc, #76]	@ (80070d0 <prvProcessTimerOrBlockTask+0x90>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d101      	bne.n	8007090 <prvProcessTimerOrBlockTask+0x50>
 800708c:	2301      	movs	r3, #1
 800708e:	e000      	b.n	8007092 <prvProcessTimerOrBlockTask+0x52>
 8007090:	2300      	movs	r3, #0
 8007092:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007094:	4b0f      	ldr	r3, [pc, #60]	@ (80070d4 <prvProcessTimerOrBlockTask+0x94>)
 8007096:	6818      	ldr	r0, [r3, #0]
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	1ad3      	subs	r3, r2, r3
 800709e:	683a      	ldr	r2, [r7, #0]
 80070a0:	4619      	mov	r1, r3
 80070a2:	f7fe fde5 	bl	8005c70 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80070a6:	f7fe ffaf 	bl	8006008 <xTaskResumeAll>
 80070aa:	4603      	mov	r3, r0
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d10a      	bne.n	80070c6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80070b0:	4b09      	ldr	r3, [pc, #36]	@ (80070d8 <prvProcessTimerOrBlockTask+0x98>)
 80070b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80070b6:	601a      	str	r2, [r3, #0]
 80070b8:	f3bf 8f4f 	dsb	sy
 80070bc:	f3bf 8f6f 	isb	sy
    }
 80070c0:	e001      	b.n	80070c6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80070c2:	f7fe ffa1 	bl	8006008 <xTaskResumeAll>
    }
 80070c6:	bf00      	nop
 80070c8:	3710      	adds	r7, #16
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	2000034c 	.word	0x2000034c
 80070d4:	20000350 	.word	0x20000350
 80070d8:	e000ed04 	.word	0xe000ed04

080070dc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80070e4:	4b0e      	ldr	r3, [pc, #56]	@ (8007120 <prvGetNextExpireTime+0x44>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d101      	bne.n	80070f2 <prvGetNextExpireTime+0x16>
 80070ee:	2201      	movs	r2, #1
 80070f0:	e000      	b.n	80070f4 <prvGetNextExpireTime+0x18>
 80070f2:	2200      	movs	r2, #0
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d105      	bne.n	800710c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007100:	4b07      	ldr	r3, [pc, #28]	@ (8007120 <prvGetNextExpireTime+0x44>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	60fb      	str	r3, [r7, #12]
 800710a:	e001      	b.n	8007110 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800710c:	2300      	movs	r3, #0
 800710e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8007110:	68fb      	ldr	r3, [r7, #12]
    }
 8007112:	4618      	mov	r0, r3
 8007114:	3714      	adds	r7, #20
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	20000348 	.word	0x20000348

08007124 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800712c:	f7fe fffc 	bl	8006128 <xTaskGetTickCount>
 8007130:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8007132:	4b0b      	ldr	r3, [pc, #44]	@ (8007160 <prvSampleTimeNow+0x3c>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	429a      	cmp	r2, r3
 800713a:	d205      	bcs.n	8007148 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800713c:	f000 f91e 	bl	800737c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	601a      	str	r2, [r3, #0]
 8007146:	e002      	b.n	800714e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800714e:	4a04      	ldr	r2, [pc, #16]	@ (8007160 <prvSampleTimeNow+0x3c>)
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8007154:	68fb      	ldr	r3, [r7, #12]
    }
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	20000358 	.word	0x20000358

08007164 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8007164:	b580      	push	{r7, lr}
 8007166:	b086      	sub	sp, #24
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
 8007170:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8007172:	2300      	movs	r3, #0
 8007174:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	68ba      	ldr	r2, [r7, #8]
 800717a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	429a      	cmp	r2, r3
 8007188:	d812      	bhi.n	80071b0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800718a:	687a      	ldr	r2, [r7, #4]
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	1ad2      	subs	r2, r2, r3
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	699b      	ldr	r3, [r3, #24]
 8007194:	429a      	cmp	r2, r3
 8007196:	d302      	bcc.n	800719e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8007198:	2301      	movs	r3, #1
 800719a:	617b      	str	r3, [r7, #20]
 800719c:	e01b      	b.n	80071d6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800719e:	4b10      	ldr	r3, [pc, #64]	@ (80071e0 <prvInsertTimerInActiveList+0x7c>)
 80071a0:	681a      	ldr	r2, [r3, #0]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	3304      	adds	r3, #4
 80071a6:	4619      	mov	r1, r3
 80071a8:	4610      	mov	r0, r2
 80071aa:	f7fd ff9a 	bl	80050e2 <vListInsert>
 80071ae:	e012      	b.n	80071d6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d206      	bcs.n	80071c6 <prvInsertTimerInActiveList+0x62>
 80071b8:	68ba      	ldr	r2, [r7, #8]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d302      	bcc.n	80071c6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80071c0:	2301      	movs	r3, #1
 80071c2:	617b      	str	r3, [r7, #20]
 80071c4:	e007      	b.n	80071d6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071c6:	4b07      	ldr	r3, [pc, #28]	@ (80071e4 <prvInsertTimerInActiveList+0x80>)
 80071c8:	681a      	ldr	r2, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	3304      	adds	r3, #4
 80071ce:	4619      	mov	r1, r3
 80071d0:	4610      	mov	r0, r2
 80071d2:	f7fd ff86 	bl	80050e2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80071d6:	697b      	ldr	r3, [r7, #20]
    }
 80071d8:	4618      	mov	r0, r3
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	2000034c 	.word	0x2000034c
 80071e4:	20000348 	.word	0x20000348

080071e8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b08c      	sub	sp, #48	@ 0x30
 80071ec:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80071ee:	e0b2      	b.n	8007356 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f2c0 80af 	blt.w	8007356 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80071fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fe:	695b      	ldr	r3, [r3, #20]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d004      	beq.n	800720e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007206:	3304      	adds	r3, #4
 8007208:	4618      	mov	r0, r3
 800720a:	f7fd ffa3 	bl	8005154 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800720e:	1d3b      	adds	r3, r7, #4
 8007210:	4618      	mov	r0, r3
 8007212:	f7ff ff87 	bl	8007124 <prvSampleTimeNow>
 8007216:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	2b09      	cmp	r3, #9
 800721c:	f200 8098 	bhi.w	8007350 <prvProcessReceivedCommands+0x168>
 8007220:	a201      	add	r2, pc, #4	@ (adr r2, 8007228 <prvProcessReceivedCommands+0x40>)
 8007222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007226:	bf00      	nop
 8007228:	08007251 	.word	0x08007251
 800722c:	08007251 	.word	0x08007251
 8007230:	08007251 	.word	0x08007251
 8007234:	080072c7 	.word	0x080072c7
 8007238:	080072db 	.word	0x080072db
 800723c:	08007327 	.word	0x08007327
 8007240:	08007251 	.word	0x08007251
 8007244:	08007251 	.word	0x08007251
 8007248:	080072c7 	.word	0x080072c7
 800724c:	080072db 	.word	0x080072db
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007252:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007256:	f043 0301 	orr.w	r3, r3, #1
 800725a:	b2da      	uxtb	r2, r3
 800725c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800725e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007262:	68fa      	ldr	r2, [r7, #12]
 8007264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007266:	699b      	ldr	r3, [r3, #24]
 8007268:	18d1      	adds	r1, r2, r3
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6a3a      	ldr	r2, [r7, #32]
 800726e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007270:	f7ff ff78 	bl	8007164 <prvInsertTimerInActiveList>
 8007274:	4603      	mov	r3, r0
 8007276:	2b00      	cmp	r3, #0
 8007278:	d06c      	beq.n	8007354 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800727a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727c:	6a1b      	ldr	r3, [r3, #32]
 800727e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007280:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007284:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007288:	f003 0304 	and.w	r3, r3, #4
 800728c:	2b00      	cmp	r3, #0
 800728e:	d061      	beq.n	8007354 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007294:	699b      	ldr	r3, [r3, #24]
 8007296:	441a      	add	r2, r3
 8007298:	2300      	movs	r3, #0
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	2300      	movs	r3, #0
 800729e:	2100      	movs	r1, #0
 80072a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80072a2:	f7ff fe1d 	bl	8006ee0 <xTimerGenericCommand>
 80072a6:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d152      	bne.n	8007354 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 80072ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072b2:	f383 8811 	msr	BASEPRI, r3
 80072b6:	f3bf 8f6f 	isb	sy
 80072ba:	f3bf 8f4f 	dsb	sy
 80072be:	61bb      	str	r3, [r7, #24]
    }
 80072c0:	bf00      	nop
 80072c2:	bf00      	nop
 80072c4:	e7fd      	b.n	80072c2 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80072c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072cc:	f023 0301 	bic.w	r3, r3, #1
 80072d0:	b2da      	uxtb	r2, r3
 80072d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80072d8:	e03d      	b.n	8007356 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80072da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80072e0:	f043 0301 	orr.w	r3, r3, #1
 80072e4:	b2da      	uxtb	r2, r3
 80072e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f0:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80072f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f4:	699b      	ldr	r3, [r3, #24]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d10b      	bne.n	8007312 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 80072fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072fe:	f383 8811 	msr	BASEPRI, r3
 8007302:	f3bf 8f6f 	isb	sy
 8007306:	f3bf 8f4f 	dsb	sy
 800730a:	617b      	str	r3, [r7, #20]
    }
 800730c:	bf00      	nop
 800730e:	bf00      	nop
 8007310:	e7fd      	b.n	800730e <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007314:	699a      	ldr	r2, [r3, #24]
 8007316:	6a3b      	ldr	r3, [r7, #32]
 8007318:	18d1      	adds	r1, r2, r3
 800731a:	6a3b      	ldr	r3, [r7, #32]
 800731c:	6a3a      	ldr	r2, [r7, #32]
 800731e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007320:	f7ff ff20 	bl	8007164 <prvInsertTimerInActiveList>
                        break;
 8007324:	e017      	b.n	8007356 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007328:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800732c:	f003 0302 	and.w	r3, r3, #2
 8007330:	2b00      	cmp	r3, #0
 8007332:	d103      	bne.n	800733c <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8007334:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007336:	f000 fc45 	bl	8007bc4 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800733a:	e00c      	b.n	8007356 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800733c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007342:	f023 0301 	bic.w	r3, r3, #1
 8007346:	b2da      	uxtb	r2, r3
 8007348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800734e:	e002      	b.n	8007356 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8007350:	bf00      	nop
 8007352:	e000      	b.n	8007356 <prvProcessReceivedCommands+0x16e>
                        break;
 8007354:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007356:	4b08      	ldr	r3, [pc, #32]	@ (8007378 <prvProcessReceivedCommands+0x190>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f107 0108 	add.w	r1, r7, #8
 800735e:	2200      	movs	r2, #0
 8007360:	4618      	mov	r0, r3
 8007362:	f7fe f99b 	bl	800569c <xQueueReceive>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	f47f af41 	bne.w	80071f0 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800736e:	bf00      	nop
 8007370:	bf00      	nop
 8007372:	3728      	adds	r7, #40	@ 0x28
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}
 8007378:	20000350 	.word	0x20000350

0800737c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800737c:	b580      	push	{r7, lr}
 800737e:	b088      	sub	sp, #32
 8007380:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007382:	e049      	b.n	8007418 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007384:	4b2e      	ldr	r3, [pc, #184]	@ (8007440 <prvSwitchTimerLists+0xc4>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800738e:	4b2c      	ldr	r3, [pc, #176]	@ (8007440 <prvSwitchTimerLists+0xc4>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	68db      	ldr	r3, [r3, #12]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	3304      	adds	r3, #4
 800739c:	4618      	mov	r0, r3
 800739e:	f7fd fed9 	bl	8005154 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6a1b      	ldr	r3, [r3, #32]
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073b0:	f003 0304 	and.w	r3, r3, #4
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d02f      	beq.n	8007418 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	699b      	ldr	r3, [r3, #24]
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	4413      	add	r3, r2
 80073c0:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 80073c2:	68ba      	ldr	r2, [r7, #8]
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d90e      	bls.n	80073e8 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	68ba      	ldr	r2, [r7, #8]
 80073ce:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073d6:	4b1a      	ldr	r3, [pc, #104]	@ (8007440 <prvSwitchTimerLists+0xc4>)
 80073d8:	681a      	ldr	r2, [r3, #0]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	3304      	adds	r3, #4
 80073de:	4619      	mov	r1, r3
 80073e0:	4610      	mov	r0, r2
 80073e2:	f7fd fe7e 	bl	80050e2 <vListInsert>
 80073e6:	e017      	b.n	8007418 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80073e8:	2300      	movs	r3, #0
 80073ea:	9300      	str	r3, [sp, #0]
 80073ec:	2300      	movs	r3, #0
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	2100      	movs	r1, #0
 80073f2:	68f8      	ldr	r0, [r7, #12]
 80073f4:	f7ff fd74 	bl	8006ee0 <xTimerGenericCommand>
 80073f8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d10b      	bne.n	8007418 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8007400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007404:	f383 8811 	msr	BASEPRI, r3
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	f3bf 8f4f 	dsb	sy
 8007410:	603b      	str	r3, [r7, #0]
    }
 8007412:	bf00      	nop
 8007414:	bf00      	nop
 8007416:	e7fd      	b.n	8007414 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007418:	4b09      	ldr	r3, [pc, #36]	@ (8007440 <prvSwitchTimerLists+0xc4>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1b0      	bne.n	8007384 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8007422:	4b07      	ldr	r3, [pc, #28]	@ (8007440 <prvSwitchTimerLists+0xc4>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8007428:	4b06      	ldr	r3, [pc, #24]	@ (8007444 <prvSwitchTimerLists+0xc8>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a04      	ldr	r2, [pc, #16]	@ (8007440 <prvSwitchTimerLists+0xc4>)
 800742e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8007430:	4a04      	ldr	r2, [pc, #16]	@ (8007444 <prvSwitchTimerLists+0xc8>)
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	6013      	str	r3, [r2, #0]
    }
 8007436:	bf00      	nop
 8007438:	3718      	adds	r7, #24
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	20000348 	.word	0x20000348
 8007444:	2000034c 	.word	0x2000034c

08007448 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8007448:	b580      	push	{r7, lr}
 800744a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800744c:	f000 f9ae 	bl	80077ac <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8007450:	4b12      	ldr	r3, [pc, #72]	@ (800749c <prvCheckForValidListAndQueue+0x54>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d11d      	bne.n	8007494 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8007458:	4811      	ldr	r0, [pc, #68]	@ (80074a0 <prvCheckForValidListAndQueue+0x58>)
 800745a:	f7fd fdf1 	bl	8005040 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800745e:	4811      	ldr	r0, [pc, #68]	@ (80074a4 <prvCheckForValidListAndQueue+0x5c>)
 8007460:	f7fd fdee 	bl	8005040 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8007464:	4b10      	ldr	r3, [pc, #64]	@ (80074a8 <prvCheckForValidListAndQueue+0x60>)
 8007466:	4a0e      	ldr	r2, [pc, #56]	@ (80074a0 <prvCheckForValidListAndQueue+0x58>)
 8007468:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800746a:	4b10      	ldr	r3, [pc, #64]	@ (80074ac <prvCheckForValidListAndQueue+0x64>)
 800746c:	4a0d      	ldr	r2, [pc, #52]	@ (80074a4 <prvCheckForValidListAndQueue+0x5c>)
 800746e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8007470:	2200      	movs	r2, #0
 8007472:	210c      	movs	r1, #12
 8007474:	200a      	movs	r0, #10
 8007476:	f7fd fef3 	bl	8005260 <xQueueGenericCreate>
 800747a:	4603      	mov	r3, r0
 800747c:	4a07      	ldr	r2, [pc, #28]	@ (800749c <prvCheckForValidListAndQueue+0x54>)
 800747e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8007480:	4b06      	ldr	r3, [pc, #24]	@ (800749c <prvCheckForValidListAndQueue+0x54>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d005      	beq.n	8007494 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007488:	4b04      	ldr	r3, [pc, #16]	@ (800749c <prvCheckForValidListAndQueue+0x54>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	4908      	ldr	r1, [pc, #32]	@ (80074b0 <prvCheckForValidListAndQueue+0x68>)
 800748e:	4618      	mov	r0, r3
 8007490:	f7fe fbc4 	bl	8005c1c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8007494:	f000 f9bc 	bl	8007810 <vPortExitCritical>
    }
 8007498:	bf00      	nop
 800749a:	bd80      	pop	{r7, pc}
 800749c:	20000350 	.word	0x20000350
 80074a0:	20000320 	.word	0x20000320
 80074a4:	20000334 	.word	0x20000334
 80074a8:	20000348 	.word	0x20000348
 80074ac:	2000034c 	.word	0x2000034c
 80074b0:	08008b94 	.word	0x08008b94

080074b4 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

    BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
    {
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b086      	sub	sp, #24
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        Timer_t * pxTimer = xTimer;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	613b      	str	r3, [r7, #16]

        configASSERT( xTimer );
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d10b      	bne.n	80074de <xTimerIsTimerActive+0x2a>
        __asm volatile
 80074c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ca:	f383 8811 	msr	BASEPRI, r3
 80074ce:	f3bf 8f6f 	isb	sy
 80074d2:	f3bf 8f4f 	dsb	sy
 80074d6:	60fb      	str	r3, [r7, #12]
    }
 80074d8:	bf00      	nop
 80074da:	bf00      	nop
 80074dc:	e7fd      	b.n	80074da <xTimerIsTimerActive+0x26>

        /* Is the timer in the list of active timers? */
        taskENTER_CRITICAL();
 80074de:	f000 f965 	bl	80077ac <vPortEnterCritical>
        {
            if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074e8:	f003 0301 	and.w	r3, r3, #1
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d102      	bne.n	80074f6 <xTimerIsTimerActive+0x42>
            {
                xReturn = pdFALSE;
 80074f0:	2300      	movs	r3, #0
 80074f2:	617b      	str	r3, [r7, #20]
 80074f4:	e001      	b.n	80074fa <xTimerIsTimerActive+0x46>
            }
            else
            {
                xReturn = pdTRUE;
 80074f6:	2301      	movs	r3, #1
 80074f8:	617b      	str	r3, [r7, #20]
            }
        }
        taskEXIT_CRITICAL();
 80074fa:	f000 f989 	bl	8007810 <vPortExitCritical>

        return xReturn;
 80074fe:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 Can't be pointer to const due to the typedef. */
 8007500:	4618      	mov	r0, r3
 8007502:	3718      	adds	r7, #24
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}

08007508 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8007508:	b580      	push	{r7, lr}
 800750a:	b086      	sub	sp, #24
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d10b      	bne.n	8007532 <pvTimerGetTimerID+0x2a>
        __asm volatile
 800751a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	60fb      	str	r3, [r7, #12]
    }
 800752c:	bf00      	nop
 800752e:	bf00      	nop
 8007530:	e7fd      	b.n	800752e <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 8007532:	f000 f93b 	bl	80077ac <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	69db      	ldr	r3, [r3, #28]
 800753a:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 800753c:	f000 f968 	bl	8007810 <vPortExitCritical>

        return pvReturn;
 8007540:	693b      	ldr	r3, [r7, #16]
    }
 8007542:	4618      	mov	r0, r3
 8007544:	3718      	adds	r7, #24
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
	...

0800754c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800754c:	b480      	push	{r7}
 800754e:	b085      	sub	sp, #20
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	60b9      	str	r1, [r7, #8]
 8007556:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	3b04      	subs	r3, #4
 800755c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007564:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	3b04      	subs	r3, #4
 800756a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	f023 0201 	bic.w	r2, r3, #1
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	3b04      	subs	r3, #4
 800757a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800757c:	4a0c      	ldr	r2, [pc, #48]	@ (80075b0 <pxPortInitialiseStack+0x64>)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	3b14      	subs	r3, #20
 8007586:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	3b04      	subs	r3, #4
 8007592:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	f06f 0202 	mvn.w	r2, #2
 800759a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	3b20      	subs	r3, #32
 80075a0:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80075a2:	68fb      	ldr	r3, [r7, #12]
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr
 80075b0:	080075b5 	.word	0x080075b5

080075b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80075ba:	2300      	movs	r3, #0
 80075bc:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80075be:	4b13      	ldr	r3, [pc, #76]	@ (800760c <prvTaskExitError+0x58>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c6:	d00b      	beq.n	80075e0 <prvTaskExitError+0x2c>
        __asm volatile
 80075c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075cc:	f383 8811 	msr	BASEPRI, r3
 80075d0:	f3bf 8f6f 	isb	sy
 80075d4:	f3bf 8f4f 	dsb	sy
 80075d8:	60fb      	str	r3, [r7, #12]
    }
 80075da:	bf00      	nop
 80075dc:	bf00      	nop
 80075de:	e7fd      	b.n	80075dc <prvTaskExitError+0x28>
        __asm volatile
 80075e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e4:	f383 8811 	msr	BASEPRI, r3
 80075e8:	f3bf 8f6f 	isb	sy
 80075ec:	f3bf 8f4f 	dsb	sy
 80075f0:	60bb      	str	r3, [r7, #8]
    }
 80075f2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80075f4:	bf00      	nop
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d0fc      	beq.n	80075f6 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80075fc:	bf00      	nop
 80075fe:	bf00      	nop
 8007600:	3714      	adds	r7, #20
 8007602:	46bd      	mov	sp, r7
 8007604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007608:	4770      	bx	lr
 800760a:	bf00      	nop
 800760c:	2000002c 	.word	0x2000002c

08007610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8007610:	4b07      	ldr	r3, [pc, #28]	@ (8007630 <pxCurrentTCBConst2>)
 8007612:	6819      	ldr	r1, [r3, #0]
 8007614:	6808      	ldr	r0, [r1, #0]
 8007616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800761a:	f380 8809 	msr	PSP, r0
 800761e:	f3bf 8f6f 	isb	sy
 8007622:	f04f 0000 	mov.w	r0, #0
 8007626:	f380 8811 	msr	BASEPRI, r0
 800762a:	4770      	bx	lr
 800762c:	f3af 8000 	nop.w

08007630 <pxCurrentTCBConst2>:
 8007630:	2000021c 	.word	0x2000021c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8007634:	bf00      	nop
 8007636:	bf00      	nop

08007638 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8007638:	4808      	ldr	r0, [pc, #32]	@ (800765c <prvPortStartFirstTask+0x24>)
 800763a:	6800      	ldr	r0, [r0, #0]
 800763c:	6800      	ldr	r0, [r0, #0]
 800763e:	f380 8808 	msr	MSP, r0
 8007642:	f04f 0000 	mov.w	r0, #0
 8007646:	f380 8814 	msr	CONTROL, r0
 800764a:	b662      	cpsie	i
 800764c:	b661      	cpsie	f
 800764e:	f3bf 8f4f 	dsb	sy
 8007652:	f3bf 8f6f 	isb	sy
 8007656:	df00      	svc	0
 8007658:	bf00      	nop
 800765a:	0000      	.short	0x0000
 800765c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8007660:	bf00      	nop
 8007662:	bf00      	nop

08007664 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b086      	sub	sp, #24
 8007668:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800766a:	4b47      	ldr	r3, [pc, #284]	@ (8007788 <xPortStartScheduler+0x124>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a47      	ldr	r2, [pc, #284]	@ (800778c <xPortStartScheduler+0x128>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d10b      	bne.n	800768c <xPortStartScheduler+0x28>
        __asm volatile
 8007674:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007678:	f383 8811 	msr	BASEPRI, r3
 800767c:	f3bf 8f6f 	isb	sy
 8007680:	f3bf 8f4f 	dsb	sy
 8007684:	60fb      	str	r3, [r7, #12]
    }
 8007686:	bf00      	nop
 8007688:	bf00      	nop
 800768a:	e7fd      	b.n	8007688 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800768c:	4b3e      	ldr	r3, [pc, #248]	@ (8007788 <xPortStartScheduler+0x124>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a3f      	ldr	r2, [pc, #252]	@ (8007790 <xPortStartScheduler+0x12c>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d10b      	bne.n	80076ae <xPortStartScheduler+0x4a>
        __asm volatile
 8007696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800769a:	f383 8811 	msr	BASEPRI, r3
 800769e:	f3bf 8f6f 	isb	sy
 80076a2:	f3bf 8f4f 	dsb	sy
 80076a6:	613b      	str	r3, [r7, #16]
    }
 80076a8:	bf00      	nop
 80076aa:	bf00      	nop
 80076ac:	e7fd      	b.n	80076aa <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80076ae:	4b39      	ldr	r3, [pc, #228]	@ (8007794 <xPortStartScheduler+0x130>)
 80076b0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	781b      	ldrb	r3, [r3, #0]
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	22ff      	movs	r2, #255	@ 0xff
 80076be:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80076c8:	78fb      	ldrb	r3, [r7, #3]
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80076d0:	b2da      	uxtb	r2, r3
 80076d2:	4b31      	ldr	r3, [pc, #196]	@ (8007798 <xPortStartScheduler+0x134>)
 80076d4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80076d6:	4b31      	ldr	r3, [pc, #196]	@ (800779c <xPortStartScheduler+0x138>)
 80076d8:	2207      	movs	r2, #7
 80076da:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076dc:	e009      	b.n	80076f2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80076de:	4b2f      	ldr	r3, [pc, #188]	@ (800779c <xPortStartScheduler+0x138>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	3b01      	subs	r3, #1
 80076e4:	4a2d      	ldr	r2, [pc, #180]	@ (800779c <xPortStartScheduler+0x138>)
 80076e6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80076e8:	78fb      	ldrb	r3, [r7, #3]
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	005b      	lsls	r3, r3, #1
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80076f2:	78fb      	ldrb	r3, [r7, #3]
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076fa:	2b80      	cmp	r3, #128	@ 0x80
 80076fc:	d0ef      	beq.n	80076de <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80076fe:	4b27      	ldr	r3, [pc, #156]	@ (800779c <xPortStartScheduler+0x138>)
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f1c3 0307 	rsb	r3, r3, #7
 8007706:	2b04      	cmp	r3, #4
 8007708:	d00b      	beq.n	8007722 <xPortStartScheduler+0xbe>
        __asm volatile
 800770a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800770e:	f383 8811 	msr	BASEPRI, r3
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	60bb      	str	r3, [r7, #8]
    }
 800771c:	bf00      	nop
 800771e:	bf00      	nop
 8007720:	e7fd      	b.n	800771e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007722:	4b1e      	ldr	r3, [pc, #120]	@ (800779c <xPortStartScheduler+0x138>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	021b      	lsls	r3, r3, #8
 8007728:	4a1c      	ldr	r2, [pc, #112]	@ (800779c <xPortStartScheduler+0x138>)
 800772a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800772c:	4b1b      	ldr	r3, [pc, #108]	@ (800779c <xPortStartScheduler+0x138>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007734:	4a19      	ldr	r2, [pc, #100]	@ (800779c <xPortStartScheduler+0x138>)
 8007736:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	b2da      	uxtb	r2, r3
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8007740:	4b17      	ldr	r3, [pc, #92]	@ (80077a0 <xPortStartScheduler+0x13c>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a16      	ldr	r2, [pc, #88]	@ (80077a0 <xPortStartScheduler+0x13c>)
 8007746:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800774a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800774c:	4b14      	ldr	r3, [pc, #80]	@ (80077a0 <xPortStartScheduler+0x13c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a13      	ldr	r2, [pc, #76]	@ (80077a0 <xPortStartScheduler+0x13c>)
 8007752:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007756:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8007758:	f000 f8e0 	bl	800791c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800775c:	4b11      	ldr	r3, [pc, #68]	@ (80077a4 <xPortStartScheduler+0x140>)
 800775e:	2200      	movs	r2, #0
 8007760:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8007762:	f000 f8ff 	bl	8007964 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007766:	4b10      	ldr	r3, [pc, #64]	@ (80077a8 <xPortStartScheduler+0x144>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a0f      	ldr	r2, [pc, #60]	@ (80077a8 <xPortStartScheduler+0x144>)
 800776c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007770:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8007772:	f7ff ff61 	bl	8007638 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8007776:	f7fe fd7d 	bl	8006274 <vTaskSwitchContext>
    prvTaskExitError();
 800777a:	f7ff ff1b 	bl	80075b4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800777e:	2300      	movs	r3, #0
}
 8007780:	4618      	mov	r0, r3
 8007782:	3718      	adds	r7, #24
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	e000ed00 	.word	0xe000ed00
 800778c:	410fc271 	.word	0x410fc271
 8007790:	410fc270 	.word	0x410fc270
 8007794:	e000e400 	.word	0xe000e400
 8007798:	2000035c 	.word	0x2000035c
 800779c:	20000360 	.word	0x20000360
 80077a0:	e000ed20 	.word	0xe000ed20
 80077a4:	2000002c 	.word	0x2000002c
 80077a8:	e000ef34 	.word	0xe000ef34

080077ac <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
        __asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b6:	f383 8811 	msr	BASEPRI, r3
 80077ba:	f3bf 8f6f 	isb	sy
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	607b      	str	r3, [r7, #4]
    }
 80077c4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80077c6:	4b10      	ldr	r3, [pc, #64]	@ (8007808 <vPortEnterCritical+0x5c>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3301      	adds	r3, #1
 80077cc:	4a0e      	ldr	r2, [pc, #56]	@ (8007808 <vPortEnterCritical+0x5c>)
 80077ce:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80077d0:	4b0d      	ldr	r3, [pc, #52]	@ (8007808 <vPortEnterCritical+0x5c>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	2b01      	cmp	r3, #1
 80077d6:	d110      	bne.n	80077fa <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80077d8:	4b0c      	ldr	r3, [pc, #48]	@ (800780c <vPortEnterCritical+0x60>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	b2db      	uxtb	r3, r3
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d00b      	beq.n	80077fa <vPortEnterCritical+0x4e>
        __asm volatile
 80077e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e6:	f383 8811 	msr	BASEPRI, r3
 80077ea:	f3bf 8f6f 	isb	sy
 80077ee:	f3bf 8f4f 	dsb	sy
 80077f2:	603b      	str	r3, [r7, #0]
    }
 80077f4:	bf00      	nop
 80077f6:	bf00      	nop
 80077f8:	e7fd      	b.n	80077f6 <vPortEnterCritical+0x4a>
    }
}
 80077fa:	bf00      	nop
 80077fc:	370c      	adds	r7, #12
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	2000002c 	.word	0x2000002c
 800780c:	e000ed04 	.word	0xe000ed04

08007810 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8007816:	4b12      	ldr	r3, [pc, #72]	@ (8007860 <vPortExitCritical+0x50>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d10b      	bne.n	8007836 <vPortExitCritical+0x26>
        __asm volatile
 800781e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	607b      	str	r3, [r7, #4]
    }
 8007830:	bf00      	nop
 8007832:	bf00      	nop
 8007834:	e7fd      	b.n	8007832 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8007836:	4b0a      	ldr	r3, [pc, #40]	@ (8007860 <vPortExitCritical+0x50>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	3b01      	subs	r3, #1
 800783c:	4a08      	ldr	r2, [pc, #32]	@ (8007860 <vPortExitCritical+0x50>)
 800783e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8007840:	4b07      	ldr	r3, [pc, #28]	@ (8007860 <vPortExitCritical+0x50>)
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d105      	bne.n	8007854 <vPortExitCritical+0x44>
 8007848:	2300      	movs	r3, #0
 800784a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	f383 8811 	msr	BASEPRI, r3
    }
 8007852:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8007854:	bf00      	nop
 8007856:	370c      	adds	r7, #12
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr
 8007860:	2000002c 	.word	0x2000002c
	...

08007870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8007870:	f3ef 8009 	mrs	r0, PSP
 8007874:	f3bf 8f6f 	isb	sy
 8007878:	4b15      	ldr	r3, [pc, #84]	@ (80078d0 <pxCurrentTCBConst>)
 800787a:	681a      	ldr	r2, [r3, #0]
 800787c:	f01e 0f10 	tst.w	lr, #16
 8007880:	bf08      	it	eq
 8007882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800788a:	6010      	str	r0, [r2, #0]
 800788c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007890:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007894:	f380 8811 	msr	BASEPRI, r0
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	f3bf 8f6f 	isb	sy
 80078a0:	f7fe fce8 	bl	8006274 <vTaskSwitchContext>
 80078a4:	f04f 0000 	mov.w	r0, #0
 80078a8:	f380 8811 	msr	BASEPRI, r0
 80078ac:	bc09      	pop	{r0, r3}
 80078ae:	6819      	ldr	r1, [r3, #0]
 80078b0:	6808      	ldr	r0, [r1, #0]
 80078b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078b6:	f01e 0f10 	tst.w	lr, #16
 80078ba:	bf08      	it	eq
 80078bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80078c0:	f380 8809 	msr	PSP, r0
 80078c4:	f3bf 8f6f 	isb	sy
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	f3af 8000 	nop.w

080078d0 <pxCurrentTCBConst>:
 80078d0:	2000021c 	.word	0x2000021c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80078d4:	bf00      	nop
 80078d6:	bf00      	nop

080078d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
        __asm volatile
 80078de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e2:	f383 8811 	msr	BASEPRI, r3
 80078e6:	f3bf 8f6f 	isb	sy
 80078ea:	f3bf 8f4f 	dsb	sy
 80078ee:	607b      	str	r3, [r7, #4]
    }
 80078f0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80078f2:	f7fe fc29 	bl	8006148 <xTaskIncrementTick>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d003      	beq.n	8007904 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80078fc:	4b06      	ldr	r3, [pc, #24]	@ (8007918 <SysTick_Handler+0x40>)
 80078fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007902:	601a      	str	r2, [r3, #0]
 8007904:	2300      	movs	r3, #0
 8007906:	603b      	str	r3, [r7, #0]
        __asm volatile
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	f383 8811 	msr	BASEPRI, r3
    }
 800790e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8007910:	bf00      	nop
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	e000ed04 	.word	0xe000ed04

0800791c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800791c:	b480      	push	{r7}
 800791e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007920:	4b0b      	ldr	r3, [pc, #44]	@ (8007950 <vPortSetupTimerInterrupt+0x34>)
 8007922:	2200      	movs	r2, #0
 8007924:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007926:	4b0b      	ldr	r3, [pc, #44]	@ (8007954 <vPortSetupTimerInterrupt+0x38>)
 8007928:	2200      	movs	r2, #0
 800792a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800792c:	4b0a      	ldr	r3, [pc, #40]	@ (8007958 <vPortSetupTimerInterrupt+0x3c>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a0a      	ldr	r2, [pc, #40]	@ (800795c <vPortSetupTimerInterrupt+0x40>)
 8007932:	fba2 2303 	umull	r2, r3, r2, r3
 8007936:	099b      	lsrs	r3, r3, #6
 8007938:	4a09      	ldr	r2, [pc, #36]	@ (8007960 <vPortSetupTimerInterrupt+0x44>)
 800793a:	3b01      	subs	r3, #1
 800793c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800793e:	4b04      	ldr	r3, [pc, #16]	@ (8007950 <vPortSetupTimerInterrupt+0x34>)
 8007940:	2207      	movs	r2, #7
 8007942:	601a      	str	r2, [r3, #0]
}
 8007944:	bf00      	nop
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	e000e010 	.word	0xe000e010
 8007954:	e000e018 	.word	0xe000e018
 8007958:	20000018 	.word	0x20000018
 800795c:	10624dd3 	.word	0x10624dd3
 8007960:	e000e014 	.word	0xe000e014

08007964 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8007964:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007974 <vPortEnableVFP+0x10>
 8007968:	6801      	ldr	r1, [r0, #0]
 800796a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800796e:	6001      	str	r1, [r0, #0]
 8007970:	4770      	bx	lr
 8007972:	0000      	.short	0x0000
 8007974:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8007978:	bf00      	nop
 800797a:	bf00      	nop

0800797c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800797c:	b480      	push	{r7}
 800797e:	b085      	sub	sp, #20
 8007980:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8007982:	f3ef 8305 	mrs	r3, IPSR
 8007986:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2b0f      	cmp	r3, #15
 800798c:	d915      	bls.n	80079ba <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800798e:	4a18      	ldr	r2, [pc, #96]	@ (80079f0 <vPortValidateInterruptPriority+0x74>)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	4413      	add	r3, r2
 8007994:	781b      	ldrb	r3, [r3, #0]
 8007996:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007998:	4b16      	ldr	r3, [pc, #88]	@ (80079f4 <vPortValidateInterruptPriority+0x78>)
 800799a:	781b      	ldrb	r3, [r3, #0]
 800799c:	7afa      	ldrb	r2, [r7, #11]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d20b      	bcs.n	80079ba <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 80079a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a6:	f383 8811 	msr	BASEPRI, r3
 80079aa:	f3bf 8f6f 	isb	sy
 80079ae:	f3bf 8f4f 	dsb	sy
 80079b2:	607b      	str	r3, [r7, #4]
    }
 80079b4:	bf00      	nop
 80079b6:	bf00      	nop
 80079b8:	e7fd      	b.n	80079b6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80079ba:	4b0f      	ldr	r3, [pc, #60]	@ (80079f8 <vPortValidateInterruptPriority+0x7c>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80079c2:	4b0e      	ldr	r3, [pc, #56]	@ (80079fc <vPortValidateInterruptPriority+0x80>)
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d90b      	bls.n	80079e2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 80079ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079ce:	f383 8811 	msr	BASEPRI, r3
 80079d2:	f3bf 8f6f 	isb	sy
 80079d6:	f3bf 8f4f 	dsb	sy
 80079da:	603b      	str	r3, [r7, #0]
    }
 80079dc:	bf00      	nop
 80079de:	bf00      	nop
 80079e0:	e7fd      	b.n	80079de <vPortValidateInterruptPriority+0x62>
    }
 80079e2:	bf00      	nop
 80079e4:	3714      	adds	r7, #20
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	e000e3f0 	.word	0xe000e3f0
 80079f4:	2000035c 	.word	0x2000035c
 80079f8:	e000ed0c 	.word	0xe000ed0c
 80079fc:	20000360 	.word	0x20000360

08007a00 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b08a      	sub	sp, #40	@ 0x28
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8007a0c:	f7fe faee 	bl	8005fec <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8007a10:	4b66      	ldr	r3, [pc, #408]	@ (8007bac <pvPortMalloc+0x1ac>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d101      	bne.n	8007a1c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8007a18:	f000 f938 	bl	8007c8c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007a1c:	4b64      	ldr	r3, [pc, #400]	@ (8007bb0 <pvPortMalloc+0x1b0>)
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4013      	ands	r3, r2
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f040 80a9 	bne.w	8007b7c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d02e      	beq.n	8007a8e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8007a30:	2208      	movs	r2, #8
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8007a36:	687a      	ldr	r2, [r7, #4]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	d228      	bcs.n	8007a8e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8007a3c:	2208      	movs	r2, #8
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4413      	add	r3, r2
 8007a42:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f003 0307 	and.w	r3, r3, #7
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d022      	beq.n	8007a94 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f023 0307 	bic.w	r3, r3, #7
 8007a54:	3308      	adds	r3, #8
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	429a      	cmp	r2, r3
 8007a5a:	d215      	bcs.n	8007a88 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f023 0307 	bic.w	r3, r3, #7
 8007a62:	3308      	adds	r3, #8
 8007a64:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f003 0307 	and.w	r3, r3, #7
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d011      	beq.n	8007a94 <pvPortMalloc+0x94>
        __asm volatile
 8007a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a74:	f383 8811 	msr	BASEPRI, r3
 8007a78:	f3bf 8f6f 	isb	sy
 8007a7c:	f3bf 8f4f 	dsb	sy
 8007a80:	617b      	str	r3, [r7, #20]
    }
 8007a82:	bf00      	nop
 8007a84:	bf00      	nop
 8007a86:	e7fd      	b.n	8007a84 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8007a88:	2300      	movs	r3, #0
 8007a8a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a8c:	e002      	b.n	8007a94 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	607b      	str	r3, [r7, #4]
 8007a92:	e000      	b.n	8007a96 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007a94:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d06f      	beq.n	8007b7c <pvPortMalloc+0x17c>
 8007a9c:	4b45      	ldr	r3, [pc, #276]	@ (8007bb4 <pvPortMalloc+0x1b4>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d86a      	bhi.n	8007b7c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8007aa6:	4b44      	ldr	r3, [pc, #272]	@ (8007bb8 <pvPortMalloc+0x1b8>)
 8007aa8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8007aaa:	4b43      	ldr	r3, [pc, #268]	@ (8007bb8 <pvPortMalloc+0x1b8>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007ab0:	e004      	b.n	8007abc <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8007ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8007ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d903      	bls.n	8007ace <pvPortMalloc+0xce>
 8007ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1f1      	bne.n	8007ab2 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8007ace:	4b37      	ldr	r3, [pc, #220]	@ (8007bac <pvPortMalloc+0x1ac>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d051      	beq.n	8007b7c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ad8:	6a3b      	ldr	r3, [r7, #32]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2208      	movs	r2, #8
 8007ade:	4413      	add	r3, r2
 8007ae0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae4:	681a      	ldr	r2, [r3, #0]
 8007ae6:	6a3b      	ldr	r3, [r7, #32]
 8007ae8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aec:	685a      	ldr	r2, [r3, #4]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	1ad2      	subs	r2, r2, r3
 8007af2:	2308      	movs	r3, #8
 8007af4:	005b      	lsls	r3, r3, #1
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d920      	bls.n	8007b3c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	4413      	add	r3, r2
 8007b00:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	f003 0307 	and.w	r3, r3, #7
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d00b      	beq.n	8007b24 <pvPortMalloc+0x124>
        __asm volatile
 8007b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b10:	f383 8811 	msr	BASEPRI, r3
 8007b14:	f3bf 8f6f 	isb	sy
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	613b      	str	r3, [r7, #16]
    }
 8007b1e:	bf00      	nop
 8007b20:	bf00      	nop
 8007b22:	e7fd      	b.n	8007b20 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b26:	685a      	ldr	r2, [r3, #4]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	1ad2      	subs	r2, r2, r3
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8007b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b32:	687a      	ldr	r2, [r7, #4]
 8007b34:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007b36:	69b8      	ldr	r0, [r7, #24]
 8007b38:	f000 f90a 	bl	8007d50 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8007bb4 <pvPortMalloc+0x1b4>)
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	1ad3      	subs	r3, r2, r3
 8007b46:	4a1b      	ldr	r2, [pc, #108]	@ (8007bb4 <pvPortMalloc+0x1b4>)
 8007b48:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007b4a:	4b1a      	ldr	r3, [pc, #104]	@ (8007bb4 <pvPortMalloc+0x1b4>)
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	4b1b      	ldr	r3, [pc, #108]	@ (8007bbc <pvPortMalloc+0x1bc>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d203      	bcs.n	8007b5e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007b56:	4b17      	ldr	r3, [pc, #92]	@ (8007bb4 <pvPortMalloc+0x1b4>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a18      	ldr	r2, [pc, #96]	@ (8007bbc <pvPortMalloc+0x1bc>)
 8007b5c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b60:	685a      	ldr	r2, [r3, #4]
 8007b62:	4b13      	ldr	r3, [pc, #76]	@ (8007bb0 <pvPortMalloc+0x1b0>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	431a      	orrs	r2, r3
 8007b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8007b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6e:	2200      	movs	r2, #0
 8007b70:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8007b72:	4b13      	ldr	r3, [pc, #76]	@ (8007bc0 <pvPortMalloc+0x1c0>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	3301      	adds	r3, #1
 8007b78:	4a11      	ldr	r2, [pc, #68]	@ (8007bc0 <pvPortMalloc+0x1c0>)
 8007b7a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8007b7c:	f7fe fa44 	bl	8006008 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	f003 0307 	and.w	r3, r3, #7
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00b      	beq.n	8007ba2 <pvPortMalloc+0x1a2>
        __asm volatile
 8007b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b8e:	f383 8811 	msr	BASEPRI, r3
 8007b92:	f3bf 8f6f 	isb	sy
 8007b96:	f3bf 8f4f 	dsb	sy
 8007b9a:	60fb      	str	r3, [r7, #12]
    }
 8007b9c:	bf00      	nop
 8007b9e:	bf00      	nop
 8007ba0:	e7fd      	b.n	8007b9e <pvPortMalloc+0x19e>
    return pvReturn;
 8007ba2:	69fb      	ldr	r3, [r7, #28]
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3728      	adds	r7, #40	@ 0x28
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	20012f6c 	.word	0x20012f6c
 8007bb0:	20012f80 	.word	0x20012f80
 8007bb4:	20012f70 	.word	0x20012f70
 8007bb8:	20012f64 	.word	0x20012f64
 8007bbc:	20012f74 	.word	0x20012f74
 8007bc0:	20012f78 	.word	0x20012f78

08007bc4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b086      	sub	sp, #24
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d04f      	beq.n	8007c76 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007bd6:	2308      	movs	r3, #8
 8007bd8:	425b      	negs	r3, r3
 8007bda:	697a      	ldr	r2, [r7, #20]
 8007bdc:	4413      	add	r3, r2
 8007bde:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007be0:	697b      	ldr	r3, [r7, #20]
 8007be2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007be4:	693b      	ldr	r3, [r7, #16]
 8007be6:	685a      	ldr	r2, [r3, #4]
 8007be8:	4b25      	ldr	r3, [pc, #148]	@ (8007c80 <vPortFree+0xbc>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4013      	ands	r3, r2
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d10b      	bne.n	8007c0a <vPortFree+0x46>
        __asm volatile
 8007bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	60fb      	str	r3, [r7, #12]
    }
 8007c04:	bf00      	nop
 8007c06:	bf00      	nop
 8007c08:	e7fd      	b.n	8007c06 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d00b      	beq.n	8007c2a <vPortFree+0x66>
        __asm volatile
 8007c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c16:	f383 8811 	msr	BASEPRI, r3
 8007c1a:	f3bf 8f6f 	isb	sy
 8007c1e:	f3bf 8f4f 	dsb	sy
 8007c22:	60bb      	str	r3, [r7, #8]
    }
 8007c24:	bf00      	nop
 8007c26:	bf00      	nop
 8007c28:	e7fd      	b.n	8007c26 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	4b14      	ldr	r3, [pc, #80]	@ (8007c80 <vPortFree+0xbc>)
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	4013      	ands	r3, r2
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d01e      	beq.n	8007c76 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d11a      	bne.n	8007c76 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	685a      	ldr	r2, [r3, #4]
 8007c44:	4b0e      	ldr	r3, [pc, #56]	@ (8007c80 <vPortFree+0xbc>)
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	43db      	mvns	r3, r3
 8007c4a:	401a      	ands	r2, r3
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8007c50:	f7fe f9cc 	bl	8005fec <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	685a      	ldr	r2, [r3, #4]
 8007c58:	4b0a      	ldr	r3, [pc, #40]	@ (8007c84 <vPortFree+0xc0>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	4a09      	ldr	r2, [pc, #36]	@ (8007c84 <vPortFree+0xc0>)
 8007c60:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007c62:	6938      	ldr	r0, [r7, #16]
 8007c64:	f000 f874 	bl	8007d50 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8007c68:	4b07      	ldr	r3, [pc, #28]	@ (8007c88 <vPortFree+0xc4>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	3301      	adds	r3, #1
 8007c6e:	4a06      	ldr	r2, [pc, #24]	@ (8007c88 <vPortFree+0xc4>)
 8007c70:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8007c72:	f7fe f9c9 	bl	8006008 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8007c76:	bf00      	nop
 8007c78:	3718      	adds	r7, #24
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	20012f80 	.word	0x20012f80
 8007c84:	20012f70 	.word	0x20012f70
 8007c88:	20012f7c 	.word	0x20012f7c

08007c8c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b085      	sub	sp, #20
 8007c90:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007c92:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8007c96:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8007c98:	4b27      	ldr	r3, [pc, #156]	@ (8007d38 <prvHeapInit+0xac>)
 8007c9a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f003 0307 	and.w	r3, r3, #7
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00c      	beq.n	8007cc0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	3307      	adds	r3, #7
 8007caa:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f023 0307 	bic.w	r3, r3, #7
 8007cb2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007cb4:	68ba      	ldr	r2, [r7, #8]
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	4a1f      	ldr	r2, [pc, #124]	@ (8007d38 <prvHeapInit+0xac>)
 8007cbc:	4413      	add	r3, r2
 8007cbe:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007cc4:	4a1d      	ldr	r2, [pc, #116]	@ (8007d3c <prvHeapInit+0xb0>)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8007cca:	4b1c      	ldr	r3, [pc, #112]	@ (8007d3c <prvHeapInit+0xb0>)
 8007ccc:	2200      	movs	r2, #0
 8007cce:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	68ba      	ldr	r2, [r7, #8]
 8007cd4:	4413      	add	r3, r2
 8007cd6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007cd8:	2208      	movs	r2, #8
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	1a9b      	subs	r3, r3, r2
 8007cde:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f023 0307 	bic.w	r3, r3, #7
 8007ce6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	4a15      	ldr	r2, [pc, #84]	@ (8007d40 <prvHeapInit+0xb4>)
 8007cec:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8007cee:	4b14      	ldr	r3, [pc, #80]	@ (8007d40 <prvHeapInit+0xb4>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007cf6:	4b12      	ldr	r3, [pc, #72]	@ (8007d40 <prvHeapInit+0xb4>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	68fa      	ldr	r2, [r7, #12]
 8007d06:	1ad2      	subs	r2, r2, r3
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8007d40 <prvHeapInit+0xb4>)
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	685b      	ldr	r3, [r3, #4]
 8007d18:	4a0a      	ldr	r2, [pc, #40]	@ (8007d44 <prvHeapInit+0xb8>)
 8007d1a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	4a09      	ldr	r2, [pc, #36]	@ (8007d48 <prvHeapInit+0xbc>)
 8007d22:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007d24:	4b09      	ldr	r3, [pc, #36]	@ (8007d4c <prvHeapInit+0xc0>)
 8007d26:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007d2a:	601a      	str	r2, [r3, #0]
}
 8007d2c:	bf00      	nop
 8007d2e:	3714      	adds	r7, #20
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr
 8007d38:	20000364 	.word	0x20000364
 8007d3c:	20012f64 	.word	0x20012f64
 8007d40:	20012f6c 	.word	0x20012f6c
 8007d44:	20012f74 	.word	0x20012f74
 8007d48:	20012f70 	.word	0x20012f70
 8007d4c:	20012f80 	.word	0x20012f80

08007d50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8007d50:	b480      	push	{r7}
 8007d52:	b085      	sub	sp, #20
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007d58:	4b28      	ldr	r3, [pc, #160]	@ (8007dfc <prvInsertBlockIntoFreeList+0xac>)
 8007d5a:	60fb      	str	r3, [r7, #12]
 8007d5c:	e002      	b.n	8007d64 <prvInsertBlockIntoFreeList+0x14>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	60fb      	str	r3, [r7, #12]
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	429a      	cmp	r2, r3
 8007d6c:	d8f7      	bhi.n	8007d5e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	4413      	add	r3, r2
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d108      	bne.n	8007d92 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	685a      	ldr	r2, [r3, #4]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	441a      	add	r2, r3
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	685b      	ldr	r3, [r3, #4]
 8007d9a:	68ba      	ldr	r2, [r7, #8]
 8007d9c:	441a      	add	r2, r3
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d118      	bne.n	8007dd8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	4b15      	ldr	r3, [pc, #84]	@ (8007e00 <prvInsertBlockIntoFreeList+0xb0>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d00d      	beq.n	8007dce <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	685a      	ldr	r2, [r3, #4]
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	441a      	add	r2, r3
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	601a      	str	r2, [r3, #0]
 8007dcc:	e008      	b.n	8007de0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007dce:	4b0c      	ldr	r3, [pc, #48]	@ (8007e00 <prvInsertBlockIntoFreeList+0xb0>)
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	601a      	str	r2, [r3, #0]
 8007dd6:	e003      	b.n	8007de0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681a      	ldr	r2, [r3, #0]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d002      	beq.n	8007dee <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	687a      	ldr	r2, [r7, #4]
 8007dec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007dee:	bf00      	nop
 8007df0:	3714      	adds	r7, #20
 8007df2:	46bd      	mov	sp, r7
 8007df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df8:	4770      	bx	lr
 8007dfa:	bf00      	nop
 8007dfc:	20012f64 	.word	0x20012f64
 8007e00:	20012f6c 	.word	0x20012f6c

08007e04 <siprintf>:
 8007e04:	b40e      	push	{r1, r2, r3}
 8007e06:	b510      	push	{r4, lr}
 8007e08:	b09d      	sub	sp, #116	@ 0x74
 8007e0a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007e0c:	9002      	str	r0, [sp, #8]
 8007e0e:	9006      	str	r0, [sp, #24]
 8007e10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007e14:	480a      	ldr	r0, [pc, #40]	@ (8007e40 <siprintf+0x3c>)
 8007e16:	9107      	str	r1, [sp, #28]
 8007e18:	9104      	str	r1, [sp, #16]
 8007e1a:	490a      	ldr	r1, [pc, #40]	@ (8007e44 <siprintf+0x40>)
 8007e1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e20:	9105      	str	r1, [sp, #20]
 8007e22:	2400      	movs	r4, #0
 8007e24:	a902      	add	r1, sp, #8
 8007e26:	6800      	ldr	r0, [r0, #0]
 8007e28:	9301      	str	r3, [sp, #4]
 8007e2a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007e2c:	f000 f99c 	bl	8008168 <_svfiprintf_r>
 8007e30:	9b02      	ldr	r3, [sp, #8]
 8007e32:	701c      	strb	r4, [r3, #0]
 8007e34:	b01d      	add	sp, #116	@ 0x74
 8007e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e3a:	b003      	add	sp, #12
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	20000030 	.word	0x20000030
 8007e44:	ffff0208 	.word	0xffff0208

08007e48 <memset>:
 8007e48:	4402      	add	r2, r0
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d100      	bne.n	8007e52 <memset+0xa>
 8007e50:	4770      	bx	lr
 8007e52:	f803 1b01 	strb.w	r1, [r3], #1
 8007e56:	e7f9      	b.n	8007e4c <memset+0x4>

08007e58 <__libc_init_array>:
 8007e58:	b570      	push	{r4, r5, r6, lr}
 8007e5a:	4d0d      	ldr	r5, [pc, #52]	@ (8007e90 <__libc_init_array+0x38>)
 8007e5c:	4c0d      	ldr	r4, [pc, #52]	@ (8007e94 <__libc_init_array+0x3c>)
 8007e5e:	1b64      	subs	r4, r4, r5
 8007e60:	10a4      	asrs	r4, r4, #2
 8007e62:	2600      	movs	r6, #0
 8007e64:	42a6      	cmp	r6, r4
 8007e66:	d109      	bne.n	8007e7c <__libc_init_array+0x24>
 8007e68:	4d0b      	ldr	r5, [pc, #44]	@ (8007e98 <__libc_init_array+0x40>)
 8007e6a:	4c0c      	ldr	r4, [pc, #48]	@ (8007e9c <__libc_init_array+0x44>)
 8007e6c:	f000 fc72 	bl	8008754 <_init>
 8007e70:	1b64      	subs	r4, r4, r5
 8007e72:	10a4      	asrs	r4, r4, #2
 8007e74:	2600      	movs	r6, #0
 8007e76:	42a6      	cmp	r6, r4
 8007e78:	d105      	bne.n	8007e86 <__libc_init_array+0x2e>
 8007e7a:	bd70      	pop	{r4, r5, r6, pc}
 8007e7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e80:	4798      	blx	r3
 8007e82:	3601      	adds	r6, #1
 8007e84:	e7ee      	b.n	8007e64 <__libc_init_array+0xc>
 8007e86:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e8a:	4798      	blx	r3
 8007e8c:	3601      	adds	r6, #1
 8007e8e:	e7f2      	b.n	8007e76 <__libc_init_array+0x1e>
 8007e90:	08008bf4 	.word	0x08008bf4
 8007e94:	08008bf4 	.word	0x08008bf4
 8007e98:	08008bf4 	.word	0x08008bf4
 8007e9c:	08008bf8 	.word	0x08008bf8

08007ea0 <__retarget_lock_acquire_recursive>:
 8007ea0:	4770      	bx	lr

08007ea2 <__retarget_lock_release_recursive>:
 8007ea2:	4770      	bx	lr

08007ea4 <memcpy>:
 8007ea4:	440a      	add	r2, r1
 8007ea6:	4291      	cmp	r1, r2
 8007ea8:	f100 33ff 	add.w	r3, r0, #4294967295
 8007eac:	d100      	bne.n	8007eb0 <memcpy+0xc>
 8007eae:	4770      	bx	lr
 8007eb0:	b510      	push	{r4, lr}
 8007eb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007eb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007eba:	4291      	cmp	r1, r2
 8007ebc:	d1f9      	bne.n	8007eb2 <memcpy+0xe>
 8007ebe:	bd10      	pop	{r4, pc}

08007ec0 <_free_r>:
 8007ec0:	b538      	push	{r3, r4, r5, lr}
 8007ec2:	4605      	mov	r5, r0
 8007ec4:	2900      	cmp	r1, #0
 8007ec6:	d041      	beq.n	8007f4c <_free_r+0x8c>
 8007ec8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ecc:	1f0c      	subs	r4, r1, #4
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	bfb8      	it	lt
 8007ed2:	18e4      	addlt	r4, r4, r3
 8007ed4:	f000 f8e0 	bl	8008098 <__malloc_lock>
 8007ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8007f50 <_free_r+0x90>)
 8007eda:	6813      	ldr	r3, [r2, #0]
 8007edc:	b933      	cbnz	r3, 8007eec <_free_r+0x2c>
 8007ede:	6063      	str	r3, [r4, #4]
 8007ee0:	6014      	str	r4, [r2, #0]
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ee8:	f000 b8dc 	b.w	80080a4 <__malloc_unlock>
 8007eec:	42a3      	cmp	r3, r4
 8007eee:	d908      	bls.n	8007f02 <_free_r+0x42>
 8007ef0:	6820      	ldr	r0, [r4, #0]
 8007ef2:	1821      	adds	r1, r4, r0
 8007ef4:	428b      	cmp	r3, r1
 8007ef6:	bf01      	itttt	eq
 8007ef8:	6819      	ldreq	r1, [r3, #0]
 8007efa:	685b      	ldreq	r3, [r3, #4]
 8007efc:	1809      	addeq	r1, r1, r0
 8007efe:	6021      	streq	r1, [r4, #0]
 8007f00:	e7ed      	b.n	8007ede <_free_r+0x1e>
 8007f02:	461a      	mov	r2, r3
 8007f04:	685b      	ldr	r3, [r3, #4]
 8007f06:	b10b      	cbz	r3, 8007f0c <_free_r+0x4c>
 8007f08:	42a3      	cmp	r3, r4
 8007f0a:	d9fa      	bls.n	8007f02 <_free_r+0x42>
 8007f0c:	6811      	ldr	r1, [r2, #0]
 8007f0e:	1850      	adds	r0, r2, r1
 8007f10:	42a0      	cmp	r0, r4
 8007f12:	d10b      	bne.n	8007f2c <_free_r+0x6c>
 8007f14:	6820      	ldr	r0, [r4, #0]
 8007f16:	4401      	add	r1, r0
 8007f18:	1850      	adds	r0, r2, r1
 8007f1a:	4283      	cmp	r3, r0
 8007f1c:	6011      	str	r1, [r2, #0]
 8007f1e:	d1e0      	bne.n	8007ee2 <_free_r+0x22>
 8007f20:	6818      	ldr	r0, [r3, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	6053      	str	r3, [r2, #4]
 8007f26:	4408      	add	r0, r1
 8007f28:	6010      	str	r0, [r2, #0]
 8007f2a:	e7da      	b.n	8007ee2 <_free_r+0x22>
 8007f2c:	d902      	bls.n	8007f34 <_free_r+0x74>
 8007f2e:	230c      	movs	r3, #12
 8007f30:	602b      	str	r3, [r5, #0]
 8007f32:	e7d6      	b.n	8007ee2 <_free_r+0x22>
 8007f34:	6820      	ldr	r0, [r4, #0]
 8007f36:	1821      	adds	r1, r4, r0
 8007f38:	428b      	cmp	r3, r1
 8007f3a:	bf04      	itt	eq
 8007f3c:	6819      	ldreq	r1, [r3, #0]
 8007f3e:	685b      	ldreq	r3, [r3, #4]
 8007f40:	6063      	str	r3, [r4, #4]
 8007f42:	bf04      	itt	eq
 8007f44:	1809      	addeq	r1, r1, r0
 8007f46:	6021      	streq	r1, [r4, #0]
 8007f48:	6054      	str	r4, [r2, #4]
 8007f4a:	e7ca      	b.n	8007ee2 <_free_r+0x22>
 8007f4c:	bd38      	pop	{r3, r4, r5, pc}
 8007f4e:	bf00      	nop
 8007f50:	200130c8 	.word	0x200130c8

08007f54 <sbrk_aligned>:
 8007f54:	b570      	push	{r4, r5, r6, lr}
 8007f56:	4e0f      	ldr	r6, [pc, #60]	@ (8007f94 <sbrk_aligned+0x40>)
 8007f58:	460c      	mov	r4, r1
 8007f5a:	6831      	ldr	r1, [r6, #0]
 8007f5c:	4605      	mov	r5, r0
 8007f5e:	b911      	cbnz	r1, 8007f66 <sbrk_aligned+0x12>
 8007f60:	f000 fba4 	bl	80086ac <_sbrk_r>
 8007f64:	6030      	str	r0, [r6, #0]
 8007f66:	4621      	mov	r1, r4
 8007f68:	4628      	mov	r0, r5
 8007f6a:	f000 fb9f 	bl	80086ac <_sbrk_r>
 8007f6e:	1c43      	adds	r3, r0, #1
 8007f70:	d103      	bne.n	8007f7a <sbrk_aligned+0x26>
 8007f72:	f04f 34ff 	mov.w	r4, #4294967295
 8007f76:	4620      	mov	r0, r4
 8007f78:	bd70      	pop	{r4, r5, r6, pc}
 8007f7a:	1cc4      	adds	r4, r0, #3
 8007f7c:	f024 0403 	bic.w	r4, r4, #3
 8007f80:	42a0      	cmp	r0, r4
 8007f82:	d0f8      	beq.n	8007f76 <sbrk_aligned+0x22>
 8007f84:	1a21      	subs	r1, r4, r0
 8007f86:	4628      	mov	r0, r5
 8007f88:	f000 fb90 	bl	80086ac <_sbrk_r>
 8007f8c:	3001      	adds	r0, #1
 8007f8e:	d1f2      	bne.n	8007f76 <sbrk_aligned+0x22>
 8007f90:	e7ef      	b.n	8007f72 <sbrk_aligned+0x1e>
 8007f92:	bf00      	nop
 8007f94:	200130c4 	.word	0x200130c4

08007f98 <_malloc_r>:
 8007f98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f9c:	1ccd      	adds	r5, r1, #3
 8007f9e:	f025 0503 	bic.w	r5, r5, #3
 8007fa2:	3508      	adds	r5, #8
 8007fa4:	2d0c      	cmp	r5, #12
 8007fa6:	bf38      	it	cc
 8007fa8:	250c      	movcc	r5, #12
 8007faa:	2d00      	cmp	r5, #0
 8007fac:	4606      	mov	r6, r0
 8007fae:	db01      	blt.n	8007fb4 <_malloc_r+0x1c>
 8007fb0:	42a9      	cmp	r1, r5
 8007fb2:	d904      	bls.n	8007fbe <_malloc_r+0x26>
 8007fb4:	230c      	movs	r3, #12
 8007fb6:	6033      	str	r3, [r6, #0]
 8007fb8:	2000      	movs	r0, #0
 8007fba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007fbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008094 <_malloc_r+0xfc>
 8007fc2:	f000 f869 	bl	8008098 <__malloc_lock>
 8007fc6:	f8d8 3000 	ldr.w	r3, [r8]
 8007fca:	461c      	mov	r4, r3
 8007fcc:	bb44      	cbnz	r4, 8008020 <_malloc_r+0x88>
 8007fce:	4629      	mov	r1, r5
 8007fd0:	4630      	mov	r0, r6
 8007fd2:	f7ff ffbf 	bl	8007f54 <sbrk_aligned>
 8007fd6:	1c43      	adds	r3, r0, #1
 8007fd8:	4604      	mov	r4, r0
 8007fda:	d158      	bne.n	800808e <_malloc_r+0xf6>
 8007fdc:	f8d8 4000 	ldr.w	r4, [r8]
 8007fe0:	4627      	mov	r7, r4
 8007fe2:	2f00      	cmp	r7, #0
 8007fe4:	d143      	bne.n	800806e <_malloc_r+0xd6>
 8007fe6:	2c00      	cmp	r4, #0
 8007fe8:	d04b      	beq.n	8008082 <_malloc_r+0xea>
 8007fea:	6823      	ldr	r3, [r4, #0]
 8007fec:	4639      	mov	r1, r7
 8007fee:	4630      	mov	r0, r6
 8007ff0:	eb04 0903 	add.w	r9, r4, r3
 8007ff4:	f000 fb5a 	bl	80086ac <_sbrk_r>
 8007ff8:	4581      	cmp	r9, r0
 8007ffa:	d142      	bne.n	8008082 <_malloc_r+0xea>
 8007ffc:	6821      	ldr	r1, [r4, #0]
 8007ffe:	1a6d      	subs	r5, r5, r1
 8008000:	4629      	mov	r1, r5
 8008002:	4630      	mov	r0, r6
 8008004:	f7ff ffa6 	bl	8007f54 <sbrk_aligned>
 8008008:	3001      	adds	r0, #1
 800800a:	d03a      	beq.n	8008082 <_malloc_r+0xea>
 800800c:	6823      	ldr	r3, [r4, #0]
 800800e:	442b      	add	r3, r5
 8008010:	6023      	str	r3, [r4, #0]
 8008012:	f8d8 3000 	ldr.w	r3, [r8]
 8008016:	685a      	ldr	r2, [r3, #4]
 8008018:	bb62      	cbnz	r2, 8008074 <_malloc_r+0xdc>
 800801a:	f8c8 7000 	str.w	r7, [r8]
 800801e:	e00f      	b.n	8008040 <_malloc_r+0xa8>
 8008020:	6822      	ldr	r2, [r4, #0]
 8008022:	1b52      	subs	r2, r2, r5
 8008024:	d420      	bmi.n	8008068 <_malloc_r+0xd0>
 8008026:	2a0b      	cmp	r2, #11
 8008028:	d917      	bls.n	800805a <_malloc_r+0xc2>
 800802a:	1961      	adds	r1, r4, r5
 800802c:	42a3      	cmp	r3, r4
 800802e:	6025      	str	r5, [r4, #0]
 8008030:	bf18      	it	ne
 8008032:	6059      	strne	r1, [r3, #4]
 8008034:	6863      	ldr	r3, [r4, #4]
 8008036:	bf08      	it	eq
 8008038:	f8c8 1000 	streq.w	r1, [r8]
 800803c:	5162      	str	r2, [r4, r5]
 800803e:	604b      	str	r3, [r1, #4]
 8008040:	4630      	mov	r0, r6
 8008042:	f000 f82f 	bl	80080a4 <__malloc_unlock>
 8008046:	f104 000b 	add.w	r0, r4, #11
 800804a:	1d23      	adds	r3, r4, #4
 800804c:	f020 0007 	bic.w	r0, r0, #7
 8008050:	1ac2      	subs	r2, r0, r3
 8008052:	bf1c      	itt	ne
 8008054:	1a1b      	subne	r3, r3, r0
 8008056:	50a3      	strne	r3, [r4, r2]
 8008058:	e7af      	b.n	8007fba <_malloc_r+0x22>
 800805a:	6862      	ldr	r2, [r4, #4]
 800805c:	42a3      	cmp	r3, r4
 800805e:	bf0c      	ite	eq
 8008060:	f8c8 2000 	streq.w	r2, [r8]
 8008064:	605a      	strne	r2, [r3, #4]
 8008066:	e7eb      	b.n	8008040 <_malloc_r+0xa8>
 8008068:	4623      	mov	r3, r4
 800806a:	6864      	ldr	r4, [r4, #4]
 800806c:	e7ae      	b.n	8007fcc <_malloc_r+0x34>
 800806e:	463c      	mov	r4, r7
 8008070:	687f      	ldr	r7, [r7, #4]
 8008072:	e7b6      	b.n	8007fe2 <_malloc_r+0x4a>
 8008074:	461a      	mov	r2, r3
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	42a3      	cmp	r3, r4
 800807a:	d1fb      	bne.n	8008074 <_malloc_r+0xdc>
 800807c:	2300      	movs	r3, #0
 800807e:	6053      	str	r3, [r2, #4]
 8008080:	e7de      	b.n	8008040 <_malloc_r+0xa8>
 8008082:	230c      	movs	r3, #12
 8008084:	6033      	str	r3, [r6, #0]
 8008086:	4630      	mov	r0, r6
 8008088:	f000 f80c 	bl	80080a4 <__malloc_unlock>
 800808c:	e794      	b.n	8007fb8 <_malloc_r+0x20>
 800808e:	6005      	str	r5, [r0, #0]
 8008090:	e7d6      	b.n	8008040 <_malloc_r+0xa8>
 8008092:	bf00      	nop
 8008094:	200130c8 	.word	0x200130c8

08008098 <__malloc_lock>:
 8008098:	4801      	ldr	r0, [pc, #4]	@ (80080a0 <__malloc_lock+0x8>)
 800809a:	f7ff bf01 	b.w	8007ea0 <__retarget_lock_acquire_recursive>
 800809e:	bf00      	nop
 80080a0:	200130c0 	.word	0x200130c0

080080a4 <__malloc_unlock>:
 80080a4:	4801      	ldr	r0, [pc, #4]	@ (80080ac <__malloc_unlock+0x8>)
 80080a6:	f7ff befc 	b.w	8007ea2 <__retarget_lock_release_recursive>
 80080aa:	bf00      	nop
 80080ac:	200130c0 	.word	0x200130c0

080080b0 <__ssputs_r>:
 80080b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080b4:	688e      	ldr	r6, [r1, #8]
 80080b6:	461f      	mov	r7, r3
 80080b8:	42be      	cmp	r6, r7
 80080ba:	680b      	ldr	r3, [r1, #0]
 80080bc:	4682      	mov	sl, r0
 80080be:	460c      	mov	r4, r1
 80080c0:	4690      	mov	r8, r2
 80080c2:	d82d      	bhi.n	8008120 <__ssputs_r+0x70>
 80080c4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80080c8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80080cc:	d026      	beq.n	800811c <__ssputs_r+0x6c>
 80080ce:	6965      	ldr	r5, [r4, #20]
 80080d0:	6909      	ldr	r1, [r1, #16]
 80080d2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80080d6:	eba3 0901 	sub.w	r9, r3, r1
 80080da:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80080de:	1c7b      	adds	r3, r7, #1
 80080e0:	444b      	add	r3, r9
 80080e2:	106d      	asrs	r5, r5, #1
 80080e4:	429d      	cmp	r5, r3
 80080e6:	bf38      	it	cc
 80080e8:	461d      	movcc	r5, r3
 80080ea:	0553      	lsls	r3, r2, #21
 80080ec:	d527      	bpl.n	800813e <__ssputs_r+0x8e>
 80080ee:	4629      	mov	r1, r5
 80080f0:	f7ff ff52 	bl	8007f98 <_malloc_r>
 80080f4:	4606      	mov	r6, r0
 80080f6:	b360      	cbz	r0, 8008152 <__ssputs_r+0xa2>
 80080f8:	6921      	ldr	r1, [r4, #16]
 80080fa:	464a      	mov	r2, r9
 80080fc:	f7ff fed2 	bl	8007ea4 <memcpy>
 8008100:	89a3      	ldrh	r3, [r4, #12]
 8008102:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800810a:	81a3      	strh	r3, [r4, #12]
 800810c:	6126      	str	r6, [r4, #16]
 800810e:	6165      	str	r5, [r4, #20]
 8008110:	444e      	add	r6, r9
 8008112:	eba5 0509 	sub.w	r5, r5, r9
 8008116:	6026      	str	r6, [r4, #0]
 8008118:	60a5      	str	r5, [r4, #8]
 800811a:	463e      	mov	r6, r7
 800811c:	42be      	cmp	r6, r7
 800811e:	d900      	bls.n	8008122 <__ssputs_r+0x72>
 8008120:	463e      	mov	r6, r7
 8008122:	6820      	ldr	r0, [r4, #0]
 8008124:	4632      	mov	r2, r6
 8008126:	4641      	mov	r1, r8
 8008128:	f000 faa6 	bl	8008678 <memmove>
 800812c:	68a3      	ldr	r3, [r4, #8]
 800812e:	1b9b      	subs	r3, r3, r6
 8008130:	60a3      	str	r3, [r4, #8]
 8008132:	6823      	ldr	r3, [r4, #0]
 8008134:	4433      	add	r3, r6
 8008136:	6023      	str	r3, [r4, #0]
 8008138:	2000      	movs	r0, #0
 800813a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800813e:	462a      	mov	r2, r5
 8008140:	f000 fac4 	bl	80086cc <_realloc_r>
 8008144:	4606      	mov	r6, r0
 8008146:	2800      	cmp	r0, #0
 8008148:	d1e0      	bne.n	800810c <__ssputs_r+0x5c>
 800814a:	6921      	ldr	r1, [r4, #16]
 800814c:	4650      	mov	r0, sl
 800814e:	f7ff feb7 	bl	8007ec0 <_free_r>
 8008152:	230c      	movs	r3, #12
 8008154:	f8ca 3000 	str.w	r3, [sl]
 8008158:	89a3      	ldrh	r3, [r4, #12]
 800815a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800815e:	81a3      	strh	r3, [r4, #12]
 8008160:	f04f 30ff 	mov.w	r0, #4294967295
 8008164:	e7e9      	b.n	800813a <__ssputs_r+0x8a>
	...

08008168 <_svfiprintf_r>:
 8008168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800816c:	4698      	mov	r8, r3
 800816e:	898b      	ldrh	r3, [r1, #12]
 8008170:	061b      	lsls	r3, r3, #24
 8008172:	b09d      	sub	sp, #116	@ 0x74
 8008174:	4607      	mov	r7, r0
 8008176:	460d      	mov	r5, r1
 8008178:	4614      	mov	r4, r2
 800817a:	d510      	bpl.n	800819e <_svfiprintf_r+0x36>
 800817c:	690b      	ldr	r3, [r1, #16]
 800817e:	b973      	cbnz	r3, 800819e <_svfiprintf_r+0x36>
 8008180:	2140      	movs	r1, #64	@ 0x40
 8008182:	f7ff ff09 	bl	8007f98 <_malloc_r>
 8008186:	6028      	str	r0, [r5, #0]
 8008188:	6128      	str	r0, [r5, #16]
 800818a:	b930      	cbnz	r0, 800819a <_svfiprintf_r+0x32>
 800818c:	230c      	movs	r3, #12
 800818e:	603b      	str	r3, [r7, #0]
 8008190:	f04f 30ff 	mov.w	r0, #4294967295
 8008194:	b01d      	add	sp, #116	@ 0x74
 8008196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800819a:	2340      	movs	r3, #64	@ 0x40
 800819c:	616b      	str	r3, [r5, #20]
 800819e:	2300      	movs	r3, #0
 80081a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80081a2:	2320      	movs	r3, #32
 80081a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80081a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80081ac:	2330      	movs	r3, #48	@ 0x30
 80081ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800834c <_svfiprintf_r+0x1e4>
 80081b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80081b6:	f04f 0901 	mov.w	r9, #1
 80081ba:	4623      	mov	r3, r4
 80081bc:	469a      	mov	sl, r3
 80081be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081c2:	b10a      	cbz	r2, 80081c8 <_svfiprintf_r+0x60>
 80081c4:	2a25      	cmp	r2, #37	@ 0x25
 80081c6:	d1f9      	bne.n	80081bc <_svfiprintf_r+0x54>
 80081c8:	ebba 0b04 	subs.w	fp, sl, r4
 80081cc:	d00b      	beq.n	80081e6 <_svfiprintf_r+0x7e>
 80081ce:	465b      	mov	r3, fp
 80081d0:	4622      	mov	r2, r4
 80081d2:	4629      	mov	r1, r5
 80081d4:	4638      	mov	r0, r7
 80081d6:	f7ff ff6b 	bl	80080b0 <__ssputs_r>
 80081da:	3001      	adds	r0, #1
 80081dc:	f000 80a7 	beq.w	800832e <_svfiprintf_r+0x1c6>
 80081e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80081e2:	445a      	add	r2, fp
 80081e4:	9209      	str	r2, [sp, #36]	@ 0x24
 80081e6:	f89a 3000 	ldrb.w	r3, [sl]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	f000 809f 	beq.w	800832e <_svfiprintf_r+0x1c6>
 80081f0:	2300      	movs	r3, #0
 80081f2:	f04f 32ff 	mov.w	r2, #4294967295
 80081f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80081fa:	f10a 0a01 	add.w	sl, sl, #1
 80081fe:	9304      	str	r3, [sp, #16]
 8008200:	9307      	str	r3, [sp, #28]
 8008202:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008206:	931a      	str	r3, [sp, #104]	@ 0x68
 8008208:	4654      	mov	r4, sl
 800820a:	2205      	movs	r2, #5
 800820c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008210:	484e      	ldr	r0, [pc, #312]	@ (800834c <_svfiprintf_r+0x1e4>)
 8008212:	f7f8 f815 	bl	8000240 <memchr>
 8008216:	9a04      	ldr	r2, [sp, #16]
 8008218:	b9d8      	cbnz	r0, 8008252 <_svfiprintf_r+0xea>
 800821a:	06d0      	lsls	r0, r2, #27
 800821c:	bf44      	itt	mi
 800821e:	2320      	movmi	r3, #32
 8008220:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008224:	0711      	lsls	r1, r2, #28
 8008226:	bf44      	itt	mi
 8008228:	232b      	movmi	r3, #43	@ 0x2b
 800822a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800822e:	f89a 3000 	ldrb.w	r3, [sl]
 8008232:	2b2a      	cmp	r3, #42	@ 0x2a
 8008234:	d015      	beq.n	8008262 <_svfiprintf_r+0xfa>
 8008236:	9a07      	ldr	r2, [sp, #28]
 8008238:	4654      	mov	r4, sl
 800823a:	2000      	movs	r0, #0
 800823c:	f04f 0c0a 	mov.w	ip, #10
 8008240:	4621      	mov	r1, r4
 8008242:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008246:	3b30      	subs	r3, #48	@ 0x30
 8008248:	2b09      	cmp	r3, #9
 800824a:	d94b      	bls.n	80082e4 <_svfiprintf_r+0x17c>
 800824c:	b1b0      	cbz	r0, 800827c <_svfiprintf_r+0x114>
 800824e:	9207      	str	r2, [sp, #28]
 8008250:	e014      	b.n	800827c <_svfiprintf_r+0x114>
 8008252:	eba0 0308 	sub.w	r3, r0, r8
 8008256:	fa09 f303 	lsl.w	r3, r9, r3
 800825a:	4313      	orrs	r3, r2
 800825c:	9304      	str	r3, [sp, #16]
 800825e:	46a2      	mov	sl, r4
 8008260:	e7d2      	b.n	8008208 <_svfiprintf_r+0xa0>
 8008262:	9b03      	ldr	r3, [sp, #12]
 8008264:	1d19      	adds	r1, r3, #4
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	9103      	str	r1, [sp, #12]
 800826a:	2b00      	cmp	r3, #0
 800826c:	bfbb      	ittet	lt
 800826e:	425b      	neglt	r3, r3
 8008270:	f042 0202 	orrlt.w	r2, r2, #2
 8008274:	9307      	strge	r3, [sp, #28]
 8008276:	9307      	strlt	r3, [sp, #28]
 8008278:	bfb8      	it	lt
 800827a:	9204      	strlt	r2, [sp, #16]
 800827c:	7823      	ldrb	r3, [r4, #0]
 800827e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008280:	d10a      	bne.n	8008298 <_svfiprintf_r+0x130>
 8008282:	7863      	ldrb	r3, [r4, #1]
 8008284:	2b2a      	cmp	r3, #42	@ 0x2a
 8008286:	d132      	bne.n	80082ee <_svfiprintf_r+0x186>
 8008288:	9b03      	ldr	r3, [sp, #12]
 800828a:	1d1a      	adds	r2, r3, #4
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	9203      	str	r2, [sp, #12]
 8008290:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008294:	3402      	adds	r4, #2
 8008296:	9305      	str	r3, [sp, #20]
 8008298:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800835c <_svfiprintf_r+0x1f4>
 800829c:	7821      	ldrb	r1, [r4, #0]
 800829e:	2203      	movs	r2, #3
 80082a0:	4650      	mov	r0, sl
 80082a2:	f7f7 ffcd 	bl	8000240 <memchr>
 80082a6:	b138      	cbz	r0, 80082b8 <_svfiprintf_r+0x150>
 80082a8:	9b04      	ldr	r3, [sp, #16]
 80082aa:	eba0 000a 	sub.w	r0, r0, sl
 80082ae:	2240      	movs	r2, #64	@ 0x40
 80082b0:	4082      	lsls	r2, r0
 80082b2:	4313      	orrs	r3, r2
 80082b4:	3401      	adds	r4, #1
 80082b6:	9304      	str	r3, [sp, #16]
 80082b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082bc:	4824      	ldr	r0, [pc, #144]	@ (8008350 <_svfiprintf_r+0x1e8>)
 80082be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082c2:	2206      	movs	r2, #6
 80082c4:	f7f7 ffbc 	bl	8000240 <memchr>
 80082c8:	2800      	cmp	r0, #0
 80082ca:	d036      	beq.n	800833a <_svfiprintf_r+0x1d2>
 80082cc:	4b21      	ldr	r3, [pc, #132]	@ (8008354 <_svfiprintf_r+0x1ec>)
 80082ce:	bb1b      	cbnz	r3, 8008318 <_svfiprintf_r+0x1b0>
 80082d0:	9b03      	ldr	r3, [sp, #12]
 80082d2:	3307      	adds	r3, #7
 80082d4:	f023 0307 	bic.w	r3, r3, #7
 80082d8:	3308      	adds	r3, #8
 80082da:	9303      	str	r3, [sp, #12]
 80082dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082de:	4433      	add	r3, r6
 80082e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80082e2:	e76a      	b.n	80081ba <_svfiprintf_r+0x52>
 80082e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80082e8:	460c      	mov	r4, r1
 80082ea:	2001      	movs	r0, #1
 80082ec:	e7a8      	b.n	8008240 <_svfiprintf_r+0xd8>
 80082ee:	2300      	movs	r3, #0
 80082f0:	3401      	adds	r4, #1
 80082f2:	9305      	str	r3, [sp, #20]
 80082f4:	4619      	mov	r1, r3
 80082f6:	f04f 0c0a 	mov.w	ip, #10
 80082fa:	4620      	mov	r0, r4
 80082fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008300:	3a30      	subs	r2, #48	@ 0x30
 8008302:	2a09      	cmp	r2, #9
 8008304:	d903      	bls.n	800830e <_svfiprintf_r+0x1a6>
 8008306:	2b00      	cmp	r3, #0
 8008308:	d0c6      	beq.n	8008298 <_svfiprintf_r+0x130>
 800830a:	9105      	str	r1, [sp, #20]
 800830c:	e7c4      	b.n	8008298 <_svfiprintf_r+0x130>
 800830e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008312:	4604      	mov	r4, r0
 8008314:	2301      	movs	r3, #1
 8008316:	e7f0      	b.n	80082fa <_svfiprintf_r+0x192>
 8008318:	ab03      	add	r3, sp, #12
 800831a:	9300      	str	r3, [sp, #0]
 800831c:	462a      	mov	r2, r5
 800831e:	4b0e      	ldr	r3, [pc, #56]	@ (8008358 <_svfiprintf_r+0x1f0>)
 8008320:	a904      	add	r1, sp, #16
 8008322:	4638      	mov	r0, r7
 8008324:	f3af 8000 	nop.w
 8008328:	1c42      	adds	r2, r0, #1
 800832a:	4606      	mov	r6, r0
 800832c:	d1d6      	bne.n	80082dc <_svfiprintf_r+0x174>
 800832e:	89ab      	ldrh	r3, [r5, #12]
 8008330:	065b      	lsls	r3, r3, #25
 8008332:	f53f af2d 	bmi.w	8008190 <_svfiprintf_r+0x28>
 8008336:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008338:	e72c      	b.n	8008194 <_svfiprintf_r+0x2c>
 800833a:	ab03      	add	r3, sp, #12
 800833c:	9300      	str	r3, [sp, #0]
 800833e:	462a      	mov	r2, r5
 8008340:	4b05      	ldr	r3, [pc, #20]	@ (8008358 <_svfiprintf_r+0x1f0>)
 8008342:	a904      	add	r1, sp, #16
 8008344:	4638      	mov	r0, r7
 8008346:	f000 f879 	bl	800843c <_printf_i>
 800834a:	e7ed      	b.n	8008328 <_svfiprintf_r+0x1c0>
 800834c:	08008bb8 	.word	0x08008bb8
 8008350:	08008bc2 	.word	0x08008bc2
 8008354:	00000000 	.word	0x00000000
 8008358:	080080b1 	.word	0x080080b1
 800835c:	08008bbe 	.word	0x08008bbe

08008360 <_printf_common>:
 8008360:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008364:	4616      	mov	r6, r2
 8008366:	4698      	mov	r8, r3
 8008368:	688a      	ldr	r2, [r1, #8]
 800836a:	690b      	ldr	r3, [r1, #16]
 800836c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008370:	4293      	cmp	r3, r2
 8008372:	bfb8      	it	lt
 8008374:	4613      	movlt	r3, r2
 8008376:	6033      	str	r3, [r6, #0]
 8008378:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800837c:	4607      	mov	r7, r0
 800837e:	460c      	mov	r4, r1
 8008380:	b10a      	cbz	r2, 8008386 <_printf_common+0x26>
 8008382:	3301      	adds	r3, #1
 8008384:	6033      	str	r3, [r6, #0]
 8008386:	6823      	ldr	r3, [r4, #0]
 8008388:	0699      	lsls	r1, r3, #26
 800838a:	bf42      	ittt	mi
 800838c:	6833      	ldrmi	r3, [r6, #0]
 800838e:	3302      	addmi	r3, #2
 8008390:	6033      	strmi	r3, [r6, #0]
 8008392:	6825      	ldr	r5, [r4, #0]
 8008394:	f015 0506 	ands.w	r5, r5, #6
 8008398:	d106      	bne.n	80083a8 <_printf_common+0x48>
 800839a:	f104 0a19 	add.w	sl, r4, #25
 800839e:	68e3      	ldr	r3, [r4, #12]
 80083a0:	6832      	ldr	r2, [r6, #0]
 80083a2:	1a9b      	subs	r3, r3, r2
 80083a4:	42ab      	cmp	r3, r5
 80083a6:	dc26      	bgt.n	80083f6 <_printf_common+0x96>
 80083a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80083ac:	6822      	ldr	r2, [r4, #0]
 80083ae:	3b00      	subs	r3, #0
 80083b0:	bf18      	it	ne
 80083b2:	2301      	movne	r3, #1
 80083b4:	0692      	lsls	r2, r2, #26
 80083b6:	d42b      	bmi.n	8008410 <_printf_common+0xb0>
 80083b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80083bc:	4641      	mov	r1, r8
 80083be:	4638      	mov	r0, r7
 80083c0:	47c8      	blx	r9
 80083c2:	3001      	adds	r0, #1
 80083c4:	d01e      	beq.n	8008404 <_printf_common+0xa4>
 80083c6:	6823      	ldr	r3, [r4, #0]
 80083c8:	6922      	ldr	r2, [r4, #16]
 80083ca:	f003 0306 	and.w	r3, r3, #6
 80083ce:	2b04      	cmp	r3, #4
 80083d0:	bf02      	ittt	eq
 80083d2:	68e5      	ldreq	r5, [r4, #12]
 80083d4:	6833      	ldreq	r3, [r6, #0]
 80083d6:	1aed      	subeq	r5, r5, r3
 80083d8:	68a3      	ldr	r3, [r4, #8]
 80083da:	bf0c      	ite	eq
 80083dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80083e0:	2500      	movne	r5, #0
 80083e2:	4293      	cmp	r3, r2
 80083e4:	bfc4      	itt	gt
 80083e6:	1a9b      	subgt	r3, r3, r2
 80083e8:	18ed      	addgt	r5, r5, r3
 80083ea:	2600      	movs	r6, #0
 80083ec:	341a      	adds	r4, #26
 80083ee:	42b5      	cmp	r5, r6
 80083f0:	d11a      	bne.n	8008428 <_printf_common+0xc8>
 80083f2:	2000      	movs	r0, #0
 80083f4:	e008      	b.n	8008408 <_printf_common+0xa8>
 80083f6:	2301      	movs	r3, #1
 80083f8:	4652      	mov	r2, sl
 80083fa:	4641      	mov	r1, r8
 80083fc:	4638      	mov	r0, r7
 80083fe:	47c8      	blx	r9
 8008400:	3001      	adds	r0, #1
 8008402:	d103      	bne.n	800840c <_printf_common+0xac>
 8008404:	f04f 30ff 	mov.w	r0, #4294967295
 8008408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800840c:	3501      	adds	r5, #1
 800840e:	e7c6      	b.n	800839e <_printf_common+0x3e>
 8008410:	18e1      	adds	r1, r4, r3
 8008412:	1c5a      	adds	r2, r3, #1
 8008414:	2030      	movs	r0, #48	@ 0x30
 8008416:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800841a:	4422      	add	r2, r4
 800841c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008420:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008424:	3302      	adds	r3, #2
 8008426:	e7c7      	b.n	80083b8 <_printf_common+0x58>
 8008428:	2301      	movs	r3, #1
 800842a:	4622      	mov	r2, r4
 800842c:	4641      	mov	r1, r8
 800842e:	4638      	mov	r0, r7
 8008430:	47c8      	blx	r9
 8008432:	3001      	adds	r0, #1
 8008434:	d0e6      	beq.n	8008404 <_printf_common+0xa4>
 8008436:	3601      	adds	r6, #1
 8008438:	e7d9      	b.n	80083ee <_printf_common+0x8e>
	...

0800843c <_printf_i>:
 800843c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008440:	7e0f      	ldrb	r7, [r1, #24]
 8008442:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008444:	2f78      	cmp	r7, #120	@ 0x78
 8008446:	4691      	mov	r9, r2
 8008448:	4680      	mov	r8, r0
 800844a:	460c      	mov	r4, r1
 800844c:	469a      	mov	sl, r3
 800844e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008452:	d807      	bhi.n	8008464 <_printf_i+0x28>
 8008454:	2f62      	cmp	r7, #98	@ 0x62
 8008456:	d80a      	bhi.n	800846e <_printf_i+0x32>
 8008458:	2f00      	cmp	r7, #0
 800845a:	f000 80d1 	beq.w	8008600 <_printf_i+0x1c4>
 800845e:	2f58      	cmp	r7, #88	@ 0x58
 8008460:	f000 80b8 	beq.w	80085d4 <_printf_i+0x198>
 8008464:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008468:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800846c:	e03a      	b.n	80084e4 <_printf_i+0xa8>
 800846e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008472:	2b15      	cmp	r3, #21
 8008474:	d8f6      	bhi.n	8008464 <_printf_i+0x28>
 8008476:	a101      	add	r1, pc, #4	@ (adr r1, 800847c <_printf_i+0x40>)
 8008478:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800847c:	080084d5 	.word	0x080084d5
 8008480:	080084e9 	.word	0x080084e9
 8008484:	08008465 	.word	0x08008465
 8008488:	08008465 	.word	0x08008465
 800848c:	08008465 	.word	0x08008465
 8008490:	08008465 	.word	0x08008465
 8008494:	080084e9 	.word	0x080084e9
 8008498:	08008465 	.word	0x08008465
 800849c:	08008465 	.word	0x08008465
 80084a0:	08008465 	.word	0x08008465
 80084a4:	08008465 	.word	0x08008465
 80084a8:	080085e7 	.word	0x080085e7
 80084ac:	08008513 	.word	0x08008513
 80084b0:	080085a1 	.word	0x080085a1
 80084b4:	08008465 	.word	0x08008465
 80084b8:	08008465 	.word	0x08008465
 80084bc:	08008609 	.word	0x08008609
 80084c0:	08008465 	.word	0x08008465
 80084c4:	08008513 	.word	0x08008513
 80084c8:	08008465 	.word	0x08008465
 80084cc:	08008465 	.word	0x08008465
 80084d0:	080085a9 	.word	0x080085a9
 80084d4:	6833      	ldr	r3, [r6, #0]
 80084d6:	1d1a      	adds	r2, r3, #4
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	6032      	str	r2, [r6, #0]
 80084dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80084e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80084e4:	2301      	movs	r3, #1
 80084e6:	e09c      	b.n	8008622 <_printf_i+0x1e6>
 80084e8:	6833      	ldr	r3, [r6, #0]
 80084ea:	6820      	ldr	r0, [r4, #0]
 80084ec:	1d19      	adds	r1, r3, #4
 80084ee:	6031      	str	r1, [r6, #0]
 80084f0:	0606      	lsls	r6, r0, #24
 80084f2:	d501      	bpl.n	80084f8 <_printf_i+0xbc>
 80084f4:	681d      	ldr	r5, [r3, #0]
 80084f6:	e003      	b.n	8008500 <_printf_i+0xc4>
 80084f8:	0645      	lsls	r5, r0, #25
 80084fa:	d5fb      	bpl.n	80084f4 <_printf_i+0xb8>
 80084fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008500:	2d00      	cmp	r5, #0
 8008502:	da03      	bge.n	800850c <_printf_i+0xd0>
 8008504:	232d      	movs	r3, #45	@ 0x2d
 8008506:	426d      	negs	r5, r5
 8008508:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800850c:	4858      	ldr	r0, [pc, #352]	@ (8008670 <_printf_i+0x234>)
 800850e:	230a      	movs	r3, #10
 8008510:	e011      	b.n	8008536 <_printf_i+0xfa>
 8008512:	6821      	ldr	r1, [r4, #0]
 8008514:	6833      	ldr	r3, [r6, #0]
 8008516:	0608      	lsls	r0, r1, #24
 8008518:	f853 5b04 	ldr.w	r5, [r3], #4
 800851c:	d402      	bmi.n	8008524 <_printf_i+0xe8>
 800851e:	0649      	lsls	r1, r1, #25
 8008520:	bf48      	it	mi
 8008522:	b2ad      	uxthmi	r5, r5
 8008524:	2f6f      	cmp	r7, #111	@ 0x6f
 8008526:	4852      	ldr	r0, [pc, #328]	@ (8008670 <_printf_i+0x234>)
 8008528:	6033      	str	r3, [r6, #0]
 800852a:	bf14      	ite	ne
 800852c:	230a      	movne	r3, #10
 800852e:	2308      	moveq	r3, #8
 8008530:	2100      	movs	r1, #0
 8008532:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008536:	6866      	ldr	r6, [r4, #4]
 8008538:	60a6      	str	r6, [r4, #8]
 800853a:	2e00      	cmp	r6, #0
 800853c:	db05      	blt.n	800854a <_printf_i+0x10e>
 800853e:	6821      	ldr	r1, [r4, #0]
 8008540:	432e      	orrs	r6, r5
 8008542:	f021 0104 	bic.w	r1, r1, #4
 8008546:	6021      	str	r1, [r4, #0]
 8008548:	d04b      	beq.n	80085e2 <_printf_i+0x1a6>
 800854a:	4616      	mov	r6, r2
 800854c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008550:	fb03 5711 	mls	r7, r3, r1, r5
 8008554:	5dc7      	ldrb	r7, [r0, r7]
 8008556:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800855a:	462f      	mov	r7, r5
 800855c:	42bb      	cmp	r3, r7
 800855e:	460d      	mov	r5, r1
 8008560:	d9f4      	bls.n	800854c <_printf_i+0x110>
 8008562:	2b08      	cmp	r3, #8
 8008564:	d10b      	bne.n	800857e <_printf_i+0x142>
 8008566:	6823      	ldr	r3, [r4, #0]
 8008568:	07df      	lsls	r7, r3, #31
 800856a:	d508      	bpl.n	800857e <_printf_i+0x142>
 800856c:	6923      	ldr	r3, [r4, #16]
 800856e:	6861      	ldr	r1, [r4, #4]
 8008570:	4299      	cmp	r1, r3
 8008572:	bfde      	ittt	le
 8008574:	2330      	movle	r3, #48	@ 0x30
 8008576:	f806 3c01 	strble.w	r3, [r6, #-1]
 800857a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800857e:	1b92      	subs	r2, r2, r6
 8008580:	6122      	str	r2, [r4, #16]
 8008582:	f8cd a000 	str.w	sl, [sp]
 8008586:	464b      	mov	r3, r9
 8008588:	aa03      	add	r2, sp, #12
 800858a:	4621      	mov	r1, r4
 800858c:	4640      	mov	r0, r8
 800858e:	f7ff fee7 	bl	8008360 <_printf_common>
 8008592:	3001      	adds	r0, #1
 8008594:	d14a      	bne.n	800862c <_printf_i+0x1f0>
 8008596:	f04f 30ff 	mov.w	r0, #4294967295
 800859a:	b004      	add	sp, #16
 800859c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085a0:	6823      	ldr	r3, [r4, #0]
 80085a2:	f043 0320 	orr.w	r3, r3, #32
 80085a6:	6023      	str	r3, [r4, #0]
 80085a8:	4832      	ldr	r0, [pc, #200]	@ (8008674 <_printf_i+0x238>)
 80085aa:	2778      	movs	r7, #120	@ 0x78
 80085ac:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80085b0:	6823      	ldr	r3, [r4, #0]
 80085b2:	6831      	ldr	r1, [r6, #0]
 80085b4:	061f      	lsls	r7, r3, #24
 80085b6:	f851 5b04 	ldr.w	r5, [r1], #4
 80085ba:	d402      	bmi.n	80085c2 <_printf_i+0x186>
 80085bc:	065f      	lsls	r7, r3, #25
 80085be:	bf48      	it	mi
 80085c0:	b2ad      	uxthmi	r5, r5
 80085c2:	6031      	str	r1, [r6, #0]
 80085c4:	07d9      	lsls	r1, r3, #31
 80085c6:	bf44      	itt	mi
 80085c8:	f043 0320 	orrmi.w	r3, r3, #32
 80085cc:	6023      	strmi	r3, [r4, #0]
 80085ce:	b11d      	cbz	r5, 80085d8 <_printf_i+0x19c>
 80085d0:	2310      	movs	r3, #16
 80085d2:	e7ad      	b.n	8008530 <_printf_i+0xf4>
 80085d4:	4826      	ldr	r0, [pc, #152]	@ (8008670 <_printf_i+0x234>)
 80085d6:	e7e9      	b.n	80085ac <_printf_i+0x170>
 80085d8:	6823      	ldr	r3, [r4, #0]
 80085da:	f023 0320 	bic.w	r3, r3, #32
 80085de:	6023      	str	r3, [r4, #0]
 80085e0:	e7f6      	b.n	80085d0 <_printf_i+0x194>
 80085e2:	4616      	mov	r6, r2
 80085e4:	e7bd      	b.n	8008562 <_printf_i+0x126>
 80085e6:	6833      	ldr	r3, [r6, #0]
 80085e8:	6825      	ldr	r5, [r4, #0]
 80085ea:	6961      	ldr	r1, [r4, #20]
 80085ec:	1d18      	adds	r0, r3, #4
 80085ee:	6030      	str	r0, [r6, #0]
 80085f0:	062e      	lsls	r6, r5, #24
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	d501      	bpl.n	80085fa <_printf_i+0x1be>
 80085f6:	6019      	str	r1, [r3, #0]
 80085f8:	e002      	b.n	8008600 <_printf_i+0x1c4>
 80085fa:	0668      	lsls	r0, r5, #25
 80085fc:	d5fb      	bpl.n	80085f6 <_printf_i+0x1ba>
 80085fe:	8019      	strh	r1, [r3, #0]
 8008600:	2300      	movs	r3, #0
 8008602:	6123      	str	r3, [r4, #16]
 8008604:	4616      	mov	r6, r2
 8008606:	e7bc      	b.n	8008582 <_printf_i+0x146>
 8008608:	6833      	ldr	r3, [r6, #0]
 800860a:	1d1a      	adds	r2, r3, #4
 800860c:	6032      	str	r2, [r6, #0]
 800860e:	681e      	ldr	r6, [r3, #0]
 8008610:	6862      	ldr	r2, [r4, #4]
 8008612:	2100      	movs	r1, #0
 8008614:	4630      	mov	r0, r6
 8008616:	f7f7 fe13 	bl	8000240 <memchr>
 800861a:	b108      	cbz	r0, 8008620 <_printf_i+0x1e4>
 800861c:	1b80      	subs	r0, r0, r6
 800861e:	6060      	str	r0, [r4, #4]
 8008620:	6863      	ldr	r3, [r4, #4]
 8008622:	6123      	str	r3, [r4, #16]
 8008624:	2300      	movs	r3, #0
 8008626:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800862a:	e7aa      	b.n	8008582 <_printf_i+0x146>
 800862c:	6923      	ldr	r3, [r4, #16]
 800862e:	4632      	mov	r2, r6
 8008630:	4649      	mov	r1, r9
 8008632:	4640      	mov	r0, r8
 8008634:	47d0      	blx	sl
 8008636:	3001      	adds	r0, #1
 8008638:	d0ad      	beq.n	8008596 <_printf_i+0x15a>
 800863a:	6823      	ldr	r3, [r4, #0]
 800863c:	079b      	lsls	r3, r3, #30
 800863e:	d413      	bmi.n	8008668 <_printf_i+0x22c>
 8008640:	68e0      	ldr	r0, [r4, #12]
 8008642:	9b03      	ldr	r3, [sp, #12]
 8008644:	4298      	cmp	r0, r3
 8008646:	bfb8      	it	lt
 8008648:	4618      	movlt	r0, r3
 800864a:	e7a6      	b.n	800859a <_printf_i+0x15e>
 800864c:	2301      	movs	r3, #1
 800864e:	4632      	mov	r2, r6
 8008650:	4649      	mov	r1, r9
 8008652:	4640      	mov	r0, r8
 8008654:	47d0      	blx	sl
 8008656:	3001      	adds	r0, #1
 8008658:	d09d      	beq.n	8008596 <_printf_i+0x15a>
 800865a:	3501      	adds	r5, #1
 800865c:	68e3      	ldr	r3, [r4, #12]
 800865e:	9903      	ldr	r1, [sp, #12]
 8008660:	1a5b      	subs	r3, r3, r1
 8008662:	42ab      	cmp	r3, r5
 8008664:	dcf2      	bgt.n	800864c <_printf_i+0x210>
 8008666:	e7eb      	b.n	8008640 <_printf_i+0x204>
 8008668:	2500      	movs	r5, #0
 800866a:	f104 0619 	add.w	r6, r4, #25
 800866e:	e7f5      	b.n	800865c <_printf_i+0x220>
 8008670:	08008bc9 	.word	0x08008bc9
 8008674:	08008bda 	.word	0x08008bda

08008678 <memmove>:
 8008678:	4288      	cmp	r0, r1
 800867a:	b510      	push	{r4, lr}
 800867c:	eb01 0402 	add.w	r4, r1, r2
 8008680:	d902      	bls.n	8008688 <memmove+0x10>
 8008682:	4284      	cmp	r4, r0
 8008684:	4623      	mov	r3, r4
 8008686:	d807      	bhi.n	8008698 <memmove+0x20>
 8008688:	1e43      	subs	r3, r0, #1
 800868a:	42a1      	cmp	r1, r4
 800868c:	d008      	beq.n	80086a0 <memmove+0x28>
 800868e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008692:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008696:	e7f8      	b.n	800868a <memmove+0x12>
 8008698:	4402      	add	r2, r0
 800869a:	4601      	mov	r1, r0
 800869c:	428a      	cmp	r2, r1
 800869e:	d100      	bne.n	80086a2 <memmove+0x2a>
 80086a0:	bd10      	pop	{r4, pc}
 80086a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086aa:	e7f7      	b.n	800869c <memmove+0x24>

080086ac <_sbrk_r>:
 80086ac:	b538      	push	{r3, r4, r5, lr}
 80086ae:	4d06      	ldr	r5, [pc, #24]	@ (80086c8 <_sbrk_r+0x1c>)
 80086b0:	2300      	movs	r3, #0
 80086b2:	4604      	mov	r4, r0
 80086b4:	4608      	mov	r0, r1
 80086b6:	602b      	str	r3, [r5, #0]
 80086b8:	f000 f83e 	bl	8008738 <_sbrk>
 80086bc:	1c43      	adds	r3, r0, #1
 80086be:	d102      	bne.n	80086c6 <_sbrk_r+0x1a>
 80086c0:	682b      	ldr	r3, [r5, #0]
 80086c2:	b103      	cbz	r3, 80086c6 <_sbrk_r+0x1a>
 80086c4:	6023      	str	r3, [r4, #0]
 80086c6:	bd38      	pop	{r3, r4, r5, pc}
 80086c8:	200130bc 	.word	0x200130bc

080086cc <_realloc_r>:
 80086cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086d0:	4607      	mov	r7, r0
 80086d2:	4614      	mov	r4, r2
 80086d4:	460d      	mov	r5, r1
 80086d6:	b921      	cbnz	r1, 80086e2 <_realloc_r+0x16>
 80086d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086dc:	4611      	mov	r1, r2
 80086de:	f7ff bc5b 	b.w	8007f98 <_malloc_r>
 80086e2:	b92a      	cbnz	r2, 80086f0 <_realloc_r+0x24>
 80086e4:	f7ff fbec 	bl	8007ec0 <_free_r>
 80086e8:	4625      	mov	r5, r4
 80086ea:	4628      	mov	r0, r5
 80086ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086f0:	f000 f81a 	bl	8008728 <_malloc_usable_size_r>
 80086f4:	4284      	cmp	r4, r0
 80086f6:	4606      	mov	r6, r0
 80086f8:	d802      	bhi.n	8008700 <_realloc_r+0x34>
 80086fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80086fe:	d8f4      	bhi.n	80086ea <_realloc_r+0x1e>
 8008700:	4621      	mov	r1, r4
 8008702:	4638      	mov	r0, r7
 8008704:	f7ff fc48 	bl	8007f98 <_malloc_r>
 8008708:	4680      	mov	r8, r0
 800870a:	b908      	cbnz	r0, 8008710 <_realloc_r+0x44>
 800870c:	4645      	mov	r5, r8
 800870e:	e7ec      	b.n	80086ea <_realloc_r+0x1e>
 8008710:	42b4      	cmp	r4, r6
 8008712:	4622      	mov	r2, r4
 8008714:	4629      	mov	r1, r5
 8008716:	bf28      	it	cs
 8008718:	4632      	movcs	r2, r6
 800871a:	f7ff fbc3 	bl	8007ea4 <memcpy>
 800871e:	4629      	mov	r1, r5
 8008720:	4638      	mov	r0, r7
 8008722:	f7ff fbcd 	bl	8007ec0 <_free_r>
 8008726:	e7f1      	b.n	800870c <_realloc_r+0x40>

08008728 <_malloc_usable_size_r>:
 8008728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800872c:	1f18      	subs	r0, r3, #4
 800872e:	2b00      	cmp	r3, #0
 8008730:	bfbc      	itt	lt
 8008732:	580b      	ldrlt	r3, [r1, r0]
 8008734:	18c0      	addlt	r0, r0, r3
 8008736:	4770      	bx	lr

08008738 <_sbrk>:
 8008738:	4a04      	ldr	r2, [pc, #16]	@ (800874c <_sbrk+0x14>)
 800873a:	6811      	ldr	r1, [r2, #0]
 800873c:	4603      	mov	r3, r0
 800873e:	b909      	cbnz	r1, 8008744 <_sbrk+0xc>
 8008740:	4903      	ldr	r1, [pc, #12]	@ (8008750 <_sbrk+0x18>)
 8008742:	6011      	str	r1, [r2, #0]
 8008744:	6810      	ldr	r0, [r2, #0]
 8008746:	4403      	add	r3, r0
 8008748:	6013      	str	r3, [r2, #0]
 800874a:	4770      	bx	lr
 800874c:	200130cc 	.word	0x200130cc
 8008750:	200130d0 	.word	0x200130d0

08008754 <_init>:
 8008754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008756:	bf00      	nop
 8008758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800875a:	bc08      	pop	{r3}
 800875c:	469e      	mov	lr, r3
 800875e:	4770      	bx	lr

08008760 <_fini>:
 8008760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008762:	bf00      	nop
 8008764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008766:	bc08      	pop	{r3}
 8008768:	469e      	mov	lr, r3
 800876a:	4770      	bx	lr
