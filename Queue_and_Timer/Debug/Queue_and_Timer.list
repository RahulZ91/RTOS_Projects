
Queue_and_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f30  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08006100  08006100  00007100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006300  08006300  00008024  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006300  08006300  00007300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006308  08006308  00008024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006308  08006308  00007308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800630c  0800630c  0000730c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08006310  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012eac  20000024  08006334  00008024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012ed0  08006334  00008ed0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000130d3  00000000  00000000  00008054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f59  00000000  00000000  0001b127  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011a8  00000000  00000000  0001e080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dab  00000000  00000000  0001f228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002468d  00000000  00000000  0001ffd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017562  00000000  00000000  00044660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df2ed  00000000  00000000  0005bbc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013aeaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004918  00000000  00000000  0013aef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0013f80c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000024 	.word	0x20000024
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080060e8 	.word	0x080060e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000028 	.word	0x20000028
 800020c:	080060e8 	.word	0x080060e8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295
 8000234:	f04f 30ff 	movne.w	r0, #4294967295
 8000238:	f000 b988 	b.w	800054c <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	9d08      	ldr	r5, [sp, #32]
 800025a:	468e      	mov	lr, r1
 800025c:	4604      	mov	r4, r0
 800025e:	4688      	mov	r8, r1
 8000260:	2b00      	cmp	r3, #0
 8000262:	d14a      	bne.n	80002fa <__udivmoddi4+0xa6>
 8000264:	428a      	cmp	r2, r1
 8000266:	4617      	mov	r7, r2
 8000268:	d962      	bls.n	8000330 <__udivmoddi4+0xdc>
 800026a:	fab2 f682 	clz	r6, r2
 800026e:	b14e      	cbz	r6, 8000284 <__udivmoddi4+0x30>
 8000270:	f1c6 0320 	rsb	r3, r6, #32
 8000274:	fa01 f806 	lsl.w	r8, r1, r6
 8000278:	fa20 f303 	lsr.w	r3, r0, r3
 800027c:	40b7      	lsls	r7, r6
 800027e:	ea43 0808 	orr.w	r8, r3, r8
 8000282:	40b4      	lsls	r4, r6
 8000284:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000288:	fa1f fc87 	uxth.w	ip, r7
 800028c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000290:	0c23      	lsrs	r3, r4, #16
 8000292:	fb0e 8811 	mls	r8, lr, r1, r8
 8000296:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800029a:	fb01 f20c 	mul.w	r2, r1, ip
 800029e:	429a      	cmp	r2, r3
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0x62>
 80002a2:	18fb      	adds	r3, r7, r3
 80002a4:	f101 30ff 	add.w	r0, r1, #4294967295
 80002a8:	f080 80ea 	bcs.w	8000480 <__udivmoddi4+0x22c>
 80002ac:	429a      	cmp	r2, r3
 80002ae:	f240 80e7 	bls.w	8000480 <__udivmoddi4+0x22c>
 80002b2:	3902      	subs	r1, #2
 80002b4:	443b      	add	r3, r7
 80002b6:	1a9a      	subs	r2, r3, r2
 80002b8:	b2a3      	uxth	r3, r4
 80002ba:	fbb2 f0fe 	udiv	r0, r2, lr
 80002be:	fb0e 2210 	mls	r2, lr, r0, r2
 80002c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002c6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ca:	459c      	cmp	ip, r3
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0x8e>
 80002ce:	18fb      	adds	r3, r7, r3
 80002d0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d4:	f080 80d6 	bcs.w	8000484 <__udivmoddi4+0x230>
 80002d8:	459c      	cmp	ip, r3
 80002da:	f240 80d3 	bls.w	8000484 <__udivmoddi4+0x230>
 80002de:	443b      	add	r3, r7
 80002e0:	3802      	subs	r0, #2
 80002e2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002e6:	eba3 030c 	sub.w	r3, r3, ip
 80002ea:	2100      	movs	r1, #0
 80002ec:	b11d      	cbz	r5, 80002f6 <__udivmoddi4+0xa2>
 80002ee:	40f3      	lsrs	r3, r6
 80002f0:	2200      	movs	r2, #0
 80002f2:	e9c5 3200 	strd	r3, r2, [r5]
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d905      	bls.n	800030a <__udivmoddi4+0xb6>
 80002fe:	b10d      	cbz	r5, 8000304 <__udivmoddi4+0xb0>
 8000300:	e9c5 0100 	strd	r0, r1, [r5]
 8000304:	2100      	movs	r1, #0
 8000306:	4608      	mov	r0, r1
 8000308:	e7f5      	b.n	80002f6 <__udivmoddi4+0xa2>
 800030a:	fab3 f183 	clz	r1, r3
 800030e:	2900      	cmp	r1, #0
 8000310:	d146      	bne.n	80003a0 <__udivmoddi4+0x14c>
 8000312:	4573      	cmp	r3, lr
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xc8>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 8105 	bhi.w	8000526 <__udivmoddi4+0x2d2>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000322:	2001      	movs	r0, #1
 8000324:	4690      	mov	r8, r2
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e5      	beq.n	80002f6 <__udivmoddi4+0xa2>
 800032a:	e9c5 4800 	strd	r4, r8, [r5]
 800032e:	e7e2      	b.n	80002f6 <__udivmoddi4+0xa2>
 8000330:	2a00      	cmp	r2, #0
 8000332:	f000 8090 	beq.w	8000456 <__udivmoddi4+0x202>
 8000336:	fab2 f682 	clz	r6, r2
 800033a:	2e00      	cmp	r6, #0
 800033c:	f040 80a4 	bne.w	8000488 <__udivmoddi4+0x234>
 8000340:	1a8a      	subs	r2, r1, r2
 8000342:	0c03      	lsrs	r3, r0, #16
 8000344:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000348:	b280      	uxth	r0, r0
 800034a:	b2bc      	uxth	r4, r7
 800034c:	2101      	movs	r1, #1
 800034e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000352:	fb0e 221c 	mls	r2, lr, ip, r2
 8000356:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800035a:	fb04 f20c 	mul.w	r2, r4, ip
 800035e:	429a      	cmp	r2, r3
 8000360:	d907      	bls.n	8000372 <__udivmoddi4+0x11e>
 8000362:	18fb      	adds	r3, r7, r3
 8000364:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x11c>
 800036a:	429a      	cmp	r2, r3
 800036c:	f200 80e0 	bhi.w	8000530 <__udivmoddi4+0x2dc>
 8000370:	46c4      	mov	ip, r8
 8000372:	1a9b      	subs	r3, r3, r2
 8000374:	fbb3 f2fe 	udiv	r2, r3, lr
 8000378:	fb0e 3312 	mls	r3, lr, r2, r3
 800037c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000380:	fb02 f404 	mul.w	r4, r2, r4
 8000384:	429c      	cmp	r4, r3
 8000386:	d907      	bls.n	8000398 <__udivmoddi4+0x144>
 8000388:	18fb      	adds	r3, r7, r3
 800038a:	f102 30ff 	add.w	r0, r2, #4294967295
 800038e:	d202      	bcs.n	8000396 <__udivmoddi4+0x142>
 8000390:	429c      	cmp	r4, r3
 8000392:	f200 80ca 	bhi.w	800052a <__udivmoddi4+0x2d6>
 8000396:	4602      	mov	r2, r0
 8000398:	1b1b      	subs	r3, r3, r4
 800039a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800039e:	e7a5      	b.n	80002ec <__udivmoddi4+0x98>
 80003a0:	f1c1 0620 	rsb	r6, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 f706 	lsr.w	r7, r2, r6
 80003aa:	431f      	orrs	r7, r3
 80003ac:	fa0e f401 	lsl.w	r4, lr, r1
 80003b0:	fa20 f306 	lsr.w	r3, r0, r6
 80003b4:	fa2e fe06 	lsr.w	lr, lr, r6
 80003b8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fa00 f801 	lsl.w	r8, r0, r1
 80003c2:	fa1f fc87 	uxth.w	ip, r7
 80003c6:	fbbe f0f9 	udiv	r0, lr, r9
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	fb09 ee10 	mls	lr, r9, r0, lr
 80003d0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003d8:	45a6      	cmp	lr, r4
 80003da:	fa02 f201 	lsl.w	r2, r2, r1
 80003de:	d909      	bls.n	80003f4 <__udivmoddi4+0x1a0>
 80003e0:	193c      	adds	r4, r7, r4
 80003e2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003e6:	f080 809c 	bcs.w	8000522 <__udivmoddi4+0x2ce>
 80003ea:	45a6      	cmp	lr, r4
 80003ec:	f240 8099 	bls.w	8000522 <__udivmoddi4+0x2ce>
 80003f0:	3802      	subs	r0, #2
 80003f2:	443c      	add	r4, r7
 80003f4:	eba4 040e 	sub.w	r4, r4, lr
 80003f8:	fa1f fe83 	uxth.w	lr, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000408:	fb03 fc0c 	mul.w	ip, r3, ip
 800040c:	45a4      	cmp	ip, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1ce>
 8000410:	193c      	adds	r4, r7, r4
 8000412:	f103 3eff 	add.w	lr, r3, #4294967295
 8000416:	f080 8082 	bcs.w	800051e <__udivmoddi4+0x2ca>
 800041a:	45a4      	cmp	ip, r4
 800041c:	d97f      	bls.n	800051e <__udivmoddi4+0x2ca>
 800041e:	3b02      	subs	r3, #2
 8000420:	443c      	add	r4, r7
 8000422:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000426:	eba4 040c 	sub.w	r4, r4, ip
 800042a:	fba0 ec02 	umull	lr, ip, r0, r2
 800042e:	4564      	cmp	r4, ip
 8000430:	4673      	mov	r3, lr
 8000432:	46e1      	mov	r9, ip
 8000434:	d362      	bcc.n	80004fc <__udivmoddi4+0x2a8>
 8000436:	d05f      	beq.n	80004f8 <__udivmoddi4+0x2a4>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x1fe>
 800043a:	ebb8 0203 	subs.w	r2, r8, r3
 800043e:	eb64 0409 	sbc.w	r4, r4, r9
 8000442:	fa04 f606 	lsl.w	r6, r4, r6
 8000446:	fa22 f301 	lsr.w	r3, r2, r1
 800044a:	431e      	orrs	r6, r3
 800044c:	40cc      	lsrs	r4, r1
 800044e:	e9c5 6400 	strd	r6, r4, [r5]
 8000452:	2100      	movs	r1, #0
 8000454:	e74f      	b.n	80002f6 <__udivmoddi4+0xa2>
 8000456:	fbb1 fcf2 	udiv	ip, r1, r2
 800045a:	0c01      	lsrs	r1, r0, #16
 800045c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000460:	b280      	uxth	r0, r0
 8000462:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000466:	463b      	mov	r3, r7
 8000468:	4638      	mov	r0, r7
 800046a:	463c      	mov	r4, r7
 800046c:	46b8      	mov	r8, r7
 800046e:	46be      	mov	lr, r7
 8000470:	2620      	movs	r6, #32
 8000472:	fbb1 f1f7 	udiv	r1, r1, r7
 8000476:	eba2 0208 	sub.w	r2, r2, r8
 800047a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800047e:	e766      	b.n	800034e <__udivmoddi4+0xfa>
 8000480:	4601      	mov	r1, r0
 8000482:	e718      	b.n	80002b6 <__udivmoddi4+0x62>
 8000484:	4610      	mov	r0, r2
 8000486:	e72c      	b.n	80002e2 <__udivmoddi4+0x8e>
 8000488:	f1c6 0220 	rsb	r2, r6, #32
 800048c:	fa2e f302 	lsr.w	r3, lr, r2
 8000490:	40b7      	lsls	r7, r6
 8000492:	40b1      	lsls	r1, r6
 8000494:	fa20 f202 	lsr.w	r2, r0, r2
 8000498:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800049c:	430a      	orrs	r2, r1
 800049e:	fbb3 f8fe 	udiv	r8, r3, lr
 80004a2:	b2bc      	uxth	r4, r7
 80004a4:	fb0e 3318 	mls	r3, lr, r8, r3
 80004a8:	0c11      	lsrs	r1, r2, #16
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb08 f904 	mul.w	r9, r8, r4
 80004b2:	40b0      	lsls	r0, r6
 80004b4:	4589      	cmp	r9, r1
 80004b6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ba:	b280      	uxth	r0, r0
 80004bc:	d93e      	bls.n	800053c <__udivmoddi4+0x2e8>
 80004be:	1879      	adds	r1, r7, r1
 80004c0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c4:	d201      	bcs.n	80004ca <__udivmoddi4+0x276>
 80004c6:	4589      	cmp	r9, r1
 80004c8:	d81f      	bhi.n	800050a <__udivmoddi4+0x2b6>
 80004ca:	eba1 0109 	sub.w	r1, r1, r9
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fb09 f804 	mul.w	r8, r9, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	b292      	uxth	r2, r2
 80004dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d229      	bcs.n	8000538 <__udivmoddi4+0x2e4>
 80004e4:	18ba      	adds	r2, r7, r2
 80004e6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ea:	d2c4      	bcs.n	8000476 <__udivmoddi4+0x222>
 80004ec:	4542      	cmp	r2, r8
 80004ee:	d2c2      	bcs.n	8000476 <__udivmoddi4+0x222>
 80004f0:	f1a9 0102 	sub.w	r1, r9, #2
 80004f4:	443a      	add	r2, r7
 80004f6:	e7be      	b.n	8000476 <__udivmoddi4+0x222>
 80004f8:	45f0      	cmp	r8, lr
 80004fa:	d29d      	bcs.n	8000438 <__udivmoddi4+0x1e4>
 80004fc:	ebbe 0302 	subs.w	r3, lr, r2
 8000500:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000504:	3801      	subs	r0, #1
 8000506:	46e1      	mov	r9, ip
 8000508:	e796      	b.n	8000438 <__udivmoddi4+0x1e4>
 800050a:	eba7 0909 	sub.w	r9, r7, r9
 800050e:	4449      	add	r1, r9
 8000510:	f1a8 0c02 	sub.w	ip, r8, #2
 8000514:	fbb1 f9fe 	udiv	r9, r1, lr
 8000518:	fb09 f804 	mul.w	r8, r9, r4
 800051c:	e7db      	b.n	80004d6 <__udivmoddi4+0x282>
 800051e:	4673      	mov	r3, lr
 8000520:	e77f      	b.n	8000422 <__udivmoddi4+0x1ce>
 8000522:	4650      	mov	r0, sl
 8000524:	e766      	b.n	80003f4 <__udivmoddi4+0x1a0>
 8000526:	4608      	mov	r0, r1
 8000528:	e6fd      	b.n	8000326 <__udivmoddi4+0xd2>
 800052a:	443b      	add	r3, r7
 800052c:	3a02      	subs	r2, #2
 800052e:	e733      	b.n	8000398 <__udivmoddi4+0x144>
 8000530:	f1ac 0c02 	sub.w	ip, ip, #2
 8000534:	443b      	add	r3, r7
 8000536:	e71c      	b.n	8000372 <__udivmoddi4+0x11e>
 8000538:	4649      	mov	r1, r9
 800053a:	e79c      	b.n	8000476 <__udivmoddi4+0x222>
 800053c:	eba1 0109 	sub.w	r1, r1, r9
 8000540:	46c4      	mov	ip, r8
 8000542:	fbb1 f9fe 	udiv	r9, r1, lr
 8000546:	fb09 f804 	mul.w	r8, r9, r4
 800054a:	e7c4      	b.n	80004d6 <__udivmoddi4+0x282>

0800054c <__aeabi_idiv0>:
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop

08000550 <led_effect_stop>:
 */

#include "main.h"

void led_effect_stop(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af02      	add	r7, sp, #8
	for(int i=0;i<4;i++)
 8000556:	2300      	movs	r3, #0
 8000558:	607b      	str	r3, [r7, #4]
 800055a:	e015      	b.n	8000588 <led_effect_stop+0x38>
	   {
		   handle_led_timer[i]=xTimerStop(handle_led_timer[i-1],portMAX_DELAY);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	3b01      	subs	r3, #1
 8000560:	4a0d      	ldr	r2, [pc, #52]	@ (8000598 <led_effect_stop+0x48>)
 8000562:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000566:	f04f 33ff 	mov.w	r3, #4294967295
 800056a:	9300      	str	r3, [sp, #0]
 800056c:	2300      	movs	r3, #0
 800056e:	2200      	movs	r2, #0
 8000570:	2103      	movs	r1, #3
 8000572:	f004 fe13 	bl	800519c <xTimerGenericCommand>
 8000576:	4603      	mov	r3, r0
 8000578:	4619      	mov	r1, r3
 800057a:	4a07      	ldr	r2, [pc, #28]	@ (8000598 <led_effect_stop+0x48>)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<4;i++)
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	3301      	adds	r3, #1
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2b03      	cmp	r3, #3
 800058c:	dde6      	ble.n	800055c <led_effect_stop+0xc>
	   }
}
 800058e:	bf00      	nop
 8000590:	bf00      	nop
 8000592:	3708      	adds	r7, #8
 8000594:	46bd      	mov	sp, r7
 8000596:	bd80      	pop	{r7, pc}
 8000598:	200000cc 	.word	0x200000cc

0800059c <led_effect>:

void led_effect(int a)
{
 800059c:	b590      	push	{r4, r7, lr}
 800059e:	b085      	sub	sp, #20
 80005a0:	af02      	add	r7, sp, #8
 80005a2:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 80005a4:	f7ff ffd4 	bl	8000550 <led_effect_stop>
	xTimerStart(handle_led_timer[a-1],portMAX_DELAY);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	3b01      	subs	r3, #1
 80005ac:	4a08      	ldr	r2, [pc, #32]	@ (80005d0 <led_effect+0x34>)
 80005ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80005b2:	f004 f81d 	bl	80045f0 <xTaskGetTickCount>
 80005b6:	4602      	mov	r2, r0
 80005b8:	f04f 33ff 	mov.w	r3, #4294967295
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	2300      	movs	r3, #0
 80005c0:	2101      	movs	r1, #1
 80005c2:	4620      	mov	r0, r4
 80005c4:	f004 fdea 	bl	800519c <xTimerGenericCommand>

}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd90      	pop	{r4, r7, pc}
 80005d0:	200000cc 	.word	0x200000cc

080005d4 <led_effect1>:

void led_effect1(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	static int flag=1;
	(flag^=1) ? turn_off_all_leds():turn_on_all_leds();
 80005d8:	4b08      	ldr	r3, [pc, #32]	@ (80005fc <led_effect1+0x28>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f083 0301 	eor.w	r3, r3, #1
 80005e0:	4a06      	ldr	r2, [pc, #24]	@ (80005fc <led_effect1+0x28>)
 80005e2:	6013      	str	r3, [r2, #0]
 80005e4:	4b05      	ldr	r3, [pc, #20]	@ (80005fc <led_effect1+0x28>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d002      	beq.n	80005f2 <led_effect1+0x1e>
 80005ec:	f000 f856 	bl	800069c <turn_off_all_leds>
}
 80005f0:	e001      	b.n	80005f6 <led_effect1+0x22>
	(flag^=1) ? turn_off_all_leds():turn_on_all_leds();
 80005f2:	f000 f847 	bl	8000684 <turn_on_all_leds>
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	20000000 	.word	0x20000000

08000600 <led_effect2>:

void led_effect2(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	static int flag=1;
	(flag^=1) ? turn_off_all_leds_500ms():turn_on_all_leds_500ms();
 8000604:	4b08      	ldr	r3, [pc, #32]	@ (8000628 <led_effect2+0x28>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	f083 0301 	eor.w	r3, r3, #1
 800060c:	4a06      	ldr	r2, [pc, #24]	@ (8000628 <led_effect2+0x28>)
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b05      	ldr	r3, [pc, #20]	@ (8000628 <led_effect2+0x28>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d002      	beq.n	800061e <led_effect2+0x1e>
 8000618:	f000 f84c 	bl	80006b4 <turn_off_all_leds_500ms>
}
 800061c:	e001      	b.n	8000622 <led_effect2+0x22>
	(flag^=1) ? turn_off_all_leds_500ms():turn_on_all_leds_500ms();
 800061e:	f000 f859 	bl	80006d4 <turn_on_all_leds_500ms>
}
 8000622:	bf00      	nop
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000004 	.word	0x20000004

0800062c <led_effect3>:

void led_effect3(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	static int flag=1;
	(flag^=1) ? turn_off_all_leds_1000ms():turn_on_all_leds_1000ms();
 8000630:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <led_effect3+0x28>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f083 0301 	eor.w	r3, r3, #1
 8000638:	4a06      	ldr	r2, [pc, #24]	@ (8000654 <led_effect3+0x28>)
 800063a:	6013      	str	r3, [r2, #0]
 800063c:	4b05      	ldr	r3, [pc, #20]	@ (8000654 <led_effect3+0x28>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d002      	beq.n	800064a <led_effect3+0x1e>
 8000644:	f000 f856 	bl	80006f4 <turn_off_all_leds_1000ms>
}
 8000648:	e001      	b.n	800064e <led_effect3+0x22>
	(flag^=1) ? turn_off_all_leds_1000ms():turn_on_all_leds_1000ms();
 800064a:	f000 f863 	bl	8000714 <turn_on_all_leds_1000ms>
}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000008 	.word	0x20000008

08000658 <led_effect4>:

void led_effect4(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	static int flag=1;
	(flag^=1) ? turn_off_all_leds_2000ms():turn_on_all_leds_2000ms();
 800065c:	4b08      	ldr	r3, [pc, #32]	@ (8000680 <led_effect4+0x28>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f083 0301 	eor.w	r3, r3, #1
 8000664:	4a06      	ldr	r2, [pc, #24]	@ (8000680 <led_effect4+0x28>)
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	4b05      	ldr	r3, [pc, #20]	@ (8000680 <led_effect4+0x28>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d002      	beq.n	8000676 <led_effect4+0x1e>
 8000670:	f000 f860 	bl	8000734 <turn_off_all_leds_2000ms>
}
 8000674:	e001      	b.n	800067a <led_effect4+0x22>
	(flag^=1) ? turn_off_all_leds_2000ms():turn_on_all_leds_2000ms();
 8000676:	f000 f86d 	bl	8000754 <turn_on_all_leds_2000ms>
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	2000000c 	.word	0x2000000c

08000684 <turn_on_all_leds>:

void turn_on_all_leds(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000688:	2201      	movs	r2, #1
 800068a:	2120      	movs	r1, #32
 800068c:	4802      	ldr	r0, [pc, #8]	@ (8000698 <turn_on_all_leds+0x14>)
 800068e:	f001 f8d9 	bl	8001844 <HAL_GPIO_WritePin>
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40020000 	.word	0x40020000

0800069c <turn_off_all_leds>:

void turn_off_all_leds(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2120      	movs	r1, #32
 80006a4:	4802      	ldr	r0, [pc, #8]	@ (80006b0 <turn_off_all_leds+0x14>)
 80006a6:	f001 f8cd 	bl	8001844 <HAL_GPIO_WritePin>
}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	40020000 	.word	0x40020000

080006b4 <turn_off_all_leds_500ms>:

void turn_off_all_leds_500ms(void )
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 80006b8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006bc:	f000 fe28 	bl	8001310 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	2120      	movs	r1, #32
 80006c4:	4802      	ldr	r0, [pc, #8]	@ (80006d0 <turn_off_all_leds_500ms+0x1c>)
 80006c6:	f001 f8bd 	bl	8001844 <HAL_GPIO_WritePin>
}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40020000 	.word	0x40020000

080006d4 <turn_on_all_leds_500ms>:

void turn_on_all_leds_500ms(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 80006d8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006dc:	f000 fe18 	bl	8001310 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80006e0:	2201      	movs	r2, #1
 80006e2:	2120      	movs	r1, #32
 80006e4:	4802      	ldr	r0, [pc, #8]	@ (80006f0 <turn_on_all_leds_500ms+0x1c>)
 80006e6:	f001 f8ad 	bl	8001844 <HAL_GPIO_WritePin>
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40020000 	.word	0x40020000

080006f4 <turn_off_all_leds_1000ms>:

void turn_off_all_leds_1000ms(void )
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 80006f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80006fc:	f000 fe08 	bl	8001310 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000700:	2200      	movs	r2, #0
 8000702:	2120      	movs	r1, #32
 8000704:	4802      	ldr	r0, [pc, #8]	@ (8000710 <turn_off_all_leds_1000ms+0x1c>)
 8000706:	f001 f89d 	bl	8001844 <HAL_GPIO_WritePin>
}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40020000 	.word	0x40020000

08000714 <turn_on_all_leds_1000ms>:

void turn_on_all_leds_1000ms(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 8000718:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800071c:	f000 fdf8 	bl	8001310 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000720:	2201      	movs	r2, #1
 8000722:	2120      	movs	r1, #32
 8000724:	4802      	ldr	r0, [pc, #8]	@ (8000730 <turn_on_all_leds_1000ms+0x1c>)
 8000726:	f001 f88d 	bl	8001844 <HAL_GPIO_WritePin>
}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40020000 	.word	0x40020000

08000734 <turn_off_all_leds_2000ms>:

void turn_off_all_leds_2000ms(void )
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	HAL_Delay(2000);
 8000738:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800073c:	f000 fde8 	bl	8001310 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	2120      	movs	r1, #32
 8000744:	4802      	ldr	r0, [pc, #8]	@ (8000750 <turn_off_all_leds_2000ms+0x1c>)
 8000746:	f001 f87d 	bl	8001844 <HAL_GPIO_WritePin>
}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40020000 	.word	0x40020000

08000754 <turn_on_all_leds_2000ms>:

void turn_on_all_leds_2000ms(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	HAL_Delay(2000);
 8000758:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800075c:	f000 fdd8 	bl	8001310 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000760:	2201      	movs	r2, #1
 8000762:	2120      	movs	r1, #32
 8000764:	4802      	ldr	r0, [pc, #8]	@ (8000770 <turn_on_all_leds_2000ms+0x1c>)
 8000766:	f001 f86d 	bl	8001844 <HAL_GPIO_WritePin>
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40020000 	.word	0x40020000

08000774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	@ 0x28
 8000778:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077a:	f000 fd9b 	bl	80012b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800077e:	f000 f919 	bl	80009b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000782:	f000 f9d9 	bl	8000b38 <MX_GPIO_Init>
  MX_RTC_Init();
 8000786:	f000 f987 	bl	8000a98 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800078a:	f000 f9ab 	bl	8000ae4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  status=xTaskCreate(menu_task,"Menu task",200,NULL,2,&handle_menu_task);
 800078e:	4b72      	ldr	r3, [pc, #456]	@ (8000958 <main+0x1e4>)
 8000790:	9301      	str	r3, [sp, #4]
 8000792:	2302      	movs	r3, #2
 8000794:	9300      	str	r3, [sp, #0]
 8000796:	2300      	movs	r3, #0
 8000798:	22c8      	movs	r2, #200	@ 0xc8
 800079a:	4970      	ldr	r1, [pc, #448]	@ (800095c <main+0x1e8>)
 800079c:	4870      	ldr	r0, [pc, #448]	@ (8000960 <main+0x1ec>)
 800079e:	f003 fcff 	bl	80041a0 <xTaskCreate>
 80007a2:	4603      	mov	r3, r0
 80007a4:	4a6f      	ldr	r2, [pc, #444]	@ (8000964 <main+0x1f0>)
 80007a6:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 80007a8:	4b6e      	ldr	r3, [pc, #440]	@ (8000964 <main+0x1f0>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d00b      	beq.n	80007c8 <main+0x54>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80007b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007b4:	f383 8811 	msr	BASEPRI, r3
 80007b8:	f3bf 8f6f 	isb	sy
 80007bc:	f3bf 8f4f 	dsb	sy
 80007c0:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80007c2:	bf00      	nop
 80007c4:	bf00      	nop
 80007c6:	e7fd      	b.n	80007c4 <main+0x50>

  status=xTaskCreate(cmd_task,"CMD task",200,NULL,2,&handle_cmd_task);
 80007c8:	4b67      	ldr	r3, [pc, #412]	@ (8000968 <main+0x1f4>)
 80007ca:	9301      	str	r3, [sp, #4]
 80007cc:	2302      	movs	r3, #2
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	2300      	movs	r3, #0
 80007d2:	22c8      	movs	r2, #200	@ 0xc8
 80007d4:	4965      	ldr	r1, [pc, #404]	@ (800096c <main+0x1f8>)
 80007d6:	4866      	ldr	r0, [pc, #408]	@ (8000970 <main+0x1fc>)
 80007d8:	f003 fce2 	bl	80041a0 <xTaskCreate>
 80007dc:	4603      	mov	r3, r0
 80007de:	4a61      	ldr	r2, [pc, #388]	@ (8000964 <main+0x1f0>)
 80007e0:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 80007e2:	4b60      	ldr	r3, [pc, #384]	@ (8000964 <main+0x1f0>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d00b      	beq.n	8000802 <main+0x8e>
        __asm volatile
 80007ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007ee:	f383 8811 	msr	BASEPRI, r3
 80007f2:	f3bf 8f6f 	isb	sy
 80007f6:	f3bf 8f4f 	dsb	sy
 80007fa:	617b      	str	r3, [r7, #20]
    }
 80007fc:	bf00      	nop
 80007fe:	bf00      	nop
 8000800:	e7fd      	b.n	80007fe <main+0x8a>

  status=xTaskCreate(print_task,"Print task",200,NULL,2,&handle_print_task);
 8000802:	4b5c      	ldr	r3, [pc, #368]	@ (8000974 <main+0x200>)
 8000804:	9301      	str	r3, [sp, #4]
 8000806:	2302      	movs	r3, #2
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	2300      	movs	r3, #0
 800080c:	22c8      	movs	r2, #200	@ 0xc8
 800080e:	495a      	ldr	r1, [pc, #360]	@ (8000978 <main+0x204>)
 8000810:	485a      	ldr	r0, [pc, #360]	@ (800097c <main+0x208>)
 8000812:	f003 fcc5 	bl	80041a0 <xTaskCreate>
 8000816:	4603      	mov	r3, r0
 8000818:	4a52      	ldr	r2, [pc, #328]	@ (8000964 <main+0x1f0>)
 800081a:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 800081c:	4b51      	ldr	r3, [pc, #324]	@ (8000964 <main+0x1f0>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d00b      	beq.n	800083c <main+0xc8>
        __asm volatile
 8000824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000828:	f383 8811 	msr	BASEPRI, r3
 800082c:	f3bf 8f6f 	isb	sy
 8000830:	f3bf 8f4f 	dsb	sy
 8000834:	613b      	str	r3, [r7, #16]
    }
 8000836:	bf00      	nop
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <main+0xc4>

  status=xTaskCreate(led_task,"LED task",200,NULL,2,&handle_led_task);
 800083c:	4b50      	ldr	r3, [pc, #320]	@ (8000980 <main+0x20c>)
 800083e:	9301      	str	r3, [sp, #4]
 8000840:	2302      	movs	r3, #2
 8000842:	9300      	str	r3, [sp, #0]
 8000844:	2300      	movs	r3, #0
 8000846:	22c8      	movs	r2, #200	@ 0xc8
 8000848:	494e      	ldr	r1, [pc, #312]	@ (8000984 <main+0x210>)
 800084a:	484f      	ldr	r0, [pc, #316]	@ (8000988 <main+0x214>)
 800084c:	f003 fca8 	bl	80041a0 <xTaskCreate>
 8000850:	4603      	mov	r3, r0
 8000852:	4a44      	ldr	r2, [pc, #272]	@ (8000964 <main+0x1f0>)
 8000854:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000856:	4b43      	ldr	r3, [pc, #268]	@ (8000964 <main+0x1f0>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d00b      	beq.n	8000876 <main+0x102>
        __asm volatile
 800085e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000862:	f383 8811 	msr	BASEPRI, r3
 8000866:	f3bf 8f6f 	isb	sy
 800086a:	f3bf 8f4f 	dsb	sy
 800086e:	60fb      	str	r3, [r7, #12]
    }
 8000870:	bf00      	nop
 8000872:	bf00      	nop
 8000874:	e7fd      	b.n	8000872 <main+0xfe>

  status=xTaskCreate(rtc_task,"RTC task",200,NULL,2,&handle_rtc_task);
 8000876:	4b45      	ldr	r3, [pc, #276]	@ (800098c <main+0x218>)
 8000878:	9301      	str	r3, [sp, #4]
 800087a:	2302      	movs	r3, #2
 800087c:	9300      	str	r3, [sp, #0]
 800087e:	2300      	movs	r3, #0
 8000880:	22c8      	movs	r2, #200	@ 0xc8
 8000882:	4943      	ldr	r1, [pc, #268]	@ (8000990 <main+0x21c>)
 8000884:	4843      	ldr	r0, [pc, #268]	@ (8000994 <main+0x220>)
 8000886:	f003 fc8b 	bl	80041a0 <xTaskCreate>
 800088a:	4603      	mov	r3, r0
 800088c:	4a35      	ldr	r2, [pc, #212]	@ (8000964 <main+0x1f0>)
 800088e:	6013      	str	r3, [r2, #0]
   configASSERT(status == pdPASS);
 8000890:	4b34      	ldr	r3, [pc, #208]	@ (8000964 <main+0x1f0>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b01      	cmp	r3, #1
 8000896:	d00b      	beq.n	80008b0 <main+0x13c>
        __asm volatile
 8000898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800089c:	f383 8811 	msr	BASEPRI, r3
 80008a0:	f3bf 8f6f 	isb	sy
 80008a4:	f3bf 8f4f 	dsb	sy
 80008a8:	60bb      	str	r3, [r7, #8]
    }
 80008aa:	bf00      	nop
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <main+0x138>

   // Queue creation
   q_data = xQueueCreate(10,sizeof(char)); // no of items is 10 and each item is of size char
 80008b0:	2200      	movs	r2, #0
 80008b2:	2101      	movs	r1, #1
 80008b4:	200a      	movs	r0, #10
 80008b6:	f002 ffef 	bl	8003898 <xQueueGenericCreate>
 80008ba:	4603      	mov	r3, r0
 80008bc:	4a36      	ldr	r2, [pc, #216]	@ (8000998 <main+0x224>)
 80008be:	6013      	str	r3, [r2, #0]
   configASSERT(q_data != NULL); // xQueueCreate returns NULL id queue is not created
 80008c0:	4b35      	ldr	r3, [pc, #212]	@ (8000998 <main+0x224>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d10b      	bne.n	80008e0 <main+0x16c>
        __asm volatile
 80008c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008cc:	f383 8811 	msr	BASEPRI, r3
 80008d0:	f3bf 8f6f 	isb	sy
 80008d4:	f3bf 8f4f 	dsb	sy
 80008d8:	607b      	str	r3, [r7, #4]
    }
 80008da:	bf00      	nop
 80008dc:	bf00      	nop
 80008de:	e7fd      	b.n	80008dc <main+0x168>

   q_print= xQueueCreate(10,sizeof(size_t)); //size of the pointer pointed to
 80008e0:	2200      	movs	r2, #0
 80008e2:	2104      	movs	r1, #4
 80008e4:	200a      	movs	r0, #10
 80008e6:	f002 ffd7 	bl	8003898 <xQueueGenericCreate>
 80008ea:	4603      	mov	r3, r0
 80008ec:	4a2b      	ldr	r2, [pc, #172]	@ (800099c <main+0x228>)
 80008ee:	6013      	str	r3, [r2, #0]
   configASSERT(q_print != NULL);
 80008f0:	4b2a      	ldr	r3, [pc, #168]	@ (800099c <main+0x228>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d10b      	bne.n	8000910 <main+0x19c>
        __asm volatile
 80008f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008fc:	f383 8811 	msr	BASEPRI, r3
 8000900:	f3bf 8f6f 	isb	sy
 8000904:	f3bf 8f4f 	dsb	sy
 8000908:	603b      	str	r3, [r7, #0]
    }
 800090a:	bf00      	nop
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <main+0x198>

   //Create software timer for the LED effects

   for(int i=0;i<4;i++)
 8000910:	2300      	movs	r3, #0
 8000912:	61fb      	str	r3, [r7, #28]
 8000914:	e013      	b.n	800093e <main+0x1ca>
   {
	   handle_led_timer[i]=xTimerCreate("Led_Timer",pdMS_TO_TICKS(500),pdTRUE,(void *)(i+1),led_effect_callback);
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	3301      	adds	r3, #1
 800091a:	461a      	mov	r2, r3
 800091c:	4b20      	ldr	r3, [pc, #128]	@ (80009a0 <main+0x22c>)
 800091e:	9300      	str	r3, [sp, #0]
 8000920:	4613      	mov	r3, r2
 8000922:	2201      	movs	r2, #1
 8000924:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8000928:	481e      	ldr	r0, [pc, #120]	@ (80009a4 <main+0x230>)
 800092a:	f004 fbd9 	bl	80050e0 <xTimerCreate>
 800092e:	4602      	mov	r2, r0
 8000930:	491d      	ldr	r1, [pc, #116]	@ (80009a8 <main+0x234>)
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   for(int i=0;i<4;i++)
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	3301      	adds	r3, #1
 800093c:	61fb      	str	r3, [r7, #28]
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	2b03      	cmp	r3, #3
 8000942:	dde8      	ble.n	8000916 <main+0x1a2>
   }

   // Prepares the UART peripheral to receive data in interrupt mode
   HAL_UART_Receive_IT(&huart2, (uint8_t *)&user_data, 1);
 8000944:	2201      	movs	r2, #1
 8000946:	4919      	ldr	r1, [pc, #100]	@ (80009ac <main+0x238>)
 8000948:	4819      	ldr	r0, [pc, #100]	@ (80009b0 <main+0x23c>)
 800094a:	f002 fbc1 	bl	80030d0 <HAL_UART_Receive_IT>

   //Start task scheduler
   vTaskStartScheduler();
 800094e:	f003 fd5f 	bl	8004410 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000952:	bf00      	nop
 8000954:	e7fd      	b.n	8000952 <main+0x1de>
 8000956:	bf00      	nop
 8000958:	200000a8 	.word	0x200000a8
 800095c:	08006100 	.word	0x08006100
 8000960:	08000f21 	.word	0x08000f21
 8000964:	200000c4 	.word	0x200000c4
 8000968:	200000ac 	.word	0x200000ac
 800096c:	0800610c 	.word	0x0800610c
 8000970:	0800100d 	.word	0x0800100d
 8000974:	200000b0 	.word	0x200000b0
 8000978:	08006118 	.word	0x08006118
 800097c:	0800103b 	.word	0x0800103b
 8000980:	200000b4 	.word	0x200000b4
 8000984:	08006124 	.word	0x08006124
 8000988:	08001049 	.word	0x08001049
 800098c:	200000b8 	.word	0x200000b8
 8000990:	08006130 	.word	0x08006130
 8000994:	08001171 	.word	0x08001171
 8000998:	200000bc 	.word	0x200000bc
 800099c:	200000c0 	.word	0x200000c0
 80009a0:	08000c1d 	.word	0x08000c1d
 80009a4:	0800613c 	.word	0x0800613c
 80009a8:	200000cc 	.word	0x200000cc
 80009ac:	200000c8 	.word	0x200000c8
 80009b0:	20000060 	.word	0x20000060

080009b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b094      	sub	sp, #80	@ 0x50
 80009b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	2234      	movs	r2, #52	@ 0x34
 80009c0:	2100      	movs	r1, #0
 80009c2:	4618      	mov	r0, r3
 80009c4:	f005 fb56 	bl	8006074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009c8:	f107 0308 	add.w	r3, r7, #8
 80009cc:	2200      	movs	r2, #0
 80009ce:	601a      	str	r2, [r3, #0]
 80009d0:	605a      	str	r2, [r3, #4]
 80009d2:	609a      	str	r2, [r3, #8]
 80009d4:	60da      	str	r2, [r3, #12]
 80009d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d8:	2300      	movs	r3, #0
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	4b2c      	ldr	r3, [pc, #176]	@ (8000a90 <SystemClock_Config+0xdc>)
 80009de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e0:	4a2b      	ldr	r2, [pc, #172]	@ (8000a90 <SystemClock_Config+0xdc>)
 80009e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80009e8:	4b29      	ldr	r3, [pc, #164]	@ (8000a90 <SystemClock_Config+0xdc>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009f0:	607b      	str	r3, [r7, #4]
 80009f2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009f4:	2300      	movs	r3, #0
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	4b26      	ldr	r3, [pc, #152]	@ (8000a94 <SystemClock_Config+0xe0>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a00:	4a24      	ldr	r2, [pc, #144]	@ (8000a94 <SystemClock_Config+0xe0>)
 8000a02:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a06:	6013      	str	r3, [r2, #0]
 8000a08:	4b22      	ldr	r3, [pc, #136]	@ (8000a94 <SystemClock_Config+0xe0>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a10:	603b      	str	r3, [r7, #0]
 8000a12:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000a14:	230a      	movs	r3, #10
 8000a16:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a20:	2310      	movs	r3, #16
 8000a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000a24:	2301      	movs	r3, #1
 8000a26:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a30:	2310      	movs	r3, #16
 8000a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a34:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a38:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a42:	2302      	movs	r3, #2
 8000a44:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f001 fdde 	bl	800260c <HAL_RCC_OscConfig>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a56:	f000 f909 	bl	8000c6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5a:	230f      	movs	r3, #15
 8000a5c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a70:	f107 0308 	add.w	r3, r7, #8
 8000a74:	2102      	movs	r1, #2
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 ff22 	bl	80018c0 <HAL_RCC_ClockConfig>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000a82:	f000 f8f3 	bl	8000c6c <Error_Handler>
  }
}
 8000a86:	bf00      	nop
 8000a88:	3750      	adds	r7, #80	@ 0x50
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40007000 	.word	0x40007000

08000a98 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000adc <MX_RTC_Init+0x44>)
 8000a9e:	4a10      	ldr	r2, [pc, #64]	@ (8000ae0 <MX_RTC_Init+0x48>)
 8000aa0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000aa2:	4b0e      	ldr	r3, [pc, #56]	@ (8000adc <MX_RTC_Init+0x44>)
 8000aa4:	2240      	movs	r2, #64	@ 0x40
 8000aa6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8000adc <MX_RTC_Init+0x44>)
 8000aaa:	227f      	movs	r2, #127	@ 0x7f
 8000aac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000aae:	4b0b      	ldr	r3, [pc, #44]	@ (8000adc <MX_RTC_Init+0x44>)
 8000ab0:	22ff      	movs	r2, #255	@ 0xff
 8000ab2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000ab4:	4b09      	ldr	r3, [pc, #36]	@ (8000adc <MX_RTC_Init+0x44>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000aba:	4b08      	ldr	r3, [pc, #32]	@ (8000adc <MX_RTC_Init+0x44>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000ac0:	4b06      	ldr	r3, [pc, #24]	@ (8000adc <MX_RTC_Init+0x44>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000ac6:	4805      	ldr	r0, [pc, #20]	@ (8000adc <MX_RTC_Init+0x44>)
 8000ac8:	f002 f83e 	bl	8002b48 <HAL_RTC_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000ad2:	f000 f8cb 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000040 	.word	0x20000040
 8000ae0:	40002800 	.word	0x40002800

08000ae4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ae8:	4b11      	ldr	r3, [pc, #68]	@ (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000aea:	4a12      	ldr	r2, [pc, #72]	@ (8000b34 <MX_USART2_UART_Init+0x50>)
 8000aec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aee:	4b10      	ldr	r3, [pc, #64]	@ (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000af0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000af4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000af6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000afc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b02:	4b0b      	ldr	r3, [pc, #44]	@ (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b08:	4b09      	ldr	r3, [pc, #36]	@ (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b0a:	220c      	movs	r2, #12
 8000b0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b0e:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b14:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b1a:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <MX_USART2_UART_Init+0x4c>)
 8000b1c:	f002 fa88 	bl	8003030 <HAL_UART_Init>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b26:	f000 f8a1 	bl	8000c6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000060 	.word	0x20000060
 8000b34:	40004400 	.word	0x40004400

08000b38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08a      	sub	sp, #40	@ 0x28
 8000b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
 8000b4c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	4b2f      	ldr	r3, [pc, #188]	@ (8000c10 <MX_GPIO_Init+0xd8>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	4a2e      	ldr	r2, [pc, #184]	@ (8000c10 <MX_GPIO_Init+0xd8>)
 8000b58:	f043 0304 	orr.w	r3, r3, #4
 8000b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5e:	4b2c      	ldr	r3, [pc, #176]	@ (8000c10 <MX_GPIO_Init+0xd8>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	f003 0304 	and.w	r3, r3, #4
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b28      	ldr	r3, [pc, #160]	@ (8000c10 <MX_GPIO_Init+0xd8>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	4a27      	ldr	r2, [pc, #156]	@ (8000c10 <MX_GPIO_Init+0xd8>)
 8000b74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7a:	4b25      	ldr	r3, [pc, #148]	@ (8000c10 <MX_GPIO_Init+0xd8>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	4b21      	ldr	r3, [pc, #132]	@ (8000c10 <MX_GPIO_Init+0xd8>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	4a20      	ldr	r2, [pc, #128]	@ (8000c10 <MX_GPIO_Init+0xd8>)
 8000b90:	f043 0301 	orr.w	r3, r3, #1
 8000b94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b96:	4b1e      	ldr	r3, [pc, #120]	@ (8000c10 <MX_GPIO_Init+0xd8>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	f003 0301 	and.w	r3, r3, #1
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c10 <MX_GPIO_Init+0xd8>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	4a19      	ldr	r2, [pc, #100]	@ (8000c10 <MX_GPIO_Init+0xd8>)
 8000bac:	f043 0302 	orr.w	r3, r3, #2
 8000bb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bb2:	4b17      	ldr	r3, [pc, #92]	@ (8000c10 <MX_GPIO_Init+0xd8>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	f003 0302 	and.w	r3, r3, #2
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000bbe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bc4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000bce:	f107 0314 	add.w	r3, r7, #20
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480f      	ldr	r0, [pc, #60]	@ (8000c14 <MX_GPIO_Init+0xdc>)
 8000bd6:	f000 fca1 	bl	800151c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000bda:	2320      	movs	r3, #32
 8000bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bde:	2301      	movs	r3, #1
 8000be0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bea:	f107 0314 	add.w	r3, r7, #20
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4809      	ldr	r0, [pc, #36]	@ (8000c18 <MX_GPIO_Init+0xe0>)
 8000bf2:	f000 fc93 	bl	800151c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2028      	movs	r0, #40	@ 0x28
 8000bfc:	f000 fc64 	bl	80014c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c00:	2028      	movs	r0, #40	@ 0x28
 8000c02:	f000 fc7d 	bl	8001500 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c06:	bf00      	nop
 8000c08:	3728      	adds	r7, #40	@ 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40023800 	.word	0x40023800
 8000c14:	40020800 	.word	0x40020800
 8000c18:	40020000 	.word	0x40020000

08000c1c <led_effect_callback>:

/* USER CODE BEGIN 4 */

void led_effect_callback(TimerHandle_t xTimer)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	int id;
	id=(uint32_t)pvTimerGetTimerID(xTimer);
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f004 fda3 	bl	8005770 <pvTimerGetTimerID>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	60fb      	str	r3, [r7, #12]
	switch(id)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	3b01      	subs	r3, #1
 8000c32:	2b03      	cmp	r3, #3
 8000c34:	d816      	bhi.n	8000c64 <led_effect_callback+0x48>
 8000c36:	a201      	add	r2, pc, #4	@ (adr r2, 8000c3c <led_effect_callback+0x20>)
 8000c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3c:	08000c4d 	.word	0x08000c4d
 8000c40:	08000c53 	.word	0x08000c53
 8000c44:	08000c59 	.word	0x08000c59
 8000c48:	08000c5f 	.word	0x08000c5f
	{
	case 1:
		led_effect1();
 8000c4c:	f7ff fcc2 	bl	80005d4 <led_effect1>
		break;
 8000c50:	e008      	b.n	8000c64 <led_effect_callback+0x48>
	case 2:
		led_effect2();
 8000c52:	f7ff fcd5 	bl	8000600 <led_effect2>
		break;
 8000c56:	e005      	b.n	8000c64 <led_effect_callback+0x48>
	case 3:
		led_effect3();
 8000c58:	f7ff fce8 	bl	800062c <led_effect3>
		break;
 8000c5c:	e002      	b.n	8000c64 <led_effect_callback+0x48>
	case 4:
		led_effect4();
 8000c5e:	f7ff fcfb 	bl	8000658 <led_effect4>
		break;
 8000c62:	bf00      	nop
	}
}
 8000c64:	bf00      	nop
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c70:	b672      	cpsid	i
}
 8000c72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c74:	bf00      	nop
 8000c76:	e7fd      	b.n	8000c74 <Error_Handler+0x8>

08000c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	4b10      	ldr	r3, [pc, #64]	@ (8000cc4 <HAL_MspInit+0x4c>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c86:	4a0f      	ldr	r2, [pc, #60]	@ (8000cc4 <HAL_MspInit+0x4c>)
 8000c88:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c8c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000cc4 <HAL_MspInit+0x4c>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c92:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	4b09      	ldr	r3, [pc, #36]	@ (8000cc4 <HAL_MspInit+0x4c>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca2:	4a08      	ldr	r2, [pc, #32]	@ (8000cc4 <HAL_MspInit+0x4c>)
 8000ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ca8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000caa:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <HAL_MspInit+0x4c>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800

08000cc8 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b09a      	sub	sp, #104	@ 0x68
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd0:	f107 030c 	add.w	r3, r7, #12
 8000cd4:	225c      	movs	r2, #92	@ 0x5c
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f005 f9cb 	bl	8006074 <memset>
  if(hrtc->Instance==RTC)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a0c      	ldr	r2, [pc, #48]	@ (8000d14 <HAL_RTC_MspInit+0x4c>)
 8000ce4:	4293      	cmp	r3, r2
 8000ce6:	d111      	bne.n	8000d0c <HAL_RTC_MspInit+0x44>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ce8:	2320      	movs	r3, #32
 8000cea:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000cec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cf2:	f107 030c 	add.w	r3, r7, #12
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f000 ff2e 	bl	8001b58 <HAL_RCCEx_PeriphCLKConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000d02:	f7ff ffb3 	bl	8000c6c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d06:	4b04      	ldr	r3, [pc, #16]	@ (8000d18 <HAL_RTC_MspInit+0x50>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000d0c:	bf00      	nop
 8000d0e:	3768      	adds	r7, #104	@ 0x68
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40002800 	.word	0x40002800
 8000d18:	42470e3c 	.word	0x42470e3c

08000d1c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	@ 0x28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a1d      	ldr	r2, [pc, #116]	@ (8000db0 <HAL_UART_MspInit+0x94>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d133      	bne.n	8000da6 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
 8000d42:	4b1c      	ldr	r3, [pc, #112]	@ (8000db4 <HAL_UART_MspInit+0x98>)
 8000d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d46:	4a1b      	ldr	r2, [pc, #108]	@ (8000db4 <HAL_UART_MspInit+0x98>)
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d4e:	4b19      	ldr	r3, [pc, #100]	@ (8000db4 <HAL_UART_MspInit+0x98>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d56:	613b      	str	r3, [r7, #16]
 8000d58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	4b15      	ldr	r3, [pc, #84]	@ (8000db4 <HAL_UART_MspInit+0x98>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	4a14      	ldr	r2, [pc, #80]	@ (8000db4 <HAL_UART_MspInit+0x98>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6a:	4b12      	ldr	r3, [pc, #72]	@ (8000db4 <HAL_UART_MspInit+0x98>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d76:	230c      	movs	r3, #12
 8000d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d86:	2307      	movs	r3, #7
 8000d88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4809      	ldr	r0, [pc, #36]	@ (8000db8 <HAL_UART_MspInit+0x9c>)
 8000d92:	f000 fbc3 	bl	800151c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2106      	movs	r1, #6
 8000d9a:	2026      	movs	r0, #38	@ 0x26
 8000d9c:	f000 fb94 	bl	80014c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000da0:	2026      	movs	r0, #38	@ 0x26
 8000da2:	f000 fbad 	bl	8001500 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	@ 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40004400 	.word	0x40004400
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020000 	.word	0x40020000

08000dbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08e      	sub	sp, #56	@ 0x38
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	4b33      	ldr	r3, [pc, #204]	@ (8000ea0 <HAL_InitTick+0xe4>)
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd4:	4a32      	ldr	r2, [pc, #200]	@ (8000ea0 <HAL_InitTick+0xe4>)
 8000dd6:	f043 0310 	orr.w	r3, r3, #16
 8000dda:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ddc:	4b30      	ldr	r3, [pc, #192]	@ (8000ea0 <HAL_InitTick+0xe4>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de0:	f003 0310 	and.w	r3, r3, #16
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000de8:	f107 0210 	add.w	r2, r7, #16
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4611      	mov	r1, r2
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 fe7e 	bl	8001af4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000df8:	6a3b      	ldr	r3, [r7, #32]
 8000dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d103      	bne.n	8000e0a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e02:	f000 fe4f 	bl	8001aa4 <HAL_RCC_GetPCLK1Freq>
 8000e06:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e08:	e004      	b.n	8000e14 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e0a:	f000 fe4b 	bl	8001aa4 <HAL_RCC_GetPCLK1Freq>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e16:	4a23      	ldr	r2, [pc, #140]	@ (8000ea4 <HAL_InitTick+0xe8>)
 8000e18:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1c:	0c9b      	lsrs	r3, r3, #18
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e22:	4b21      	ldr	r3, [pc, #132]	@ (8000ea8 <HAL_InitTick+0xec>)
 8000e24:	4a21      	ldr	r2, [pc, #132]	@ (8000eac <HAL_InitTick+0xf0>)
 8000e26:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e28:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea8 <HAL_InitTick+0xec>)
 8000e2a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e2e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e30:	4a1d      	ldr	r2, [pc, #116]	@ (8000ea8 <HAL_InitTick+0xec>)
 8000e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e34:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea8 <HAL_InitTick+0xec>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e3c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea8 <HAL_InitTick+0xec>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e42:	4b19      	ldr	r3, [pc, #100]	@ (8000ea8 <HAL_InitTick+0xec>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e48:	4817      	ldr	r0, [pc, #92]	@ (8000ea8 <HAL_InitTick+0xec>)
 8000e4a:	f001 ff81 	bl	8002d50 <HAL_TIM_Base_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000e54:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d11b      	bne.n	8000e94 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000e5c:	4812      	ldr	r0, [pc, #72]	@ (8000ea8 <HAL_InitTick+0xec>)
 8000e5e:	f001 ffd1 	bl	8002e04 <HAL_TIM_Base_Start_IT>
 8000e62:	4603      	mov	r3, r0
 8000e64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000e68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d111      	bne.n	8000e94 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e70:	2036      	movs	r0, #54	@ 0x36
 8000e72:	f000 fb45 	bl	8001500 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b0f      	cmp	r3, #15
 8000e7a:	d808      	bhi.n	8000e8e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	2036      	movs	r0, #54	@ 0x36
 8000e82:	f000 fb21 	bl	80014c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e86:	4a0a      	ldr	r2, [pc, #40]	@ (8000eb0 <HAL_InitTick+0xf4>)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6013      	str	r3, [r2, #0]
 8000e8c:	e002      	b.n	8000e94 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e94:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3738      	adds	r7, #56	@ 0x38
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	40023800 	.word	0x40023800
 8000ea4:	431bde83 	.word	0x431bde83
 8000ea8:	200000dc 	.word	0x200000dc
 8000eac:	40001000 	.word	0x40001000
 8000eb0:	20000018 	.word	0x20000018

08000eb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <NMI_Handler+0x4>

08000ebc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <HardFault_Handler+0x4>

08000ec4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ec8:	bf00      	nop
 8000eca:	e7fd      	b.n	8000ec8 <MemManage_Handler+0x4>

08000ecc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <BusFault_Handler+0x4>

08000ed4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ed8:	bf00      	nop
 8000eda:	e7fd      	b.n	8000ed8 <UsageFault_Handler+0x4>

08000edc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <EXTI15_10_IRQHandler>:
/******************************************************************************/
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000eee:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000ef2:	f000 fcc1 	bl	8001878 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <SystemInit+0x20>)
 8000f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f06:	4a05      	ldr	r2, [pc, #20]	@ (8000f1c <SystemInit+0x20>)
 8000f08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <menu_task>:
int extract_command(command_t *cmd); // extract the bytes from the command

const char* msg_invalid="Invalid option";

void menu_task(void *param)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	@ 0x28
 8000f24:	af02      	add	r7, sp, #8
 8000f26:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	int option;
	state_t curr_state=sMainMenu;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	77fb      	strb	r3, [r7, #31]
	// Create the string that is printed first
			const char* msg_menu="===============================\n"
 8000f2c:	4b32      	ldr	r3, [pc, #200]	@ (8000ff8 <menu_task+0xd8>)
 8000f2e:	60fb      	str	r3, [r7, #12]
					         "==============================\n"
					         "LED Effect ------------->0     \n"
					         "Date and Time ---------->1     \n"
					         "Exit ------------------->2      \n"
			                 "Enter your choice here  :       ";
			const char* msg_invalid="Invalid option";
 8000f30:	4b32      	ldr	r3, [pc, #200]	@ (8000ffc <menu_task+0xdc>)
 8000f32:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 8000f34:	4b32      	ldr	r3, [pc, #200]	@ (8001000 <menu_task+0xe0>)
 8000f36:	6818      	ldr	r0, [r3, #0]
 8000f38:	f107 010c 	add.w	r1, r7, #12
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f42:	f002 fd2f 	bl	80039a4 <xQueueGenericSend>
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8000f46:	f107 0310 	add.w	r3, r7, #16
 8000f4a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f4e:	9200      	str	r2, [sp, #0]
 8000f50:	2200      	movs	r2, #0
 8000f52:	2100      	movs	r1, #0
 8000f54:	2000      	movs	r0, #0
 8000f56:	f003 fed3 	bl	8004d00 <xTaskGenericNotifyWait>
		cmd=(command_t *)cmd_addr;
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	61bb      	str	r3, [r7, #24]

		if(cmd->len == 1)
 8000f5e:	69bb      	ldr	r3, [r7, #24]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d132      	bne.n	8000fcc <menu_task+0xac>
		{
			option = cmd->payload[0]-48; // convert ASCII to number
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	3b30      	subs	r3, #48	@ 0x30
 8000f6c:	617b      	str	r3, [r7, #20]
			switch(option)
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d035      	beq.n	8000fe0 <menu_task+0xc0>
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	2b02      	cmp	r3, #2
 8000f78:	dc1e      	bgt.n	8000fb8 <menu_task+0x98>
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <menu_task+0x68>
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d00c      	beq.n	8000fa0 <menu_task+0x80>
 8000f86:	e017      	b.n	8000fb8 <menu_task+0x98>
			{
			case 0:
				curr_state=sLedEffect;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	77fb      	strb	r3, [r7, #31]
				xTaskNotify(handle_led_task,0,eNoAction);
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001004 <menu_task+0xe4>)
 8000f8e:	6818      	ldr	r0, [r3, #0]
 8000f90:	2300      	movs	r3, #0
 8000f92:	9300      	str	r3, [sp, #0]
 8000f94:	2300      	movs	r3, #0
 8000f96:	2200      	movs	r2, #0
 8000f98:	2100      	movs	r1, #0
 8000f9a:	f003 ff31 	bl	8004e00 <xTaskGenericNotify>
				break;
 8000f9e:	e020      	b.n	8000fe2 <menu_task+0xc2>
			case 1:
				curr_state=sRtcMenu;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	77fb      	strb	r3, [r7, #31]
				xTaskNotify(handle_rtc_task,0,eNoAction);
 8000fa4:	4b18      	ldr	r3, [pc, #96]	@ (8001008 <menu_task+0xe8>)
 8000fa6:	6818      	ldr	r0, [r3, #0]
 8000fa8:	2300      	movs	r3, #0
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2300      	movs	r3, #0
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	f003 ff25 	bl	8004e00 <xTaskGenericNotify>
				break;
 8000fb6:	e014      	b.n	8000fe2 <menu_task+0xc2>
			case 2:
				break;
			default:
				xQueueSend(q_print,&msg_invalid,portMAX_DELAY);
 8000fb8:	4b11      	ldr	r3, [pc, #68]	@ (8001000 <menu_task+0xe0>)
 8000fba:	6818      	ldr	r0, [r3, #0]
 8000fbc:	f107 0108 	add.w	r1, r7, #8
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc6:	f002 fced 	bl	80039a4 <xQueueGenericSend>
				continue;
 8000fca:	e013      	b.n	8000ff4 <menu_task+0xd4>
			}
		}
		else
		{
			//Invalid option
			xQueueSend(q_print,&msg_invalid,portMAX_DELAY);
 8000fcc:	4b0c      	ldr	r3, [pc, #48]	@ (8001000 <menu_task+0xe0>)
 8000fce:	6818      	ldr	r0, [r3, #0]
 8000fd0:	f107 0108 	add.w	r1, r7, #8
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	f04f 32ff 	mov.w	r2, #4294967295
 8000fda:	f002 fce3 	bl	80039a4 <xQueueGenericSend>
 8000fde:	e000      	b.n	8000fe2 <menu_task+0xc2>
				break;
 8000fe0:	bf00      	nop
		}

		//Exit for this
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8000fe2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2300      	movs	r3, #0
 8000fea:	2200      	movs	r2, #0
 8000fec:	2100      	movs	r1, #0
 8000fee:	2000      	movs	r0, #0
 8000ff0:	f003 fe86 	bl	8004d00 <xTaskGenericNotifyWait>
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 8000ff4:	e79e      	b.n	8000f34 <menu_task+0x14>
 8000ff6:	bf00      	nop
 8000ff8:	08006158 	.word	0x08006158
 8000ffc:	08006148 	.word	0x08006148
 8001000:	200000c0 	.word	0x200000c0
 8001004:	200000b4 	.word	0x200000b4
 8001008:	200000b8 	.word	0x200000b8

0800100c <cmd_task>:
	}
}

void cmd_task(void *param)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	@ 0x28
 8001010:	af02      	add	r7, sp, #8
 8001012:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	command_t cmd;
	while(1)
	{
		//Implement notify wait
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // waits indefinitely
 8001014:	f04f 33ff 	mov.w	r3, #4294967295
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2300      	movs	r3, #0
 800101c:	2200      	movs	r2, #0
 800101e:	2100      	movs	r1, #0
 8001020:	2000      	movs	r0, #0
 8001022:	f003 fe6d 	bl	8004d00 <xTaskGenericNotifyWait>
 8001026:	61f8      	str	r0, [r7, #28]
		if(ret == pdTRUE)                              // Notification received
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d1f2      	bne.n	8001014 <cmd_task+0x8>
		{
			process_command(&cmd);
 800102e:	f107 030c 	add.w	r3, r7, #12
 8001032:	4618      	mov	r0, r3
 8001034:	f000 f8a2 	bl	800117c <process_command>
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // waits indefinitely
 8001038:	e7ec      	b.n	8001014 <cmd_task+0x8>

0800103a <print_task>:
		}
	}
}

void print_task(void *param)
{
 800103a:	b480      	push	{r7}
 800103c:	b083      	sub	sp, #12
 800103e:	af00      	add	r7, sp, #0
 8001040:	6078      	str	r0, [r7, #4]
	while(1)
 8001042:	bf00      	nop
 8001044:	e7fd      	b.n	8001042 <print_task+0x8>
	...

08001048 <led_task>:

	}
}

void led_task(void *param)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af02      	add	r7, sp, #8
 800104e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		uint32_t cmd_addr;
			command_t *cmd;
			state_t curr_state=sMainMenu;
 8001050:	2300      	movs	r3, #0
 8001052:	75fb      	strb	r3, [r7, #23]
			const char* msg_led = "========================\n"
 8001054:	4b3d      	ldr	r3, [pc, #244]	@ (800114c <led_task+0x104>)
 8001056:	60bb      	str	r3, [r7, #8]
								  "(none,e1,e2,e3,e4)\n"
								  "Enter your choice here : ";

			while(1){
				/*TODO: Wait for notification (Notify wait) */
				xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001058:	f04f 33ff 	mov.w	r3, #4294967295
 800105c:	9300      	str	r3, [sp, #0]
 800105e:	2300      	movs	r3, #0
 8001060:	2200      	movs	r2, #0
 8001062:	2100      	movs	r1, #0
 8001064:	2000      	movs	r0, #0
 8001066:	f003 fe4b 	bl	8004d00 <xTaskGenericNotifyWait>
				/*TODO: Print LED menu */
				xQueueSend(q_print,&msg_led,portMAX_DELAY);
 800106a:	4b39      	ldr	r3, [pc, #228]	@ (8001150 <led_task+0x108>)
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	f107 0108 	add.w	r1, r7, #8
 8001072:	2300      	movs	r3, #0
 8001074:	f04f 32ff 	mov.w	r2, #4294967295
 8001078:	f002 fc94 	bl	80039a4 <xQueueGenericSend>
				/*TODO: wait for LED command (Notify wait) */
				xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	f04f 32ff 	mov.w	r2, #4294967295
 8001084:	9200      	str	r2, [sp, #0]
 8001086:	2200      	movs	r2, #0
 8001088:	2100      	movs	r1, #0
 800108a:	2000      	movs	r0, #0
 800108c:	f003 fe38 	bl	8004d00 <xTaskGenericNotifyWait>
				cmd=(command_t*)cmd_addr;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	613b      	str	r3, [r7, #16]
				if(cmd->len <= 4)
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	2b04      	cmp	r3, #4
 800109a:	d843      	bhi.n	8001124 <led_task+0xdc>
				{
					if(! strcmp((char*)cmd->payload,"none"))
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	492d      	ldr	r1, [pc, #180]	@ (8001154 <led_task+0x10c>)
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff f8b5 	bl	8000210 <strcmp>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d102      	bne.n	80010b2 <led_task+0x6a>
						led_effect_stop();
 80010ac:	f7ff fa50 	bl	8000550 <led_effect_stop>
 80010b0:	e040      	b.n	8001134 <led_task+0xec>
					else if (! strcmp((char*)cmd->payload,"e1"))
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4928      	ldr	r1, [pc, #160]	@ (8001158 <led_task+0x110>)
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff f8aa 	bl	8000210 <strcmp>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d103      	bne.n	80010ca <led_task+0x82>
						led_effect(1);
 80010c2:	2001      	movs	r0, #1
 80010c4:	f7ff fa6a 	bl	800059c <led_effect>
 80010c8:	e034      	b.n	8001134 <led_task+0xec>
					else if (! strcmp((char*)cmd->payload,"e2"))
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	4923      	ldr	r1, [pc, #140]	@ (800115c <led_task+0x114>)
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff f89e 	bl	8000210 <strcmp>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d103      	bne.n	80010e2 <led_task+0x9a>
						led_effect(2);
 80010da:	2002      	movs	r0, #2
 80010dc:	f7ff fa5e 	bl	800059c <led_effect>
 80010e0:	e028      	b.n	8001134 <led_task+0xec>
					else if (! strcmp((char*)cmd->payload,"e3"))
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	491e      	ldr	r1, [pc, #120]	@ (8001160 <led_task+0x118>)
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff f892 	bl	8000210 <strcmp>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d103      	bne.n	80010fa <led_task+0xb2>
						led_effect(3);
 80010f2:	2003      	movs	r0, #3
 80010f4:	f7ff fa52 	bl	800059c <led_effect>
 80010f8:	e01c      	b.n	8001134 <led_task+0xec>
					else if (! strcmp((char*)cmd->payload,"e4"))
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4919      	ldr	r1, [pc, #100]	@ (8001164 <led_task+0x11c>)
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff f886 	bl	8000210 <strcmp>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d103      	bne.n	8001112 <led_task+0xca>
						led_effect(4);
 800110a:	2004      	movs	r0, #4
 800110c:	f7ff fa46 	bl	800059c <led_effect>
 8001110:	e010      	b.n	8001134 <led_task+0xec>
					else
						/*TODO: print invalid message */
						xQueueSend(q_print,&msg_invalid,portMAX_DELAY);
 8001112:	4b0f      	ldr	r3, [pc, #60]	@ (8001150 <led_task+0x108>)
 8001114:	6818      	ldr	r0, [r3, #0]
 8001116:	2300      	movs	r3, #0
 8001118:	f04f 32ff 	mov.w	r2, #4294967295
 800111c:	4912      	ldr	r1, [pc, #72]	@ (8001168 <led_task+0x120>)
 800111e:	f002 fc41 	bl	80039a4 <xQueueGenericSend>
 8001122:	e007      	b.n	8001134 <led_task+0xec>
				}else
					/*TODO: print invalid message */
					xQueueSend(q_print,&msg_invalid,portMAX_DELAY);
 8001124:	4b0a      	ldr	r3, [pc, #40]	@ (8001150 <led_task+0x108>)
 8001126:	6818      	ldr	r0, [r3, #0]
 8001128:	2300      	movs	r3, #0
 800112a:	f04f 32ff 	mov.w	r2, #4294967295
 800112e:	490e      	ldr	r1, [pc, #56]	@ (8001168 <led_task+0x120>)
 8001130:	f002 fc38 	bl	80039a4 <xQueueGenericSend>
				/*TODO : update state variable */
				curr_state = sMainMenu;
 8001134:	2300      	movs	r3, #0
 8001136:	75fb      	strb	r3, [r7, #23]

				/*TODO : Notify menu task */
				xTaskNotify(handle_menu_task,0,eNoAction);
 8001138:	4b0c      	ldr	r3, [pc, #48]	@ (800116c <led_task+0x124>)
 800113a:	6818      	ldr	r0, [r3, #0]
 800113c:	2300      	movs	r3, #0
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2300      	movs	r3, #0
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	f003 fe5b 	bl	8004e00 <xTaskGenericNotify>
				xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 800114a:	e785      	b.n	8001058 <led_task+0x10>
 800114c:	0800623c 	.word	0x0800623c
 8001150:	200000c0 	.word	0x200000c0
 8001154:	080062b4 	.word	0x080062b4
 8001158:	080062bc 	.word	0x080062bc
 800115c:	080062c0 	.word	0x080062c0
 8001160:	080062c4 	.word	0x080062c4
 8001164:	080062c8 	.word	0x080062c8
 8001168:	20000014 	.word	0x20000014
 800116c:	200000a8 	.word	0x200000a8

08001170 <rtc_task>:
			}
	}
}

void rtc_task(void *param)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	while(1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <rtc_task+0x8>

0800117c <process_command>:

	}
}

void process_command(command_t *cmd)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af02      	add	r7, sp, #8
 8001182:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f000 f833 	bl	80011f0 <extract_command>
    state_t curr_state;
	switch(curr_state)               // based on the state do the further processing
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	2b05      	cmp	r3, #5
 800118e:	dc24      	bgt.n	80011da <process_command+0x5e>
 8001190:	2b02      	cmp	r3, #2
 8001192:	da18      	bge.n	80011c6 <process_command+0x4a>
 8001194:	2b00      	cmp	r3, #0
 8001196:	d002      	beq.n	800119e <process_command+0x22>
 8001198:	2b01      	cmp	r3, #1
 800119a:	d00a      	beq.n	80011b2 <process_command+0x36>
	    case sRtcDateConfig:
	    case sRtcReport:
	    	 xTaskNotify(handle_rtc_task,(uint32_t)cmd,eSetValueWithOverwrite);
	    break;
	}
}
 800119c:	e01d      	b.n	80011da <process_command+0x5e>
		  xTaskNotify(handle_menu_task,(uint32_t)cmd,eSetValueWithOverwrite);// notify menu task with the command
 800119e:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <process_command+0x68>)
 80011a0:	6818      	ldr	r0, [r3, #0]
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	2300      	movs	r3, #0
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2303      	movs	r3, #3
 80011aa:	2100      	movs	r1, #0
 80011ac:	f003 fe28 	bl	8004e00 <xTaskGenericNotify>
		break;
 80011b0:	e013      	b.n	80011da <process_command+0x5e>
	      xTaskNotify(handle_led_task,(uint32_t)cmd,eSetValueWithOverwrite);
 80011b2:	4b0d      	ldr	r3, [pc, #52]	@ (80011e8 <process_command+0x6c>)
 80011b4:	6818      	ldr	r0, [r3, #0]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	2300      	movs	r3, #0
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2303      	movs	r3, #3
 80011be:	2100      	movs	r1, #0
 80011c0:	f003 fe1e 	bl	8004e00 <xTaskGenericNotify>
	    break;
 80011c4:	e009      	b.n	80011da <process_command+0x5e>
	    	 xTaskNotify(handle_rtc_task,(uint32_t)cmd,eSetValueWithOverwrite);
 80011c6:	4b09      	ldr	r3, [pc, #36]	@ (80011ec <process_command+0x70>)
 80011c8:	6818      	ldr	r0, [r3, #0]
 80011ca:	687a      	ldr	r2, [r7, #4]
 80011cc:	2300      	movs	r3, #0
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2303      	movs	r3, #3
 80011d2:	2100      	movs	r1, #0
 80011d4:	f003 fe14 	bl	8004e00 <xTaskGenericNotify>
	    break;
 80011d8:	bf00      	nop
}
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200000a8 	.word	0x200000a8
 80011e8:	200000b4 	.word	0x200000b4
 80011ec:	200000b8 	.word	0x200000b8

080011f0 <extract_command>:

int extract_command(command_t *cmd)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;

	// Check the status of the message queue q_data
	status= uxQueueMessagesWaiting(q_data);
 80011f8:	4b18      	ldr	r3, [pc, #96]	@ (800125c <extract_command+0x6c>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f002 fe41 	bl	8003e84 <uxQueueMessagesWaiting>
 8001202:	4603      	mov	r3, r0
 8001204:	613b      	str	r3, [r7, #16]
	if(!status)                            // check if the queue is empty
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d102      	bne.n	8001212 <extract_command+0x22>
		return -1;
 800120c:	f04f 33ff 	mov.w	r3, #4294967295
 8001210:	e020      	b.n	8001254 <extract_command+0x64>
	uint8_t i;

	do
	{
		// Check what is in the queue and populate the structure member payload with command in placeholder till we receive end of line ie \n
		status=xQueueReceive(q_data, &item, 0);
 8001212:	4b12      	ldr	r3, [pc, #72]	@ (800125c <extract_command+0x6c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f107 010f 	add.w	r1, r7, #15
 800121a:	2200      	movs	r2, #0
 800121c:	4618      	mov	r0, r3
 800121e:	f002 fd59 	bl	8003cd4 <xQueueReceive>
 8001222:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE)
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d106      	bne.n	8001238 <extract_command+0x48>
			cmd->payload[i++]=item;
 800122a:	7dfb      	ldrb	r3, [r7, #23]
 800122c:	1c5a      	adds	r2, r3, #1
 800122e:	75fa      	strb	r2, [r7, #23]
 8001230:	461a      	mov	r2, r3
 8001232:	7bf9      	ldrb	r1, [r7, #15]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	5499      	strb	r1, [r3, r2]
	}while(item != '\n');
 8001238:	7bfb      	ldrb	r3, [r7, #15]
 800123a:	2b0a      	cmp	r3, #10
 800123c:	d1e9      	bne.n	8001212 <extract_command+0x22>

     cmd->payload[i-1]='\0'; // replace the last element of the payload
 800123e:	7dfb      	ldrb	r3, [r7, #23]
 8001240:	3b01      	subs	r3, #1
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	2100      	movs	r1, #0
 8001246:	54d1      	strb	r1, [r2, r3]
     cmd->len=i-1;           // save the number of data bytes captured
 8001248:	7dfb      	ldrb	r3, [r7, #23]
 800124a:	3b01      	subs	r3, #1
 800124c:	461a      	mov	r2, r3
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	60da      	str	r2, [r3, #12]

     return 0;
 8001252:	2300      	movs	r3, #0

}
 8001254:	4618      	mov	r0, r3
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200000bc 	.word	0x200000bc

08001260 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001260:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001298 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001264:	f7ff fe4a 	bl	8000efc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001268:	480c      	ldr	r0, [pc, #48]	@ (800129c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800126a:	490d      	ldr	r1, [pc, #52]	@ (80012a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800126c:	4a0d      	ldr	r2, [pc, #52]	@ (80012a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001270:	e002      	b.n	8001278 <LoopCopyDataInit>

08001272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001276:	3304      	adds	r3, #4

08001278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800127c:	d3f9      	bcc.n	8001272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127e:	4a0a      	ldr	r2, [pc, #40]	@ (80012a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001280:	4c0a      	ldr	r4, [pc, #40]	@ (80012ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001284:	e001      	b.n	800128a <LoopFillZerobss>

08001286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001288:	3204      	adds	r2, #4

0800128a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800128c:	d3fb      	bcc.n	8001286 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800128e:	f004 fef9 	bl	8006084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001292:	f7ff fa6f 	bl	8000774 <main>
  bx  lr    
 8001296:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001298:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800129c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a0:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80012a4:	08006310 	.word	0x08006310
  ldr r2, =_sbss
 80012a8:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80012ac:	20012ed0 	.word	0x20012ed0

080012b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b0:	e7fe      	b.n	80012b0 <ADC_IRQHandler>
	...

080012b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012b8:	4b0e      	ldr	r3, [pc, #56]	@ (80012f4 <HAL_Init+0x40>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a0d      	ldr	r2, [pc, #52]	@ (80012f4 <HAL_Init+0x40>)
 80012be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012c4:	4b0b      	ldr	r3, [pc, #44]	@ (80012f4 <HAL_Init+0x40>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4a0a      	ldr	r2, [pc, #40]	@ (80012f4 <HAL_Init+0x40>)
 80012ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012d0:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <HAL_Init+0x40>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a07      	ldr	r2, [pc, #28]	@ (80012f4 <HAL_Init+0x40>)
 80012d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012dc:	2003      	movs	r0, #3
 80012de:	f000 f8e8 	bl	80014b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012e2:	200f      	movs	r0, #15
 80012e4:	f7ff fd6a 	bl	8000dbc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e8:	f7ff fcc6 	bl	8000c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40023c00 	.word	0x40023c00

080012f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return uwTick;
 80012fc:	4b03      	ldr	r3, [pc, #12]	@ (800130c <HAL_GetTick+0x14>)
 80012fe:	681b      	ldr	r3, [r3, #0]
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	20000124 	.word	0x20000124

08001310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001318:	f7ff ffee 	bl	80012f8 <HAL_GetTick>
 800131c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001328:	d005      	beq.n	8001336 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800132a:	4b0a      	ldr	r3, [pc, #40]	@ (8001354 <HAL_Delay+0x44>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	461a      	mov	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4413      	add	r3, r2
 8001334:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001336:	bf00      	nop
 8001338:	f7ff ffde 	bl	80012f8 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	429a      	cmp	r2, r3
 8001346:	d8f7      	bhi.n	8001338 <HAL_Delay+0x28>
  {
  }
}
 8001348:	bf00      	nop
 800134a:	bf00      	nop
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2000001c 	.word	0x2000001c

08001358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001368:	4b0c      	ldr	r3, [pc, #48]	@ (800139c <__NVIC_SetPriorityGrouping+0x44>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001374:	4013      	ands	r3, r2
 8001376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001380:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001384:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800138a:	4a04      	ldr	r2, [pc, #16]	@ (800139c <__NVIC_SetPriorityGrouping+0x44>)
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	60d3      	str	r3, [r2, #12]
}
 8001390:	bf00      	nop
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a4:	4b04      	ldr	r3, [pc, #16]	@ (80013b8 <__NVIC_GetPriorityGrouping+0x18>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	0a1b      	lsrs	r3, r3, #8
 80013aa:	f003 0307 	and.w	r3, r3, #7
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	db0b      	blt.n	80013e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	f003 021f 	and.w	r2, r3, #31
 80013d4:	4907      	ldr	r1, [pc, #28]	@ (80013f4 <__NVIC_EnableIRQ+0x38>)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	095b      	lsrs	r3, r3, #5
 80013dc:	2001      	movs	r0, #1
 80013de:	fa00 f202 	lsl.w	r2, r0, r2
 80013e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000e100 	.word	0xe000e100

080013f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	6039      	str	r1, [r7, #0]
 8001402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001408:	2b00      	cmp	r3, #0
 800140a:	db0a      	blt.n	8001422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	b2da      	uxtb	r2, r3
 8001410:	490c      	ldr	r1, [pc, #48]	@ (8001444 <__NVIC_SetPriority+0x4c>)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	0112      	lsls	r2, r2, #4
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	440b      	add	r3, r1
 800141c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001420:	e00a      	b.n	8001438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4908      	ldr	r1, [pc, #32]	@ (8001448 <__NVIC_SetPriority+0x50>)
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	3b04      	subs	r3, #4
 8001430:	0112      	lsls	r2, r2, #4
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	440b      	add	r3, r1
 8001436:	761a      	strb	r2, [r3, #24]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000e100 	.word	0xe000e100
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144c:	b480      	push	{r7}
 800144e:	b089      	sub	sp, #36	@ 0x24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f1c3 0307 	rsb	r3, r3, #7
 8001466:	2b04      	cmp	r3, #4
 8001468:	bf28      	it	cs
 800146a:	2304      	movcs	r3, #4
 800146c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3304      	adds	r3, #4
 8001472:	2b06      	cmp	r3, #6
 8001474:	d902      	bls.n	800147c <NVIC_EncodePriority+0x30>
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3b03      	subs	r3, #3
 800147a:	e000      	b.n	800147e <NVIC_EncodePriority+0x32>
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001480:	f04f 32ff 	mov.w	r2, #4294967295
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43da      	mvns	r2, r3
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	401a      	ands	r2, r3
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001494:	f04f 31ff 	mov.w	r1, #4294967295
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	fa01 f303 	lsl.w	r3, r1, r3
 800149e:	43d9      	mvns	r1, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	4313      	orrs	r3, r2
         );
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3724      	adds	r7, #36	@ 0x24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	f7ff ff4c 	bl	8001358 <__NVIC_SetPriorityGrouping>
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	4603      	mov	r3, r0
 80014d0:	60b9      	str	r1, [r7, #8]
 80014d2:	607a      	str	r2, [r7, #4]
 80014d4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014da:	f7ff ff61 	bl	80013a0 <__NVIC_GetPriorityGrouping>
 80014de:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	68b9      	ldr	r1, [r7, #8]
 80014e4:	6978      	ldr	r0, [r7, #20]
 80014e6:	f7ff ffb1 	bl	800144c <NVIC_EncodePriority>
 80014ea:	4602      	mov	r2, r0
 80014ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014f0:	4611      	mov	r1, r2
 80014f2:	4618      	mov	r0, r3
 80014f4:	f7ff ff80 	bl	80013f8 <__NVIC_SetPriority>
}
 80014f8:	bf00      	nop
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}

08001500 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff ff54 	bl	80013bc <__NVIC_EnableIRQ>
}
 8001514:	bf00      	nop
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800151c:	b480      	push	{r7}
 800151e:	b089      	sub	sp, #36	@ 0x24
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001526:	2300      	movs	r3, #0
 8001528:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800152e:	2300      	movs	r3, #0
 8001530:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
 8001536:	e165      	b.n	8001804 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001538:	2201      	movs	r2, #1
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	697a      	ldr	r2, [r7, #20]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	429a      	cmp	r2, r3
 8001552:	f040 8154 	bne.w	80017fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 0303 	and.w	r3, r3, #3
 800155e:	2b01      	cmp	r3, #1
 8001560:	d005      	beq.n	800156e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800156a:	2b02      	cmp	r3, #2
 800156c:	d130      	bne.n	80015d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001574:	69fb      	ldr	r3, [r7, #28]
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	2203      	movs	r2, #3
 800157a:	fa02 f303 	lsl.w	r3, r2, r3
 800157e:	43db      	mvns	r3, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4013      	ands	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	68da      	ldr	r2, [r3, #12]
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4313      	orrs	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015a4:	2201      	movs	r2, #1
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4013      	ands	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	091b      	lsrs	r3, r3, #4
 80015ba:	f003 0201 	and.w	r2, r3, #1
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	f003 0303 	and.w	r3, r3, #3
 80015d8:	2b03      	cmp	r3, #3
 80015da:	d017      	beq.n	800160c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	2203      	movs	r2, #3
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	689a      	ldr	r2, [r3, #8]
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	2b02      	cmp	r3, #2
 8001616:	d123      	bne.n	8001660 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	08da      	lsrs	r2, r3, #3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3208      	adds	r2, #8
 8001620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001624:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	f003 0307 	and.w	r3, r3, #7
 800162c:	009b      	lsls	r3, r3, #2
 800162e:	220f      	movs	r2, #15
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	691a      	ldr	r2, [r3, #16]
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	fa02 f303 	lsl.w	r3, r2, r3
 800164c:	69ba      	ldr	r2, [r7, #24]
 800164e:	4313      	orrs	r3, r2
 8001650:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	08da      	lsrs	r2, r3, #3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	3208      	adds	r2, #8
 800165a:	69b9      	ldr	r1, [r7, #24]
 800165c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	005b      	lsls	r3, r3, #1
 800166a:	2203      	movs	r2, #3
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 0203 	and.w	r2, r3, #3
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800169c:	2b00      	cmp	r3, #0
 800169e:	f000 80ae 	beq.w	80017fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	60fb      	str	r3, [r7, #12]
 80016a6:	4b5d      	ldr	r3, [pc, #372]	@ (800181c <HAL_GPIO_Init+0x300>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016aa:	4a5c      	ldr	r2, [pc, #368]	@ (800181c <HAL_GPIO_Init+0x300>)
 80016ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80016b2:	4b5a      	ldr	r3, [pc, #360]	@ (800181c <HAL_GPIO_Init+0x300>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016be:	4a58      	ldr	r2, [pc, #352]	@ (8001820 <HAL_GPIO_Init+0x304>)
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	089b      	lsrs	r3, r3, #2
 80016c4:	3302      	adds	r3, #2
 80016c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f003 0303 	and.w	r3, r3, #3
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	220f      	movs	r2, #15
 80016d6:	fa02 f303 	lsl.w	r3, r2, r3
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a4f      	ldr	r2, [pc, #316]	@ (8001824 <HAL_GPIO_Init+0x308>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d025      	beq.n	8001736 <HAL_GPIO_Init+0x21a>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a4e      	ldr	r2, [pc, #312]	@ (8001828 <HAL_GPIO_Init+0x30c>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d01f      	beq.n	8001732 <HAL_GPIO_Init+0x216>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a4d      	ldr	r2, [pc, #308]	@ (800182c <HAL_GPIO_Init+0x310>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d019      	beq.n	800172e <HAL_GPIO_Init+0x212>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a4c      	ldr	r2, [pc, #304]	@ (8001830 <HAL_GPIO_Init+0x314>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d013      	beq.n	800172a <HAL_GPIO_Init+0x20e>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a4b      	ldr	r2, [pc, #300]	@ (8001834 <HAL_GPIO_Init+0x318>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d00d      	beq.n	8001726 <HAL_GPIO_Init+0x20a>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a4a      	ldr	r2, [pc, #296]	@ (8001838 <HAL_GPIO_Init+0x31c>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d007      	beq.n	8001722 <HAL_GPIO_Init+0x206>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a49      	ldr	r2, [pc, #292]	@ (800183c <HAL_GPIO_Init+0x320>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d101      	bne.n	800171e <HAL_GPIO_Init+0x202>
 800171a:	2306      	movs	r3, #6
 800171c:	e00c      	b.n	8001738 <HAL_GPIO_Init+0x21c>
 800171e:	2307      	movs	r3, #7
 8001720:	e00a      	b.n	8001738 <HAL_GPIO_Init+0x21c>
 8001722:	2305      	movs	r3, #5
 8001724:	e008      	b.n	8001738 <HAL_GPIO_Init+0x21c>
 8001726:	2304      	movs	r3, #4
 8001728:	e006      	b.n	8001738 <HAL_GPIO_Init+0x21c>
 800172a:	2303      	movs	r3, #3
 800172c:	e004      	b.n	8001738 <HAL_GPIO_Init+0x21c>
 800172e:	2302      	movs	r3, #2
 8001730:	e002      	b.n	8001738 <HAL_GPIO_Init+0x21c>
 8001732:	2301      	movs	r3, #1
 8001734:	e000      	b.n	8001738 <HAL_GPIO_Init+0x21c>
 8001736:	2300      	movs	r3, #0
 8001738:	69fa      	ldr	r2, [r7, #28]
 800173a:	f002 0203 	and.w	r2, r2, #3
 800173e:	0092      	lsls	r2, r2, #2
 8001740:	4093      	lsls	r3, r2
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4313      	orrs	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001748:	4935      	ldr	r1, [pc, #212]	@ (8001820 <HAL_GPIO_Init+0x304>)
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	089b      	lsrs	r3, r3, #2
 800174e:	3302      	adds	r3, #2
 8001750:	69ba      	ldr	r2, [r7, #24]
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001756:	4b3a      	ldr	r3, [pc, #232]	@ (8001840 <HAL_GPIO_Init+0x324>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	43db      	mvns	r3, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4013      	ands	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	4313      	orrs	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800177a:	4a31      	ldr	r2, [pc, #196]	@ (8001840 <HAL_GPIO_Init+0x324>)
 800177c:	69bb      	ldr	r3, [r7, #24]
 800177e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001780:	4b2f      	ldr	r3, [pc, #188]	@ (8001840 <HAL_GPIO_Init+0x324>)
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	43db      	mvns	r3, r3
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4013      	ands	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017a4:	4a26      	ldr	r2, [pc, #152]	@ (8001840 <HAL_GPIO_Init+0x324>)
 80017a6:	69bb      	ldr	r3, [r7, #24]
 80017a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017aa:	4b25      	ldr	r3, [pc, #148]	@ (8001840 <HAL_GPIO_Init+0x324>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	43db      	mvns	r3, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4013      	ands	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001840 <HAL_GPIO_Init+0x324>)
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001840 <HAL_GPIO_Init+0x324>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017f8:	4a11      	ldr	r2, [pc, #68]	@ (8001840 <HAL_GPIO_Init+0x324>)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3301      	adds	r3, #1
 8001802:	61fb      	str	r3, [r7, #28]
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	2b0f      	cmp	r3, #15
 8001808:	f67f ae96 	bls.w	8001538 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800180c:	bf00      	nop
 800180e:	bf00      	nop
 8001810:	3724      	adds	r7, #36	@ 0x24
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800
 8001820:	40013800 	.word	0x40013800
 8001824:	40020000 	.word	0x40020000
 8001828:	40020400 	.word	0x40020400
 800182c:	40020800 	.word	0x40020800
 8001830:	40020c00 	.word	0x40020c00
 8001834:	40021000 	.word	0x40021000
 8001838:	40021400 	.word	0x40021400
 800183c:	40021800 	.word	0x40021800
 8001840:	40013c00 	.word	0x40013c00

08001844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	460b      	mov	r3, r1
 800184e:	807b      	strh	r3, [r7, #2]
 8001850:	4613      	mov	r3, r2
 8001852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001854:	787b      	ldrb	r3, [r7, #1]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800185a:	887a      	ldrh	r2, [r7, #2]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001860:	e003      	b.n	800186a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001862:	887b      	ldrh	r3, [r7, #2]
 8001864:	041a      	lsls	r2, r3, #16
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	619a      	str	r2, [r3, #24]
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001882:	4b08      	ldr	r3, [pc, #32]	@ (80018a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001884:	695a      	ldr	r2, [r3, #20]
 8001886:	88fb      	ldrh	r3, [r7, #6]
 8001888:	4013      	ands	r3, r2
 800188a:	2b00      	cmp	r3, #0
 800188c:	d006      	beq.n	800189c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800188e:	4a05      	ldr	r2, [pc, #20]	@ (80018a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001890:	88fb      	ldrh	r3, [r7, #6]
 8001892:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	4618      	mov	r0, r3
 8001898:	f000 f806 	bl	80018a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800189c:	bf00      	nop
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	40013c00 	.word	0x40013c00

080018a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d101      	bne.n	80018d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e0cc      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018d4:	4b68      	ldr	r3, [pc, #416]	@ (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 030f 	and.w	r3, r3, #15
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	d90c      	bls.n	80018fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e2:	4b65      	ldr	r3, [pc, #404]	@ (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80018e4:	683a      	ldr	r2, [r7, #0]
 80018e6:	b2d2      	uxtb	r2, r2
 80018e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ea:	4b63      	ldr	r3, [pc, #396]	@ (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 030f 	and.w	r3, r3, #15
 80018f2:	683a      	ldr	r2, [r7, #0]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d001      	beq.n	80018fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e0b8      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	2b00      	cmp	r3, #0
 8001906:	d020      	beq.n	800194a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 0304 	and.w	r3, r3, #4
 8001910:	2b00      	cmp	r3, #0
 8001912:	d005      	beq.n	8001920 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001914:	4b59      	ldr	r3, [pc, #356]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	4a58      	ldr	r2, [pc, #352]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800191e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0308 	and.w	r3, r3, #8
 8001928:	2b00      	cmp	r3, #0
 800192a:	d005      	beq.n	8001938 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800192c:	4b53      	ldr	r3, [pc, #332]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	4a52      	ldr	r2, [pc, #328]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001936:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001938:	4b50      	ldr	r3, [pc, #320]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	494d      	ldr	r1, [pc, #308]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001946:	4313      	orrs	r3, r2
 8001948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	2b00      	cmp	r3, #0
 8001954:	d044      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d107      	bne.n	800196e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800195e:	4b47      	ldr	r3, [pc, #284]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d119      	bne.n	800199e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e07f      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d003      	beq.n	800197e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800197a:	2b03      	cmp	r3, #3
 800197c:	d107      	bne.n	800198e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800197e:	4b3f      	ldr	r3, [pc, #252]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d109      	bne.n	800199e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e06f      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198e:	4b3b      	ldr	r3, [pc, #236]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f003 0302 	and.w	r3, r3, #2
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e067      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800199e:	4b37      	ldr	r3, [pc, #220]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f023 0203 	bic.w	r2, r3, #3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	4934      	ldr	r1, [pc, #208]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019b0:	f7ff fca2 	bl	80012f8 <HAL_GetTick>
 80019b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019b6:	e00a      	b.n	80019ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019b8:	f7ff fc9e 	bl	80012f8 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e04f      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ce:	4b2b      	ldr	r3, [pc, #172]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 020c 	and.w	r2, r3, #12
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	429a      	cmp	r2, r3
 80019de:	d1eb      	bne.n	80019b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019e0:	4b25      	ldr	r3, [pc, #148]	@ (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 030f 	and.w	r3, r3, #15
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d20c      	bcs.n	8001a08 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ee:	4b22      	ldr	r3, [pc, #136]	@ (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	b2d2      	uxtb	r2, r2
 80019f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019f6:	4b20      	ldr	r3, [pc, #128]	@ (8001a78 <HAL_RCC_ClockConfig+0x1b8>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	683a      	ldr	r2, [r7, #0]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d001      	beq.n	8001a08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e032      	b.n	8001a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d008      	beq.n	8001a26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a14:	4b19      	ldr	r3, [pc, #100]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	4916      	ldr	r1, [pc, #88]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0308 	and.w	r3, r3, #8
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d009      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a32:	4b12      	ldr	r3, [pc, #72]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	490e      	ldr	r1, [pc, #56]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a46:	f000 fbb1 	bl	80021ac <HAL_RCC_GetSysClockFreq>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a7c <HAL_RCC_ClockConfig+0x1bc>)
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	490a      	ldr	r1, [pc, #40]	@ (8001a80 <HAL_RCC_ClockConfig+0x1c0>)
 8001a58:	5ccb      	ldrb	r3, [r1, r3]
 8001a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5e:	4a09      	ldr	r2, [pc, #36]	@ (8001a84 <HAL_RCC_ClockConfig+0x1c4>)
 8001a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001a62:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <HAL_RCC_ClockConfig+0x1c8>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff f9a8 	bl	8000dbc <HAL_InitTick>

  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40023c00 	.word	0x40023c00
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	080062e4 	.word	0x080062e4
 8001a84:	20000010 	.word	0x20000010
 8001a88:	20000018 	.word	0x20000018

08001a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a90:	4b03      	ldr	r3, [pc, #12]	@ (8001aa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a92:	681b      	ldr	r3, [r3, #0]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20000010 	.word	0x20000010

08001aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001aa8:	f7ff fff0 	bl	8001a8c <HAL_RCC_GetHCLKFreq>
 8001aac:	4602      	mov	r2, r0
 8001aae:	4b05      	ldr	r3, [pc, #20]	@ (8001ac4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	0a9b      	lsrs	r3, r3, #10
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	4903      	ldr	r1, [pc, #12]	@ (8001ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aba:	5ccb      	ldrb	r3, [r1, r3]
 8001abc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	080062f4 	.word	0x080062f4

08001acc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ad0:	f7ff ffdc 	bl	8001a8c <HAL_RCC_GetHCLKFreq>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	4b05      	ldr	r3, [pc, #20]	@ (8001aec <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	0b5b      	lsrs	r3, r3, #13
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	4903      	ldr	r1, [pc, #12]	@ (8001af0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ae2:	5ccb      	ldrb	r3, [r1, r3]
 8001ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	40023800 	.word	0x40023800
 8001af0:	080062f4 	.word	0x080062f4

08001af4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	220f      	movs	r2, #15
 8001b02:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b04:	4b12      	ldr	r3, [pc, #72]	@ (8001b50 <HAL_RCC_GetClockConfig+0x5c>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 0203 	and.w	r2, r3, #3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b10:	4b0f      	ldr	r3, [pc, #60]	@ (8001b50 <HAL_RCC_GetClockConfig+0x5c>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b50 <HAL_RCC_GetClockConfig+0x5c>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001b28:	4b09      	ldr	r3, [pc, #36]	@ (8001b50 <HAL_RCC_GetClockConfig+0x5c>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	08db      	lsrs	r3, r3, #3
 8001b2e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b36:	4b07      	ldr	r3, [pc, #28]	@ (8001b54 <HAL_RCC_GetClockConfig+0x60>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 020f 	and.w	r2, r3, #15
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	601a      	str	r2, [r3, #0]
}
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40023800 	.word	0x40023800
 8001b54:	40023c00 	.word	0x40023c00

08001b58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08c      	sub	sp, #48	@ 0x30
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b60:	2300      	movs	r3, #0
 8001b62:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d010      	beq.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001b90:	4b6f      	ldr	r3, [pc, #444]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001b96:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b9e:	496c      	ldr	r1, [pc, #432]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d101      	bne.n	8001bb2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d010      	beq.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001bbe:	4b64      	ldr	r3, [pc, #400]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bc4:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bcc:	4960      	ldr	r1, [pc, #384]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d017      	beq.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001bec:	4b58      	ldr	r3, [pc, #352]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001bf2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfa:	4955      	ldr	r1, [pc, #340]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c06:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001c0a:	d101      	bne.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d101      	bne.n	8001c1c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0308 	and.w	r3, r3, #8
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d017      	beq.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c28:	4b49      	ldr	r3, [pc, #292]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001c2e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c36:	4946      	ldr	r1, [pc, #280]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c46:	d101      	bne.n	8001c4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001c54:	2301      	movs	r3, #1
 8001c56:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0320 	and.w	r3, r3, #32
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 808a 	beq.w	8001d7a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	4b39      	ldr	r3, [pc, #228]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	4a38      	ldr	r2, [pc, #224]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c76:	4b36      	ldr	r3, [pc, #216]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001c82:	4b34      	ldr	r3, [pc, #208]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a33      	ldr	r2, [pc, #204]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001c88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c8c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c8e:	f7ff fb33 	bl	80012f8 <HAL_GetTick>
 8001c92:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c96:	f7ff fb2f 	bl	80012f8 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e278      	b.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0f0      	beq.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cb4:	4b26      	ldr	r3, [pc, #152]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cbc:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cbe:	6a3b      	ldr	r3, [r7, #32]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d02f      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ccc:	6a3a      	ldr	r2, [r7, #32]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d028      	beq.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001cda:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cdc:	4b1e      	ldr	r3, [pc, #120]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d58 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001ce8:	4a19      	ldr	r2, [pc, #100]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001cee:	4b18      	ldr	r3, [pc, #96]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d114      	bne.n	8001d24 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001cfa:	f7ff fafd 	bl	80012f8 <HAL_GetTick>
 8001cfe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff faf9 	bl	80012f8 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e240      	b.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d18:	4b0d      	ldr	r3, [pc, #52]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0ee      	beq.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d28:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d2c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001d30:	d114      	bne.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001d32:	4b07      	ldr	r3, [pc, #28]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001d42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001d46:	4902      	ldr	r1, [pc, #8]	@ (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	608b      	str	r3, [r1, #8]
 8001d4c:	e00c      	b.n	8001d68 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001d4e:	bf00      	nop
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40007000 	.word	0x40007000
 8001d58:	42470e40 	.word	0x42470e40
 8001d5c:	4b4a      	ldr	r3, [pc, #296]	@ (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	4a49      	ldr	r2, [pc, #292]	@ (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d62:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001d66:	6093      	str	r3, [r2, #8]
 8001d68:	4b47      	ldr	r3, [pc, #284]	@ (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d6a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d74:	4944      	ldr	r1, [pc, #272]	@ (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0310 	and.w	r3, r3, #16
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d004      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8001d8c:	4b3f      	ldr	r3, [pc, #252]	@ (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001d8e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00a      	beq.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001d9c:	4b3a      	ldr	r3, [pc, #232]	@ (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001da2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001daa:	4937      	ldr	r1, [pc, #220]	@ (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00a      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001dbe:	4b32      	ldr	r3, [pc, #200]	@ (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001dc0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dc4:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dcc:	492e      	ldr	r1, [pc, #184]	@ (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d011      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001de0:	4b29      	ldr	r3, [pc, #164]	@ (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001de2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001de6:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dee:	4926      	ldr	r1, [pc, #152]	@ (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001e00:	2301      	movs	r3, #1
 8001e02:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00a      	beq.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001e10:	4b1d      	ldr	r3, [pc, #116]	@ (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e16:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1e:	491a      	ldr	r1, [pc, #104]	@ (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d011      	beq.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001e32:	4b15      	ldr	r3, [pc, #84]	@ (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e38:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e40:	4911      	ldr	r1, [pc, #68]	@ (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e4c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001e50:	d101      	bne.n	8001e56 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001e52:	2301      	movs	r3, #1
 8001e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d005      	beq.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001e64:	f040 80ff 	bne.w	8002066 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001e68:	4b09      	ldr	r3, [pc, #36]	@ (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e6e:	f7ff fa43 	bl	80012f8 <HAL_GetTick>
 8001e72:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e74:	e00e      	b.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001e76:	f7ff fa3f 	bl	80012f8 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d907      	bls.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e188      	b.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	424711e0 	.word	0x424711e0
 8001e90:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e94:	4b7e      	ldr	r3, [pc, #504]	@ (8002090 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d1ea      	bne.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d009      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d028      	beq.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d124      	bne.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001ec8:	4b71      	ldr	r3, [pc, #452]	@ (8002090 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ece:	0c1b      	lsrs	r3, r3, #16
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001eda:	4b6d      	ldr	r3, [pc, #436]	@ (8002090 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001edc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ee0:	0e1b      	lsrs	r3, r3, #24
 8001ee2:	f003 030f 	and.w	r3, r3, #15
 8001ee6:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	019b      	lsls	r3, r3, #6
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	085b      	lsrs	r3, r3, #1
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	041b      	lsls	r3, r3, #16
 8001efc:	431a      	orrs	r2, r3
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	061b      	lsls	r3, r3, #24
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	695b      	ldr	r3, [r3, #20]
 8001f08:	071b      	lsls	r3, r3, #28
 8001f0a:	4961      	ldr	r1, [pc, #388]	@ (8002090 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0304 	and.w	r3, r3, #4
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d004      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001f26:	d00a      	beq.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d035      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001f3c:	d130      	bne.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001f3e:	4b54      	ldr	r3, [pc, #336]	@ (8002090 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f44:	0c1b      	lsrs	r3, r3, #16
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f50:	4b4f      	ldr	r3, [pc, #316]	@ (8002090 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f56:	0f1b      	lsrs	r3, r3, #28
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	019b      	lsls	r3, r3, #6
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	085b      	lsrs	r3, r3, #1
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	041b      	lsls	r3, r3, #16
 8001f72:	431a      	orrs	r2, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	061b      	lsls	r3, r3, #24
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	071b      	lsls	r3, r3, #28
 8001f80:	4943      	ldr	r1, [pc, #268]	@ (8002090 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001f88:	4b41      	ldr	r3, [pc, #260]	@ (8002090 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001f8e:	f023 021f 	bic.w	r2, r3, #31
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f96:	3b01      	subs	r3, #1
 8001f98:	493d      	ldr	r1, [pc, #244]	@ (8002090 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f9a:	4313      	orrs	r3, r2
 8001f9c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d029      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fb0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001fb4:	d124      	bne.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001fb6:	4b36      	ldr	r3, [pc, #216]	@ (8002090 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fbc:	0c1b      	lsrs	r3, r3, #16
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001fc8:	4b31      	ldr	r3, [pc, #196]	@ (8002090 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fce:	0f1b      	lsrs	r3, r3, #28
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685a      	ldr	r2, [r3, #4]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	019b      	lsls	r3, r3, #6
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	085b      	lsrs	r3, r3, #1
 8001fe8:	3b01      	subs	r3, #1
 8001fea:	041b      	lsls	r3, r3, #16
 8001fec:	431a      	orrs	r2, r3
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	061b      	lsls	r3, r3, #24
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	071b      	lsls	r3, r3, #28
 8001ff8:	4925      	ldr	r1, [pc, #148]	@ (8002090 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002008:	2b00      	cmp	r3, #0
 800200a:	d016      	beq.n	800203a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	019b      	lsls	r3, r3, #6
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	085b      	lsrs	r3, r3, #1
 800201e:	3b01      	subs	r3, #1
 8002020:	041b      	lsls	r3, r3, #16
 8002022:	431a      	orrs	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	061b      	lsls	r3, r3, #24
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	695b      	ldr	r3, [r3, #20]
 8002030:	071b      	lsls	r3, r3, #28
 8002032:	4917      	ldr	r1, [pc, #92]	@ (8002090 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002034:	4313      	orrs	r3, r2
 8002036:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800203a:	4b16      	ldr	r3, [pc, #88]	@ (8002094 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 800203c:	2201      	movs	r2, #1
 800203e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002040:	f7ff f95a 	bl	80012f8 <HAL_GetTick>
 8002044:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002046:	e008      	b.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002048:	f7ff f956 	bl	80012f8 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e09f      	b.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800205a:	4b0d      	ldr	r3, [pc, #52]	@ (8002090 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0f0      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8002066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002068:	2b01      	cmp	r3, #1
 800206a:	f040 8095 	bne.w	8002198 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800206e:	4b0a      	ldr	r3, [pc, #40]	@ (8002098 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002074:	f7ff f940 	bl	80012f8 <HAL_GetTick>
 8002078:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800207a:	e00f      	b.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800207c:	f7ff f93c 	bl	80012f8 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d908      	bls.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e085      	b.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800208e:	bf00      	nop
 8002090:	40023800 	.word	0x40023800
 8002094:	42470068 	.word	0x42470068
 8002098:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800209c:	4b41      	ldr	r3, [pc, #260]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80020a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80020a8:	d0e8      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d003      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d009      	beq.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d02b      	beq.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d127      	bne.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80020d2:	4b34      	ldr	r3, [pc, #208]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80020d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d8:	0c1b      	lsrs	r3, r3, #16
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	3301      	adds	r3, #1
 80020e0:	005b      	lsls	r3, r3, #1
 80020e2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	699a      	ldr	r2, [r3, #24]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	69db      	ldr	r3, [r3, #28]
 80020ec:	019b      	lsls	r3, r3, #6
 80020ee:	431a      	orrs	r2, r3
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	085b      	lsrs	r3, r3, #1
 80020f4:	3b01      	subs	r3, #1
 80020f6:	041b      	lsls	r3, r3, #16
 80020f8:	431a      	orrs	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fe:	061b      	lsls	r3, r3, #24
 8002100:	4928      	ldr	r1, [pc, #160]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002102:	4313      	orrs	r3, r2
 8002104:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002108:	4b26      	ldr	r3, [pc, #152]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800210a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800210e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002116:	3b01      	subs	r3, #1
 8002118:	021b      	lsls	r3, r3, #8
 800211a:	4922      	ldr	r1, [pc, #136]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800211c:	4313      	orrs	r3, r2
 800211e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800212a:	2b00      	cmp	r3, #0
 800212c:	d01d      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002132:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002136:	d118      	bne.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002138:	4b1a      	ldr	r3, [pc, #104]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800213a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213e:	0e1b      	lsrs	r3, r3, #24
 8002140:	f003 030f 	and.w	r3, r3, #15
 8002144:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	699a      	ldr	r2, [r3, #24]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	019b      	lsls	r3, r3, #6
 8002150:	431a      	orrs	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	085b      	lsrs	r3, r3, #1
 8002158:	3b01      	subs	r3, #1
 800215a:	041b      	lsls	r3, r3, #16
 800215c:	431a      	orrs	r2, r3
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	061b      	lsls	r3, r3, #24
 8002162:	4910      	ldr	r1, [pc, #64]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002164:	4313      	orrs	r3, r2
 8002166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800216a:	4b0f      	ldr	r3, [pc, #60]	@ (80021a8 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800216c:	2201      	movs	r2, #1
 800216e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002170:	f7ff f8c2 	bl	80012f8 <HAL_GetTick>
 8002174:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002176:	e008      	b.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002178:	f7ff f8be 	bl	80012f8 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e007      	b.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800218a:	4b06      	ldr	r3, [pc, #24]	@ (80021a4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002192:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002196:	d1ef      	bne.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3730      	adds	r7, #48	@ 0x30
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40023800 	.word	0x40023800
 80021a8:	42470070 	.word	0x42470070

080021ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021b0:	b0ae      	sub	sp, #184	@ 0xb8
 80021b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80021b4:	2300      	movs	r3, #0
 80021b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80021ba:	2300      	movs	r3, #0
 80021bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80021c0:	2300      	movs	r3, #0
 80021c2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80021c6:	2300      	movs	r3, #0
 80021c8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021d2:	4bcb      	ldr	r3, [pc, #812]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x354>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	f003 030c 	and.w	r3, r3, #12
 80021da:	2b0c      	cmp	r3, #12
 80021dc:	f200 8206 	bhi.w	80025ec <HAL_RCC_GetSysClockFreq+0x440>
 80021e0:	a201      	add	r2, pc, #4	@ (adr r2, 80021e8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80021e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e6:	bf00      	nop
 80021e8:	0800221d 	.word	0x0800221d
 80021ec:	080025ed 	.word	0x080025ed
 80021f0:	080025ed 	.word	0x080025ed
 80021f4:	080025ed 	.word	0x080025ed
 80021f8:	08002225 	.word	0x08002225
 80021fc:	080025ed 	.word	0x080025ed
 8002200:	080025ed 	.word	0x080025ed
 8002204:	080025ed 	.word	0x080025ed
 8002208:	0800222d 	.word	0x0800222d
 800220c:	080025ed 	.word	0x080025ed
 8002210:	080025ed 	.word	0x080025ed
 8002214:	080025ed 	.word	0x080025ed
 8002218:	0800241d 	.word	0x0800241d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800221c:	4bb9      	ldr	r3, [pc, #740]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x358>)
 800221e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002222:	e1e7      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002224:	4bb8      	ldr	r3, [pc, #736]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002226:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800222a:	e1e3      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800222c:	4bb4      	ldr	r3, [pc, #720]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x354>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002234:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002238:	4bb1      	ldr	r3, [pc, #708]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x354>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d071      	beq.n	8002328 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002244:	4bae      	ldr	r3, [pc, #696]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x354>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	099b      	lsrs	r3, r3, #6
 800224a:	2200      	movs	r2, #0
 800224c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002250:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002254:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800225c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002260:	2300      	movs	r3, #0
 8002262:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002266:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800226a:	4622      	mov	r2, r4
 800226c:	462b      	mov	r3, r5
 800226e:	f04f 0000 	mov.w	r0, #0
 8002272:	f04f 0100 	mov.w	r1, #0
 8002276:	0159      	lsls	r1, r3, #5
 8002278:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800227c:	0150      	lsls	r0, r2, #5
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4621      	mov	r1, r4
 8002284:	1a51      	subs	r1, r2, r1
 8002286:	6439      	str	r1, [r7, #64]	@ 0x40
 8002288:	4629      	mov	r1, r5
 800228a:	eb63 0301 	sbc.w	r3, r3, r1
 800228e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002290:	f04f 0200 	mov.w	r2, #0
 8002294:	f04f 0300 	mov.w	r3, #0
 8002298:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800229c:	4649      	mov	r1, r9
 800229e:	018b      	lsls	r3, r1, #6
 80022a0:	4641      	mov	r1, r8
 80022a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022a6:	4641      	mov	r1, r8
 80022a8:	018a      	lsls	r2, r1, #6
 80022aa:	4641      	mov	r1, r8
 80022ac:	1a51      	subs	r1, r2, r1
 80022ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80022b0:	4649      	mov	r1, r9
 80022b2:	eb63 0301 	sbc.w	r3, r3, r1
 80022b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	f04f 0300 	mov.w	r3, #0
 80022c0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80022c4:	4649      	mov	r1, r9
 80022c6:	00cb      	lsls	r3, r1, #3
 80022c8:	4641      	mov	r1, r8
 80022ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022ce:	4641      	mov	r1, r8
 80022d0:	00ca      	lsls	r2, r1, #3
 80022d2:	4610      	mov	r0, r2
 80022d4:	4619      	mov	r1, r3
 80022d6:	4603      	mov	r3, r0
 80022d8:	4622      	mov	r2, r4
 80022da:	189b      	adds	r3, r3, r2
 80022dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80022de:	462b      	mov	r3, r5
 80022e0:	460a      	mov	r2, r1
 80022e2:	eb42 0303 	adc.w	r3, r2, r3
 80022e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80022f4:	4629      	mov	r1, r5
 80022f6:	024b      	lsls	r3, r1, #9
 80022f8:	4621      	mov	r1, r4
 80022fa:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022fe:	4621      	mov	r1, r4
 8002300:	024a      	lsls	r2, r1, #9
 8002302:	4610      	mov	r0, r2
 8002304:	4619      	mov	r1, r3
 8002306:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800230a:	2200      	movs	r2, #0
 800230c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002310:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002314:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002318:	f7fd ff84 	bl	8000224 <__aeabi_uldivmod>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	4613      	mov	r3, r2
 8002322:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002326:	e067      	b.n	80023f8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002328:	4b75      	ldr	r3, [pc, #468]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x354>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	099b      	lsrs	r3, r3, #6
 800232e:	2200      	movs	r2, #0
 8002330:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002334:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002338:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800233c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002340:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002342:	2300      	movs	r3, #0
 8002344:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002346:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800234a:	4622      	mov	r2, r4
 800234c:	462b      	mov	r3, r5
 800234e:	f04f 0000 	mov.w	r0, #0
 8002352:	f04f 0100 	mov.w	r1, #0
 8002356:	0159      	lsls	r1, r3, #5
 8002358:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800235c:	0150      	lsls	r0, r2, #5
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4621      	mov	r1, r4
 8002364:	1a51      	subs	r1, r2, r1
 8002366:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002368:	4629      	mov	r1, r5
 800236a:	eb63 0301 	sbc.w	r3, r3, r1
 800236e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002370:	f04f 0200 	mov.w	r2, #0
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800237c:	4649      	mov	r1, r9
 800237e:	018b      	lsls	r3, r1, #6
 8002380:	4641      	mov	r1, r8
 8002382:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002386:	4641      	mov	r1, r8
 8002388:	018a      	lsls	r2, r1, #6
 800238a:	4641      	mov	r1, r8
 800238c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002390:	4649      	mov	r1, r9
 8002392:	eb63 0b01 	sbc.w	fp, r3, r1
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	f04f 0300 	mov.w	r3, #0
 800239e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023a2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023aa:	4692      	mov	sl, r2
 80023ac:	469b      	mov	fp, r3
 80023ae:	4623      	mov	r3, r4
 80023b0:	eb1a 0303 	adds.w	r3, sl, r3
 80023b4:	623b      	str	r3, [r7, #32]
 80023b6:	462b      	mov	r3, r5
 80023b8:	eb4b 0303 	adc.w	r3, fp, r3
 80023bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80023be:	f04f 0200 	mov.w	r2, #0
 80023c2:	f04f 0300 	mov.w	r3, #0
 80023c6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80023ca:	4629      	mov	r1, r5
 80023cc:	028b      	lsls	r3, r1, #10
 80023ce:	4621      	mov	r1, r4
 80023d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023d4:	4621      	mov	r1, r4
 80023d6:	028a      	lsls	r2, r1, #10
 80023d8:	4610      	mov	r0, r2
 80023da:	4619      	mov	r1, r3
 80023dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023e0:	2200      	movs	r2, #0
 80023e2:	673b      	str	r3, [r7, #112]	@ 0x70
 80023e4:	677a      	str	r2, [r7, #116]	@ 0x74
 80023e6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80023ea:	f7fd ff1b 	bl	8000224 <__aeabi_uldivmod>
 80023ee:	4602      	mov	r2, r0
 80023f0:	460b      	mov	r3, r1
 80023f2:	4613      	mov	r3, r2
 80023f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80023f8:	4b41      	ldr	r3, [pc, #260]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x354>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	0c1b      	lsrs	r3, r3, #16
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	3301      	adds	r3, #1
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800240a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800240e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002412:	fbb2 f3f3 	udiv	r3, r2, r3
 8002416:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800241a:	e0eb      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800241c:	4b38      	ldr	r3, [pc, #224]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x354>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002424:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002428:	4b35      	ldr	r3, [pc, #212]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x354>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d06b      	beq.n	800250c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002434:	4b32      	ldr	r3, [pc, #200]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x354>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	099b      	lsrs	r3, r3, #6
 800243a:	2200      	movs	r2, #0
 800243c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800243e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002440:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002446:	663b      	str	r3, [r7, #96]	@ 0x60
 8002448:	2300      	movs	r3, #0
 800244a:	667b      	str	r3, [r7, #100]	@ 0x64
 800244c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002450:	4622      	mov	r2, r4
 8002452:	462b      	mov	r3, r5
 8002454:	f04f 0000 	mov.w	r0, #0
 8002458:	f04f 0100 	mov.w	r1, #0
 800245c:	0159      	lsls	r1, r3, #5
 800245e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002462:	0150      	lsls	r0, r2, #5
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4621      	mov	r1, r4
 800246a:	1a51      	subs	r1, r2, r1
 800246c:	61b9      	str	r1, [r7, #24]
 800246e:	4629      	mov	r1, r5
 8002470:	eb63 0301 	sbc.w	r3, r3, r1
 8002474:	61fb      	str	r3, [r7, #28]
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002482:	4659      	mov	r1, fp
 8002484:	018b      	lsls	r3, r1, #6
 8002486:	4651      	mov	r1, sl
 8002488:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800248c:	4651      	mov	r1, sl
 800248e:	018a      	lsls	r2, r1, #6
 8002490:	4651      	mov	r1, sl
 8002492:	ebb2 0801 	subs.w	r8, r2, r1
 8002496:	4659      	mov	r1, fp
 8002498:	eb63 0901 	sbc.w	r9, r3, r1
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80024a8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80024ac:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80024b0:	4690      	mov	r8, r2
 80024b2:	4699      	mov	r9, r3
 80024b4:	4623      	mov	r3, r4
 80024b6:	eb18 0303 	adds.w	r3, r8, r3
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	462b      	mov	r3, r5
 80024be:	eb49 0303 	adc.w	r3, r9, r3
 80024c2:	617b      	str	r3, [r7, #20]
 80024c4:	f04f 0200 	mov.w	r2, #0
 80024c8:	f04f 0300 	mov.w	r3, #0
 80024cc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80024d0:	4629      	mov	r1, r5
 80024d2:	024b      	lsls	r3, r1, #9
 80024d4:	4621      	mov	r1, r4
 80024d6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024da:	4621      	mov	r1, r4
 80024dc:	024a      	lsls	r2, r1, #9
 80024de:	4610      	mov	r0, r2
 80024e0:	4619      	mov	r1, r3
 80024e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80024e6:	2200      	movs	r2, #0
 80024e8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80024ea:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80024ec:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80024f0:	f7fd fe98 	bl	8000224 <__aeabi_uldivmod>
 80024f4:	4602      	mov	r2, r0
 80024f6:	460b      	mov	r3, r1
 80024f8:	4613      	mov	r3, r2
 80024fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024fe:	e065      	b.n	80025cc <HAL_RCC_GetSysClockFreq+0x420>
 8002500:	40023800 	.word	0x40023800
 8002504:	00f42400 	.word	0x00f42400
 8002508:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800250c:	4b3d      	ldr	r3, [pc, #244]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x458>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	099b      	lsrs	r3, r3, #6
 8002512:	2200      	movs	r2, #0
 8002514:	4618      	mov	r0, r3
 8002516:	4611      	mov	r1, r2
 8002518:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800251c:	653b      	str	r3, [r7, #80]	@ 0x50
 800251e:	2300      	movs	r3, #0
 8002520:	657b      	str	r3, [r7, #84]	@ 0x54
 8002522:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002526:	4642      	mov	r2, r8
 8002528:	464b      	mov	r3, r9
 800252a:	f04f 0000 	mov.w	r0, #0
 800252e:	f04f 0100 	mov.w	r1, #0
 8002532:	0159      	lsls	r1, r3, #5
 8002534:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002538:	0150      	lsls	r0, r2, #5
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4641      	mov	r1, r8
 8002540:	1a51      	subs	r1, r2, r1
 8002542:	60b9      	str	r1, [r7, #8]
 8002544:	4649      	mov	r1, r9
 8002546:	eb63 0301 	sbc.w	r3, r3, r1
 800254a:	60fb      	str	r3, [r7, #12]
 800254c:	f04f 0200 	mov.w	r2, #0
 8002550:	f04f 0300 	mov.w	r3, #0
 8002554:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002558:	4659      	mov	r1, fp
 800255a:	018b      	lsls	r3, r1, #6
 800255c:	4651      	mov	r1, sl
 800255e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002562:	4651      	mov	r1, sl
 8002564:	018a      	lsls	r2, r1, #6
 8002566:	4651      	mov	r1, sl
 8002568:	1a54      	subs	r4, r2, r1
 800256a:	4659      	mov	r1, fp
 800256c:	eb63 0501 	sbc.w	r5, r3, r1
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	00eb      	lsls	r3, r5, #3
 800257a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800257e:	00e2      	lsls	r2, r4, #3
 8002580:	4614      	mov	r4, r2
 8002582:	461d      	mov	r5, r3
 8002584:	4643      	mov	r3, r8
 8002586:	18e3      	adds	r3, r4, r3
 8002588:	603b      	str	r3, [r7, #0]
 800258a:	464b      	mov	r3, r9
 800258c:	eb45 0303 	adc.w	r3, r5, r3
 8002590:	607b      	str	r3, [r7, #4]
 8002592:	f04f 0200 	mov.w	r2, #0
 8002596:	f04f 0300 	mov.w	r3, #0
 800259a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800259e:	4629      	mov	r1, r5
 80025a0:	028b      	lsls	r3, r1, #10
 80025a2:	4621      	mov	r1, r4
 80025a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025a8:	4621      	mov	r1, r4
 80025aa:	028a      	lsls	r2, r1, #10
 80025ac:	4610      	mov	r0, r2
 80025ae:	4619      	mov	r1, r3
 80025b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80025b4:	2200      	movs	r2, #0
 80025b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025b8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80025ba:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80025be:	f7fd fe31 	bl	8000224 <__aeabi_uldivmod>
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	4613      	mov	r3, r2
 80025c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80025cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002604 <HAL_RCC_GetSysClockFreq+0x458>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	0f1b      	lsrs	r3, r3, #28
 80025d2:	f003 0307 	and.w	r3, r3, #7
 80025d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80025da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80025de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80025e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80025ea:	e003      	b.n	80025f4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025ec:	4b06      	ldr	r3, [pc, #24]	@ (8002608 <HAL_RCC_GetSysClockFreq+0x45c>)
 80025ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80025f2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025f4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	37b8      	adds	r7, #184	@ 0xb8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002602:	bf00      	nop
 8002604:	40023800 	.word	0x40023800
 8002608:	00f42400 	.word	0x00f42400

0800260c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e28d      	b.n	8002b3a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0301 	and.w	r3, r3, #1
 8002626:	2b00      	cmp	r3, #0
 8002628:	f000 8083 	beq.w	8002732 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800262c:	4b94      	ldr	r3, [pc, #592]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 030c 	and.w	r3, r3, #12
 8002634:	2b04      	cmp	r3, #4
 8002636:	d019      	beq.n	800266c <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002638:	4b91      	ldr	r3, [pc, #580]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002640:	2b08      	cmp	r3, #8
 8002642:	d106      	bne.n	8002652 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002644:	4b8e      	ldr	r3, [pc, #568]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800264c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002650:	d00c      	beq.n	800266c <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002652:	4b8b      	ldr	r3, [pc, #556]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800265a:	2b0c      	cmp	r3, #12
 800265c:	d112      	bne.n	8002684 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800265e:	4b88      	ldr	r3, [pc, #544]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002666:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800266a:	d10b      	bne.n	8002684 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266c:	4b84      	ldr	r3, [pc, #528]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d05b      	beq.n	8002730 <HAL_RCC_OscConfig+0x124>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d157      	bne.n	8002730 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e25a      	b.n	8002b3a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800268c:	d106      	bne.n	800269c <HAL_RCC_OscConfig+0x90>
 800268e:	4b7c      	ldr	r3, [pc, #496]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a7b      	ldr	r2, [pc, #492]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 8002694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002698:	6013      	str	r3, [r2, #0]
 800269a:	e01d      	b.n	80026d8 <HAL_RCC_OscConfig+0xcc>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80026a4:	d10c      	bne.n	80026c0 <HAL_RCC_OscConfig+0xb4>
 80026a6:	4b76      	ldr	r3, [pc, #472]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a75      	ldr	r2, [pc, #468]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 80026ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	4b73      	ldr	r3, [pc, #460]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a72      	ldr	r2, [pc, #456]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 80026b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	e00b      	b.n	80026d8 <HAL_RCC_OscConfig+0xcc>
 80026c0:	4b6f      	ldr	r3, [pc, #444]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a6e      	ldr	r2, [pc, #440]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 80026c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	4b6c      	ldr	r3, [pc, #432]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a6b      	ldr	r2, [pc, #428]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 80026d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d013      	beq.n	8002708 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e0:	f7fe fe0a 	bl	80012f8 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e8:	f7fe fe06 	bl	80012f8 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b64      	cmp	r3, #100	@ 0x64
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e21f      	b.n	8002b3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fa:	4b61      	ldr	r3, [pc, #388]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0xdc>
 8002706:	e014      	b.n	8002732 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002708:	f7fe fdf6 	bl	80012f8 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002710:	f7fe fdf2 	bl	80012f8 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b64      	cmp	r3, #100	@ 0x64
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e20b      	b.n	8002b3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002722:	4b57      	ldr	r3, [pc, #348]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0x104>
 800272e:	e000      	b.n	8002732 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d06f      	beq.n	800281e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800273e:	4b50      	ldr	r3, [pc, #320]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 030c 	and.w	r3, r3, #12
 8002746:	2b00      	cmp	r3, #0
 8002748:	d017      	beq.n	800277a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800274a:	4b4d      	ldr	r3, [pc, #308]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 800274c:	689b      	ldr	r3, [r3, #8]
 800274e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002752:	2b08      	cmp	r3, #8
 8002754:	d105      	bne.n	8002762 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002756:	4b4a      	ldr	r3, [pc, #296]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 8002758:	685b      	ldr	r3, [r3, #4]
 800275a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00b      	beq.n	800277a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002762:	4b47      	ldr	r3, [pc, #284]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800276a:	2b0c      	cmp	r3, #12
 800276c:	d11c      	bne.n	80027a8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800276e:	4b44      	ldr	r3, [pc, #272]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d116      	bne.n	80027a8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800277a:	4b41      	ldr	r3, [pc, #260]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d005      	beq.n	8002792 <HAL_RCC_OscConfig+0x186>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	68db      	ldr	r3, [r3, #12]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d001      	beq.n	8002792 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e1d3      	b.n	8002b3a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002792:	4b3b      	ldr	r3, [pc, #236]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4937      	ldr	r1, [pc, #220]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a6:	e03a      	b.n	800281e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d020      	beq.n	80027f2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027b0:	4b34      	ldr	r3, [pc, #208]	@ (8002884 <HAL_RCC_OscConfig+0x278>)
 80027b2:	2201      	movs	r2, #1
 80027b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b6:	f7fe fd9f 	bl	80012f8 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027be:	f7fe fd9b 	bl	80012f8 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e1b4      	b.n	8002b3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027dc:	4b28      	ldr	r3, [pc, #160]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	4925      	ldr	r1, [pc, #148]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	600b      	str	r3, [r1, #0]
 80027f0:	e015      	b.n	800281e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027f2:	4b24      	ldr	r3, [pc, #144]	@ (8002884 <HAL_RCC_OscConfig+0x278>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7fe fd7e 	bl	80012f8 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002800:	f7fe fd7a 	bl	80012f8 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e193      	b.n	8002b3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002812:	4b1b      	ldr	r3, [pc, #108]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0308 	and.w	r3, r3, #8
 8002826:	2b00      	cmp	r3, #0
 8002828:	d036      	beq.n	8002898 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d016      	beq.n	8002860 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002832:	4b15      	ldr	r3, [pc, #84]	@ (8002888 <HAL_RCC_OscConfig+0x27c>)
 8002834:	2201      	movs	r2, #1
 8002836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002838:	f7fe fd5e 	bl	80012f8 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002840:	f7fe fd5a 	bl	80012f8 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e173      	b.n	8002b3a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002852:	4b0b      	ldr	r3, [pc, #44]	@ (8002880 <HAL_RCC_OscConfig+0x274>)
 8002854:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d0f0      	beq.n	8002840 <HAL_RCC_OscConfig+0x234>
 800285e:	e01b      	b.n	8002898 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002860:	4b09      	ldr	r3, [pc, #36]	@ (8002888 <HAL_RCC_OscConfig+0x27c>)
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002866:	f7fe fd47 	bl	80012f8 <HAL_GetTick>
 800286a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800286c:	e00e      	b.n	800288c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800286e:	f7fe fd43 	bl	80012f8 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d907      	bls.n	800288c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e15c      	b.n	8002b3a <HAL_RCC_OscConfig+0x52e>
 8002880:	40023800 	.word	0x40023800
 8002884:	42470000 	.word	0x42470000
 8002888:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800288c:	4b8a      	ldr	r3, [pc, #552]	@ (8002ab8 <HAL_RCC_OscConfig+0x4ac>)
 800288e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1ea      	bne.n	800286e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0304 	and.w	r3, r3, #4
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 8097 	beq.w	80029d4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028a6:	2300      	movs	r3, #0
 80028a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028aa:	4b83      	ldr	r3, [pc, #524]	@ (8002ab8 <HAL_RCC_OscConfig+0x4ac>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10f      	bne.n	80028d6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]
 80028ba:	4b7f      	ldr	r3, [pc, #508]	@ (8002ab8 <HAL_RCC_OscConfig+0x4ac>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	4a7e      	ldr	r2, [pc, #504]	@ (8002ab8 <HAL_RCC_OscConfig+0x4ac>)
 80028c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80028c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80028c6:	4b7c      	ldr	r3, [pc, #496]	@ (8002ab8 <HAL_RCC_OscConfig+0x4ac>)
 80028c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028ce:	60bb      	str	r3, [r7, #8]
 80028d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028d2:	2301      	movs	r3, #1
 80028d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d6:	4b79      	ldr	r3, [pc, #484]	@ (8002abc <HAL_RCC_OscConfig+0x4b0>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d118      	bne.n	8002914 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028e2:	4b76      	ldr	r3, [pc, #472]	@ (8002abc <HAL_RCC_OscConfig+0x4b0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a75      	ldr	r2, [pc, #468]	@ (8002abc <HAL_RCC_OscConfig+0x4b0>)
 80028e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ee:	f7fe fd03 	bl	80012f8 <HAL_GetTick>
 80028f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028f4:	e008      	b.n	8002908 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028f6:	f7fe fcff 	bl	80012f8 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d901      	bls.n	8002908 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002904:	2303      	movs	r3, #3
 8002906:	e118      	b.n	8002b3a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002908:	4b6c      	ldr	r3, [pc, #432]	@ (8002abc <HAL_RCC_OscConfig+0x4b0>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002910:	2b00      	cmp	r3, #0
 8002912:	d0f0      	beq.n	80028f6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b01      	cmp	r3, #1
 800291a:	d106      	bne.n	800292a <HAL_RCC_OscConfig+0x31e>
 800291c:	4b66      	ldr	r3, [pc, #408]	@ (8002ab8 <HAL_RCC_OscConfig+0x4ac>)
 800291e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002920:	4a65      	ldr	r2, [pc, #404]	@ (8002ab8 <HAL_RCC_OscConfig+0x4ac>)
 8002922:	f043 0301 	orr.w	r3, r3, #1
 8002926:	6713      	str	r3, [r2, #112]	@ 0x70
 8002928:	e01c      	b.n	8002964 <HAL_RCC_OscConfig+0x358>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	2b05      	cmp	r3, #5
 8002930:	d10c      	bne.n	800294c <HAL_RCC_OscConfig+0x340>
 8002932:	4b61      	ldr	r3, [pc, #388]	@ (8002ab8 <HAL_RCC_OscConfig+0x4ac>)
 8002934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002936:	4a60      	ldr	r2, [pc, #384]	@ (8002ab8 <HAL_RCC_OscConfig+0x4ac>)
 8002938:	f043 0304 	orr.w	r3, r3, #4
 800293c:	6713      	str	r3, [r2, #112]	@ 0x70
 800293e:	4b5e      	ldr	r3, [pc, #376]	@ (8002ab8 <HAL_RCC_OscConfig+0x4ac>)
 8002940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002942:	4a5d      	ldr	r2, [pc, #372]	@ (8002ab8 <HAL_RCC_OscConfig+0x4ac>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	6713      	str	r3, [r2, #112]	@ 0x70
 800294a:	e00b      	b.n	8002964 <HAL_RCC_OscConfig+0x358>
 800294c:	4b5a      	ldr	r3, [pc, #360]	@ (8002ab8 <HAL_RCC_OscConfig+0x4ac>)
 800294e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002950:	4a59      	ldr	r2, [pc, #356]	@ (8002ab8 <HAL_RCC_OscConfig+0x4ac>)
 8002952:	f023 0301 	bic.w	r3, r3, #1
 8002956:	6713      	str	r3, [r2, #112]	@ 0x70
 8002958:	4b57      	ldr	r3, [pc, #348]	@ (8002ab8 <HAL_RCC_OscConfig+0x4ac>)
 800295a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800295c:	4a56      	ldr	r2, [pc, #344]	@ (8002ab8 <HAL_RCC_OscConfig+0x4ac>)
 800295e:	f023 0304 	bic.w	r3, r3, #4
 8002962:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d015      	beq.n	8002998 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296c:	f7fe fcc4 	bl	80012f8 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002972:	e00a      	b.n	800298a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002974:	f7fe fcc0 	bl	80012f8 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002982:	4293      	cmp	r3, r2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e0d7      	b.n	8002b3a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800298a:	4b4b      	ldr	r3, [pc, #300]	@ (8002ab8 <HAL_RCC_OscConfig+0x4ac>)
 800298c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d0ee      	beq.n	8002974 <HAL_RCC_OscConfig+0x368>
 8002996:	e014      	b.n	80029c2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002998:	f7fe fcae 	bl	80012f8 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800299e:	e00a      	b.n	80029b6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a0:	f7fe fcaa 	bl	80012f8 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e0c1      	b.n	8002b3a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029b6:	4b40      	ldr	r3, [pc, #256]	@ (8002ab8 <HAL_RCC_OscConfig+0x4ac>)
 80029b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1ee      	bne.n	80029a0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029c2:	7dfb      	ldrb	r3, [r7, #23]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d105      	bne.n	80029d4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ab8 <HAL_RCC_OscConfig+0x4ac>)
 80029ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029cc:	4a3a      	ldr	r2, [pc, #232]	@ (8002ab8 <HAL_RCC_OscConfig+0x4ac>)
 80029ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029d2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80ad 	beq.w	8002b38 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029de:	4b36      	ldr	r3, [pc, #216]	@ (8002ab8 <HAL_RCC_OscConfig+0x4ac>)
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 030c 	and.w	r3, r3, #12
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d060      	beq.n	8002aac <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d145      	bne.n	8002a7e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f2:	4b33      	ldr	r3, [pc, #204]	@ (8002ac0 <HAL_RCC_OscConfig+0x4b4>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f8:	f7fe fc7e 	bl	80012f8 <HAL_GetTick>
 80029fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a00:	f7fe fc7a 	bl	80012f8 <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e093      	b.n	8002b3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a12:	4b29      	ldr	r3, [pc, #164]	@ (8002ab8 <HAL_RCC_OscConfig+0x4ac>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1f0      	bne.n	8002a00 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69da      	ldr	r2, [r3, #28]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a2c:	019b      	lsls	r3, r3, #6
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a34:	085b      	lsrs	r3, r3, #1
 8002a36:	3b01      	subs	r3, #1
 8002a38:	041b      	lsls	r3, r3, #16
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a40:	061b      	lsls	r3, r3, #24
 8002a42:	431a      	orrs	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a48:	071b      	lsls	r3, r3, #28
 8002a4a:	491b      	ldr	r1, [pc, #108]	@ (8002ab8 <HAL_RCC_OscConfig+0x4ac>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a50:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac0 <HAL_RCC_OscConfig+0x4b4>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a56:	f7fe fc4f 	bl	80012f8 <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5c:	e008      	b.n	8002a70 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a5e:	f7fe fc4b 	bl	80012f8 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d901      	bls.n	8002a70 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002a6c:	2303      	movs	r3, #3
 8002a6e:	e064      	b.n	8002b3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a70:	4b11      	ldr	r3, [pc, #68]	@ (8002ab8 <HAL_RCC_OscConfig+0x4ac>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d0f0      	beq.n	8002a5e <HAL_RCC_OscConfig+0x452>
 8002a7c:	e05c      	b.n	8002b38 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a7e:	4b10      	ldr	r3, [pc, #64]	@ (8002ac0 <HAL_RCC_OscConfig+0x4b4>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a84:	f7fe fc38 	bl	80012f8 <HAL_GetTick>
 8002a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8a:	e008      	b.n	8002a9e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a8c:	f7fe fc34 	bl	80012f8 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d901      	bls.n	8002a9e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e04d      	b.n	8002b3a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a9e:	4b06      	ldr	r3, [pc, #24]	@ (8002ab8 <HAL_RCC_OscConfig+0x4ac>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f0      	bne.n	8002a8c <HAL_RCC_OscConfig+0x480>
 8002aaa:	e045      	b.n	8002b38 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d107      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e040      	b.n	8002b3a <HAL_RCC_OscConfig+0x52e>
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	40007000 	.word	0x40007000
 8002ac0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ac4:	4b1f      	ldr	r3, [pc, #124]	@ (8002b44 <HAL_RCC_OscConfig+0x538>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d030      	beq.n	8002b34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d129      	bne.n	8002b34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d122      	bne.n	8002b34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002af4:	4013      	ands	r3, r2
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002afa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d119      	bne.n	8002b34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b0a:	085b      	lsrs	r3, r3, #1
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d10f      	bne.n	8002b34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d107      	bne.n	8002b34 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b2e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d001      	beq.n	8002b38 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e000      	b.n	8002b3a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	40023800 	.word	0x40023800

08002b48 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d101      	bne.n	8002b5a <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e073      	b.n	8002c42 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	7f5b      	ldrb	r3, [r3, #29]
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d105      	bne.n	8002b70 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f7fe f8ac 	bl	8000cc8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2202      	movs	r2, #2
 8002b74:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	2b10      	cmp	r3, #16
 8002b82:	d055      	beq.n	8002c30 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	22ca      	movs	r2, #202	@ 0xca
 8002b8a:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2253      	movs	r2, #83	@ 0x53
 8002b92:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f87f 	bl	8002c98 <RTC_EnterInitMode>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d12c      	bne.n	8002bfe <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6812      	ldr	r2, [r2, #0]
 8002bae:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002bb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bb6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	6899      	ldr	r1, [r3, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	695b      	ldr	r3, [r3, #20]
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	68d2      	ldr	r2, [r2, #12]
 8002bde:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	6919      	ldr	r1, [r3, #16]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	041a      	lsls	r2, r3, #16
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f886 	bl	8002d06 <RTC_ExitInitMode>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d110      	bne.n	8002c26 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002c12:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699a      	ldr	r2, [r3, #24]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	22ff      	movs	r2, #255	@ 0xff
 8002c2c:	625a      	str	r2, [r3, #36]	@ 0x24
 8002c2e:	e001      	b.n	8002c34 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002c30:	2300      	movs	r3, #0
 8002c32:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d102      	bne.n	8002c40 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c54:	2300      	movs	r3, #0
 8002c56:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c94 <HAL_RTC_WaitForSynchro+0x48>)
 8002c5e:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c60:	f7fe fb4a 	bl	80012f8 <HAL_GetTick>
 8002c64:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002c66:	e009      	b.n	8002c7c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002c68:	f7fe fb46 	bl	80012f8 <HAL_GetTick>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002c76:	d901      	bls.n	8002c7c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e007      	b.n	8002c8c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f003 0320 	and.w	r3, r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0ee      	beq.n	8002c68 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	00017f5f 	.word	0x00017f5f

08002c98 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d122      	bne.n	8002cfc <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002cc4:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002cc6:	f7fe fb17 	bl	80012f8 <HAL_GetTick>
 8002cca:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002ccc:	e00c      	b.n	8002ce8 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002cce:	f7fe fb13 	bl	80012f8 <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002cdc:	d904      	bls.n	8002ce8 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d102      	bne.n	8002cfc <RTC_EnterInitMode+0x64>
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d1e8      	bne.n	8002cce <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3710      	adds	r7, #16
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b084      	sub	sp, #16
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	68da      	ldr	r2, [r3, #12]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d20:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 0320 	and.w	r3, r3, #32
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10a      	bne.n	8002d46 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f7ff ff8b 	bl	8002c4c <HAL_RTC_WaitForSynchro>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d004      	beq.n	8002d46 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2204      	movs	r2, #4
 8002d40:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d101      	bne.n	8002d62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e041      	b.n	8002de6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d106      	bne.n	8002d7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f000 f839 	bl	8002dee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2202      	movs	r2, #2
 8002d80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3304      	adds	r3, #4
 8002d8c:	4619      	mov	r1, r3
 8002d8e:	4610      	mov	r0, r2
 8002d90:	f000 f8a8 	bl	8002ee4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
	...

08002e04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b085      	sub	sp, #20
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d001      	beq.n	8002e1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e04e      	b.n	8002eba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68da      	ldr	r2, [r3, #12]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 0201 	orr.w	r2, r2, #1
 8002e32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a23      	ldr	r2, [pc, #140]	@ (8002ec8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d022      	beq.n	8002e84 <HAL_TIM_Base_Start_IT+0x80>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e46:	d01d      	beq.n	8002e84 <HAL_TIM_Base_Start_IT+0x80>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a1f      	ldr	r2, [pc, #124]	@ (8002ecc <HAL_TIM_Base_Start_IT+0xc8>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d018      	beq.n	8002e84 <HAL_TIM_Base_Start_IT+0x80>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a1e      	ldr	r2, [pc, #120]	@ (8002ed0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d013      	beq.n	8002e84 <HAL_TIM_Base_Start_IT+0x80>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a1c      	ldr	r2, [pc, #112]	@ (8002ed4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d00e      	beq.n	8002e84 <HAL_TIM_Base_Start_IT+0x80>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ed8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d009      	beq.n	8002e84 <HAL_TIM_Base_Start_IT+0x80>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a19      	ldr	r2, [pc, #100]	@ (8002edc <HAL_TIM_Base_Start_IT+0xd8>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d004      	beq.n	8002e84 <HAL_TIM_Base_Start_IT+0x80>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a18      	ldr	r2, [pc, #96]	@ (8002ee0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d111      	bne.n	8002ea8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2b06      	cmp	r3, #6
 8002e94:	d010      	beq.n	8002eb8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f042 0201 	orr.w	r2, r2, #1
 8002ea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ea6:	e007      	b.n	8002eb8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0201 	orr.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	3714      	adds	r7, #20
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	40010000 	.word	0x40010000
 8002ecc:	40000400 	.word	0x40000400
 8002ed0:	40000800 	.word	0x40000800
 8002ed4:	40000c00 	.word	0x40000c00
 8002ed8:	40010400 	.word	0x40010400
 8002edc:	40014000 	.word	0x40014000
 8002ee0:	40001800 	.word	0x40001800

08002ee4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4a43      	ldr	r2, [pc, #268]	@ (8003004 <TIM_Base_SetConfig+0x120>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d013      	beq.n	8002f24 <TIM_Base_SetConfig+0x40>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f02:	d00f      	beq.n	8002f24 <TIM_Base_SetConfig+0x40>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a40      	ldr	r2, [pc, #256]	@ (8003008 <TIM_Base_SetConfig+0x124>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d00b      	beq.n	8002f24 <TIM_Base_SetConfig+0x40>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a3f      	ldr	r2, [pc, #252]	@ (800300c <TIM_Base_SetConfig+0x128>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d007      	beq.n	8002f24 <TIM_Base_SetConfig+0x40>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a3e      	ldr	r2, [pc, #248]	@ (8003010 <TIM_Base_SetConfig+0x12c>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d003      	beq.n	8002f24 <TIM_Base_SetConfig+0x40>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a3d      	ldr	r2, [pc, #244]	@ (8003014 <TIM_Base_SetConfig+0x130>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d108      	bne.n	8002f36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	4313      	orrs	r3, r2
 8002f34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a32      	ldr	r2, [pc, #200]	@ (8003004 <TIM_Base_SetConfig+0x120>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d02b      	beq.n	8002f96 <TIM_Base_SetConfig+0xb2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f44:	d027      	beq.n	8002f96 <TIM_Base_SetConfig+0xb2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a2f      	ldr	r2, [pc, #188]	@ (8003008 <TIM_Base_SetConfig+0x124>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d023      	beq.n	8002f96 <TIM_Base_SetConfig+0xb2>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a2e      	ldr	r2, [pc, #184]	@ (800300c <TIM_Base_SetConfig+0x128>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d01f      	beq.n	8002f96 <TIM_Base_SetConfig+0xb2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a2d      	ldr	r2, [pc, #180]	@ (8003010 <TIM_Base_SetConfig+0x12c>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d01b      	beq.n	8002f96 <TIM_Base_SetConfig+0xb2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a2c      	ldr	r2, [pc, #176]	@ (8003014 <TIM_Base_SetConfig+0x130>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d017      	beq.n	8002f96 <TIM_Base_SetConfig+0xb2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a2b      	ldr	r2, [pc, #172]	@ (8003018 <TIM_Base_SetConfig+0x134>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d013      	beq.n	8002f96 <TIM_Base_SetConfig+0xb2>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a2a      	ldr	r2, [pc, #168]	@ (800301c <TIM_Base_SetConfig+0x138>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00f      	beq.n	8002f96 <TIM_Base_SetConfig+0xb2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a29      	ldr	r2, [pc, #164]	@ (8003020 <TIM_Base_SetConfig+0x13c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00b      	beq.n	8002f96 <TIM_Base_SetConfig+0xb2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a28      	ldr	r2, [pc, #160]	@ (8003024 <TIM_Base_SetConfig+0x140>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d007      	beq.n	8002f96 <TIM_Base_SetConfig+0xb2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a27      	ldr	r2, [pc, #156]	@ (8003028 <TIM_Base_SetConfig+0x144>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d003      	beq.n	8002f96 <TIM_Base_SetConfig+0xb2>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a26      	ldr	r2, [pc, #152]	@ (800302c <TIM_Base_SetConfig+0x148>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d108      	bne.n	8002fa8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a0e      	ldr	r2, [pc, #56]	@ (8003004 <TIM_Base_SetConfig+0x120>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d003      	beq.n	8002fd6 <TIM_Base_SetConfig+0xf2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a10      	ldr	r2, [pc, #64]	@ (8003014 <TIM_Base_SetConfig+0x130>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d103      	bne.n	8002fde <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	691a      	ldr	r2, [r3, #16]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f043 0204 	orr.w	r2, r3, #4
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	601a      	str	r2, [r3, #0]
}
 8002ff6:	bf00      	nop
 8002ff8:	3714      	adds	r7, #20
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	40010000 	.word	0x40010000
 8003008:	40000400 	.word	0x40000400
 800300c:	40000800 	.word	0x40000800
 8003010:	40000c00 	.word	0x40000c00
 8003014:	40010400 	.word	0x40010400
 8003018:	40014000 	.word	0x40014000
 800301c:	40014400 	.word	0x40014400
 8003020:	40014800 	.word	0x40014800
 8003024:	40001800 	.word	0x40001800
 8003028:	40001c00 	.word	0x40001c00
 800302c:	40002000 	.word	0x40002000

08003030 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d101      	bne.n	8003042 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e042      	b.n	80030c8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d106      	bne.n	800305c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7fd fe60 	bl	8000d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2224      	movs	r2, #36	@ 0x24
 8003060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003072:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f000 f88b 	bl	8003190 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003088:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	695a      	ldr	r2, [r3, #20]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003098:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	68da      	ldr	r2, [r3, #12]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80030a8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2200      	movs	r2, #0
 80030ae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2220      	movs	r2, #32
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2220      	movs	r2, #32
 80030bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2200      	movs	r2, #0
 80030c4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030c6:	2300      	movs	r3, #0
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	4613      	mov	r3, r2
 80030dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b20      	cmp	r3, #32
 80030e8:	d112      	bne.n	8003110 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d002      	beq.n	80030f6 <HAL_UART_Receive_IT+0x26>
 80030f0:	88fb      	ldrh	r3, [r7, #6]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e00b      	b.n	8003112 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003100:	88fb      	ldrh	r3, [r7, #6]
 8003102:	461a      	mov	r2, r3
 8003104:	68b9      	ldr	r1, [r7, #8]
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f000 f807 	bl	800311a <UART_Start_Receive_IT>
 800310c:	4603      	mov	r3, r0
 800310e:	e000      	b.n	8003112 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003110:	2302      	movs	r3, #2
  }
}
 8003112:	4618      	mov	r0, r3
 8003114:	3710      	adds	r7, #16
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800311a:	b480      	push	{r7}
 800311c:	b085      	sub	sp, #20
 800311e:	af00      	add	r7, sp, #0
 8003120:	60f8      	str	r0, [r7, #12]
 8003122:	60b9      	str	r1, [r7, #8]
 8003124:	4613      	mov	r3, r2
 8003126:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	68ba      	ldr	r2, [r7, #8]
 800312c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	88fa      	ldrh	r2, [r7, #6]
 8003132:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	88fa      	ldrh	r2, [r7, #6]
 8003138:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2222      	movs	r2, #34	@ 0x22
 8003144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d007      	beq.n	8003160 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800315e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695a      	ldr	r2, [r3, #20]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f042 0220 	orr.w	r2, r2, #32
 800317e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
	...

08003190 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003194:	b0c0      	sub	sp, #256	@ 0x100
 8003196:	af00      	add	r7, sp, #0
 8003198:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800319c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80031a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031ac:	68d9      	ldr	r1, [r3, #12]
 80031ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031b2:	681a      	ldr	r2, [r3, #0]
 80031b4:	ea40 0301 	orr.w	r3, r0, r1
 80031b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	431a      	orrs	r2, r3
 80031c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	431a      	orrs	r2, r3
 80031d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80031dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80031e8:	f021 010c 	bic.w	r1, r1, #12
 80031ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80031f6:	430b      	orrs	r3, r1
 80031f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003206:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800320a:	6999      	ldr	r1, [r3, #24]
 800320c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	ea40 0301 	orr.w	r3, r0, r1
 8003216:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	4b8f      	ldr	r3, [pc, #572]	@ (800345c <UART_SetConfig+0x2cc>)
 8003220:	429a      	cmp	r2, r3
 8003222:	d005      	beq.n	8003230 <UART_SetConfig+0xa0>
 8003224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	4b8d      	ldr	r3, [pc, #564]	@ (8003460 <UART_SetConfig+0x2d0>)
 800322c:	429a      	cmp	r2, r3
 800322e:	d104      	bne.n	800323a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003230:	f7fe fc4c 	bl	8001acc <HAL_RCC_GetPCLK2Freq>
 8003234:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003238:	e003      	b.n	8003242 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800323a:	f7fe fc33 	bl	8001aa4 <HAL_RCC_GetPCLK1Freq>
 800323e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800324c:	f040 810c 	bne.w	8003468 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003250:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003254:	2200      	movs	r2, #0
 8003256:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800325a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800325e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003262:	4622      	mov	r2, r4
 8003264:	462b      	mov	r3, r5
 8003266:	1891      	adds	r1, r2, r2
 8003268:	65b9      	str	r1, [r7, #88]	@ 0x58
 800326a:	415b      	adcs	r3, r3
 800326c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800326e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003272:	4621      	mov	r1, r4
 8003274:	eb12 0801 	adds.w	r8, r2, r1
 8003278:	4629      	mov	r1, r5
 800327a:	eb43 0901 	adc.w	r9, r3, r1
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800328a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800328e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003292:	4690      	mov	r8, r2
 8003294:	4699      	mov	r9, r3
 8003296:	4623      	mov	r3, r4
 8003298:	eb18 0303 	adds.w	r3, r8, r3
 800329c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80032a0:	462b      	mov	r3, r5
 80032a2:	eb49 0303 	adc.w	r3, r9, r3
 80032a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80032aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80032b6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80032ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80032be:	460b      	mov	r3, r1
 80032c0:	18db      	adds	r3, r3, r3
 80032c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80032c4:	4613      	mov	r3, r2
 80032c6:	eb42 0303 	adc.w	r3, r2, r3
 80032ca:	657b      	str	r3, [r7, #84]	@ 0x54
 80032cc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80032d0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80032d4:	f7fc ffa6 	bl	8000224 <__aeabi_uldivmod>
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
 80032dc:	4b61      	ldr	r3, [pc, #388]	@ (8003464 <UART_SetConfig+0x2d4>)
 80032de:	fba3 2302 	umull	r2, r3, r3, r2
 80032e2:	095b      	lsrs	r3, r3, #5
 80032e4:	011c      	lsls	r4, r3, #4
 80032e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80032ea:	2200      	movs	r2, #0
 80032ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80032f0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80032f4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80032f8:	4642      	mov	r2, r8
 80032fa:	464b      	mov	r3, r9
 80032fc:	1891      	adds	r1, r2, r2
 80032fe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003300:	415b      	adcs	r3, r3
 8003302:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003304:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003308:	4641      	mov	r1, r8
 800330a:	eb12 0a01 	adds.w	sl, r2, r1
 800330e:	4649      	mov	r1, r9
 8003310:	eb43 0b01 	adc.w	fp, r3, r1
 8003314:	f04f 0200 	mov.w	r2, #0
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003320:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003324:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003328:	4692      	mov	sl, r2
 800332a:	469b      	mov	fp, r3
 800332c:	4643      	mov	r3, r8
 800332e:	eb1a 0303 	adds.w	r3, sl, r3
 8003332:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003336:	464b      	mov	r3, r9
 8003338:	eb4b 0303 	adc.w	r3, fp, r3
 800333c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800334c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003350:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003354:	460b      	mov	r3, r1
 8003356:	18db      	adds	r3, r3, r3
 8003358:	643b      	str	r3, [r7, #64]	@ 0x40
 800335a:	4613      	mov	r3, r2
 800335c:	eb42 0303 	adc.w	r3, r2, r3
 8003360:	647b      	str	r3, [r7, #68]	@ 0x44
 8003362:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003366:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800336a:	f7fc ff5b 	bl	8000224 <__aeabi_uldivmod>
 800336e:	4602      	mov	r2, r0
 8003370:	460b      	mov	r3, r1
 8003372:	4611      	mov	r1, r2
 8003374:	4b3b      	ldr	r3, [pc, #236]	@ (8003464 <UART_SetConfig+0x2d4>)
 8003376:	fba3 2301 	umull	r2, r3, r3, r1
 800337a:	095b      	lsrs	r3, r3, #5
 800337c:	2264      	movs	r2, #100	@ 0x64
 800337e:	fb02 f303 	mul.w	r3, r2, r3
 8003382:	1acb      	subs	r3, r1, r3
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800338a:	4b36      	ldr	r3, [pc, #216]	@ (8003464 <UART_SetConfig+0x2d4>)
 800338c:	fba3 2302 	umull	r2, r3, r3, r2
 8003390:	095b      	lsrs	r3, r3, #5
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003398:	441c      	add	r4, r3
 800339a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800339e:	2200      	movs	r2, #0
 80033a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80033a4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80033a8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80033ac:	4642      	mov	r2, r8
 80033ae:	464b      	mov	r3, r9
 80033b0:	1891      	adds	r1, r2, r2
 80033b2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80033b4:	415b      	adcs	r3, r3
 80033b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80033bc:	4641      	mov	r1, r8
 80033be:	1851      	adds	r1, r2, r1
 80033c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80033c2:	4649      	mov	r1, r9
 80033c4:	414b      	adcs	r3, r1
 80033c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80033c8:	f04f 0200 	mov.w	r2, #0
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80033d4:	4659      	mov	r1, fp
 80033d6:	00cb      	lsls	r3, r1, #3
 80033d8:	4651      	mov	r1, sl
 80033da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80033de:	4651      	mov	r1, sl
 80033e0:	00ca      	lsls	r2, r1, #3
 80033e2:	4610      	mov	r0, r2
 80033e4:	4619      	mov	r1, r3
 80033e6:	4603      	mov	r3, r0
 80033e8:	4642      	mov	r2, r8
 80033ea:	189b      	adds	r3, r3, r2
 80033ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80033f0:	464b      	mov	r3, r9
 80033f2:	460a      	mov	r2, r1
 80033f4:	eb42 0303 	adc.w	r3, r2, r3
 80033f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80033fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003408:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800340c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003410:	460b      	mov	r3, r1
 8003412:	18db      	adds	r3, r3, r3
 8003414:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003416:	4613      	mov	r3, r2
 8003418:	eb42 0303 	adc.w	r3, r2, r3
 800341c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800341e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003422:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003426:	f7fc fefd 	bl	8000224 <__aeabi_uldivmod>
 800342a:	4602      	mov	r2, r0
 800342c:	460b      	mov	r3, r1
 800342e:	4b0d      	ldr	r3, [pc, #52]	@ (8003464 <UART_SetConfig+0x2d4>)
 8003430:	fba3 1302 	umull	r1, r3, r3, r2
 8003434:	095b      	lsrs	r3, r3, #5
 8003436:	2164      	movs	r1, #100	@ 0x64
 8003438:	fb01 f303 	mul.w	r3, r1, r3
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	3332      	adds	r3, #50	@ 0x32
 8003442:	4a08      	ldr	r2, [pc, #32]	@ (8003464 <UART_SetConfig+0x2d4>)
 8003444:	fba2 2303 	umull	r2, r3, r2, r3
 8003448:	095b      	lsrs	r3, r3, #5
 800344a:	f003 0207 	and.w	r2, r3, #7
 800344e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4422      	add	r2, r4
 8003456:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003458:	e106      	b.n	8003668 <UART_SetConfig+0x4d8>
 800345a:	bf00      	nop
 800345c:	40011000 	.word	0x40011000
 8003460:	40011400 	.word	0x40011400
 8003464:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003468:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800346c:	2200      	movs	r2, #0
 800346e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003472:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003476:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800347a:	4642      	mov	r2, r8
 800347c:	464b      	mov	r3, r9
 800347e:	1891      	adds	r1, r2, r2
 8003480:	6239      	str	r1, [r7, #32]
 8003482:	415b      	adcs	r3, r3
 8003484:	627b      	str	r3, [r7, #36]	@ 0x24
 8003486:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800348a:	4641      	mov	r1, r8
 800348c:	1854      	adds	r4, r2, r1
 800348e:	4649      	mov	r1, r9
 8003490:	eb43 0501 	adc.w	r5, r3, r1
 8003494:	f04f 0200 	mov.w	r2, #0
 8003498:	f04f 0300 	mov.w	r3, #0
 800349c:	00eb      	lsls	r3, r5, #3
 800349e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034a2:	00e2      	lsls	r2, r4, #3
 80034a4:	4614      	mov	r4, r2
 80034a6:	461d      	mov	r5, r3
 80034a8:	4643      	mov	r3, r8
 80034aa:	18e3      	adds	r3, r4, r3
 80034ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80034b0:	464b      	mov	r3, r9
 80034b2:	eb45 0303 	adc.w	r3, r5, r3
 80034b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80034ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80034c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034ca:	f04f 0200 	mov.w	r2, #0
 80034ce:	f04f 0300 	mov.w	r3, #0
 80034d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80034d6:	4629      	mov	r1, r5
 80034d8:	008b      	lsls	r3, r1, #2
 80034da:	4621      	mov	r1, r4
 80034dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80034e0:	4621      	mov	r1, r4
 80034e2:	008a      	lsls	r2, r1, #2
 80034e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80034e8:	f7fc fe9c 	bl	8000224 <__aeabi_uldivmod>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4b60      	ldr	r3, [pc, #384]	@ (8003674 <UART_SetConfig+0x4e4>)
 80034f2:	fba3 2302 	umull	r2, r3, r3, r2
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	011c      	lsls	r4, r3, #4
 80034fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034fe:	2200      	movs	r2, #0
 8003500:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003504:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003508:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800350c:	4642      	mov	r2, r8
 800350e:	464b      	mov	r3, r9
 8003510:	1891      	adds	r1, r2, r2
 8003512:	61b9      	str	r1, [r7, #24]
 8003514:	415b      	adcs	r3, r3
 8003516:	61fb      	str	r3, [r7, #28]
 8003518:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800351c:	4641      	mov	r1, r8
 800351e:	1851      	adds	r1, r2, r1
 8003520:	6139      	str	r1, [r7, #16]
 8003522:	4649      	mov	r1, r9
 8003524:	414b      	adcs	r3, r1
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003534:	4659      	mov	r1, fp
 8003536:	00cb      	lsls	r3, r1, #3
 8003538:	4651      	mov	r1, sl
 800353a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800353e:	4651      	mov	r1, sl
 8003540:	00ca      	lsls	r2, r1, #3
 8003542:	4610      	mov	r0, r2
 8003544:	4619      	mov	r1, r3
 8003546:	4603      	mov	r3, r0
 8003548:	4642      	mov	r2, r8
 800354a:	189b      	adds	r3, r3, r2
 800354c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003550:	464b      	mov	r3, r9
 8003552:	460a      	mov	r2, r1
 8003554:	eb42 0303 	adc.w	r3, r2, r3
 8003558:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800355c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003566:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003574:	4649      	mov	r1, r9
 8003576:	008b      	lsls	r3, r1, #2
 8003578:	4641      	mov	r1, r8
 800357a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800357e:	4641      	mov	r1, r8
 8003580:	008a      	lsls	r2, r1, #2
 8003582:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003586:	f7fc fe4d 	bl	8000224 <__aeabi_uldivmod>
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
 800358e:	4611      	mov	r1, r2
 8003590:	4b38      	ldr	r3, [pc, #224]	@ (8003674 <UART_SetConfig+0x4e4>)
 8003592:	fba3 2301 	umull	r2, r3, r3, r1
 8003596:	095b      	lsrs	r3, r3, #5
 8003598:	2264      	movs	r2, #100	@ 0x64
 800359a:	fb02 f303 	mul.w	r3, r2, r3
 800359e:	1acb      	subs	r3, r1, r3
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	3332      	adds	r3, #50	@ 0x32
 80035a4:	4a33      	ldr	r2, [pc, #204]	@ (8003674 <UART_SetConfig+0x4e4>)
 80035a6:	fba2 2303 	umull	r2, r3, r2, r3
 80035aa:	095b      	lsrs	r3, r3, #5
 80035ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035b0:	441c      	add	r4, r3
 80035b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035b6:	2200      	movs	r2, #0
 80035b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80035ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80035bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80035c0:	4642      	mov	r2, r8
 80035c2:	464b      	mov	r3, r9
 80035c4:	1891      	adds	r1, r2, r2
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	415b      	adcs	r3, r3
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035d0:	4641      	mov	r1, r8
 80035d2:	1851      	adds	r1, r2, r1
 80035d4:	6039      	str	r1, [r7, #0]
 80035d6:	4649      	mov	r1, r9
 80035d8:	414b      	adcs	r3, r1
 80035da:	607b      	str	r3, [r7, #4]
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80035e8:	4659      	mov	r1, fp
 80035ea:	00cb      	lsls	r3, r1, #3
 80035ec:	4651      	mov	r1, sl
 80035ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80035f2:	4651      	mov	r1, sl
 80035f4:	00ca      	lsls	r2, r1, #3
 80035f6:	4610      	mov	r0, r2
 80035f8:	4619      	mov	r1, r3
 80035fa:	4603      	mov	r3, r0
 80035fc:	4642      	mov	r2, r8
 80035fe:	189b      	adds	r3, r3, r2
 8003600:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003602:	464b      	mov	r3, r9
 8003604:	460a      	mov	r2, r1
 8003606:	eb42 0303 	adc.w	r3, r2, r3
 800360a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800360c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	663b      	str	r3, [r7, #96]	@ 0x60
 8003616:	667a      	str	r2, [r7, #100]	@ 0x64
 8003618:	f04f 0200 	mov.w	r2, #0
 800361c:	f04f 0300 	mov.w	r3, #0
 8003620:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003624:	4649      	mov	r1, r9
 8003626:	008b      	lsls	r3, r1, #2
 8003628:	4641      	mov	r1, r8
 800362a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800362e:	4641      	mov	r1, r8
 8003630:	008a      	lsls	r2, r1, #2
 8003632:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003636:	f7fc fdf5 	bl	8000224 <__aeabi_uldivmod>
 800363a:	4602      	mov	r2, r0
 800363c:	460b      	mov	r3, r1
 800363e:	4b0d      	ldr	r3, [pc, #52]	@ (8003674 <UART_SetConfig+0x4e4>)
 8003640:	fba3 1302 	umull	r1, r3, r3, r2
 8003644:	095b      	lsrs	r3, r3, #5
 8003646:	2164      	movs	r1, #100	@ 0x64
 8003648:	fb01 f303 	mul.w	r3, r1, r3
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	011b      	lsls	r3, r3, #4
 8003650:	3332      	adds	r3, #50	@ 0x32
 8003652:	4a08      	ldr	r2, [pc, #32]	@ (8003674 <UART_SetConfig+0x4e4>)
 8003654:	fba2 2303 	umull	r2, r3, r2, r3
 8003658:	095b      	lsrs	r3, r3, #5
 800365a:	f003 020f 	and.w	r2, r3, #15
 800365e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4422      	add	r2, r4
 8003666:	609a      	str	r2, [r3, #8]
}
 8003668:	bf00      	nop
 800366a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800366e:	46bd      	mov	sp, r7
 8003670:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003674:	51eb851f 	.word	0x51eb851f

08003678 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f103 0208 	add.w	r2, r3, #8
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f04f 32ff 	mov.w	r2, #4294967295
 8003690:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f103 0208 	add.w	r2, r3, #8
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f103 0208 	add.w	r2, r3, #8
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr

080036b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80036c6:	bf00      	nop
 80036c8:	370c      	adds	r7, #12
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr

080036d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80036d2:	b480      	push	{r7}
 80036d4:	b085      	sub	sp, #20
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
 80036da:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	683a      	ldr	r2, [r7, #0]
 80036f6:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	683a      	ldr	r2, [r7, #0]
 80036fc:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	1c5a      	adds	r2, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	601a      	str	r2, [r3, #0]
}
 800370e:	bf00      	nop
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800371a:	b480      	push	{r7}
 800371c:	b085      	sub	sp, #20
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
 8003722:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003730:	d103      	bne.n	800373a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	691b      	ldr	r3, [r3, #16]
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	e00c      	b.n	8003754 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3308      	adds	r3, #8
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	e002      	b.n	8003748 <vListInsert+0x2e>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	60fb      	str	r3, [r7, #12]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	429a      	cmp	r2, r3
 8003752:	d2f6      	bcs.n	8003742 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	685a      	ldr	r2, [r3, #4]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	1c5a      	adds	r2, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	601a      	str	r2, [r3, #0]
}
 8003780:	bf00      	nop
 8003782:	3714      	adds	r7, #20
 8003784:	46bd      	mov	sp, r7
 8003786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378a:	4770      	bx	lr

0800378c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800378c:	b480      	push	{r7}
 800378e:	b085      	sub	sp, #20
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	6892      	ldr	r2, [r2, #8]
 80037a2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6852      	ldr	r2, [r2, #4]
 80037ac:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d103      	bne.n	80037c0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	1e5a      	subs	r2, r3, #1
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
 80037e8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10b      	bne.n	800380c <xQueueGenericReset+0x2c>
        __asm volatile
 80037f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f8:	f383 8811 	msr	BASEPRI, r3
 80037fc:	f3bf 8f6f 	isb	sy
 8003800:	f3bf 8f4f 	dsb	sy
 8003804:	60bb      	str	r3, [r7, #8]
    }
 8003806:	bf00      	nop
 8003808:	bf00      	nop
 800380a:	e7fd      	b.n	8003808 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 800380c:	f002 f906 	bl	8005a1c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003818:	68f9      	ldr	r1, [r7, #12]
 800381a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800381c:	fb01 f303 	mul.w	r3, r1, r3
 8003820:	441a      	add	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800383c:	3b01      	subs	r3, #1
 800383e:	68f9      	ldr	r1, [r7, #12]
 8003840:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003842:	fb01 f303 	mul.w	r3, r1, r3
 8003846:	441a      	add	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	22ff      	movs	r2, #255	@ 0xff
 8003850:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	22ff      	movs	r2, #255	@ 0xff
 8003858:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d109      	bne.n	8003876 <xQueueGenericReset+0x96>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00f      	beq.n	800388a <xQueueGenericReset+0xaa>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	3310      	adds	r3, #16
 800386e:	4618      	mov	r0, r3
 8003870:	f001 f812 	bl	8004898 <xTaskRemoveFromEventList>
 8003874:	e009      	b.n	800388a <xQueueGenericReset+0xaa>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	3310      	adds	r3, #16
 800387a:	4618      	mov	r0, r3
 800387c:	f7ff fefc 	bl	8003678 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	3324      	adds	r3, #36	@ 0x24
 8003884:	4618      	mov	r0, r3
 8003886:	f7ff fef7 	bl	8003678 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800388a:	f002 f8f9 	bl	8005a80 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 800388e:	2301      	movs	r3, #1
}
 8003890:	4618      	mov	r0, r3
 8003892:	3710      	adds	r7, #16
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003898:	b580      	push	{r7, lr}
 800389a:	b08c      	sub	sp, #48	@ 0x30
 800389c:	af02      	add	r7, sp, #8
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	4613      	mov	r3, r2
 80038a4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10b      	bne.n	80038c4 <xQueueGenericCreate+0x2c>
        __asm volatile
 80038ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	61bb      	str	r3, [r7, #24]
    }
 80038be:	bf00      	nop
 80038c0:	bf00      	nop
 80038c2:	e7fd      	b.n	80038c0 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	fb02 f303 	mul.w	r3, r2, r3
 80038cc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d006      	beq.n	80038e2 <xQueueGenericCreate+0x4a>
 80038d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80038dc:	68fa      	ldr	r2, [r7, #12]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d101      	bne.n	80038e6 <xQueueGenericCreate+0x4e>
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <xQueueGenericCreate+0x50>
 80038e6:	2300      	movs	r3, #0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d10b      	bne.n	8003904 <xQueueGenericCreate+0x6c>
        __asm volatile
 80038ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038f0:	f383 8811 	msr	BASEPRI, r3
 80038f4:	f3bf 8f6f 	isb	sy
 80038f8:	f3bf 8f4f 	dsb	sy
 80038fc:	617b      	str	r3, [r7, #20]
    }
 80038fe:	bf00      	nop
 8003900:	bf00      	nop
 8003902:	e7fd      	b.n	8003900 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8003904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003906:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800390a:	d90b      	bls.n	8003924 <xQueueGenericCreate+0x8c>
        __asm volatile
 800390c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003910:	f383 8811 	msr	BASEPRI, r3
 8003914:	f3bf 8f6f 	isb	sy
 8003918:	f3bf 8f4f 	dsb	sy
 800391c:	613b      	str	r3, [r7, #16]
    }
 800391e:	bf00      	nop
 8003920:	bf00      	nop
 8003922:	e7fd      	b.n	8003920 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003926:	3350      	adds	r3, #80	@ 0x50
 8003928:	4618      	mov	r0, r3
 800392a:	f002 f9a1 	bl	8005c70 <pvPortMalloc>
 800392e:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d00d      	beq.n	8003952 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	3350      	adds	r3, #80	@ 0x50
 800393e:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003940:	79fa      	ldrb	r2, [r7, #7]
 8003942:	6a3b      	ldr	r3, [r7, #32]
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	4613      	mov	r3, r2
 8003948:	69fa      	ldr	r2, [r7, #28]
 800394a:	68b9      	ldr	r1, [r7, #8]
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 f805 	bl	800395c <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003952:	6a3b      	ldr	r3, [r7, #32]
    }
 8003954:	4618      	mov	r0, r3
 8003956:	3728      	adds	r7, #40	@ 0x28
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
 8003968:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d103      	bne.n	8003978 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	e002      	b.n	800397e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800398a:	2101      	movs	r1, #1
 800398c:	69b8      	ldr	r0, [r7, #24]
 800398e:	f7ff ff27 	bl	80037e0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	78fa      	ldrb	r2, [r7, #3]
 8003996:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800399a:	bf00      	nop
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
	...

080039a4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08e      	sub	sp, #56	@ 0x38
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	607a      	str	r2, [r7, #4]
 80039b0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80039b2:	2300      	movs	r3, #0
 80039b4:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 80039ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10b      	bne.n	80039d8 <xQueueGenericSend+0x34>
        __asm volatile
 80039c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039c4:	f383 8811 	msr	BASEPRI, r3
 80039c8:	f3bf 8f6f 	isb	sy
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80039d2:	bf00      	nop
 80039d4:	bf00      	nop
 80039d6:	e7fd      	b.n	80039d4 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d103      	bne.n	80039e6 <xQueueGenericSend+0x42>
 80039de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <xQueueGenericSend+0x46>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <xQueueGenericSend+0x48>
 80039ea:	2300      	movs	r3, #0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10b      	bne.n	8003a08 <xQueueGenericSend+0x64>
        __asm volatile
 80039f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8003a02:	bf00      	nop
 8003a04:	bf00      	nop
 8003a06:	e7fd      	b.n	8003a04 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d103      	bne.n	8003a16 <xQueueGenericSend+0x72>
 8003a0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d101      	bne.n	8003a1a <xQueueGenericSend+0x76>
 8003a16:	2301      	movs	r3, #1
 8003a18:	e000      	b.n	8003a1c <xQueueGenericSend+0x78>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d10b      	bne.n	8003a38 <xQueueGenericSend+0x94>
        __asm volatile
 8003a20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	623b      	str	r3, [r7, #32]
    }
 8003a32:	bf00      	nop
 8003a34:	bf00      	nop
 8003a36:	e7fd      	b.n	8003a34 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a38:	f001 f8c8 	bl	8004bcc <xTaskGetSchedulerState>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d102      	bne.n	8003a48 <xQueueGenericSend+0xa4>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <xQueueGenericSend+0xa8>
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e000      	b.n	8003a4e <xQueueGenericSend+0xaa>
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d10b      	bne.n	8003a6a <xQueueGenericSend+0xc6>
        __asm volatile
 8003a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a56:	f383 8811 	msr	BASEPRI, r3
 8003a5a:	f3bf 8f6f 	isb	sy
 8003a5e:	f3bf 8f4f 	dsb	sy
 8003a62:	61fb      	str	r3, [r7, #28]
    }
 8003a64:	bf00      	nop
 8003a66:	bf00      	nop
 8003a68:	e7fd      	b.n	8003a66 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003a6a:	f001 ffd7 	bl	8005a1c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d302      	bcc.n	8003a80 <xQueueGenericSend+0xdc>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d112      	bne.n	8003aa6 <xQueueGenericSend+0x102>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a80:	683a      	ldr	r2, [r7, #0]
 8003a82:	68b9      	ldr	r1, [r7, #8]
 8003a84:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003a86:	f000 fa1c 	bl	8003ec2 <prvCopyDataToQueue>
 8003a8a:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d004      	beq.n	8003a9e <xQueueGenericSend+0xfa>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a96:	3324      	adds	r3, #36	@ 0x24
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f000 fefd 	bl	8004898 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8003a9e:	f001 ffef 	bl	8005a80 <vPortExitCritical>
                return pdPASS;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e062      	b.n	8003b6c <xQueueGenericSend+0x1c8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d103      	bne.n	8003ab4 <xQueueGenericSend+0x110>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003aac:	f001 ffe8 	bl	8005a80 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	e05b      	b.n	8003b6c <xQueueGenericSend+0x1c8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003ab4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d106      	bne.n	8003ac8 <xQueueGenericSend+0x124>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003aba:	f107 0314 	add.w	r3, r7, #20
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 ff4e 	bl	8004960 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003ac8:	f001 ffda 	bl	8005a80 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003acc:	f000 fcf2 	bl	80044b4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003ad0:	f001 ffa4 	bl	8005a1c <vPortEnterCritical>
 8003ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ad6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ada:	b25b      	sxtb	r3, r3
 8003adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae0:	d103      	bne.n	8003aea <xQueueGenericSend+0x146>
 8003ae2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003af0:	b25b      	sxtb	r3, r3
 8003af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003af6:	d103      	bne.n	8003b00 <xQueueGenericSend+0x15c>
 8003af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b00:	f001 ffbe 	bl	8005a80 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b04:	1d3a      	adds	r2, r7, #4
 8003b06:	f107 0314 	add.w	r3, r7, #20
 8003b0a:	4611      	mov	r1, r2
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 ff3d 	bl	800498c <xTaskCheckForTimeOut>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d123      	bne.n	8003b60 <xQueueGenericSend+0x1bc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003b18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b1a:	f000 faca 	bl	80040b2 <prvIsQueueFull>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d017      	beq.n	8003b54 <xQueueGenericSend+0x1b0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b26:	3310      	adds	r3, #16
 8003b28:	687a      	ldr	r2, [r7, #4]
 8003b2a:	4611      	mov	r1, r2
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f000 fe61 	bl	80047f4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8003b32:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b34:	f000 fa55 	bl	8003fe2 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8003b38:	f000 fcca 	bl	80044d0 <xTaskResumeAll>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d193      	bne.n	8003a6a <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8003b42:	4b0c      	ldr	r3, [pc, #48]	@ (8003b74 <xQueueGenericSend+0x1d0>)
 8003b44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b48:	601a      	str	r2, [r3, #0]
 8003b4a:	f3bf 8f4f 	dsb	sy
 8003b4e:	f3bf 8f6f 	isb	sy
 8003b52:	e78a      	b.n	8003a6a <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8003b54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b56:	f000 fa44 	bl	8003fe2 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003b5a:	f000 fcb9 	bl	80044d0 <xTaskResumeAll>
 8003b5e:	e784      	b.n	8003a6a <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8003b60:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003b62:	f000 fa3e 	bl	8003fe2 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003b66:	f000 fcb3 	bl	80044d0 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8003b6a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	3738      	adds	r7, #56	@ 0x38
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	e000ed04 	.word	0xe000ed04

08003b78 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b090      	sub	sp, #64	@ 0x40
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
 8003b84:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8003b8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10b      	bne.n	8003ba8 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8003b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b94:	f383 8811 	msr	BASEPRI, r3
 8003b98:	f3bf 8f6f 	isb	sy
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8003ba2:	bf00      	nop
 8003ba4:	bf00      	nop
 8003ba6:	e7fd      	b.n	8003ba4 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d103      	bne.n	8003bb6 <xQueueGenericSendFromISR+0x3e>
 8003bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <xQueueGenericSendFromISR+0x42>
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e000      	b.n	8003bbc <xQueueGenericSendFromISR+0x44>
 8003bba:	2300      	movs	r3, #0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10b      	bne.n	8003bd8 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8003bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc4:	f383 8811 	msr	BASEPRI, r3
 8003bc8:	f3bf 8f6f 	isb	sy
 8003bcc:	f3bf 8f4f 	dsb	sy
 8003bd0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8003bd2:	bf00      	nop
 8003bd4:	bf00      	nop
 8003bd6:	e7fd      	b.n	8003bd4 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d103      	bne.n	8003be6 <xQueueGenericSendFromISR+0x6e>
 8003bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d101      	bne.n	8003bea <xQueueGenericSendFromISR+0x72>
 8003be6:	2301      	movs	r3, #1
 8003be8:	e000      	b.n	8003bec <xQueueGenericSendFromISR+0x74>
 8003bea:	2300      	movs	r3, #0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10b      	bne.n	8003c08 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8003bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bf4:	f383 8811 	msr	BASEPRI, r3
 8003bf8:	f3bf 8f6f 	isb	sy
 8003bfc:	f3bf 8f4f 	dsb	sy
 8003c00:	623b      	str	r3, [r7, #32]
    }
 8003c02:	bf00      	nop
 8003c04:	bf00      	nop
 8003c06:	e7fd      	b.n	8003c04 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003c08:	f001 fff0 	bl	8005bec <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003c0c:	f3ef 8211 	mrs	r2, BASEPRI
 8003c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c14:	f383 8811 	msr	BASEPRI, r3
 8003c18:	f3bf 8f6f 	isb	sy
 8003c1c:	f3bf 8f4f 	dsb	sy
 8003c20:	61fa      	str	r2, [r7, #28]
 8003c22:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003c24:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003c26:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c2a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d302      	bcc.n	8003c3a <xQueueGenericSendFromISR+0xc2>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d13f      	bne.n	8003cba <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8003c3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c3c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003c40:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	68b9      	ldr	r1, [r7, #8]
 8003c4e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003c50:	f000 f937 	bl	8003ec2 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8003c54:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c5c:	d112      	bne.n	8003c84 <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d026      	beq.n	8003cb4 <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c68:	3324      	adds	r3, #36	@ 0x24
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f000 fe14 	bl	8004898 <xTaskRemoveFromEventList>
 8003c70:	4603      	mov	r3, r0
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d01e      	beq.n	8003cb4 <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d01b      	beq.n	8003cb4 <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	e017      	b.n	8003cb4 <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8003c84:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003c88:	2b7f      	cmp	r3, #127	@ 0x7f
 8003c8a:	d10b      	bne.n	8003ca4 <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 8003c8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c90:	f383 8811 	msr	BASEPRI, r3
 8003c94:	f3bf 8f6f 	isb	sy
 8003c98:	f3bf 8f4f 	dsb	sy
 8003c9c:	617b      	str	r3, [r7, #20]
    }
 8003c9e:	bf00      	nop
 8003ca0:	bf00      	nop
 8003ca2:	e7fd      	b.n	8003ca0 <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003ca4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003ca8:	3301      	adds	r3, #1
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	b25a      	sxtb	r2, r3
 8003cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8003cb8:	e001      	b.n	8003cbe <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003cbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cc0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003cc8:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003cca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3740      	adds	r7, #64	@ 0x40
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08c      	sub	sp, #48	@ 0x30
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8003ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10b      	bne.n	8003d06 <xQueueReceive+0x32>
        __asm volatile
 8003cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cf2:	f383 8811 	msr	BASEPRI, r3
 8003cf6:	f3bf 8f6f 	isb	sy
 8003cfa:	f3bf 8f4f 	dsb	sy
 8003cfe:	623b      	str	r3, [r7, #32]
    }
 8003d00:	bf00      	nop
 8003d02:	bf00      	nop
 8003d04:	e7fd      	b.n	8003d02 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d103      	bne.n	8003d14 <xQueueReceive+0x40>
 8003d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d101      	bne.n	8003d18 <xQueueReceive+0x44>
 8003d14:	2301      	movs	r3, #1
 8003d16:	e000      	b.n	8003d1a <xQueueReceive+0x46>
 8003d18:	2300      	movs	r3, #0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d10b      	bne.n	8003d36 <xQueueReceive+0x62>
        __asm volatile
 8003d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d22:	f383 8811 	msr	BASEPRI, r3
 8003d26:	f3bf 8f6f 	isb	sy
 8003d2a:	f3bf 8f4f 	dsb	sy
 8003d2e:	61fb      	str	r3, [r7, #28]
    }
 8003d30:	bf00      	nop
 8003d32:	bf00      	nop
 8003d34:	e7fd      	b.n	8003d32 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d36:	f000 ff49 	bl	8004bcc <xTaskGetSchedulerState>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d102      	bne.n	8003d46 <xQueueReceive+0x72>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <xQueueReceive+0x76>
 8003d46:	2301      	movs	r3, #1
 8003d48:	e000      	b.n	8003d4c <xQueueReceive+0x78>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10b      	bne.n	8003d68 <xQueueReceive+0x94>
        __asm volatile
 8003d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d54:	f383 8811 	msr	BASEPRI, r3
 8003d58:	f3bf 8f6f 	isb	sy
 8003d5c:	f3bf 8f4f 	dsb	sy
 8003d60:	61bb      	str	r3, [r7, #24]
    }
 8003d62:	bf00      	nop
 8003d64:	bf00      	nop
 8003d66:	e7fd      	b.n	8003d64 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003d68:	f001 fe58 	bl	8005a1c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d70:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d014      	beq.n	8003da2 <xQueueReceive+0xce>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d78:	68b9      	ldr	r1, [r7, #8]
 8003d7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003d7c:	f000 f90b 	bl	8003f96 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d82:	1e5a      	subs	r2, r3, #1
 8003d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d86:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d8a:	691b      	ldr	r3, [r3, #16]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d004      	beq.n	8003d9a <xQueueReceive+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d92:	3310      	adds	r3, #16
 8003d94:	4618      	mov	r0, r3
 8003d96:	f000 fd7f 	bl	8004898 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8003d9a:	f001 fe71 	bl	8005a80 <vPortExitCritical>
                return pdPASS;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e069      	b.n	8003e76 <xQueueReceive+0x1a2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d103      	bne.n	8003db0 <xQueueReceive+0xdc>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8003da8:	f001 fe6a 	bl	8005a80 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8003dac:	2300      	movs	r3, #0
 8003dae:	e062      	b.n	8003e76 <xQueueReceive+0x1a2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8003db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d106      	bne.n	8003dc4 <xQueueReceive+0xf0>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003db6:	f107 0310 	add.w	r3, r7, #16
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fdd0 	bl	8004960 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8003dc4:	f001 fe5c 	bl	8005a80 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003dc8:	f000 fb74 	bl	80044b4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003dcc:	f001 fe26 	bl	8005a1c <vPortEnterCritical>
 8003dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dd2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003dd6:	b25b      	sxtb	r3, r3
 8003dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ddc:	d103      	bne.n	8003de6 <xQueueReceive+0x112>
 8003dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003de6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003dec:	b25b      	sxtb	r3, r3
 8003dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003df2:	d103      	bne.n	8003dfc <xQueueReceive+0x128>
 8003df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003dfc:	f001 fe40 	bl	8005a80 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e00:	1d3a      	adds	r2, r7, #4
 8003e02:	f107 0310 	add.w	r3, r7, #16
 8003e06:	4611      	mov	r1, r2
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f000 fdbf 	bl	800498c <xTaskCheckForTimeOut>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d123      	bne.n	8003e5c <xQueueReceive+0x188>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e16:	f000 f936 	bl	8004086 <prvIsQueueEmpty>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d017      	beq.n	8003e50 <xQueueReceive+0x17c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e22:	3324      	adds	r3, #36	@ 0x24
 8003e24:	687a      	ldr	r2, [r7, #4]
 8003e26:	4611      	mov	r1, r2
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f000 fce3 	bl	80047f4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003e2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e30:	f000 f8d7 	bl	8003fe2 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003e34:	f000 fb4c 	bl	80044d0 <xTaskResumeAll>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d194      	bne.n	8003d68 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8003e3e:	4b10      	ldr	r3, [pc, #64]	@ (8003e80 <xQueueReceive+0x1ac>)
 8003e40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	f3bf 8f6f 	isb	sy
 8003e4e:	e78b      	b.n	8003d68 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8003e50:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e52:	f000 f8c6 	bl	8003fe2 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003e56:	f000 fb3b 	bl	80044d0 <xTaskResumeAll>
 8003e5a:	e785      	b.n	8003d68 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8003e5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e5e:	f000 f8c0 	bl	8003fe2 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003e62:	f000 fb35 	bl	80044d0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e66:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003e68:	f000 f90d 	bl	8004086 <prvIsQueueEmpty>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f43f af7a 	beq.w	8003d68 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8003e74:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3730      	adds	r7, #48	@ 0x30
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	e000ed04 	.word	0xe000ed04

08003e84 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b084      	sub	sp, #16
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10b      	bne.n	8003eaa <uxQueueMessagesWaiting+0x26>
        __asm volatile
 8003e92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e96:	f383 8811 	msr	BASEPRI, r3
 8003e9a:	f3bf 8f6f 	isb	sy
 8003e9e:	f3bf 8f4f 	dsb	sy
 8003ea2:	60bb      	str	r3, [r7, #8]
    }
 8003ea4:	bf00      	nop
 8003ea6:	bf00      	nop
 8003ea8:	e7fd      	b.n	8003ea6 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8003eaa:	f001 fdb7 	bl	8005a1c <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb2:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8003eb4:	f001 fde4 	bl	8005a80 <vPortExitCritical>

    return uxReturn;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8003ec2:	b580      	push	{r7, lr}
 8003ec4:	b086      	sub	sp, #24
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	60f8      	str	r0, [r7, #12]
 8003eca:	60b9      	str	r1, [r7, #8]
 8003ecc:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ed6:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d10d      	bne.n	8003efc <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d14d      	bne.n	8003f84 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fe8b 	bl	8004c08 <xTaskPriorityDisinherit>
 8003ef2:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	609a      	str	r2, [r3, #8]
 8003efa:	e043      	b.n	8003f84 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d119      	bne.n	8003f36 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6858      	ldr	r0, [r3, #4]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	68b9      	ldr	r1, [r7, #8]
 8003f0e:	f002 f8dd 	bl	80060cc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f1a:	441a      	add	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d32b      	bcc.n	8003f84 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	605a      	str	r2, [r3, #4]
 8003f34:	e026      	b.n	8003f84 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	68d8      	ldr	r0, [r3, #12]
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f3e:	461a      	mov	r2, r3
 8003f40:	68b9      	ldr	r1, [r7, #8]
 8003f42:	f002 f8c3 	bl	80060cc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	68da      	ldr	r2, [r3, #12]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4e:	425b      	negs	r3, r3
 8003f50:	441a      	add	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d207      	bcs.n	8003f72 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	689a      	ldr	r2, [r3, #8]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f6a:	425b      	negs	r3, r3
 8003f6c:	441a      	add	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d105      	bne.n	8003f84 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d002      	beq.n	8003f84 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	3b01      	subs	r3, #1
 8003f82:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1c5a      	adds	r2, r3, #1
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8003f8c:	697b      	ldr	r3, [r7, #20]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b082      	sub	sp, #8
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
 8003f9e:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d018      	beq.n	8003fda <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fb0:	441a      	add	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68da      	ldr	r2, [r3, #12]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d303      	bcc.n	8003fca <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68d9      	ldr	r1, [r3, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	6838      	ldr	r0, [r7, #0]
 8003fd6:	f002 f879 	bl	80060cc <memcpy>
    }
}
 8003fda:	bf00      	nop
 8003fdc:	3708      	adds	r7, #8
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}

08003fe2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003fe2:	b580      	push	{r7, lr}
 8003fe4:	b084      	sub	sp, #16
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003fea:	f001 fd17 	bl	8005a1c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ff4:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003ff6:	e011      	b.n	800401c <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d012      	beq.n	8004026 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3324      	adds	r3, #36	@ 0x24
 8004004:	4618      	mov	r0, r3
 8004006:	f000 fc47 	bl	8004898 <xTaskRemoveFromEventList>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8004010:	f000 fd24 	bl	8004a5c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004014:	7bfb      	ldrb	r3, [r7, #15]
 8004016:	3b01      	subs	r3, #1
 8004018:	b2db      	uxtb	r3, r3
 800401a:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800401c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004020:	2b00      	cmp	r3, #0
 8004022:	dce9      	bgt.n	8003ff8 <prvUnlockQueue+0x16>
 8004024:	e000      	b.n	8004028 <prvUnlockQueue+0x46>
                        break;
 8004026:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	22ff      	movs	r2, #255	@ 0xff
 800402c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8004030:	f001 fd26 	bl	8005a80 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004034:	f001 fcf2 	bl	8005a1c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800403e:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004040:	e011      	b.n	8004066 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d012      	beq.n	8004070 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	3310      	adds	r3, #16
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fc22 	bl	8004898 <xTaskRemoveFromEventList>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800405a:	f000 fcff 	bl	8004a5c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800405e:	7bbb      	ldrb	r3, [r7, #14]
 8004060:	3b01      	subs	r3, #1
 8004062:	b2db      	uxtb	r3, r3
 8004064:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004066:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800406a:	2b00      	cmp	r3, #0
 800406c:	dce9      	bgt.n	8004042 <prvUnlockQueue+0x60>
 800406e:	e000      	b.n	8004072 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004070:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	22ff      	movs	r2, #255	@ 0xff
 8004076:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800407a:	f001 fd01 	bl	8005a80 <vPortExitCritical>
}
 800407e:	bf00      	nop
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b084      	sub	sp, #16
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800408e:	f001 fcc5 	bl	8005a1c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004096:	2b00      	cmp	r3, #0
 8004098:	d102      	bne.n	80040a0 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800409a:	2301      	movs	r3, #1
 800409c:	60fb      	str	r3, [r7, #12]
 800409e:	e001      	b.n	80040a4 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80040a0:	2300      	movs	r3, #0
 80040a2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80040a4:	f001 fcec 	bl	8005a80 <vPortExitCritical>

    return xReturn;
 80040a8:	68fb      	ldr	r3, [r7, #12]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3710      	adds	r7, #16
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}

080040b2 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b084      	sub	sp, #16
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80040ba:	f001 fcaf 	bl	8005a1c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d102      	bne.n	80040d0 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80040ca:	2301      	movs	r3, #1
 80040cc:	60fb      	str	r3, [r7, #12]
 80040ce:	e001      	b.n	80040d4 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80040d0:	2300      	movs	r3, #0
 80040d2:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80040d4:	f001 fcd4 	bl	8005a80 <vPortExitCritical>

    return xReturn;
 80040d8:	68fb      	ldr	r3, [r7, #12]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3710      	adds	r7, #16
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
	...

080040e4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80040e4:	b480      	push	{r7}
 80040e6:	b085      	sub	sp, #20
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80040ee:	2300      	movs	r3, #0
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	e014      	b.n	800411e <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80040f4:	4a0f      	ldr	r2, [pc, #60]	@ (8004134 <vQueueAddToRegistry+0x50>)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10b      	bne.n	8004118 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004100:	490c      	ldr	r1, [pc, #48]	@ (8004134 <vQueueAddToRegistry+0x50>)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 800410a:	4a0a      	ldr	r2, [pc, #40]	@ (8004134 <vQueueAddToRegistry+0x50>)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	00db      	lsls	r3, r3, #3
 8004110:	4413      	add	r3, r2
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 8004116:	e006      	b.n	8004126 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	3301      	adds	r3, #1
 800411c:	60fb      	str	r3, [r7, #12]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2b07      	cmp	r3, #7
 8004122:	d9e7      	bls.n	80040f4 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8004124:	bf00      	nop
 8004126:	bf00      	nop
 8004128:	3714      	adds	r7, #20
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	20000128 	.word	0x20000128

08004138 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
 800413e:	60f8      	str	r0, [r7, #12]
 8004140:	60b9      	str	r1, [r7, #8]
 8004142:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8004148:	f001 fc68 	bl	8005a1c <vPortEnterCritical>
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004152:	b25b      	sxtb	r3, r3
 8004154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004158:	d103      	bne.n	8004162 <vQueueWaitForMessageRestricted+0x2a>
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004168:	b25b      	sxtb	r3, r3
 800416a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416e:	d103      	bne.n	8004178 <vQueueWaitForMessageRestricted+0x40>
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004178:	f001 fc82 	bl	8005a80 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004180:	2b00      	cmp	r3, #0
 8004182:	d106      	bne.n	8004192 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	3324      	adds	r3, #36	@ 0x24
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	68b9      	ldr	r1, [r7, #8]
 800418c:	4618      	mov	r0, r3
 800418e:	f000 fb57 	bl	8004840 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004192:	6978      	ldr	r0, [r7, #20]
 8004194:	f7ff ff25 	bl	8003fe2 <prvUnlockQueue>
    }
 8004198:	bf00      	nop
 800419a:	3718      	adds	r7, #24
 800419c:	46bd      	mov	sp, r7
 800419e:	bd80      	pop	{r7, pc}

080041a0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08c      	sub	sp, #48	@ 0x30
 80041a4:	af04      	add	r7, sp, #16
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	603b      	str	r3, [r7, #0]
 80041ac:	4613      	mov	r3, r2
 80041ae:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80041b0:	88fb      	ldrh	r3, [r7, #6]
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f001 fd5b 	bl	8005c70 <pvPortMalloc>
 80041ba:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00e      	beq.n	80041e0 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80041c2:	2058      	movs	r0, #88	@ 0x58
 80041c4:	f001 fd54 	bl	8005c70 <pvPortMalloc>
 80041c8:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	631a      	str	r2, [r3, #48]	@ 0x30
 80041d6:	e005      	b.n	80041e4 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80041d8:	6978      	ldr	r0, [r7, #20]
 80041da:	f001 fe2b 	bl	8005e34 <vPortFree>
 80041de:	e001      	b.n	80041e4 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80041e0:	2300      	movs	r3, #0
 80041e2:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d013      	beq.n	8004212 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041ea:	88fa      	ldrh	r2, [r7, #6]
 80041ec:	2300      	movs	r3, #0
 80041ee:	9303      	str	r3, [sp, #12]
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	9302      	str	r3, [sp, #8]
 80041f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041f6:	9301      	str	r3, [sp, #4]
 80041f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	68b9      	ldr	r1, [r7, #8]
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 f80e 	bl	8004222 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8004206:	69f8      	ldr	r0, [r7, #28]
 8004208:	f000 f8a2 	bl	8004350 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800420c:	2301      	movs	r3, #1
 800420e:	61bb      	str	r3, [r7, #24]
 8004210:	e002      	b.n	8004218 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004212:	f04f 33ff 	mov.w	r3, #4294967295
 8004216:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8004218:	69bb      	ldr	r3, [r7, #24]
    }
 800421a:	4618      	mov	r0, r3
 800421c:	3720      	adds	r7, #32
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}

08004222 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b088      	sub	sp, #32
 8004226:	af00      	add	r7, sp, #0
 8004228:	60f8      	str	r0, [r7, #12]
 800422a:	60b9      	str	r1, [r7, #8]
 800422c:	607a      	str	r2, [r7, #4]
 800422e:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004232:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	461a      	mov	r2, r3
 800423a:	21a5      	movs	r1, #165	@ 0xa5
 800423c:	f001 ff1a 	bl	8006074 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004240:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004242:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800424a:	3b01      	subs	r3, #1
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4413      	add	r3, r2
 8004250:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	f023 0307 	bic.w	r3, r3, #7
 8004258:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	2b00      	cmp	r3, #0
 8004262:	d00b      	beq.n	800427c <prvInitialiseNewTask+0x5a>
        __asm volatile
 8004264:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004268:	f383 8811 	msr	BASEPRI, r3
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	617b      	str	r3, [r7, #20]
    }
 8004276:	bf00      	nop
 8004278:	bf00      	nop
 800427a:	e7fd      	b.n	8004278 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d01f      	beq.n	80042c2 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004282:	2300      	movs	r3, #0
 8004284:	61fb      	str	r3, [r7, #28]
 8004286:	e012      	b.n	80042ae <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004288:	68ba      	ldr	r2, [r7, #8]
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	4413      	add	r3, r2
 800428e:	7819      	ldrb	r1, [r3, #0]
 8004290:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	4413      	add	r3, r2
 8004296:	3334      	adds	r3, #52	@ 0x34
 8004298:	460a      	mov	r2, r1
 800429a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800429c:	68ba      	ldr	r2, [r7, #8]
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	4413      	add	r3, r2
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d006      	beq.n	80042b6 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	3301      	adds	r3, #1
 80042ac:	61fb      	str	r3, [r7, #28]
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	2b09      	cmp	r3, #9
 80042b2:	d9e9      	bls.n	8004288 <prvInitialiseNewTask+0x66>
 80042b4:	e000      	b.n	80042b8 <prvInitialiseNewTask+0x96>
            {
                break;
 80042b6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80042c0:	e003      	b.n	80042ca <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80042c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	d901      	bls.n	80042d4 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042d0:	2304      	movs	r3, #4
 80042d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80042d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042d8:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80042da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042de:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80042e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e2:	2200      	movs	r2, #0
 80042e4:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042e8:	3304      	adds	r3, #4
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff f9e4 	bl	80036b8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042f2:	3318      	adds	r3, #24
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7ff f9df 	bl	80036b8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042fe:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004302:	f1c3 0205 	rsb	r2, r3, #5
 8004306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004308:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800430a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800430e:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8004310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004312:	3350      	adds	r3, #80	@ 0x50
 8004314:	2204      	movs	r2, #4
 8004316:	2100      	movs	r1, #0
 8004318:	4618      	mov	r0, r3
 800431a:	f001 feab 	bl	8006074 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 800431e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004320:	3354      	adds	r3, #84	@ 0x54
 8004322:	2201      	movs	r2, #1
 8004324:	2100      	movs	r1, #0
 8004326:	4618      	mov	r0, r3
 8004328:	f001 fea4 	bl	8006074 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	68f9      	ldr	r1, [r7, #12]
 8004330:	69b8      	ldr	r0, [r7, #24]
 8004332:	f001 fa3f 	bl	80057b4 <pxPortInitialiseStack>
 8004336:	4602      	mov	r2, r0
 8004338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800433a:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800433c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800433e:	2b00      	cmp	r3, #0
 8004340:	d002      	beq.n	8004348 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004344:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004346:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004348:	bf00      	nop
 800434a:	3720      	adds	r7, #32
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8004358:	f001 fb60 	bl	8005a1c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800435c:	4b26      	ldr	r3, [pc, #152]	@ (80043f8 <prvAddNewTaskToReadyList+0xa8>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	3301      	adds	r3, #1
 8004362:	4a25      	ldr	r2, [pc, #148]	@ (80043f8 <prvAddNewTaskToReadyList+0xa8>)
 8004364:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004366:	4b25      	ldr	r3, [pc, #148]	@ (80043fc <prvAddNewTaskToReadyList+0xac>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d109      	bne.n	8004382 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800436e:	4a23      	ldr	r2, [pc, #140]	@ (80043fc <prvAddNewTaskToReadyList+0xac>)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004374:	4b20      	ldr	r3, [pc, #128]	@ (80043f8 <prvAddNewTaskToReadyList+0xa8>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d110      	bne.n	800439e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800437c:	f000 fb8c 	bl	8004a98 <prvInitialiseTaskLists>
 8004380:	e00d      	b.n	800439e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004382:	4b1f      	ldr	r3, [pc, #124]	@ (8004400 <prvAddNewTaskToReadyList+0xb0>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d109      	bne.n	800439e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800438a:	4b1c      	ldr	r3, [pc, #112]	@ (80043fc <prvAddNewTaskToReadyList+0xac>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004394:	429a      	cmp	r2, r3
 8004396:	d802      	bhi.n	800439e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004398:	4a18      	ldr	r2, [pc, #96]	@ (80043fc <prvAddNewTaskToReadyList+0xac>)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800439e:	4b19      	ldr	r3, [pc, #100]	@ (8004404 <prvAddNewTaskToReadyList+0xb4>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	3301      	adds	r3, #1
 80043a4:	4a17      	ldr	r2, [pc, #92]	@ (8004404 <prvAddNewTaskToReadyList+0xb4>)
 80043a6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80043a8:	4b16      	ldr	r3, [pc, #88]	@ (8004404 <prvAddNewTaskToReadyList+0xb4>)
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b4:	2201      	movs	r2, #1
 80043b6:	409a      	lsls	r2, r3
 80043b8:	4b13      	ldr	r3, [pc, #76]	@ (8004408 <prvAddNewTaskToReadyList+0xb8>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4313      	orrs	r3, r2
 80043be:	4a12      	ldr	r2, [pc, #72]	@ (8004408 <prvAddNewTaskToReadyList+0xb8>)
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043c6:	4613      	mov	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4413      	add	r3, r2
 80043cc:	009b      	lsls	r3, r3, #2
 80043ce:	4a0f      	ldr	r2, [pc, #60]	@ (800440c <prvAddNewTaskToReadyList+0xbc>)
 80043d0:	441a      	add	r2, r3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	3304      	adds	r3, #4
 80043d6:	4619      	mov	r1, r3
 80043d8:	4610      	mov	r0, r2
 80043da:	f7ff f97a 	bl	80036d2 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80043de:	f001 fb4f 	bl	8005a80 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80043e2:	4b07      	ldr	r3, [pc, #28]	@ (8004400 <prvAddNewTaskToReadyList+0xb0>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d001      	beq.n	80043ee <prvAddNewTaskToReadyList+0x9e>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043ea:	4b04      	ldr	r3, [pc, #16]	@ (80043fc <prvAddNewTaskToReadyList+0xac>)
 80043ec:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80043ee:	bf00      	nop
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	20000240 	.word	0x20000240
 80043fc:	20000168 	.word	0x20000168
 8004400:	2000024c 	.word	0x2000024c
 8004404:	2000025c 	.word	0x2000025c
 8004408:	20000248 	.word	0x20000248
 800440c:	2000016c 	.word	0x2000016c

08004410 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b086      	sub	sp, #24
 8004414:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8004416:	4b20      	ldr	r3, [pc, #128]	@ (8004498 <vTaskStartScheduler+0x88>)
 8004418:	9301      	str	r3, [sp, #4]
 800441a:	2300      	movs	r3, #0
 800441c:	9300      	str	r3, [sp, #0]
 800441e:	2300      	movs	r3, #0
 8004420:	2282      	movs	r2, #130	@ 0x82
 8004422:	491e      	ldr	r1, [pc, #120]	@ (800449c <vTaskStartScheduler+0x8c>)
 8004424:	481e      	ldr	r0, [pc, #120]	@ (80044a0 <vTaskStartScheduler+0x90>)
 8004426:	f7ff febb 	bl	80041a0 <xTaskCreate>
 800442a:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d102      	bne.n	8004438 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8004432:	f000 fe21 	bl	8005078 <xTimerCreateTimerTask>
 8004436:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2b01      	cmp	r3, #1
 800443c:	d116      	bne.n	800446c <vTaskStartScheduler+0x5c>
        __asm volatile
 800443e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004442:	f383 8811 	msr	BASEPRI, r3
 8004446:	f3bf 8f6f 	isb	sy
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	60bb      	str	r3, [r7, #8]
    }
 8004450:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8004452:	4b14      	ldr	r3, [pc, #80]	@ (80044a4 <vTaskStartScheduler+0x94>)
 8004454:	f04f 32ff 	mov.w	r2, #4294967295
 8004458:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800445a:	4b13      	ldr	r3, [pc, #76]	@ (80044a8 <vTaskStartScheduler+0x98>)
 800445c:	2201      	movs	r2, #1
 800445e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004460:	4b12      	ldr	r3, [pc, #72]	@ (80044ac <vTaskStartScheduler+0x9c>)
 8004462:	2200      	movs	r2, #0
 8004464:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8004466:	f001 fa35 	bl	80058d4 <xPortStartScheduler>
 800446a:	e00f      	b.n	800448c <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004472:	d10b      	bne.n	800448c <vTaskStartScheduler+0x7c>
        __asm volatile
 8004474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004478:	f383 8811 	msr	BASEPRI, r3
 800447c:	f3bf 8f6f 	isb	sy
 8004480:	f3bf 8f4f 	dsb	sy
 8004484:	607b      	str	r3, [r7, #4]
    }
 8004486:	bf00      	nop
 8004488:	bf00      	nop
 800448a:	e7fd      	b.n	8004488 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800448c:	4b08      	ldr	r3, [pc, #32]	@ (80044b0 <vTaskStartScheduler+0xa0>)
 800448e:	681b      	ldr	r3, [r3, #0]
}
 8004490:	bf00      	nop
 8004492:	3710      	adds	r7, #16
 8004494:	46bd      	mov	sp, r7
 8004496:	bd80      	pop	{r7, pc}
 8004498:	20000264 	.word	0x20000264
 800449c:	080062cc 	.word	0x080062cc
 80044a0:	08004a75 	.word	0x08004a75
 80044a4:	20000260 	.word	0x20000260
 80044a8:	2000024c 	.word	0x2000024c
 80044ac:	20000244 	.word	0x20000244
 80044b0:	080062fc 	.word	0x080062fc

080044b4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80044b8:	4b04      	ldr	r3, [pc, #16]	@ (80044cc <vTaskSuspendAll+0x18>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3301      	adds	r3, #1
 80044be:	4a03      	ldr	r2, [pc, #12]	@ (80044cc <vTaskSuspendAll+0x18>)
 80044c0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80044c2:	bf00      	nop
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	20000268 	.word	0x20000268

080044d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80044d6:	2300      	movs	r3, #0
 80044d8:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80044da:	2300      	movs	r3, #0
 80044dc:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80044de:	4b3c      	ldr	r3, [pc, #240]	@ (80045d0 <xTaskResumeAll+0x100>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d10b      	bne.n	80044fe <xTaskResumeAll+0x2e>
        __asm volatile
 80044e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ea:	f383 8811 	msr	BASEPRI, r3
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	603b      	str	r3, [r7, #0]
    }
 80044f8:	bf00      	nop
 80044fa:	bf00      	nop
 80044fc:	e7fd      	b.n	80044fa <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80044fe:	f001 fa8d 	bl	8005a1c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004502:	4b33      	ldr	r3, [pc, #204]	@ (80045d0 <xTaskResumeAll+0x100>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	3b01      	subs	r3, #1
 8004508:	4a31      	ldr	r2, [pc, #196]	@ (80045d0 <xTaskResumeAll+0x100>)
 800450a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800450c:	4b30      	ldr	r3, [pc, #192]	@ (80045d0 <xTaskResumeAll+0x100>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d155      	bne.n	80045c0 <xTaskResumeAll+0xf0>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004514:	4b2f      	ldr	r3, [pc, #188]	@ (80045d4 <xTaskResumeAll+0x104>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d051      	beq.n	80045c0 <xTaskResumeAll+0xf0>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800451c:	e02e      	b.n	800457c <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800451e:	4b2e      	ldr	r3, [pc, #184]	@ (80045d8 <xTaskResumeAll+0x108>)
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3318      	adds	r3, #24
 800452a:	4618      	mov	r0, r3
 800452c:	f7ff f92e 	bl	800378c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	3304      	adds	r3, #4
 8004534:	4618      	mov	r0, r3
 8004536:	f7ff f929 	bl	800378c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453e:	2201      	movs	r2, #1
 8004540:	409a      	lsls	r2, r3
 8004542:	4b26      	ldr	r3, [pc, #152]	@ (80045dc <xTaskResumeAll+0x10c>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4313      	orrs	r3, r2
 8004548:	4a24      	ldr	r2, [pc, #144]	@ (80045dc <xTaskResumeAll+0x10c>)
 800454a:	6013      	str	r3, [r2, #0]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004550:	4613      	mov	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	009b      	lsls	r3, r3, #2
 8004558:	4a21      	ldr	r2, [pc, #132]	@ (80045e0 <xTaskResumeAll+0x110>)
 800455a:	441a      	add	r2, r3
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	3304      	adds	r3, #4
 8004560:	4619      	mov	r1, r3
 8004562:	4610      	mov	r0, r2
 8004564:	f7ff f8b5 	bl	80036d2 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800456c:	4b1d      	ldr	r3, [pc, #116]	@ (80045e4 <xTaskResumeAll+0x114>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004572:	429a      	cmp	r2, r3
 8004574:	d302      	bcc.n	800457c <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 8004576:	4b1c      	ldr	r3, [pc, #112]	@ (80045e8 <xTaskResumeAll+0x118>)
 8004578:	2201      	movs	r2, #1
 800457a:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800457c:	4b16      	ldr	r3, [pc, #88]	@ (80045d8 <xTaskResumeAll+0x108>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d1cc      	bne.n	800451e <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800458a:	f000 fb03 	bl	8004b94 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800458e:	4b17      	ldr	r3, [pc, #92]	@ (80045ec <xTaskResumeAll+0x11c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d010      	beq.n	80045bc <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800459a:	f000 f839 	bl	8004610 <xTaskIncrementTick>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 80045a4:	4b10      	ldr	r3, [pc, #64]	@ (80045e8 <xTaskResumeAll+0x118>)
 80045a6:	2201      	movs	r2, #1
 80045a8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	3b01      	subs	r3, #1
 80045ae:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1f1      	bne.n	800459a <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 80045b6:	4b0d      	ldr	r3, [pc, #52]	@ (80045ec <xTaskResumeAll+0x11c>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80045bc:	4b0a      	ldr	r3, [pc, #40]	@ (80045e8 <xTaskResumeAll+0x118>)
 80045be:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80045c0:	f001 fa5e 	bl	8005a80 <vPortExitCritical>

    return xAlreadyYielded;
 80045c4:	687b      	ldr	r3, [r7, #4]
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	20000268 	.word	0x20000268
 80045d4:	20000240 	.word	0x20000240
 80045d8:	20000200 	.word	0x20000200
 80045dc:	20000248 	.word	0x20000248
 80045e0:	2000016c 	.word	0x2000016c
 80045e4:	20000168 	.word	0x20000168
 80045e8:	20000254 	.word	0x20000254
 80045ec:	20000250 	.word	0x20000250

080045f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80045f6:	4b05      	ldr	r3, [pc, #20]	@ (800460c <xTaskGetTickCount+0x1c>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80045fc:	687b      	ldr	r3, [r7, #4]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	20000244 	.word	0x20000244

08004610 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004616:	2300      	movs	r3, #0
 8004618:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800461a:	4b3f      	ldr	r3, [pc, #252]	@ (8004718 <xTaskIncrementTick+0x108>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d170      	bne.n	8004704 <xTaskIncrementTick+0xf4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004622:	4b3e      	ldr	r3, [pc, #248]	@ (800471c <xTaskIncrementTick+0x10c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	3301      	adds	r3, #1
 8004628:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800462a:	4a3c      	ldr	r2, [pc, #240]	@ (800471c <xTaskIncrementTick+0x10c>)
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d121      	bne.n	800467a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8004636:	4b3a      	ldr	r3, [pc, #232]	@ (8004720 <xTaskIncrementTick+0x110>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d00b      	beq.n	8004658 <xTaskIncrementTick+0x48>
        __asm volatile
 8004640:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004644:	f383 8811 	msr	BASEPRI, r3
 8004648:	f3bf 8f6f 	isb	sy
 800464c:	f3bf 8f4f 	dsb	sy
 8004650:	603b      	str	r3, [r7, #0]
    }
 8004652:	bf00      	nop
 8004654:	bf00      	nop
 8004656:	e7fd      	b.n	8004654 <xTaskIncrementTick+0x44>
 8004658:	4b31      	ldr	r3, [pc, #196]	@ (8004720 <xTaskIncrementTick+0x110>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	4b31      	ldr	r3, [pc, #196]	@ (8004724 <xTaskIncrementTick+0x114>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	4a2f      	ldr	r2, [pc, #188]	@ (8004720 <xTaskIncrementTick+0x110>)
 8004664:	6013      	str	r3, [r2, #0]
 8004666:	4a2f      	ldr	r2, [pc, #188]	@ (8004724 <xTaskIncrementTick+0x114>)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6013      	str	r3, [r2, #0]
 800466c:	4b2e      	ldr	r3, [pc, #184]	@ (8004728 <xTaskIncrementTick+0x118>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	3301      	adds	r3, #1
 8004672:	4a2d      	ldr	r2, [pc, #180]	@ (8004728 <xTaskIncrementTick+0x118>)
 8004674:	6013      	str	r3, [r2, #0]
 8004676:	f000 fa8d 	bl	8004b94 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800467a:	4b2c      	ldr	r3, [pc, #176]	@ (800472c <xTaskIncrementTick+0x11c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	429a      	cmp	r2, r3
 8004682:	d344      	bcc.n	800470e <xTaskIncrementTick+0xfe>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004684:	4b26      	ldr	r3, [pc, #152]	@ (8004720 <xTaskIncrementTick+0x110>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d104      	bne.n	8004698 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800468e:	4b27      	ldr	r3, [pc, #156]	@ (800472c <xTaskIncrementTick+0x11c>)
 8004690:	f04f 32ff 	mov.w	r2, #4294967295
 8004694:	601a      	str	r2, [r3, #0]
                    break;
 8004696:	e03a      	b.n	800470e <xTaskIncrementTick+0xfe>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004698:	4b21      	ldr	r3, [pc, #132]	@ (8004720 <xTaskIncrementTick+0x110>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d203      	bcs.n	80046b8 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80046b0:	4a1e      	ldr	r2, [pc, #120]	@ (800472c <xTaskIncrementTick+0x11c>)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80046b6:	e02a      	b.n	800470e <xTaskIncrementTick+0xfe>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	3304      	adds	r3, #4
 80046bc:	4618      	mov	r0, r3
 80046be:	f7ff f865 	bl	800378c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d004      	beq.n	80046d4 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	3318      	adds	r3, #24
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7ff f85c 	bl	800378c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80046d4:	68bb      	ldr	r3, [r7, #8]
 80046d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046d8:	2201      	movs	r2, #1
 80046da:	409a      	lsls	r2, r3
 80046dc:	4b14      	ldr	r3, [pc, #80]	@ (8004730 <xTaskIncrementTick+0x120>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	4a13      	ldr	r2, [pc, #76]	@ (8004730 <xTaskIncrementTick+0x120>)
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046ea:	4613      	mov	r3, r2
 80046ec:	009b      	lsls	r3, r3, #2
 80046ee:	4413      	add	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	4a10      	ldr	r2, [pc, #64]	@ (8004734 <xTaskIncrementTick+0x124>)
 80046f4:	441a      	add	r2, r3
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	3304      	adds	r3, #4
 80046fa:	4619      	mov	r1, r3
 80046fc:	4610      	mov	r0, r2
 80046fe:	f7fe ffe8 	bl	80036d2 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004702:	e7bf      	b.n	8004684 <xTaskIncrementTick+0x74>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004704:	4b0c      	ldr	r3, [pc, #48]	@ (8004738 <xTaskIncrementTick+0x128>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3301      	adds	r3, #1
 800470a:	4a0b      	ldr	r2, [pc, #44]	@ (8004738 <xTaskIncrementTick+0x128>)
 800470c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800470e:	697b      	ldr	r3, [r7, #20]
}
 8004710:	4618      	mov	r0, r3
 8004712:	3718      	adds	r7, #24
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	20000268 	.word	0x20000268
 800471c:	20000244 	.word	0x20000244
 8004720:	200001f8 	.word	0x200001f8
 8004724:	200001fc 	.word	0x200001fc
 8004728:	20000258 	.word	0x20000258
 800472c:	20000260 	.word	0x20000260
 8004730:	20000248 	.word	0x20000248
 8004734:	2000016c 	.word	0x2000016c
 8004738:	20000250 	.word	0x20000250

0800473c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004742:	4b27      	ldr	r3, [pc, #156]	@ (80047e0 <vTaskSwitchContext+0xa4>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d003      	beq.n	8004752 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800474a:	4b26      	ldr	r3, [pc, #152]	@ (80047e4 <vTaskSwitchContext+0xa8>)
 800474c:	2201      	movs	r2, #1
 800474e:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004750:	e040      	b.n	80047d4 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8004752:	4b24      	ldr	r3, [pc, #144]	@ (80047e4 <vTaskSwitchContext+0xa8>)
 8004754:	2200      	movs	r2, #0
 8004756:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004758:	4b23      	ldr	r3, [pc, #140]	@ (80047e8 <vTaskSwitchContext+0xac>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	fab3 f383 	clz	r3, r3
 8004764:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004766:	7afb      	ldrb	r3, [r7, #11]
 8004768:	f1c3 031f 	rsb	r3, r3, #31
 800476c:	617b      	str	r3, [r7, #20]
 800476e:	491f      	ldr	r1, [pc, #124]	@ (80047ec <vTaskSwitchContext+0xb0>)
 8004770:	697a      	ldr	r2, [r7, #20]
 8004772:	4613      	mov	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	440b      	add	r3, r1
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10b      	bne.n	800479a <vTaskSwitchContext+0x5e>
        __asm volatile
 8004782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004786:	f383 8811 	msr	BASEPRI, r3
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	607b      	str	r3, [r7, #4]
    }
 8004794:	bf00      	nop
 8004796:	bf00      	nop
 8004798:	e7fd      	b.n	8004796 <vTaskSwitchContext+0x5a>
 800479a:	697a      	ldr	r2, [r7, #20]
 800479c:	4613      	mov	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4a11      	ldr	r2, [pc, #68]	@ (80047ec <vTaskSwitchContext+0xb0>)
 80047a6:	4413      	add	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	685a      	ldr	r2, [r3, #4]
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	605a      	str	r2, [r3, #4]
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	3308      	adds	r3, #8
 80047bc:	429a      	cmp	r2, r3
 80047be:	d104      	bne.n	80047ca <vTaskSwitchContext+0x8e>
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	605a      	str	r2, [r3, #4]
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	4a07      	ldr	r2, [pc, #28]	@ (80047f0 <vTaskSwitchContext+0xb4>)
 80047d2:	6013      	str	r3, [r2, #0]
}
 80047d4:	bf00      	nop
 80047d6:	371c      	adds	r7, #28
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	20000268 	.word	0x20000268
 80047e4:	20000254 	.word	0x20000254
 80047e8:	20000248 	.word	0x20000248
 80047ec:	2000016c 	.word	0x2000016c
 80047f0:	20000168 	.word	0x20000168

080047f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10b      	bne.n	800481c <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	60fb      	str	r3, [r7, #12]
    }
 8004816:	bf00      	nop
 8004818:	bf00      	nop
 800481a:	e7fd      	b.n	8004818 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800481c:	4b07      	ldr	r3, [pc, #28]	@ (800483c <vTaskPlaceOnEventList+0x48>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	3318      	adds	r3, #24
 8004822:	4619      	mov	r1, r3
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7fe ff78 	bl	800371a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800482a:	2101      	movs	r1, #1
 800482c:	6838      	ldr	r0, [r7, #0]
 800482e:	f000 fbbd 	bl	8004fac <prvAddCurrentTaskToDelayedList>
}
 8004832:	bf00      	nop
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	20000168 	.word	0x20000168

08004840 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10b      	bne.n	800486a <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8004852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004856:	f383 8811 	msr	BASEPRI, r3
 800485a:	f3bf 8f6f 	isb	sy
 800485e:	f3bf 8f4f 	dsb	sy
 8004862:	617b      	str	r3, [r7, #20]
    }
 8004864:	bf00      	nop
 8004866:	bf00      	nop
 8004868:	e7fd      	b.n	8004866 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800486a:	4b0a      	ldr	r3, [pc, #40]	@ (8004894 <vTaskPlaceOnEventListRestricted+0x54>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	3318      	adds	r3, #24
 8004870:	4619      	mov	r1, r3
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f7fe ff2d 	bl	80036d2 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d002      	beq.n	8004884 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 800487e:	f04f 33ff 	mov.w	r3, #4294967295
 8004882:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004884:	6879      	ldr	r1, [r7, #4]
 8004886:	68b8      	ldr	r0, [r7, #8]
 8004888:	f000 fb90 	bl	8004fac <prvAddCurrentTaskToDelayedList>
    }
 800488c:	bf00      	nop
 800488e:	3718      	adds	r7, #24
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	20000168 	.word	0x20000168

08004898 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10b      	bne.n	80048c6 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 80048ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	60fb      	str	r3, [r7, #12]
    }
 80048c0:	bf00      	nop
 80048c2:	bf00      	nop
 80048c4:	e7fd      	b.n	80048c2 <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	3318      	adds	r3, #24
 80048ca:	4618      	mov	r0, r3
 80048cc:	f7fe ff5e 	bl	800378c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004948 <xTaskRemoveFromEventList+0xb0>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d11c      	bne.n	8004912 <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	3304      	adds	r3, #4
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fe ff55 	bl	800378c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e6:	2201      	movs	r2, #1
 80048e8:	409a      	lsls	r2, r3
 80048ea:	4b18      	ldr	r3, [pc, #96]	@ (800494c <xTaskRemoveFromEventList+0xb4>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	4a16      	ldr	r2, [pc, #88]	@ (800494c <xTaskRemoveFromEventList+0xb4>)
 80048f2:	6013      	str	r3, [r2, #0]
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048f8:	4613      	mov	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4a13      	ldr	r2, [pc, #76]	@ (8004950 <xTaskRemoveFromEventList+0xb8>)
 8004902:	441a      	add	r2, r3
 8004904:	693b      	ldr	r3, [r7, #16]
 8004906:	3304      	adds	r3, #4
 8004908:	4619      	mov	r1, r3
 800490a:	4610      	mov	r0, r2
 800490c:	f7fe fee1 	bl	80036d2 <vListInsertEnd>
 8004910:	e005      	b.n	800491e <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	3318      	adds	r3, #24
 8004916:	4619      	mov	r1, r3
 8004918:	480e      	ldr	r0, [pc, #56]	@ (8004954 <xTaskRemoveFromEventList+0xbc>)
 800491a:	f7fe feda 	bl	80036d2 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004922:	4b0d      	ldr	r3, [pc, #52]	@ (8004958 <xTaskRemoveFromEventList+0xc0>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004928:	429a      	cmp	r2, r3
 800492a:	d905      	bls.n	8004938 <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800492c:	2301      	movs	r3, #1
 800492e:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004930:	4b0a      	ldr	r3, [pc, #40]	@ (800495c <xTaskRemoveFromEventList+0xc4>)
 8004932:	2201      	movs	r2, #1
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	e001      	b.n	800493c <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 8004938:	2300      	movs	r3, #0
 800493a:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800493c:	697b      	ldr	r3, [r7, #20]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3718      	adds	r7, #24
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	20000268 	.word	0x20000268
 800494c:	20000248 	.word	0x20000248
 8004950:	2000016c 	.word	0x2000016c
 8004954:	20000200 	.word	0x20000200
 8004958:	20000168 	.word	0x20000168
 800495c:	20000254 	.word	0x20000254

08004960 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004968:	4b06      	ldr	r3, [pc, #24]	@ (8004984 <vTaskInternalSetTimeOutState+0x24>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004970:	4b05      	ldr	r3, [pc, #20]	@ (8004988 <vTaskInternalSetTimeOutState+0x28>)
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	605a      	str	r2, [r3, #4]
}
 8004978:	bf00      	nop
 800497a:	370c      	adds	r7, #12
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	20000258 	.word	0x20000258
 8004988:	20000244 	.word	0x20000244

0800498c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b088      	sub	sp, #32
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10b      	bne.n	80049b4 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 800499c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a0:	f383 8811 	msr	BASEPRI, r3
 80049a4:	f3bf 8f6f 	isb	sy
 80049a8:	f3bf 8f4f 	dsb	sy
 80049ac:	613b      	str	r3, [r7, #16]
    }
 80049ae:	bf00      	nop
 80049b0:	bf00      	nop
 80049b2:	e7fd      	b.n	80049b0 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d10b      	bne.n	80049d2 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80049ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	60fb      	str	r3, [r7, #12]
    }
 80049cc:	bf00      	nop
 80049ce:	bf00      	nop
 80049d0:	e7fd      	b.n	80049ce <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80049d2:	f001 f823 	bl	8005a1c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80049d6:	4b1f      	ldr	r3, [pc, #124]	@ (8004a54 <xTaskCheckForTimeOut+0xc8>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	69ba      	ldr	r2, [r7, #24]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ee:	d102      	bne.n	80049f6 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80049f0:	2300      	movs	r3, #0
 80049f2:	61fb      	str	r3, [r7, #28]
 80049f4:	e026      	b.n	8004a44 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	4b17      	ldr	r3, [pc, #92]	@ (8004a58 <xTaskCheckForTimeOut+0xcc>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d00a      	beq.n	8004a18 <xTaskCheckForTimeOut+0x8c>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d305      	bcc.n	8004a18 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]
 8004a16:	e015      	b.n	8004a44 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	697a      	ldr	r2, [r7, #20]
 8004a1e:	429a      	cmp	r2, r3
 8004a20:	d20b      	bcs.n	8004a3a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	1ad2      	subs	r2, r2, r3
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f7ff ff96 	bl	8004960 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8004a34:	2300      	movs	r3, #0
 8004a36:	61fb      	str	r3, [r7, #28]
 8004a38:	e004      	b.n	8004a44 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8004a40:	2301      	movs	r3, #1
 8004a42:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8004a44:	f001 f81c 	bl	8005a80 <vPortExitCritical>

    return xReturn;
 8004a48:	69fb      	ldr	r3, [r7, #28]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3720      	adds	r7, #32
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	20000244 	.word	0x20000244
 8004a58:	20000258 	.word	0x20000258

08004a5c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a5c:	b480      	push	{r7}
 8004a5e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8004a60:	4b03      	ldr	r3, [pc, #12]	@ (8004a70 <vTaskMissedYield+0x14>)
 8004a62:	2201      	movs	r2, #1
 8004a64:	601a      	str	r2, [r3, #0]
}
 8004a66:	bf00      	nop
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	20000254 	.word	0x20000254

08004a74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004a7c:	f000 f84c 	bl	8004b18 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8004a80:	4b04      	ldr	r3, [pc, #16]	@ (8004a94 <prvIdleTask+0x20>)
 8004a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004a90:	bf00      	nop
 8004a92:	e7f3      	b.n	8004a7c <prvIdleTask+0x8>
 8004a94:	e000ed04 	.word	0xe000ed04

08004a98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	607b      	str	r3, [r7, #4]
 8004aa2:	e00c      	b.n	8004abe <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	4413      	add	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4a12      	ldr	r2, [pc, #72]	@ (8004af8 <prvInitialiseTaskLists+0x60>)
 8004ab0:	4413      	add	r3, r2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f7fe fde0 	bl	8003678 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3301      	adds	r3, #1
 8004abc:	607b      	str	r3, [r7, #4]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	d9ef      	bls.n	8004aa4 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004ac4:	480d      	ldr	r0, [pc, #52]	@ (8004afc <prvInitialiseTaskLists+0x64>)
 8004ac6:	f7fe fdd7 	bl	8003678 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004aca:	480d      	ldr	r0, [pc, #52]	@ (8004b00 <prvInitialiseTaskLists+0x68>)
 8004acc:	f7fe fdd4 	bl	8003678 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004ad0:	480c      	ldr	r0, [pc, #48]	@ (8004b04 <prvInitialiseTaskLists+0x6c>)
 8004ad2:	f7fe fdd1 	bl	8003678 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8004ad6:	480c      	ldr	r0, [pc, #48]	@ (8004b08 <prvInitialiseTaskLists+0x70>)
 8004ad8:	f7fe fdce 	bl	8003678 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8004adc:	480b      	ldr	r0, [pc, #44]	@ (8004b0c <prvInitialiseTaskLists+0x74>)
 8004ade:	f7fe fdcb 	bl	8003678 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8004b10 <prvInitialiseTaskLists+0x78>)
 8004ae4:	4a05      	ldr	r2, [pc, #20]	@ (8004afc <prvInitialiseTaskLists+0x64>)
 8004ae6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8004b14 <prvInitialiseTaskLists+0x7c>)
 8004aea:	4a05      	ldr	r2, [pc, #20]	@ (8004b00 <prvInitialiseTaskLists+0x68>)
 8004aec:	601a      	str	r2, [r3, #0]
}
 8004aee:	bf00      	nop
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	2000016c 	.word	0x2000016c
 8004afc:	200001d0 	.word	0x200001d0
 8004b00:	200001e4 	.word	0x200001e4
 8004b04:	20000200 	.word	0x20000200
 8004b08:	20000214 	.word	0x20000214
 8004b0c:	2000022c 	.word	0x2000022c
 8004b10:	200001f8 	.word	0x200001f8
 8004b14:	200001fc 	.word	0x200001fc

08004b18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b1e:	e019      	b.n	8004b54 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8004b20:	f000 ff7c 	bl	8005a1c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b24:	4b10      	ldr	r3, [pc, #64]	@ (8004b68 <prvCheckTasksWaitingTermination+0x50>)
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	3304      	adds	r3, #4
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fe fe2b 	bl	800378c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004b36:	4b0d      	ldr	r3, [pc, #52]	@ (8004b6c <prvCheckTasksWaitingTermination+0x54>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	4a0b      	ldr	r2, [pc, #44]	@ (8004b6c <prvCheckTasksWaitingTermination+0x54>)
 8004b3e:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8004b40:	4b0b      	ldr	r3, [pc, #44]	@ (8004b70 <prvCheckTasksWaitingTermination+0x58>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3b01      	subs	r3, #1
 8004b46:	4a0a      	ldr	r2, [pc, #40]	@ (8004b70 <prvCheckTasksWaitingTermination+0x58>)
 8004b48:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8004b4a:	f000 ff99 	bl	8005a80 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 f810 	bl	8004b74 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b54:	4b06      	ldr	r3, [pc, #24]	@ (8004b70 <prvCheckTasksWaitingTermination+0x58>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1e1      	bne.n	8004b20 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8004b5c:	bf00      	nop
 8004b5e:	bf00      	nop
 8004b60:	3708      	adds	r7, #8
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	20000214 	.word	0x20000214
 8004b6c:	20000240 	.word	0x20000240
 8004b70:	20000228 	.word	0x20000228

08004b74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b80:	4618      	mov	r0, r3
 8004b82:	f001 f957 	bl	8005e34 <vPortFree>
                vPortFree( pxTCB );
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f001 f954 	bl	8005e34 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004b8c:	bf00      	nop
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b98:	4b0a      	ldr	r3, [pc, #40]	@ (8004bc4 <prvResetNextTaskUnblockTime+0x30>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d104      	bne.n	8004bac <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004ba2:	4b09      	ldr	r3, [pc, #36]	@ (8004bc8 <prvResetNextTaskUnblockTime+0x34>)
 8004ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba8:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8004baa:	e005      	b.n	8004bb8 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004bac:	4b05      	ldr	r3, [pc, #20]	@ (8004bc4 <prvResetNextTaskUnblockTime+0x30>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a04      	ldr	r2, [pc, #16]	@ (8004bc8 <prvResetNextTaskUnblockTime+0x34>)
 8004bb6:	6013      	str	r3, [r2, #0]
}
 8004bb8:	bf00      	nop
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	200001f8 	.word	0x200001f8
 8004bc8:	20000260 	.word	0x20000260

08004bcc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8004bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8004c00 <xTaskGetSchedulerState+0x34>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d102      	bne.n	8004be0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	607b      	str	r3, [r7, #4]
 8004bde:	e008      	b.n	8004bf2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004be0:	4b08      	ldr	r3, [pc, #32]	@ (8004c04 <xTaskGetSchedulerState+0x38>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d102      	bne.n	8004bee <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8004be8:	2302      	movs	r3, #2
 8004bea:	607b      	str	r3, [r7, #4]
 8004bec:	e001      	b.n	8004bf2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8004bf2:	687b      	ldr	r3, [r7, #4]
    }
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	2000024c 	.word	0x2000024c
 8004c04:	20000268 	.word	0x20000268

08004c08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004c14:	2300      	movs	r3, #0
 8004c16:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d065      	beq.n	8004cea <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004c1e:	4b35      	ldr	r3, [pc, #212]	@ (8004cf4 <xTaskPriorityDisinherit+0xec>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	693a      	ldr	r2, [r7, #16]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d00b      	beq.n	8004c40 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8004c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c2c:	f383 8811 	msr	BASEPRI, r3
 8004c30:	f3bf 8f6f 	isb	sy
 8004c34:	f3bf 8f4f 	dsb	sy
 8004c38:	60fb      	str	r3, [r7, #12]
    }
 8004c3a:	bf00      	nop
 8004c3c:	bf00      	nop
 8004c3e:	e7fd      	b.n	8004c3c <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10b      	bne.n	8004c60 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8004c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c4c:	f383 8811 	msr	BASEPRI, r3
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	60bb      	str	r3, [r7, #8]
    }
 8004c5a:	bf00      	nop
 8004c5c:	bf00      	nop
 8004c5e:	e7fd      	b.n	8004c5c <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8004c60:	693b      	ldr	r3, [r7, #16]
 8004c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c64:	1e5a      	subs	r2, r3, #1
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d039      	beq.n	8004cea <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d135      	bne.n	8004cea <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	3304      	adds	r3, #4
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fe fd82 	bl	800378c <uxListRemove>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10a      	bne.n	8004ca4 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c92:	2201      	movs	r2, #1
 8004c94:	fa02 f303 	lsl.w	r3, r2, r3
 8004c98:	43da      	mvns	r2, r3
 8004c9a:	4b17      	ldr	r3, [pc, #92]	@ (8004cf8 <xTaskPriorityDisinherit+0xf0>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	4a15      	ldr	r2, [pc, #84]	@ (8004cf8 <xTaskPriorityDisinherit+0xf0>)
 8004ca2:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb0:	f1c3 0205 	rsb	r2, r3, #5
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	409a      	lsls	r2, r3
 8004cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8004cf8 <xTaskPriorityDisinherit+0xf0>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	4a0c      	ldr	r2, [pc, #48]	@ (8004cf8 <xTaskPriorityDisinherit+0xf0>)
 8004cc8:	6013      	str	r3, [r2, #0]
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cce:	4613      	mov	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	009b      	lsls	r3, r3, #2
 8004cd6:	4a09      	ldr	r2, [pc, #36]	@ (8004cfc <xTaskPriorityDisinherit+0xf4>)
 8004cd8:	441a      	add	r2, r3
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	3304      	adds	r3, #4
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	f7fe fcf6 	bl	80036d2 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8004cea:	697b      	ldr	r3, [r7, #20]
    }
 8004cec:	4618      	mov	r0, r3
 8004cee:	3718      	adds	r7, #24
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	20000168 	.word	0x20000168
 8004cf8:	20000248 	.word	0x20000248
 8004cfc:	2000016c 	.word	0x2000016c

08004d00 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b086      	sub	sp, #24
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	607a      	str	r2, [r7, #4]
 8004d0c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00b      	beq.n	8004d2c <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 8004d14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	613b      	str	r3, [r7, #16]
    }
 8004d26:	bf00      	nop
 8004d28:	bf00      	nop
 8004d2a:	e7fd      	b.n	8004d28 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8004d2c:	f000 fe76 	bl	8005a1c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004d30:	4b31      	ldr	r3, [pc, #196]	@ (8004df8 <xTaskGenericNotifyWait+0xf8>)
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4413      	add	r3, r2
 8004d38:	3354      	adds	r3, #84	@ 0x54
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d022      	beq.n	8004d88 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8004d42:	4b2d      	ldr	r3, [pc, #180]	@ (8004df8 <xTaskGenericNotifyWait+0xf8>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68fa      	ldr	r2, [r7, #12]
 8004d48:	3214      	adds	r2, #20
 8004d4a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	43d2      	mvns	r2, r2
 8004d52:	4011      	ands	r1, r2
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	3214      	adds	r2, #20
 8004d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8004d5c:	4b26      	ldr	r3, [pc, #152]	@ (8004df8 <xTaskGenericNotifyWait+0xf8>)
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	4413      	add	r3, r2
 8004d64:	3354      	adds	r3, #84	@ 0x54
 8004d66:	2201      	movs	r2, #1
 8004d68:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00b      	beq.n	8004d88 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004d70:	2101      	movs	r1, #1
 8004d72:	6a38      	ldr	r0, [r7, #32]
 8004d74:	f000 f91a 	bl	8004fac <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8004d78:	4b20      	ldr	r3, [pc, #128]	@ (8004dfc <xTaskGenericNotifyWait+0xfc>)
 8004d7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	f3bf 8f4f 	dsb	sy
 8004d84:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004d88:	f000 fe7a 	bl	8005a80 <vPortExitCritical>

        taskENTER_CRITICAL();
 8004d8c:	f000 fe46 	bl	8005a1c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <xTaskGenericNotifyWait+0xa6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8004d96:	4b18      	ldr	r3, [pc, #96]	@ (8004df8 <xTaskGenericNotifyWait+0xf8>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	3214      	adds	r2, #20
 8004d9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8004da6:	4b14      	ldr	r3, [pc, #80]	@ (8004df8 <xTaskGenericNotifyWait+0xf8>)
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4413      	add	r3, r2
 8004dae:	3354      	adds	r3, #84	@ 0x54
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d002      	beq.n	8004dbe <xTaskGenericNotifyWait+0xbe>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8004db8:	2300      	movs	r3, #0
 8004dba:	617b      	str	r3, [r7, #20]
 8004dbc:	e00e      	b.n	8004ddc <xTaskGenericNotifyWait+0xdc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8004dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8004df8 <xTaskGenericNotifyWait+0xf8>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	3214      	adds	r2, #20
 8004dc6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	43d2      	mvns	r2, r2
 8004dce:	4011      	ands	r1, r2
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	3214      	adds	r2, #20
 8004dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8004ddc:	4b06      	ldr	r3, [pc, #24]	@ (8004df8 <xTaskGenericNotifyWait+0xf8>)
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	4413      	add	r3, r2
 8004de4:	3354      	adds	r3, #84	@ 0x54
 8004de6:	2200      	movs	r2, #0
 8004de8:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8004dea:	f000 fe49 	bl	8005a80 <vPortExitCritical>

        return xReturn;
 8004dee:	697b      	ldr	r3, [r7, #20]
    }
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	20000168 	.word	0x20000168
 8004dfc:	e000ed04 	.word	0xe000ed04

08004e00 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08c      	sub	sp, #48	@ 0x30
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	60f8      	str	r0, [r7, #12]
 8004e08:	60b9      	str	r1, [r7, #8]
 8004e0a:	607a      	str	r2, [r7, #4]
 8004e0c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00b      	beq.n	8004e30 <xTaskGenericNotify+0x30>
        __asm volatile
 8004e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e1c:	f383 8811 	msr	BASEPRI, r3
 8004e20:	f3bf 8f6f 	isb	sy
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	623b      	str	r3, [r7, #32]
    }
 8004e2a:	bf00      	nop
 8004e2c:	bf00      	nop
 8004e2e:	e7fd      	b.n	8004e2c <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10b      	bne.n	8004e4e <xTaskGenericNotify+0x4e>
        __asm volatile
 8004e36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e3a:	f383 8811 	msr	BASEPRI, r3
 8004e3e:	f3bf 8f6f 	isb	sy
 8004e42:	f3bf 8f4f 	dsb	sy
 8004e46:	61fb      	str	r3, [r7, #28]
    }
 8004e48:	bf00      	nop
 8004e4a:	bf00      	nop
 8004e4c:	e7fd      	b.n	8004e4a <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	62bb      	str	r3, [r7, #40]	@ 0x28

        taskENTER_CRITICAL();
 8004e52:	f000 fde3 	bl	8005a1c <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8004e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d006      	beq.n	8004e6a <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004e5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e5e:	68ba      	ldr	r2, [r7, #8]
 8004e60:	3214      	adds	r2, #20
 8004e62:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004e66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e68:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004e6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	4413      	add	r3, r2
 8004e70:	3354      	adds	r3, #84	@ 0x54
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004e78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	4413      	add	r3, r2
 8004e7e:	3354      	adds	r3, #84	@ 0x54
 8004e80:	2202      	movs	r2, #2
 8004e82:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8004e84:	78fb      	ldrb	r3, [r7, #3]
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	d83b      	bhi.n	8004f02 <xTaskGenericNotify+0x102>
 8004e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e90 <xTaskGenericNotify+0x90>)
 8004e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e90:	08004f23 	.word	0x08004f23
 8004e94:	08004ea5 	.word	0x08004ea5
 8004e98:	08004ec1 	.word	0x08004ec1
 8004e9c:	08004ed9 	.word	0x08004ed9
 8004ea0:	08004ee7 	.word	0x08004ee7
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	3214      	adds	r2, #20
 8004eaa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	ea42 0103 	orr.w	r1, r2, r3
 8004eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb6:	68ba      	ldr	r2, [r7, #8]
 8004eb8:	3214      	adds	r2, #20
 8004eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004ebe:	e033      	b.n	8004f28 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec2:	68ba      	ldr	r2, [r7, #8]
 8004ec4:	3214      	adds	r2, #20
 8004ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eca:	1c59      	adds	r1, r3, #1
 8004ecc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	3214      	adds	r2, #20
 8004ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004ed6:	e027      	b.n	8004f28 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eda:	68ba      	ldr	r2, [r7, #8]
 8004edc:	3214      	adds	r2, #20
 8004ede:	6879      	ldr	r1, [r7, #4]
 8004ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8004ee4:	e020      	b.n	8004f28 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004ee6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d006      	beq.n	8004efc <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	3214      	adds	r2, #20
 8004ef4:	6879      	ldr	r1, [r7, #4]
 8004ef6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004efa:	e015      	b.n	8004f28 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 8004efc:	2300      	movs	r3, #0
 8004efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    break;
 8004f00:	e012      	b.n	8004f28 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004f02:	4b26      	ldr	r3, [pc, #152]	@ (8004f9c <xTaskGenericNotify+0x19c>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00d      	beq.n	8004f26 <xTaskGenericNotify+0x126>
        __asm volatile
 8004f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f0e:	f383 8811 	msr	BASEPRI, r3
 8004f12:	f3bf 8f6f 	isb	sy
 8004f16:	f3bf 8f4f 	dsb	sy
 8004f1a:	61bb      	str	r3, [r7, #24]
    }
 8004f1c:	bf00      	nop
 8004f1e:	bf00      	nop
 8004f20:	e7fd      	b.n	8004f1e <xTaskGenericNotify+0x11e>
                    break;
 8004f22:	bf00      	nop
 8004f24:	e000      	b.n	8004f28 <xTaskGenericNotify+0x128>

                    break;
 8004f26:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004f28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f2c:	2b01      	cmp	r3, #1
 8004f2e:	d12d      	bne.n	8004f8c <xTaskGenericNotify+0x18c>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f32:	3304      	adds	r3, #4
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7fe fc29 	bl	800378c <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8004f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3e:	2201      	movs	r2, #1
 8004f40:	409a      	lsls	r2, r3
 8004f42:	4b17      	ldr	r3, [pc, #92]	@ (8004fa0 <xTaskGenericNotify+0x1a0>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	4a15      	ldr	r2, [pc, #84]	@ (8004fa0 <xTaskGenericNotify+0x1a0>)
 8004f4a:	6013      	str	r3, [r2, #0]
 8004f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f50:	4613      	mov	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	4413      	add	r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	4a12      	ldr	r2, [pc, #72]	@ (8004fa4 <xTaskGenericNotify+0x1a4>)
 8004f5a:	441a      	add	r2, r3
 8004f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f5e:	3304      	adds	r3, #4
 8004f60:	4619      	mov	r1, r3
 8004f62:	4610      	mov	r0, r2
 8004f64:	f7fe fbb5 	bl	80036d2 <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d00b      	beq.n	8004f88 <xTaskGenericNotify+0x188>
        __asm volatile
 8004f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	617b      	str	r3, [r7, #20]
    }
 8004f82:	bf00      	nop
 8004f84:	bf00      	nop
 8004f86:	e7fd      	b.n	8004f84 <xTaskGenericNotify+0x184>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f88:	4b07      	ldr	r3, [pc, #28]	@ (8004fa8 <xTaskGenericNotify+0x1a8>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004f8c:	f000 fd78 	bl	8005a80 <vPortExitCritical>

        return xReturn;
 8004f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8004f92:	4618      	mov	r0, r3
 8004f94:	3730      	adds	r7, #48	@ 0x30
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	20000244 	.word	0x20000244
 8004fa0:	20000248 	.word	0x20000248
 8004fa4:	2000016c 	.word	0x2000016c
 8004fa8:	20000168 	.word	0x20000168

08004fac <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004fb6:	4b29      	ldr	r3, [pc, #164]	@ (800505c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fbc:	4b28      	ldr	r3, [pc, #160]	@ (8005060 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	3304      	adds	r3, #4
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f7fe fbe2 	bl	800378c <uxListRemove>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10b      	bne.n	8004fe6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004fce:	4b24      	ldr	r3, [pc, #144]	@ (8005060 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fda:	43da      	mvns	r2, r3
 8004fdc:	4b21      	ldr	r3, [pc, #132]	@ (8005064 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	4a20      	ldr	r2, [pc, #128]	@ (8005064 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004fe4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fec:	d10a      	bne.n	8005004 <prvAddCurrentTaskToDelayedList+0x58>
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d007      	beq.n	8005004 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ff4:	4b1a      	ldr	r3, [pc, #104]	@ (8005060 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	3304      	adds	r3, #4
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	481a      	ldr	r0, [pc, #104]	@ (8005068 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004ffe:	f7fe fb68 	bl	80036d2 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005002:	e026      	b.n	8005052 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4413      	add	r3, r2
 800500a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800500c:	4b14      	ldr	r3, [pc, #80]	@ (8005060 <prvAddCurrentTaskToDelayedList+0xb4>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	429a      	cmp	r2, r3
 800501a:	d209      	bcs.n	8005030 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800501c:	4b13      	ldr	r3, [pc, #76]	@ (800506c <prvAddCurrentTaskToDelayedList+0xc0>)
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	4b0f      	ldr	r3, [pc, #60]	@ (8005060 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	3304      	adds	r3, #4
 8005026:	4619      	mov	r1, r3
 8005028:	4610      	mov	r0, r2
 800502a:	f7fe fb76 	bl	800371a <vListInsert>
}
 800502e:	e010      	b.n	8005052 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005030:	4b0f      	ldr	r3, [pc, #60]	@ (8005070 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	4b0a      	ldr	r3, [pc, #40]	@ (8005060 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3304      	adds	r3, #4
 800503a:	4619      	mov	r1, r3
 800503c:	4610      	mov	r0, r2
 800503e:	f7fe fb6c 	bl	800371a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8005042:	4b0c      	ldr	r3, [pc, #48]	@ (8005074 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	429a      	cmp	r2, r3
 800504a:	d202      	bcs.n	8005052 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 800504c:	4a09      	ldr	r2, [pc, #36]	@ (8005074 <prvAddCurrentTaskToDelayedList+0xc8>)
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	6013      	str	r3, [r2, #0]
}
 8005052:	bf00      	nop
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	20000244 	.word	0x20000244
 8005060:	20000168 	.word	0x20000168
 8005064:	20000248 	.word	0x20000248
 8005068:	2000022c 	.word	0x2000022c
 800506c:	200001fc 	.word	0x200001fc
 8005070:	200001f8 	.word	0x200001f8
 8005074:	20000260 	.word	0x20000260

08005078 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 800507e:	2300      	movs	r3, #0
 8005080:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8005082:	f000 fb3f 	bl	8005704 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8005086:	4b12      	ldr	r3, [pc, #72]	@ (80050d0 <xTimerCreateTimerTask+0x58>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00b      	beq.n	80050a6 <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 800508e:	4b11      	ldr	r3, [pc, #68]	@ (80050d4 <xTimerCreateTimerTask+0x5c>)
 8005090:	9301      	str	r3, [sp, #4]
 8005092:	2302      	movs	r3, #2
 8005094:	9300      	str	r3, [sp, #0]
 8005096:	2300      	movs	r3, #0
 8005098:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800509c:	490e      	ldr	r1, [pc, #56]	@ (80050d8 <xTimerCreateTimerTask+0x60>)
 800509e:	480f      	ldr	r0, [pc, #60]	@ (80050dc <xTimerCreateTimerTask+0x64>)
 80050a0:	f7ff f87e 	bl	80041a0 <xTaskCreate>
 80050a4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10b      	bne.n	80050c4 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80050ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b0:	f383 8811 	msr	BASEPRI, r3
 80050b4:	f3bf 8f6f 	isb	sy
 80050b8:	f3bf 8f4f 	dsb	sy
 80050bc:	603b      	str	r3, [r7, #0]
    }
 80050be:	bf00      	nop
 80050c0:	bf00      	nop
 80050c2:	e7fd      	b.n	80050c0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80050c4:	687b      	ldr	r3, [r7, #4]
    }
 80050c6:	4618      	mov	r0, r3
 80050c8:	3708      	adds	r7, #8
 80050ca:	46bd      	mov	sp, r7
 80050cc:	bd80      	pop	{r7, pc}
 80050ce:	bf00      	nop
 80050d0:	2000029c 	.word	0x2000029c
 80050d4:	200002a0 	.word	0x200002a0
 80050d8:	080062d4 	.word	0x080062d4
 80050dc:	080052d5 	.word	0x080052d5

080050e0 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b088      	sub	sp, #32
 80050e4:	af02      	add	r7, sp, #8
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80050ee:	202c      	movs	r0, #44	@ 0x2c
 80050f0:	f000 fdbe 	bl	8005c70 <pvPortMalloc>
 80050f4:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00d      	beq.n	8005118 <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	9301      	str	r3, [sp, #4]
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	9300      	str	r3, [sp, #0]
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	687a      	ldr	r2, [r7, #4]
 8005110:	68b9      	ldr	r1, [r7, #8]
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	f000 f805 	bl	8005122 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 8005118:	697b      	ldr	r3, [r7, #20]
        }
 800511a:	4618      	mov	r0, r3
 800511c:	3718      	adds	r7, #24
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8005122:	b580      	push	{r7, lr}
 8005124:	b086      	sub	sp, #24
 8005126:	af00      	add	r7, sp, #0
 8005128:	60f8      	str	r0, [r7, #12]
 800512a:	60b9      	str	r1, [r7, #8]
 800512c:	607a      	str	r2, [r7, #4]
 800512e:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10b      	bne.n	800514e <prvInitialiseNewTimer+0x2c>
        __asm volatile
 8005136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	617b      	str	r3, [r7, #20]
    }
 8005148:	bf00      	nop
 800514a:	bf00      	nop
 800514c:	e7fd      	b.n	800514a <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 800514e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005150:	2b00      	cmp	r3, #0
 8005152:	d01e      	beq.n	8005192 <prvInitialiseNewTimer+0x70>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8005154:	f000 fad6 	bl	8005704 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 8005158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800515e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8005164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005166:	683a      	ldr	r2, [r7, #0]
 8005168:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800516a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516c:	6a3a      	ldr	r2, [r7, #32]
 800516e:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8005170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005172:	3304      	adds	r3, #4
 8005174:	4618      	mov	r0, r3
 8005176:	f7fe fa9f 	bl	80036b8 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d008      	beq.n	8005192 <prvInitialiseNewTimer+0x70>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8005180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005182:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005186:	f043 0304 	orr.w	r3, r3, #4
 800518a:	b2da      	uxtb	r2, r3
 800518c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8005192:	bf00      	nop
 8005194:	3718      	adds	r7, #24
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
	...

0800519c <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 800519c:	b580      	push	{r7, lr}
 800519e:	b08a      	sub	sp, #40	@ 0x28
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	607a      	str	r2, [r7, #4]
 80051a8:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80051aa:	2300      	movs	r3, #0
 80051ac:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10b      	bne.n	80051cc <xTimerGenericCommand+0x30>
        __asm volatile
 80051b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b8:	f383 8811 	msr	BASEPRI, r3
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	623b      	str	r3, [r7, #32]
    }
 80051c6:	bf00      	nop
 80051c8:	bf00      	nop
 80051ca:	e7fd      	b.n	80051c8 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80051cc:	4b19      	ldr	r3, [pc, #100]	@ (8005234 <xTimerGenericCommand+0x98>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d02a      	beq.n	800522a <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	2b05      	cmp	r3, #5
 80051e4:	dc18      	bgt.n	8005218 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80051e6:	f7ff fcf1 	bl	8004bcc <xTaskGetSchedulerState>
 80051ea:	4603      	mov	r3, r0
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d109      	bne.n	8005204 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80051f0:	4b10      	ldr	r3, [pc, #64]	@ (8005234 <xTimerGenericCommand+0x98>)
 80051f2:	6818      	ldr	r0, [r3, #0]
 80051f4:	f107 0114 	add.w	r1, r7, #20
 80051f8:	2300      	movs	r3, #0
 80051fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051fc:	f7fe fbd2 	bl	80039a4 <xQueueGenericSend>
 8005200:	6278      	str	r0, [r7, #36]	@ 0x24
 8005202:	e012      	b.n	800522a <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005204:	4b0b      	ldr	r3, [pc, #44]	@ (8005234 <xTimerGenericCommand+0x98>)
 8005206:	6818      	ldr	r0, [r3, #0]
 8005208:	f107 0114 	add.w	r1, r7, #20
 800520c:	2300      	movs	r3, #0
 800520e:	2200      	movs	r2, #0
 8005210:	f7fe fbc8 	bl	80039a4 <xQueueGenericSend>
 8005214:	6278      	str	r0, [r7, #36]	@ 0x24
 8005216:	e008      	b.n	800522a <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005218:	4b06      	ldr	r3, [pc, #24]	@ (8005234 <xTimerGenericCommand+0x98>)
 800521a:	6818      	ldr	r0, [r3, #0]
 800521c:	f107 0114 	add.w	r1, r7, #20
 8005220:	2300      	movs	r3, #0
 8005222:	683a      	ldr	r2, [r7, #0]
 8005224:	f7fe fca8 	bl	8003b78 <xQueueGenericSendFromISR>
 8005228:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800522a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800522c:	4618      	mov	r0, r3
 800522e:	3728      	adds	r7, #40	@ 0x28
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	2000029c 	.word	0x2000029c

08005238 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005238:	b580      	push	{r7, lr}
 800523a:	b088      	sub	sp, #32
 800523c:	af02      	add	r7, sp, #8
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005242:	4b23      	ldr	r3, [pc, #140]	@ (80052d0 <prvProcessExpiredTimer+0x98>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	3304      	adds	r3, #4
 8005250:	4618      	mov	r0, r3
 8005252:	f7fe fa9b 	bl	800378c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800525c:	f003 0304 	and.w	r3, r3, #4
 8005260:	2b00      	cmp	r3, #0
 8005262:	d023      	beq.n	80052ac <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	699a      	ldr	r2, [r3, #24]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	18d1      	adds	r1, r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	6978      	ldr	r0, [r7, #20]
 8005272:	f000 f8d5 	bl	8005420 <prvInsertTimerInActiveList>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d020      	beq.n	80052be <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800527c:	2300      	movs	r3, #0
 800527e:	9300      	str	r3, [sp, #0]
 8005280:	2300      	movs	r3, #0
 8005282:	687a      	ldr	r2, [r7, #4]
 8005284:	2100      	movs	r1, #0
 8005286:	6978      	ldr	r0, [r7, #20]
 8005288:	f7ff ff88 	bl	800519c <xTimerGenericCommand>
 800528c:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d114      	bne.n	80052be <prvProcessExpiredTimer+0x86>
        __asm volatile
 8005294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005298:	f383 8811 	msr	BASEPRI, r3
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	60fb      	str	r3, [r7, #12]
    }
 80052a6:	bf00      	nop
 80052a8:	bf00      	nop
 80052aa:	e7fd      	b.n	80052a8 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80052b2:	f023 0301 	bic.w	r3, r3, #1
 80052b6:	b2da      	uxtb	r2, r3
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	6978      	ldr	r0, [r7, #20]
 80052c4:	4798      	blx	r3
    }
 80052c6:	bf00      	nop
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	20000294 	.word	0x20000294

080052d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052dc:	f107 0308 	add.w	r3, r7, #8
 80052e0:	4618      	mov	r0, r3
 80052e2:	f000 f859 	bl	8005398 <prvGetNextExpireTime>
 80052e6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	4619      	mov	r1, r3
 80052ec:	68f8      	ldr	r0, [r7, #12]
 80052ee:	f000 f805 	bl	80052fc <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80052f2:	f000 f8d7 	bl	80054a4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80052f6:	bf00      	nop
 80052f8:	e7f0      	b.n	80052dc <prvTimerTask+0x8>
	...

080052fc <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005306:	f7ff f8d5 	bl	80044b4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800530a:	f107 0308 	add.w	r3, r7, #8
 800530e:	4618      	mov	r0, r3
 8005310:	f000 f866 	bl	80053e0 <prvSampleTimeNow>
 8005314:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d130      	bne.n	800537e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d10a      	bne.n	8005338 <prvProcessTimerOrBlockTask+0x3c>
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	429a      	cmp	r2, r3
 8005328:	d806      	bhi.n	8005338 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800532a:	f7ff f8d1 	bl	80044d0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800532e:	68f9      	ldr	r1, [r7, #12]
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7ff ff81 	bl	8005238 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005336:	e024      	b.n	8005382 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d008      	beq.n	8005350 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800533e:	4b13      	ldr	r3, [pc, #76]	@ (800538c <prvProcessTimerOrBlockTask+0x90>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <prvProcessTimerOrBlockTask+0x50>
 8005348:	2301      	movs	r3, #1
 800534a:	e000      	b.n	800534e <prvProcessTimerOrBlockTask+0x52>
 800534c:	2300      	movs	r3, #0
 800534e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005350:	4b0f      	ldr	r3, [pc, #60]	@ (8005390 <prvProcessTimerOrBlockTask+0x94>)
 8005352:	6818      	ldr	r0, [r3, #0]
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	683a      	ldr	r2, [r7, #0]
 800535c:	4619      	mov	r1, r3
 800535e:	f7fe feeb 	bl	8004138 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8005362:	f7ff f8b5 	bl	80044d0 <xTaskResumeAll>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d10a      	bne.n	8005382 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800536c:	4b09      	ldr	r3, [pc, #36]	@ (8005394 <prvProcessTimerOrBlockTask+0x98>)
 800536e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005372:	601a      	str	r2, [r3, #0]
 8005374:	f3bf 8f4f 	dsb	sy
 8005378:	f3bf 8f6f 	isb	sy
    }
 800537c:	e001      	b.n	8005382 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800537e:	f7ff f8a7 	bl	80044d0 <xTaskResumeAll>
    }
 8005382:	bf00      	nop
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}
 800538a:	bf00      	nop
 800538c:	20000298 	.word	0x20000298
 8005390:	2000029c 	.word	0x2000029c
 8005394:	e000ed04 	.word	0xe000ed04

08005398 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8005398:	b480      	push	{r7}
 800539a:	b085      	sub	sp, #20
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80053a0:	4b0e      	ldr	r3, [pc, #56]	@ (80053dc <prvGetNextExpireTime+0x44>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <prvGetNextExpireTime+0x16>
 80053aa:	2201      	movs	r2, #1
 80053ac:	e000      	b.n	80053b0 <prvGetNextExpireTime+0x18>
 80053ae:	2200      	movs	r2, #0
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d105      	bne.n	80053c8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80053bc:	4b07      	ldr	r3, [pc, #28]	@ (80053dc <prvGetNextExpireTime+0x44>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	60fb      	str	r3, [r7, #12]
 80053c6:	e001      	b.n	80053cc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80053c8:	2300      	movs	r3, #0
 80053ca:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80053cc:	68fb      	ldr	r3, [r7, #12]
    }
 80053ce:	4618      	mov	r0, r3
 80053d0:	3714      	adds	r7, #20
 80053d2:	46bd      	mov	sp, r7
 80053d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	20000294 	.word	0x20000294

080053e0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80053e8:	f7ff f902 	bl	80045f0 <xTaskGetTickCount>
 80053ec:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80053ee:	4b0b      	ldr	r3, [pc, #44]	@ (800541c <prvSampleTimeNow+0x3c>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d205      	bcs.n	8005404 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80053f8:	f000 f91e 	bl	8005638 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	601a      	str	r2, [r3, #0]
 8005402:	e002      	b.n	800540a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800540a:	4a04      	ldr	r2, [pc, #16]	@ (800541c <prvSampleTimeNow+0x3c>)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005410:	68fb      	ldr	r3, [r7, #12]
    }
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}
 800541a:	bf00      	nop
 800541c:	200002a4 	.word	0x200002a4

08005420 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
 800542c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800542e:	2300      	movs	r3, #0
 8005430:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	68fa      	ldr	r2, [r7, #12]
 800543c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800543e:	68ba      	ldr	r2, [r7, #8]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	429a      	cmp	r2, r3
 8005444:	d812      	bhi.n	800546c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	1ad2      	subs	r2, r2, r3
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	429a      	cmp	r2, r3
 8005452:	d302      	bcc.n	800545a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005454:	2301      	movs	r3, #1
 8005456:	617b      	str	r3, [r7, #20]
 8005458:	e01b      	b.n	8005492 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800545a:	4b10      	ldr	r3, [pc, #64]	@ (800549c <prvInsertTimerInActiveList+0x7c>)
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	3304      	adds	r3, #4
 8005462:	4619      	mov	r1, r3
 8005464:	4610      	mov	r0, r2
 8005466:	f7fe f958 	bl	800371a <vListInsert>
 800546a:	e012      	b.n	8005492 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	429a      	cmp	r2, r3
 8005472:	d206      	bcs.n	8005482 <prvInsertTimerInActiveList+0x62>
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	429a      	cmp	r2, r3
 800547a:	d302      	bcc.n	8005482 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 800547c:	2301      	movs	r3, #1
 800547e:	617b      	str	r3, [r7, #20]
 8005480:	e007      	b.n	8005492 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005482:	4b07      	ldr	r3, [pc, #28]	@ (80054a0 <prvInsertTimerInActiveList+0x80>)
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	3304      	adds	r3, #4
 800548a:	4619      	mov	r1, r3
 800548c:	4610      	mov	r0, r2
 800548e:	f7fe f944 	bl	800371a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005492:	697b      	ldr	r3, [r7, #20]
    }
 8005494:	4618      	mov	r0, r3
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}
 800549c:	20000298 	.word	0x20000298
 80054a0:	20000294 	.word	0x20000294

080054a4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b08c      	sub	sp, #48	@ 0x30
 80054a8:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80054aa:	e0b2      	b.n	8005612 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f2c0 80af 	blt.w	8005612 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80054b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d004      	beq.n	80054ca <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054c2:	3304      	adds	r3, #4
 80054c4:	4618      	mov	r0, r3
 80054c6:	f7fe f961 	bl	800378c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80054ca:	1d3b      	adds	r3, r7, #4
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7ff ff87 	bl	80053e0 <prvSampleTimeNow>
 80054d2:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	2b09      	cmp	r3, #9
 80054d8:	f200 8098 	bhi.w	800560c <prvProcessReceivedCommands+0x168>
 80054dc:	a201      	add	r2, pc, #4	@ (adr r2, 80054e4 <prvProcessReceivedCommands+0x40>)
 80054de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e2:	bf00      	nop
 80054e4:	0800550d 	.word	0x0800550d
 80054e8:	0800550d 	.word	0x0800550d
 80054ec:	0800550d 	.word	0x0800550d
 80054f0:	08005583 	.word	0x08005583
 80054f4:	08005597 	.word	0x08005597
 80054f8:	080055e3 	.word	0x080055e3
 80054fc:	0800550d 	.word	0x0800550d
 8005500:	0800550d 	.word	0x0800550d
 8005504:	08005583 	.word	0x08005583
 8005508:	08005597 	.word	0x08005597
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800550c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005512:	f043 0301 	orr.w	r3, r3, #1
 8005516:	b2da      	uxtb	r2, r3
 8005518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	18d1      	adds	r1, r2, r3
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6a3a      	ldr	r2, [r7, #32]
 800552a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800552c:	f7ff ff78 	bl	8005420 <prvInsertTimerInActiveList>
 8005530:	4603      	mov	r3, r0
 8005532:	2b00      	cmp	r3, #0
 8005534:	d06c      	beq.n	8005610 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800553c:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800553e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005540:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005544:	f003 0304 	and.w	r3, r3, #4
 8005548:	2b00      	cmp	r3, #0
 800554a:	d061      	beq.n	8005610 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005550:	699b      	ldr	r3, [r3, #24]
 8005552:	441a      	add	r2, r3
 8005554:	2300      	movs	r3, #0
 8005556:	9300      	str	r3, [sp, #0]
 8005558:	2300      	movs	r3, #0
 800555a:	2100      	movs	r1, #0
 800555c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800555e:	f7ff fe1d 	bl	800519c <xTimerGenericCommand>
 8005562:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d152      	bne.n	8005610 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 800556a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800556e:	f383 8811 	msr	BASEPRI, r3
 8005572:	f3bf 8f6f 	isb	sy
 8005576:	f3bf 8f4f 	dsb	sy
 800557a:	61bb      	str	r3, [r7, #24]
    }
 800557c:	bf00      	nop
 800557e:	bf00      	nop
 8005580:	e7fd      	b.n	800557e <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005584:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005588:	f023 0301 	bic.w	r3, r3, #1
 800558c:	b2da      	uxtb	r2, r3
 800558e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005590:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8005594:	e03d      	b.n	8005612 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005598:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800559c:	f043 0301 	orr.w	r3, r3, #1
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80055a8:	68fa      	ldr	r2, [r7, #12]
 80055aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ac:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80055ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055b0:	699b      	ldr	r3, [r3, #24]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10b      	bne.n	80055ce <prvProcessReceivedCommands+0x12a>
        __asm volatile
 80055b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055ba:	f383 8811 	msr	BASEPRI, r3
 80055be:	f3bf 8f6f 	isb	sy
 80055c2:	f3bf 8f4f 	dsb	sy
 80055c6:	617b      	str	r3, [r7, #20]
    }
 80055c8:	bf00      	nop
 80055ca:	bf00      	nop
 80055cc:	e7fd      	b.n	80055ca <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80055ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d0:	699a      	ldr	r2, [r3, #24]
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	18d1      	adds	r1, r2, r3
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	6a3a      	ldr	r2, [r7, #32]
 80055da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80055dc:	f7ff ff20 	bl	8005420 <prvInsertTimerInActiveList>
                        break;
 80055e0:	e017      	b.n	8005612 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80055e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d103      	bne.n	80055f8 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 80055f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80055f2:	f000 fc1f 	bl	8005e34 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80055f6:	e00c      	b.n	8005612 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80055f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80055fe:	f023 0301 	bic.w	r3, r3, #1
 8005602:	b2da      	uxtb	r2, r3
 8005604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005606:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800560a:	e002      	b.n	8005612 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 800560c:	bf00      	nop
 800560e:	e000      	b.n	8005612 <prvProcessReceivedCommands+0x16e>
                        break;
 8005610:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005612:	4b08      	ldr	r3, [pc, #32]	@ (8005634 <prvProcessReceivedCommands+0x190>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f107 0108 	add.w	r1, r7, #8
 800561a:	2200      	movs	r2, #0
 800561c:	4618      	mov	r0, r3
 800561e:	f7fe fb59 	bl	8003cd4 <xQueueReceive>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	f47f af41 	bne.w	80054ac <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800562a:	bf00      	nop
 800562c:	bf00      	nop
 800562e:	3728      	adds	r7, #40	@ 0x28
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	2000029c 	.word	0x2000029c

08005638 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005638:	b580      	push	{r7, lr}
 800563a:	b088      	sub	sp, #32
 800563c:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800563e:	e049      	b.n	80056d4 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005640:	4b2e      	ldr	r3, [pc, #184]	@ (80056fc <prvSwitchTimerLists+0xc4>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800564a:	4b2c      	ldr	r3, [pc, #176]	@ (80056fc <prvSwitchTimerLists+0xc4>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68db      	ldr	r3, [r3, #12]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	3304      	adds	r3, #4
 8005658:	4618      	mov	r0, r3
 800565a:	f7fe f897 	bl	800378c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800566c:	f003 0304 	and.w	r3, r3, #4
 8005670:	2b00      	cmp	r3, #0
 8005672:	d02f      	beq.n	80056d4 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	4413      	add	r3, r2
 800567c:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	429a      	cmp	r2, r3
 8005684:	d90e      	bls.n	80056a4 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	68ba      	ldr	r2, [r7, #8]
 800568a:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	68fa      	ldr	r2, [r7, #12]
 8005690:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005692:	4b1a      	ldr	r3, [pc, #104]	@ (80056fc <prvSwitchTimerLists+0xc4>)
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	3304      	adds	r3, #4
 800569a:	4619      	mov	r1, r3
 800569c:	4610      	mov	r0, r2
 800569e:	f7fe f83c 	bl	800371a <vListInsert>
 80056a2:	e017      	b.n	80056d4 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056a4:	2300      	movs	r3, #0
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	2300      	movs	r3, #0
 80056aa:	693a      	ldr	r2, [r7, #16]
 80056ac:	2100      	movs	r1, #0
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f7ff fd74 	bl	800519c <xTimerGenericCommand>
 80056b4:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10b      	bne.n	80056d4 <prvSwitchTimerLists+0x9c>
        __asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	603b      	str	r3, [r7, #0]
    }
 80056ce:	bf00      	nop
 80056d0:	bf00      	nop
 80056d2:	e7fd      	b.n	80056d0 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80056d4:	4b09      	ldr	r3, [pc, #36]	@ (80056fc <prvSwitchTimerLists+0xc4>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1b0      	bne.n	8005640 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80056de:	4b07      	ldr	r3, [pc, #28]	@ (80056fc <prvSwitchTimerLists+0xc4>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80056e4:	4b06      	ldr	r3, [pc, #24]	@ (8005700 <prvSwitchTimerLists+0xc8>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a04      	ldr	r2, [pc, #16]	@ (80056fc <prvSwitchTimerLists+0xc4>)
 80056ea:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80056ec:	4a04      	ldr	r2, [pc, #16]	@ (8005700 <prvSwitchTimerLists+0xc8>)
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	6013      	str	r3, [r2, #0]
    }
 80056f2:	bf00      	nop
 80056f4:	3718      	adds	r7, #24
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	20000294 	.word	0x20000294
 8005700:	20000298 	.word	0x20000298

08005704 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005704:	b580      	push	{r7, lr}
 8005706:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005708:	f000 f988 	bl	8005a1c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800570c:	4b12      	ldr	r3, [pc, #72]	@ (8005758 <prvCheckForValidListAndQueue+0x54>)
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d11d      	bne.n	8005750 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005714:	4811      	ldr	r0, [pc, #68]	@ (800575c <prvCheckForValidListAndQueue+0x58>)
 8005716:	f7fd ffaf 	bl	8003678 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800571a:	4811      	ldr	r0, [pc, #68]	@ (8005760 <prvCheckForValidListAndQueue+0x5c>)
 800571c:	f7fd ffac 	bl	8003678 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005720:	4b10      	ldr	r3, [pc, #64]	@ (8005764 <prvCheckForValidListAndQueue+0x60>)
 8005722:	4a0e      	ldr	r2, [pc, #56]	@ (800575c <prvCheckForValidListAndQueue+0x58>)
 8005724:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005726:	4b10      	ldr	r3, [pc, #64]	@ (8005768 <prvCheckForValidListAndQueue+0x64>)
 8005728:	4a0d      	ldr	r2, [pc, #52]	@ (8005760 <prvCheckForValidListAndQueue+0x5c>)
 800572a:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800572c:	2200      	movs	r2, #0
 800572e:	210c      	movs	r1, #12
 8005730:	200a      	movs	r0, #10
 8005732:	f7fe f8b1 	bl	8003898 <xQueueGenericCreate>
 8005736:	4603      	mov	r3, r0
 8005738:	4a07      	ldr	r2, [pc, #28]	@ (8005758 <prvCheckForValidListAndQueue+0x54>)
 800573a:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 800573c:	4b06      	ldr	r3, [pc, #24]	@ (8005758 <prvCheckForValidListAndQueue+0x54>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d005      	beq.n	8005750 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005744:	4b04      	ldr	r3, [pc, #16]	@ (8005758 <prvCheckForValidListAndQueue+0x54>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4908      	ldr	r1, [pc, #32]	@ (800576c <prvCheckForValidListAndQueue+0x68>)
 800574a:	4618      	mov	r0, r3
 800574c:	f7fe fcca 	bl	80040e4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005750:	f000 f996 	bl	8005a80 <vPortExitCritical>
    }
 8005754:	bf00      	nop
 8005756:	bd80      	pop	{r7, pc}
 8005758:	2000029c 	.word	0x2000029c
 800575c:	2000026c 	.word	0x2000026c
 8005760:	20000280 	.word	0x20000280
 8005764:	20000294 	.word	0x20000294
 8005768:	20000298 	.word	0x20000298
 800576c:	080062dc 	.word	0x080062dc

08005770 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10b      	bne.n	800579a <pvTimerGetTimerID+0x2a>
        __asm volatile
 8005782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005786:	f383 8811 	msr	BASEPRI, r3
 800578a:	f3bf 8f6f 	isb	sy
 800578e:	f3bf 8f4f 	dsb	sy
 8005792:	60fb      	str	r3, [r7, #12]
    }
 8005794:	bf00      	nop
 8005796:	bf00      	nop
 8005798:	e7fd      	b.n	8005796 <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 800579a:	f000 f93f 	bl	8005a1c <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	69db      	ldr	r3, [r3, #28]
 80057a2:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 80057a4:	f000 f96c 	bl	8005a80 <vPortExitCritical>

        return pvReturn;
 80057a8:	693b      	ldr	r3, [r7, #16]
    }
 80057aa:	4618      	mov	r0, r3
 80057ac:	3718      	adds	r7, #24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
	...

080057b4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80057b4:	b480      	push	{r7}
 80057b6:	b085      	sub	sp, #20
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	60f8      	str	r0, [r7, #12]
 80057bc:	60b9      	str	r1, [r7, #8]
 80057be:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	3b04      	subs	r3, #4
 80057c4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80057cc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	3b04      	subs	r3, #4
 80057d2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	f023 0201 	bic.w	r2, r3, #1
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3b04      	subs	r3, #4
 80057e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80057e4:	4a0c      	ldr	r2, [pc, #48]	@ (8005818 <pxPortInitialiseStack+0x64>)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	3b14      	subs	r3, #20
 80057ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	3b04      	subs	r3, #4
 80057fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f06f 0202 	mvn.w	r2, #2
 8005802:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	3b20      	subs	r3, #32
 8005808:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800580a:	68fb      	ldr	r3, [r7, #12]
}
 800580c:	4618      	mov	r0, r3
 800580e:	3714      	adds	r7, #20
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr
 8005818:	0800581d 	.word	0x0800581d

0800581c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005822:	2300      	movs	r3, #0
 8005824:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005826:	4b13      	ldr	r3, [pc, #76]	@ (8005874 <prvTaskExitError+0x58>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800582e:	d00b      	beq.n	8005848 <prvTaskExitError+0x2c>
        __asm volatile
 8005830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005834:	f383 8811 	msr	BASEPRI, r3
 8005838:	f3bf 8f6f 	isb	sy
 800583c:	f3bf 8f4f 	dsb	sy
 8005840:	60fb      	str	r3, [r7, #12]
    }
 8005842:	bf00      	nop
 8005844:	bf00      	nop
 8005846:	e7fd      	b.n	8005844 <prvTaskExitError+0x28>
        __asm volatile
 8005848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800584c:	f383 8811 	msr	BASEPRI, r3
 8005850:	f3bf 8f6f 	isb	sy
 8005854:	f3bf 8f4f 	dsb	sy
 8005858:	60bb      	str	r3, [r7, #8]
    }
 800585a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800585c:	bf00      	nop
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d0fc      	beq.n	800585e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005864:	bf00      	nop
 8005866:	bf00      	nop
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	20000020 	.word	0x20000020
	...

08005880 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005880:	4b07      	ldr	r3, [pc, #28]	@ (80058a0 <pxCurrentTCBConst2>)
 8005882:	6819      	ldr	r1, [r3, #0]
 8005884:	6808      	ldr	r0, [r1, #0]
 8005886:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800588a:	f380 8809 	msr	PSP, r0
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f04f 0000 	mov.w	r0, #0
 8005896:	f380 8811 	msr	BASEPRI, r0
 800589a:	4770      	bx	lr
 800589c:	f3af 8000 	nop.w

080058a0 <pxCurrentTCBConst2>:
 80058a0:	20000168 	.word	0x20000168
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80058a4:	bf00      	nop
 80058a6:	bf00      	nop

080058a8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80058a8:	4808      	ldr	r0, [pc, #32]	@ (80058cc <prvPortStartFirstTask+0x24>)
 80058aa:	6800      	ldr	r0, [r0, #0]
 80058ac:	6800      	ldr	r0, [r0, #0]
 80058ae:	f380 8808 	msr	MSP, r0
 80058b2:	f04f 0000 	mov.w	r0, #0
 80058b6:	f380 8814 	msr	CONTROL, r0
 80058ba:	b662      	cpsie	i
 80058bc:	b661      	cpsie	f
 80058be:	f3bf 8f4f 	dsb	sy
 80058c2:	f3bf 8f6f 	isb	sy
 80058c6:	df00      	svc	0
 80058c8:	bf00      	nop
 80058ca:	0000      	.short	0x0000
 80058cc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80058d0:	bf00      	nop
 80058d2:	bf00      	nop

080058d4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b086      	sub	sp, #24
 80058d8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80058da:	4b47      	ldr	r3, [pc, #284]	@ (80059f8 <xPortStartScheduler+0x124>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a47      	ldr	r2, [pc, #284]	@ (80059fc <xPortStartScheduler+0x128>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d10b      	bne.n	80058fc <xPortStartScheduler+0x28>
        __asm volatile
 80058e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	60fb      	str	r3, [r7, #12]
    }
 80058f6:	bf00      	nop
 80058f8:	bf00      	nop
 80058fa:	e7fd      	b.n	80058f8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80058fc:	4b3e      	ldr	r3, [pc, #248]	@ (80059f8 <xPortStartScheduler+0x124>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a3f      	ldr	r2, [pc, #252]	@ (8005a00 <xPortStartScheduler+0x12c>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d10b      	bne.n	800591e <xPortStartScheduler+0x4a>
        __asm volatile
 8005906:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	613b      	str	r3, [r7, #16]
    }
 8005918:	bf00      	nop
 800591a:	bf00      	nop
 800591c:	e7fd      	b.n	800591a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800591e:	4b39      	ldr	r3, [pc, #228]	@ (8005a04 <xPortStartScheduler+0x130>)
 8005920:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	b2db      	uxtb	r3, r3
 8005928:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	22ff      	movs	r2, #255	@ 0xff
 800592e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	b2db      	uxtb	r3, r3
 8005936:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005938:	78fb      	ldrb	r3, [r7, #3]
 800593a:	b2db      	uxtb	r3, r3
 800593c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005940:	b2da      	uxtb	r2, r3
 8005942:	4b31      	ldr	r3, [pc, #196]	@ (8005a08 <xPortStartScheduler+0x134>)
 8005944:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005946:	4b31      	ldr	r3, [pc, #196]	@ (8005a0c <xPortStartScheduler+0x138>)
 8005948:	2207      	movs	r2, #7
 800594a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800594c:	e009      	b.n	8005962 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 800594e:	4b2f      	ldr	r3, [pc, #188]	@ (8005a0c <xPortStartScheduler+0x138>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	3b01      	subs	r3, #1
 8005954:	4a2d      	ldr	r2, [pc, #180]	@ (8005a0c <xPortStartScheduler+0x138>)
 8005956:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005958:	78fb      	ldrb	r3, [r7, #3]
 800595a:	b2db      	uxtb	r3, r3
 800595c:	005b      	lsls	r3, r3, #1
 800595e:	b2db      	uxtb	r3, r3
 8005960:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005962:	78fb      	ldrb	r3, [r7, #3]
 8005964:	b2db      	uxtb	r3, r3
 8005966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800596a:	2b80      	cmp	r3, #128	@ 0x80
 800596c:	d0ef      	beq.n	800594e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800596e:	4b27      	ldr	r3, [pc, #156]	@ (8005a0c <xPortStartScheduler+0x138>)
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f1c3 0307 	rsb	r3, r3, #7
 8005976:	2b04      	cmp	r3, #4
 8005978:	d00b      	beq.n	8005992 <xPortStartScheduler+0xbe>
        __asm volatile
 800597a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800597e:	f383 8811 	msr	BASEPRI, r3
 8005982:	f3bf 8f6f 	isb	sy
 8005986:	f3bf 8f4f 	dsb	sy
 800598a:	60bb      	str	r3, [r7, #8]
    }
 800598c:	bf00      	nop
 800598e:	bf00      	nop
 8005990:	e7fd      	b.n	800598e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005992:	4b1e      	ldr	r3, [pc, #120]	@ (8005a0c <xPortStartScheduler+0x138>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	021b      	lsls	r3, r3, #8
 8005998:	4a1c      	ldr	r2, [pc, #112]	@ (8005a0c <xPortStartScheduler+0x138>)
 800599a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800599c:	4b1b      	ldr	r3, [pc, #108]	@ (8005a0c <xPortStartScheduler+0x138>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80059a4:	4a19      	ldr	r2, [pc, #100]	@ (8005a0c <xPortStartScheduler+0x138>)
 80059a6:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80059b0:	4b17      	ldr	r3, [pc, #92]	@ (8005a10 <xPortStartScheduler+0x13c>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a16      	ldr	r2, [pc, #88]	@ (8005a10 <xPortStartScheduler+0x13c>)
 80059b6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80059ba:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80059bc:	4b14      	ldr	r3, [pc, #80]	@ (8005a10 <xPortStartScheduler+0x13c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a13      	ldr	r2, [pc, #76]	@ (8005a10 <xPortStartScheduler+0x13c>)
 80059c2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80059c6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80059c8:	f000 f8e0 	bl	8005b8c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80059cc:	4b11      	ldr	r3, [pc, #68]	@ (8005a14 <xPortStartScheduler+0x140>)
 80059ce:	2200      	movs	r2, #0
 80059d0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80059d2:	f000 f8ff 	bl	8005bd4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80059d6:	4b10      	ldr	r3, [pc, #64]	@ (8005a18 <xPortStartScheduler+0x144>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a0f      	ldr	r2, [pc, #60]	@ (8005a18 <xPortStartScheduler+0x144>)
 80059dc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80059e0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80059e2:	f7ff ff61 	bl	80058a8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80059e6:	f7fe fea9 	bl	800473c <vTaskSwitchContext>
    prvTaskExitError();
 80059ea:	f7ff ff17 	bl	800581c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3718      	adds	r7, #24
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	e000ed00 	.word	0xe000ed00
 80059fc:	410fc271 	.word	0x410fc271
 8005a00:	410fc270 	.word	0x410fc270
 8005a04:	e000e400 	.word	0xe000e400
 8005a08:	200002a8 	.word	0x200002a8
 8005a0c:	200002ac 	.word	0x200002ac
 8005a10:	e000ed20 	.word	0xe000ed20
 8005a14:	20000020 	.word	0x20000020
 8005a18:	e000ef34 	.word	0xe000ef34

08005a1c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
        __asm volatile
 8005a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a26:	f383 8811 	msr	BASEPRI, r3
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	607b      	str	r3, [r7, #4]
    }
 8005a34:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8005a36:	4b10      	ldr	r3, [pc, #64]	@ (8005a78 <vPortEnterCritical+0x5c>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	4a0e      	ldr	r2, [pc, #56]	@ (8005a78 <vPortEnterCritical+0x5c>)
 8005a3e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005a40:	4b0d      	ldr	r3, [pc, #52]	@ (8005a78 <vPortEnterCritical+0x5c>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d110      	bne.n	8005a6a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005a48:	4b0c      	ldr	r3, [pc, #48]	@ (8005a7c <vPortEnterCritical+0x60>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00b      	beq.n	8005a6a <vPortEnterCritical+0x4e>
        __asm volatile
 8005a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a56:	f383 8811 	msr	BASEPRI, r3
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	603b      	str	r3, [r7, #0]
    }
 8005a64:	bf00      	nop
 8005a66:	bf00      	nop
 8005a68:	e7fd      	b.n	8005a66 <vPortEnterCritical+0x4a>
    }
}
 8005a6a:	bf00      	nop
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	20000020 	.word	0x20000020
 8005a7c:	e000ed04 	.word	0xe000ed04

08005a80 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8005a86:	4b12      	ldr	r3, [pc, #72]	@ (8005ad0 <vPortExitCritical+0x50>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10b      	bne.n	8005aa6 <vPortExitCritical+0x26>
        __asm volatile
 8005a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a92:	f383 8811 	msr	BASEPRI, r3
 8005a96:	f3bf 8f6f 	isb	sy
 8005a9a:	f3bf 8f4f 	dsb	sy
 8005a9e:	607b      	str	r3, [r7, #4]
    }
 8005aa0:	bf00      	nop
 8005aa2:	bf00      	nop
 8005aa4:	e7fd      	b.n	8005aa2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8005aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8005ad0 <vPortExitCritical+0x50>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	3b01      	subs	r3, #1
 8005aac:	4a08      	ldr	r2, [pc, #32]	@ (8005ad0 <vPortExitCritical+0x50>)
 8005aae:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8005ab0:	4b07      	ldr	r3, [pc, #28]	@ (8005ad0 <vPortExitCritical+0x50>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d105      	bne.n	8005ac4 <vPortExitCritical+0x44>
 8005ab8:	2300      	movs	r3, #0
 8005aba:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	f383 8811 	msr	BASEPRI, r3
    }
 8005ac2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8005ac4:	bf00      	nop
 8005ac6:	370c      	adds	r7, #12
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr
 8005ad0:	20000020 	.word	0x20000020
	...

08005ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8005ae0:	f3ef 8009 	mrs	r0, PSP
 8005ae4:	f3bf 8f6f 	isb	sy
 8005ae8:	4b15      	ldr	r3, [pc, #84]	@ (8005b40 <pxCurrentTCBConst>)
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	f01e 0f10 	tst.w	lr, #16
 8005af0:	bf08      	it	eq
 8005af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afa:	6010      	str	r0, [r2, #0]
 8005afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005b04:	f380 8811 	msr	BASEPRI, r0
 8005b08:	f3bf 8f4f 	dsb	sy
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f7fe fe14 	bl	800473c <vTaskSwitchContext>
 8005b14:	f04f 0000 	mov.w	r0, #0
 8005b18:	f380 8811 	msr	BASEPRI, r0
 8005b1c:	bc09      	pop	{r0, r3}
 8005b1e:	6819      	ldr	r1, [r3, #0]
 8005b20:	6808      	ldr	r0, [r1, #0]
 8005b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b26:	f01e 0f10 	tst.w	lr, #16
 8005b2a:	bf08      	it	eq
 8005b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005b30:	f380 8809 	msr	PSP, r0
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	f3af 8000 	nop.w

08005b40 <pxCurrentTCBConst>:
 8005b40:	20000168 	.word	0x20000168
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005b44:	bf00      	nop
 8005b46:	bf00      	nop

08005b48 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
        __asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	607b      	str	r3, [r7, #4]
    }
 8005b60:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005b62:	f7fe fd55 	bl	8004610 <xTaskIncrementTick>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d003      	beq.n	8005b74 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005b6c:	4b06      	ldr	r3, [pc, #24]	@ (8005b88 <SysTick_Handler+0x40>)
 8005b6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b72:	601a      	str	r2, [r3, #0]
 8005b74:	2300      	movs	r3, #0
 8005b76:	603b      	str	r3, [r7, #0]
        __asm volatile
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	f383 8811 	msr	BASEPRI, r3
    }
 8005b7e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8005b80:	bf00      	nop
 8005b82:	3708      	adds	r7, #8
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	e000ed04 	.word	0xe000ed04

08005b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005b90:	4b0b      	ldr	r3, [pc, #44]	@ (8005bc0 <vPortSetupTimerInterrupt+0x34>)
 8005b92:	2200      	movs	r2, #0
 8005b94:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005b96:	4b0b      	ldr	r3, [pc, #44]	@ (8005bc4 <vPortSetupTimerInterrupt+0x38>)
 8005b98:	2200      	movs	r2, #0
 8005b9a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8005bc8 <vPortSetupTimerInterrupt+0x3c>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8005bcc <vPortSetupTimerInterrupt+0x40>)
 8005ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba6:	099b      	lsrs	r3, r3, #6
 8005ba8:	4a09      	ldr	r2, [pc, #36]	@ (8005bd0 <vPortSetupTimerInterrupt+0x44>)
 8005baa:	3b01      	subs	r3, #1
 8005bac:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005bae:	4b04      	ldr	r3, [pc, #16]	@ (8005bc0 <vPortSetupTimerInterrupt+0x34>)
 8005bb0:	2207      	movs	r2, #7
 8005bb2:	601a      	str	r2, [r3, #0]
}
 8005bb4:	bf00      	nop
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	e000e010 	.word	0xe000e010
 8005bc4:	e000e018 	.word	0xe000e018
 8005bc8:	20000010 	.word	0x20000010
 8005bcc:	10624dd3 	.word	0x10624dd3
 8005bd0:	e000e014 	.word	0xe000e014

08005bd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8005bd4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005be4 <vPortEnableVFP+0x10>
 8005bd8:	6801      	ldr	r1, [r0, #0]
 8005bda:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005bde:	6001      	str	r1, [r0, #0]
 8005be0:	4770      	bx	lr
 8005be2:	0000      	.short	0x0000
 8005be4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8005be8:	bf00      	nop
 8005bea:	bf00      	nop

08005bec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8005bf2:	f3ef 8305 	mrs	r3, IPSR
 8005bf6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2b0f      	cmp	r3, #15
 8005bfc:	d915      	bls.n	8005c2a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005bfe:	4a18      	ldr	r2, [pc, #96]	@ (8005c60 <vPortValidateInterruptPriority+0x74>)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4413      	add	r3, r2
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c08:	4b16      	ldr	r3, [pc, #88]	@ (8005c64 <vPortValidateInterruptPriority+0x78>)
 8005c0a:	781b      	ldrb	r3, [r3, #0]
 8005c0c:	7afa      	ldrb	r2, [r7, #11]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d20b      	bcs.n	8005c2a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8005c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c16:	f383 8811 	msr	BASEPRI, r3
 8005c1a:	f3bf 8f6f 	isb	sy
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	607b      	str	r3, [r7, #4]
    }
 8005c24:	bf00      	nop
 8005c26:	bf00      	nop
 8005c28:	e7fd      	b.n	8005c26 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005c2a:	4b0f      	ldr	r3, [pc, #60]	@ (8005c68 <vPortValidateInterruptPriority+0x7c>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005c32:	4b0e      	ldr	r3, [pc, #56]	@ (8005c6c <vPortValidateInterruptPriority+0x80>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d90b      	bls.n	8005c52 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8005c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c3e:	f383 8811 	msr	BASEPRI, r3
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	603b      	str	r3, [r7, #0]
    }
 8005c4c:	bf00      	nop
 8005c4e:	bf00      	nop
 8005c50:	e7fd      	b.n	8005c4e <vPortValidateInterruptPriority+0x62>
    }
 8005c52:	bf00      	nop
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	e000e3f0 	.word	0xe000e3f0
 8005c64:	200002a8 	.word	0x200002a8
 8005c68:	e000ed0c 	.word	0xe000ed0c
 8005c6c:	200002ac 	.word	0x200002ac

08005c70 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b08a      	sub	sp, #40	@ 0x28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8005c7c:	f7fe fc1a 	bl	80044b4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8005c80:	4b66      	ldr	r3, [pc, #408]	@ (8005e1c <pvPortMalloc+0x1ac>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8005c88:	f000 f938 	bl	8005efc <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005c8c:	4b64      	ldr	r3, [pc, #400]	@ (8005e20 <pvPortMalloc+0x1b0>)
 8005c8e:	681a      	ldr	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4013      	ands	r3, r2
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f040 80a9 	bne.w	8005dec <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d02e      	beq.n	8005cfe <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8005ca0:	2208      	movs	r2, #8
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d228      	bcs.n	8005cfe <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8005cac:	2208      	movs	r2, #8
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d022      	beq.n	8005d04 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f023 0307 	bic.w	r3, r3, #7
 8005cc4:	3308      	adds	r3, #8
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d215      	bcs.n	8005cf8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f023 0307 	bic.w	r3, r3, #7
 8005cd2:	3308      	adds	r3, #8
 8005cd4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f003 0307 	and.w	r3, r3, #7
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d011      	beq.n	8005d04 <pvPortMalloc+0x94>
        __asm volatile
 8005ce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	617b      	str	r3, [r7, #20]
    }
 8005cf2:	bf00      	nop
 8005cf4:	bf00      	nop
 8005cf6:	e7fd      	b.n	8005cf4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005cfc:	e002      	b.n	8005d04 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	607b      	str	r3, [r7, #4]
 8005d02:	e000      	b.n	8005d06 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d04:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d06f      	beq.n	8005dec <pvPortMalloc+0x17c>
 8005d0c:	4b45      	ldr	r3, [pc, #276]	@ (8005e24 <pvPortMalloc+0x1b4>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d86a      	bhi.n	8005dec <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8005d16:	4b44      	ldr	r3, [pc, #272]	@ (8005e28 <pvPortMalloc+0x1b8>)
 8005d18:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8005d1a:	4b43      	ldr	r3, [pc, #268]	@ (8005e28 <pvPortMalloc+0x1b8>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d20:	e004      	b.n	8005d2c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8005d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d24:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8005d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d903      	bls.n	8005d3e <pvPortMalloc+0xce>
 8005d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1f1      	bne.n	8005d22 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8005d3e:	4b37      	ldr	r3, [pc, #220]	@ (8005e1c <pvPortMalloc+0x1ac>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d051      	beq.n	8005dec <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d48:	6a3b      	ldr	r3, [r7, #32]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2208      	movs	r2, #8
 8005d4e:	4413      	add	r3, r2
 8005d50:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	6a3b      	ldr	r3, [r7, #32]
 8005d58:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5c:	685a      	ldr	r2, [r3, #4]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	1ad2      	subs	r2, r2, r3
 8005d62:	2308      	movs	r3, #8
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d920      	bls.n	8005dac <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005d6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4413      	add	r3, r2
 8005d70:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	f003 0307 	and.w	r3, r3, #7
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00b      	beq.n	8005d94 <pvPortMalloc+0x124>
        __asm volatile
 8005d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d80:	f383 8811 	msr	BASEPRI, r3
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	f3bf 8f4f 	dsb	sy
 8005d8c:	613b      	str	r3, [r7, #16]
    }
 8005d8e:	bf00      	nop
 8005d90:	bf00      	nop
 8005d92:	e7fd      	b.n	8005d90 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	1ad2      	subs	r2, r2, r3
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005da6:	69b8      	ldr	r0, [r7, #24]
 8005da8:	f000 f90a 	bl	8005fc0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005dac:	4b1d      	ldr	r3, [pc, #116]	@ (8005e24 <pvPortMalloc+0x1b4>)
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	4a1b      	ldr	r2, [pc, #108]	@ (8005e24 <pvPortMalloc+0x1b4>)
 8005db8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005dba:	4b1a      	ldr	r3, [pc, #104]	@ (8005e24 <pvPortMalloc+0x1b4>)
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8005e2c <pvPortMalloc+0x1bc>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d203      	bcs.n	8005dce <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005dc6:	4b17      	ldr	r3, [pc, #92]	@ (8005e24 <pvPortMalloc+0x1b4>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a18      	ldr	r2, [pc, #96]	@ (8005e2c <pvPortMalloc+0x1bc>)
 8005dcc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	4b13      	ldr	r3, [pc, #76]	@ (8005e20 <pvPortMalloc+0x1b0>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dda:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dde:	2200      	movs	r2, #0
 8005de0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005de2:	4b13      	ldr	r3, [pc, #76]	@ (8005e30 <pvPortMalloc+0x1c0>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	3301      	adds	r3, #1
 8005de8:	4a11      	ldr	r2, [pc, #68]	@ (8005e30 <pvPortMalloc+0x1c0>)
 8005dea:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005dec:	f7fe fb70 	bl	80044d0 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	f003 0307 	and.w	r3, r3, #7
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00b      	beq.n	8005e12 <pvPortMalloc+0x1a2>
        __asm volatile
 8005dfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dfe:	f383 8811 	msr	BASEPRI, r3
 8005e02:	f3bf 8f6f 	isb	sy
 8005e06:	f3bf 8f4f 	dsb	sy
 8005e0a:	60fb      	str	r3, [r7, #12]
    }
 8005e0c:	bf00      	nop
 8005e0e:	bf00      	nop
 8005e10:	e7fd      	b.n	8005e0e <pvPortMalloc+0x19e>
    return pvReturn;
 8005e12:	69fb      	ldr	r3, [r7, #28]
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3728      	adds	r7, #40	@ 0x28
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	20012eb8 	.word	0x20012eb8
 8005e20:	20012ecc 	.word	0x20012ecc
 8005e24:	20012ebc 	.word	0x20012ebc
 8005e28:	20012eb0 	.word	0x20012eb0
 8005e2c:	20012ec0 	.word	0x20012ec0
 8005e30:	20012ec4 	.word	0x20012ec4

08005e34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b086      	sub	sp, #24
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d04f      	beq.n	8005ee6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005e46:	2308      	movs	r3, #8
 8005e48:	425b      	negs	r3, r3
 8005e4a:	697a      	ldr	r2, [r7, #20]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	685a      	ldr	r2, [r3, #4]
 8005e58:	4b25      	ldr	r3, [pc, #148]	@ (8005ef0 <vPortFree+0xbc>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4013      	ands	r3, r2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10b      	bne.n	8005e7a <vPortFree+0x46>
        __asm volatile
 8005e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e66:	f383 8811 	msr	BASEPRI, r3
 8005e6a:	f3bf 8f6f 	isb	sy
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	60fb      	str	r3, [r7, #12]
    }
 8005e74:	bf00      	nop
 8005e76:	bf00      	nop
 8005e78:	e7fd      	b.n	8005e76 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d00b      	beq.n	8005e9a <vPortFree+0x66>
        __asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	60bb      	str	r3, [r7, #8]
    }
 8005e94:	bf00      	nop
 8005e96:	bf00      	nop
 8005e98:	e7fd      	b.n	8005e96 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	4b14      	ldr	r3, [pc, #80]	@ (8005ef0 <vPortFree+0xbc>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4013      	ands	r3, r2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d01e      	beq.n	8005ee6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d11a      	bne.n	8005ee6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	4b0e      	ldr	r3, [pc, #56]	@ (8005ef0 <vPortFree+0xbc>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	43db      	mvns	r3, r3
 8005eba:	401a      	ands	r2, r3
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8005ec0:	f7fe faf8 	bl	80044b4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ef4 <vPortFree+0xc0>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4413      	add	r3, r2
 8005ece:	4a09      	ldr	r2, [pc, #36]	@ (8005ef4 <vPortFree+0xc0>)
 8005ed0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005ed2:	6938      	ldr	r0, [r7, #16]
 8005ed4:	f000 f874 	bl	8005fc0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005ed8:	4b07      	ldr	r3, [pc, #28]	@ (8005ef8 <vPortFree+0xc4>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3301      	adds	r3, #1
 8005ede:	4a06      	ldr	r2, [pc, #24]	@ (8005ef8 <vPortFree+0xc4>)
 8005ee0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005ee2:	f7fe faf5 	bl	80044d0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005ee6:	bf00      	nop
 8005ee8:	3718      	adds	r7, #24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
 8005eee:	bf00      	nop
 8005ef0:	20012ecc 	.word	0x20012ecc
 8005ef4:	20012ebc 	.word	0x20012ebc
 8005ef8:	20012ec8 	.word	0x20012ec8

08005efc <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f02:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8005f06:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8005f08:	4b27      	ldr	r3, [pc, #156]	@ (8005fa8 <prvHeapInit+0xac>)
 8005f0a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f003 0307 	and.w	r3, r3, #7
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00c      	beq.n	8005f30 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	3307      	adds	r3, #7
 8005f1a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f023 0307 	bic.w	r3, r3, #7
 8005f22:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	4a1f      	ldr	r2, [pc, #124]	@ (8005fa8 <prvHeapInit+0xac>)
 8005f2c:	4413      	add	r3, r2
 8005f2e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f34:	4a1d      	ldr	r2, [pc, #116]	@ (8005fac <prvHeapInit+0xb0>)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8005f3a:	4b1c      	ldr	r3, [pc, #112]	@ (8005fac <prvHeapInit+0xb0>)
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	4413      	add	r3, r2
 8005f46:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8005f48:	2208      	movs	r2, #8
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	1a9b      	subs	r3, r3, r2
 8005f4e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f023 0307 	bic.w	r3, r3, #7
 8005f56:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4a15      	ldr	r2, [pc, #84]	@ (8005fb0 <prvHeapInit+0xb4>)
 8005f5c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8005f5e:	4b14      	ldr	r3, [pc, #80]	@ (8005fb0 <prvHeapInit+0xb4>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2200      	movs	r2, #0
 8005f64:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8005f66:	4b12      	ldr	r3, [pc, #72]	@ (8005fb0 <prvHeapInit+0xb4>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	1ad2      	subs	r2, r2, r3
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8005fb0 <prvHeapInit+0xb4>)
 8005f7e:	681a      	ldr	r2, [r3, #0]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	4a0a      	ldr	r2, [pc, #40]	@ (8005fb4 <prvHeapInit+0xb8>)
 8005f8a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	4a09      	ldr	r2, [pc, #36]	@ (8005fb8 <prvHeapInit+0xbc>)
 8005f92:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005f94:	4b09      	ldr	r3, [pc, #36]	@ (8005fbc <prvHeapInit+0xc0>)
 8005f96:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005f9a:	601a      	str	r2, [r3, #0]
}
 8005f9c:	bf00      	nop
 8005f9e:	3714      	adds	r7, #20
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr
 8005fa8:	200002b0 	.word	0x200002b0
 8005fac:	20012eb0 	.word	0x20012eb0
 8005fb0:	20012eb8 	.word	0x20012eb8
 8005fb4:	20012ec0 	.word	0x20012ec0
 8005fb8:	20012ebc 	.word	0x20012ebc
 8005fbc:	20012ecc 	.word	0x20012ecc

08005fc0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005fc8:	4b28      	ldr	r3, [pc, #160]	@ (800606c <prvInsertBlockIntoFreeList+0xac>)
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	e002      	b.n	8005fd4 <prvInsertBlockIntoFreeList+0x14>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d8f7      	bhi.n	8005fce <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	4413      	add	r3, r2
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d108      	bne.n	8006002 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	685a      	ldr	r2, [r3, #4]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	441a      	add	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	441a      	add	r2, r3
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	429a      	cmp	r2, r3
 8006014:	d118      	bne.n	8006048 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	4b15      	ldr	r3, [pc, #84]	@ (8006070 <prvInsertBlockIntoFreeList+0xb0>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	429a      	cmp	r2, r3
 8006020:	d00d      	beq.n	800603e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	441a      	add	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	e008      	b.n	8006050 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800603e:	4b0c      	ldr	r3, [pc, #48]	@ (8006070 <prvInsertBlockIntoFreeList+0xb0>)
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	e003      	b.n	8006050 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	429a      	cmp	r2, r3
 8006056:	d002      	beq.n	800605e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800605e:	bf00      	nop
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	20012eb0 	.word	0x20012eb0
 8006070:	20012eb8 	.word	0x20012eb8

08006074 <memset>:
 8006074:	4402      	add	r2, r0
 8006076:	4603      	mov	r3, r0
 8006078:	4293      	cmp	r3, r2
 800607a:	d100      	bne.n	800607e <memset+0xa>
 800607c:	4770      	bx	lr
 800607e:	f803 1b01 	strb.w	r1, [r3], #1
 8006082:	e7f9      	b.n	8006078 <memset+0x4>

08006084 <__libc_init_array>:
 8006084:	b570      	push	{r4, r5, r6, lr}
 8006086:	4d0d      	ldr	r5, [pc, #52]	@ (80060bc <__libc_init_array+0x38>)
 8006088:	4c0d      	ldr	r4, [pc, #52]	@ (80060c0 <__libc_init_array+0x3c>)
 800608a:	1b64      	subs	r4, r4, r5
 800608c:	10a4      	asrs	r4, r4, #2
 800608e:	2600      	movs	r6, #0
 8006090:	42a6      	cmp	r6, r4
 8006092:	d109      	bne.n	80060a8 <__libc_init_array+0x24>
 8006094:	4d0b      	ldr	r5, [pc, #44]	@ (80060c4 <__libc_init_array+0x40>)
 8006096:	4c0c      	ldr	r4, [pc, #48]	@ (80060c8 <__libc_init_array+0x44>)
 8006098:	f000 f826 	bl	80060e8 <_init>
 800609c:	1b64      	subs	r4, r4, r5
 800609e:	10a4      	asrs	r4, r4, #2
 80060a0:	2600      	movs	r6, #0
 80060a2:	42a6      	cmp	r6, r4
 80060a4:	d105      	bne.n	80060b2 <__libc_init_array+0x2e>
 80060a6:	bd70      	pop	{r4, r5, r6, pc}
 80060a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ac:	4798      	blx	r3
 80060ae:	3601      	adds	r6, #1
 80060b0:	e7ee      	b.n	8006090 <__libc_init_array+0xc>
 80060b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80060b6:	4798      	blx	r3
 80060b8:	3601      	adds	r6, #1
 80060ba:	e7f2      	b.n	80060a2 <__libc_init_array+0x1e>
 80060bc:	08006308 	.word	0x08006308
 80060c0:	08006308 	.word	0x08006308
 80060c4:	08006308 	.word	0x08006308
 80060c8:	0800630c 	.word	0x0800630c

080060cc <memcpy>:
 80060cc:	440a      	add	r2, r1
 80060ce:	4291      	cmp	r1, r2
 80060d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80060d4:	d100      	bne.n	80060d8 <memcpy+0xc>
 80060d6:	4770      	bx	lr
 80060d8:	b510      	push	{r4, lr}
 80060da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060e2:	4291      	cmp	r1, r2
 80060e4:	d1f9      	bne.n	80060da <memcpy+0xe>
 80060e6:	bd10      	pop	{r4, pc}

080060e8 <_init>:
 80060e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ea:	bf00      	nop
 80060ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060ee:	bc08      	pop	{r3}
 80060f0:	469e      	mov	lr, r3
 80060f2:	4770      	bx	lr

080060f4 <_fini>:
 80060f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f6:	bf00      	nop
 80060f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80060fa:	bc08      	pop	{r3}
 80060fc:	469e      	mov	lr, r3
 80060fe:	4770      	bx	lr
