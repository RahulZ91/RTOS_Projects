
Queue_and_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007120  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000208  080072f0  080072f0  000082f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074f8  080074f8  00009024  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080074f8  080074f8  000084f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007500  08007500  00009024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007500  08007500  00008500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007504  08007504  00008504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08007508  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012eac  20000024  0800752c  00009024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012ed0  0800752c  00009ed0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015984  00000000  00000000  00009054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003588  00000000  00000000  0001e9d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  00021f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f46  00000000  00000000  00023308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024a4e  00000000  00000000  0002424e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a07c  00000000  00000000  00048c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfa86  00000000  00000000  00062d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014279e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051c0  00000000  00000000  001427e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  001479a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000024 	.word	0x20000024
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080072d8 	.word	0x080072d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000028 	.word	0x20000028
 800020c:	080072d8 	.word	0x080072d8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <__aeabi_uldivmod>:
 8000234:	b953      	cbnz	r3, 800024c <__aeabi_uldivmod+0x18>
 8000236:	b94a      	cbnz	r2, 800024c <__aeabi_uldivmod+0x18>
 8000238:	2900      	cmp	r1, #0
 800023a:	bf08      	it	eq
 800023c:	2800      	cmpeq	r0, #0
 800023e:	bf1c      	itt	ne
 8000240:	f04f 31ff 	movne.w	r1, #4294967295
 8000244:	f04f 30ff 	movne.w	r0, #4294967295
 8000248:	f000 b988 	b.w	800055c <__aeabi_idiv0>
 800024c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000254:	f000 f806 	bl	8000264 <__udivmoddi4>
 8000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 800025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000260:	b004      	add	sp, #16
 8000262:	4770      	bx	lr

08000264 <__udivmoddi4>:
 8000264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000268:	9d08      	ldr	r5, [sp, #32]
 800026a:	468e      	mov	lr, r1
 800026c:	4604      	mov	r4, r0
 800026e:	4688      	mov	r8, r1
 8000270:	2b00      	cmp	r3, #0
 8000272:	d14a      	bne.n	800030a <__udivmoddi4+0xa6>
 8000274:	428a      	cmp	r2, r1
 8000276:	4617      	mov	r7, r2
 8000278:	d962      	bls.n	8000340 <__udivmoddi4+0xdc>
 800027a:	fab2 f682 	clz	r6, r2
 800027e:	b14e      	cbz	r6, 8000294 <__udivmoddi4+0x30>
 8000280:	f1c6 0320 	rsb	r3, r6, #32
 8000284:	fa01 f806 	lsl.w	r8, r1, r6
 8000288:	fa20 f303 	lsr.w	r3, r0, r3
 800028c:	40b7      	lsls	r7, r6
 800028e:	ea43 0808 	orr.w	r8, r3, r8
 8000292:	40b4      	lsls	r4, r6
 8000294:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000298:	fa1f fc87 	uxth.w	ip, r7
 800029c:	fbb8 f1fe 	udiv	r1, r8, lr
 80002a0:	0c23      	lsrs	r3, r4, #16
 80002a2:	fb0e 8811 	mls	r8, lr, r1, r8
 80002a6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002aa:	fb01 f20c 	mul.w	r2, r1, ip
 80002ae:	429a      	cmp	r2, r3
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0x62>
 80002b2:	18fb      	adds	r3, r7, r3
 80002b4:	f101 30ff 	add.w	r0, r1, #4294967295
 80002b8:	f080 80ea 	bcs.w	8000490 <__udivmoddi4+0x22c>
 80002bc:	429a      	cmp	r2, r3
 80002be:	f240 80e7 	bls.w	8000490 <__udivmoddi4+0x22c>
 80002c2:	3902      	subs	r1, #2
 80002c4:	443b      	add	r3, r7
 80002c6:	1a9a      	subs	r2, r3, r2
 80002c8:	b2a3      	uxth	r3, r4
 80002ca:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ce:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002d6:	fb00 fc0c 	mul.w	ip, r0, ip
 80002da:	459c      	cmp	ip, r3
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0x8e>
 80002de:	18fb      	adds	r3, r7, r3
 80002e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e4:	f080 80d6 	bcs.w	8000494 <__udivmoddi4+0x230>
 80002e8:	459c      	cmp	ip, r3
 80002ea:	f240 80d3 	bls.w	8000494 <__udivmoddi4+0x230>
 80002ee:	443b      	add	r3, r7
 80002f0:	3802      	subs	r0, #2
 80002f2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f6:	eba3 030c 	sub.w	r3, r3, ip
 80002fa:	2100      	movs	r1, #0
 80002fc:	b11d      	cbz	r5, 8000306 <__udivmoddi4+0xa2>
 80002fe:	40f3      	lsrs	r3, r6
 8000300:	2200      	movs	r2, #0
 8000302:	e9c5 3200 	strd	r3, r2, [r5]
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	428b      	cmp	r3, r1
 800030c:	d905      	bls.n	800031a <__udivmoddi4+0xb6>
 800030e:	b10d      	cbz	r5, 8000314 <__udivmoddi4+0xb0>
 8000310:	e9c5 0100 	strd	r0, r1, [r5]
 8000314:	2100      	movs	r1, #0
 8000316:	4608      	mov	r0, r1
 8000318:	e7f5      	b.n	8000306 <__udivmoddi4+0xa2>
 800031a:	fab3 f183 	clz	r1, r3
 800031e:	2900      	cmp	r1, #0
 8000320:	d146      	bne.n	80003b0 <__udivmoddi4+0x14c>
 8000322:	4573      	cmp	r3, lr
 8000324:	d302      	bcc.n	800032c <__udivmoddi4+0xc8>
 8000326:	4282      	cmp	r2, r0
 8000328:	f200 8105 	bhi.w	8000536 <__udivmoddi4+0x2d2>
 800032c:	1a84      	subs	r4, r0, r2
 800032e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000332:	2001      	movs	r0, #1
 8000334:	4690      	mov	r8, r2
 8000336:	2d00      	cmp	r5, #0
 8000338:	d0e5      	beq.n	8000306 <__udivmoddi4+0xa2>
 800033a:	e9c5 4800 	strd	r4, r8, [r5]
 800033e:	e7e2      	b.n	8000306 <__udivmoddi4+0xa2>
 8000340:	2a00      	cmp	r2, #0
 8000342:	f000 8090 	beq.w	8000466 <__udivmoddi4+0x202>
 8000346:	fab2 f682 	clz	r6, r2
 800034a:	2e00      	cmp	r6, #0
 800034c:	f040 80a4 	bne.w	8000498 <__udivmoddi4+0x234>
 8000350:	1a8a      	subs	r2, r1, r2
 8000352:	0c03      	lsrs	r3, r0, #16
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	b280      	uxth	r0, r0
 800035a:	b2bc      	uxth	r4, r7
 800035c:	2101      	movs	r1, #1
 800035e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000362:	fb0e 221c 	mls	r2, lr, ip, r2
 8000366:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800036a:	fb04 f20c 	mul.w	r2, r4, ip
 800036e:	429a      	cmp	r2, r3
 8000370:	d907      	bls.n	8000382 <__udivmoddi4+0x11e>
 8000372:	18fb      	adds	r3, r7, r3
 8000374:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x11c>
 800037a:	429a      	cmp	r2, r3
 800037c:	f200 80e0 	bhi.w	8000540 <__udivmoddi4+0x2dc>
 8000380:	46c4      	mov	ip, r8
 8000382:	1a9b      	subs	r3, r3, r2
 8000384:	fbb3 f2fe 	udiv	r2, r3, lr
 8000388:	fb0e 3312 	mls	r3, lr, r2, r3
 800038c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000390:	fb02 f404 	mul.w	r4, r2, r4
 8000394:	429c      	cmp	r4, r3
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0x144>
 8000398:	18fb      	adds	r3, r7, r3
 800039a:	f102 30ff 	add.w	r0, r2, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x142>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	f200 80ca 	bhi.w	800053a <__udivmoddi4+0x2d6>
 80003a6:	4602      	mov	r2, r0
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ae:	e7a5      	b.n	80002fc <__udivmoddi4+0x98>
 80003b0:	f1c1 0620 	rsb	r6, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 f706 	lsr.w	r7, r2, r6
 80003ba:	431f      	orrs	r7, r3
 80003bc:	fa0e f401 	lsl.w	r4, lr, r1
 80003c0:	fa20 f306 	lsr.w	r3, r0, r6
 80003c4:	fa2e fe06 	lsr.w	lr, lr, r6
 80003c8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003cc:	4323      	orrs	r3, r4
 80003ce:	fa00 f801 	lsl.w	r8, r0, r1
 80003d2:	fa1f fc87 	uxth.w	ip, r7
 80003d6:	fbbe f0f9 	udiv	r0, lr, r9
 80003da:	0c1c      	lsrs	r4, r3, #16
 80003dc:	fb09 ee10 	mls	lr, r9, r0, lr
 80003e0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003e4:	fb00 fe0c 	mul.w	lr, r0, ip
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	d909      	bls.n	8000404 <__udivmoddi4+0x1a0>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f100 3aff 	add.w	sl, r0, #4294967295
 80003f6:	f080 809c 	bcs.w	8000532 <__udivmoddi4+0x2ce>
 80003fa:	45a6      	cmp	lr, r4
 80003fc:	f240 8099 	bls.w	8000532 <__udivmoddi4+0x2ce>
 8000400:	3802      	subs	r0, #2
 8000402:	443c      	add	r4, r7
 8000404:	eba4 040e 	sub.w	r4, r4, lr
 8000408:	fa1f fe83 	uxth.w	lr, r3
 800040c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000410:	fb09 4413 	mls	r4, r9, r3, r4
 8000414:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000418:	fb03 fc0c 	mul.w	ip, r3, ip
 800041c:	45a4      	cmp	ip, r4
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x1ce>
 8000420:	193c      	adds	r4, r7, r4
 8000422:	f103 3eff 	add.w	lr, r3, #4294967295
 8000426:	f080 8082 	bcs.w	800052e <__udivmoddi4+0x2ca>
 800042a:	45a4      	cmp	ip, r4
 800042c:	d97f      	bls.n	800052e <__udivmoddi4+0x2ca>
 800042e:	3b02      	subs	r3, #2
 8000430:	443c      	add	r4, r7
 8000432:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000436:	eba4 040c 	sub.w	r4, r4, ip
 800043a:	fba0 ec02 	umull	lr, ip, r0, r2
 800043e:	4564      	cmp	r4, ip
 8000440:	4673      	mov	r3, lr
 8000442:	46e1      	mov	r9, ip
 8000444:	d362      	bcc.n	800050c <__udivmoddi4+0x2a8>
 8000446:	d05f      	beq.n	8000508 <__udivmoddi4+0x2a4>
 8000448:	b15d      	cbz	r5, 8000462 <__udivmoddi4+0x1fe>
 800044a:	ebb8 0203 	subs.w	r2, r8, r3
 800044e:	eb64 0409 	sbc.w	r4, r4, r9
 8000452:	fa04 f606 	lsl.w	r6, r4, r6
 8000456:	fa22 f301 	lsr.w	r3, r2, r1
 800045a:	431e      	orrs	r6, r3
 800045c:	40cc      	lsrs	r4, r1
 800045e:	e9c5 6400 	strd	r6, r4, [r5]
 8000462:	2100      	movs	r1, #0
 8000464:	e74f      	b.n	8000306 <__udivmoddi4+0xa2>
 8000466:	fbb1 fcf2 	udiv	ip, r1, r2
 800046a:	0c01      	lsrs	r1, r0, #16
 800046c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000470:	b280      	uxth	r0, r0
 8000472:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000476:	463b      	mov	r3, r7
 8000478:	4638      	mov	r0, r7
 800047a:	463c      	mov	r4, r7
 800047c:	46b8      	mov	r8, r7
 800047e:	46be      	mov	lr, r7
 8000480:	2620      	movs	r6, #32
 8000482:	fbb1 f1f7 	udiv	r1, r1, r7
 8000486:	eba2 0208 	sub.w	r2, r2, r8
 800048a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800048e:	e766      	b.n	800035e <__udivmoddi4+0xfa>
 8000490:	4601      	mov	r1, r0
 8000492:	e718      	b.n	80002c6 <__udivmoddi4+0x62>
 8000494:	4610      	mov	r0, r2
 8000496:	e72c      	b.n	80002f2 <__udivmoddi4+0x8e>
 8000498:	f1c6 0220 	rsb	r2, r6, #32
 800049c:	fa2e f302 	lsr.w	r3, lr, r2
 80004a0:	40b7      	lsls	r7, r6
 80004a2:	40b1      	lsls	r1, r6
 80004a4:	fa20 f202 	lsr.w	r2, r0, r2
 80004a8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004ac:	430a      	orrs	r2, r1
 80004ae:	fbb3 f8fe 	udiv	r8, r3, lr
 80004b2:	b2bc      	uxth	r4, r7
 80004b4:	fb0e 3318 	mls	r3, lr, r8, r3
 80004b8:	0c11      	lsrs	r1, r2, #16
 80004ba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004be:	fb08 f904 	mul.w	r9, r8, r4
 80004c2:	40b0      	lsls	r0, r6
 80004c4:	4589      	cmp	r9, r1
 80004c6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ca:	b280      	uxth	r0, r0
 80004cc:	d93e      	bls.n	800054c <__udivmoddi4+0x2e8>
 80004ce:	1879      	adds	r1, r7, r1
 80004d0:	f108 3cff 	add.w	ip, r8, #4294967295
 80004d4:	d201      	bcs.n	80004da <__udivmoddi4+0x276>
 80004d6:	4589      	cmp	r9, r1
 80004d8:	d81f      	bhi.n	800051a <__udivmoddi4+0x2b6>
 80004da:	eba1 0109 	sub.w	r1, r1, r9
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fb09 f804 	mul.w	r8, r9, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	b292      	uxth	r2, r2
 80004ec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004f0:	4542      	cmp	r2, r8
 80004f2:	d229      	bcs.n	8000548 <__udivmoddi4+0x2e4>
 80004f4:	18ba      	adds	r2, r7, r2
 80004f6:	f109 31ff 	add.w	r1, r9, #4294967295
 80004fa:	d2c4      	bcs.n	8000486 <__udivmoddi4+0x222>
 80004fc:	4542      	cmp	r2, r8
 80004fe:	d2c2      	bcs.n	8000486 <__udivmoddi4+0x222>
 8000500:	f1a9 0102 	sub.w	r1, r9, #2
 8000504:	443a      	add	r2, r7
 8000506:	e7be      	b.n	8000486 <__udivmoddi4+0x222>
 8000508:	45f0      	cmp	r8, lr
 800050a:	d29d      	bcs.n	8000448 <__udivmoddi4+0x1e4>
 800050c:	ebbe 0302 	subs.w	r3, lr, r2
 8000510:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000514:	3801      	subs	r0, #1
 8000516:	46e1      	mov	r9, ip
 8000518:	e796      	b.n	8000448 <__udivmoddi4+0x1e4>
 800051a:	eba7 0909 	sub.w	r9, r7, r9
 800051e:	4449      	add	r1, r9
 8000520:	f1a8 0c02 	sub.w	ip, r8, #2
 8000524:	fbb1 f9fe 	udiv	r9, r1, lr
 8000528:	fb09 f804 	mul.w	r8, r9, r4
 800052c:	e7db      	b.n	80004e6 <__udivmoddi4+0x282>
 800052e:	4673      	mov	r3, lr
 8000530:	e77f      	b.n	8000432 <__udivmoddi4+0x1ce>
 8000532:	4650      	mov	r0, sl
 8000534:	e766      	b.n	8000404 <__udivmoddi4+0x1a0>
 8000536:	4608      	mov	r0, r1
 8000538:	e6fd      	b.n	8000336 <__udivmoddi4+0xd2>
 800053a:	443b      	add	r3, r7
 800053c:	3a02      	subs	r2, #2
 800053e:	e733      	b.n	80003a8 <__udivmoddi4+0x144>
 8000540:	f1ac 0c02 	sub.w	ip, ip, #2
 8000544:	443b      	add	r3, r7
 8000546:	e71c      	b.n	8000382 <__udivmoddi4+0x11e>
 8000548:	4649      	mov	r1, r9
 800054a:	e79c      	b.n	8000486 <__udivmoddi4+0x222>
 800054c:	eba1 0109 	sub.w	r1, r1, r9
 8000550:	46c4      	mov	ip, r8
 8000552:	fbb1 f9fe 	udiv	r9, r1, lr
 8000556:	fb09 f804 	mul.w	r8, r9, r4
 800055a:	e7c4      	b.n	80004e6 <__udivmoddi4+0x282>

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <led_effect_stop>:
 */

#include "main.h"

void led_effect_stop(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af02      	add	r7, sp, #8
	for(int i=0;i<4;i++)
 8000566:	2300      	movs	r3, #0
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	e015      	b.n	8000598 <led_effect_stop+0x38>
	   {
		   handle_led_timer[i]=xTimerStop(handle_led_timer[i-1],portMAX_DELAY);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	3b01      	subs	r3, #1
 8000570:	4a0d      	ldr	r2, [pc, #52]	@ (80005a8 <led_effect_stop+0x48>)
 8000572:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000576:	f04f 33ff 	mov.w	r3, #4294967295
 800057a:	9300      	str	r3, [sp, #0]
 800057c:	2300      	movs	r3, #0
 800057e:	2200      	movs	r2, #0
 8000580:	2103      	movs	r1, #3
 8000582:	f005 ff05 	bl	8006390 <xTimerGenericCommand>
 8000586:	4603      	mov	r3, r0
 8000588:	4619      	mov	r1, r3
 800058a:	4a07      	ldr	r2, [pc, #28]	@ (80005a8 <led_effect_stop+0x48>)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<4;i++)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	3301      	adds	r3, #1
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	2b03      	cmp	r3, #3
 800059c:	dde6      	ble.n	800056c <led_effect_stop+0xc>
	   }
}
 800059e:	bf00      	nop
 80005a0:	bf00      	nop
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	200000cc 	.word	0x200000cc

080005ac <led_effect>:

void led_effect(int a)
{
 80005ac:	b590      	push	{r4, r7, lr}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af02      	add	r7, sp, #8
 80005b2:	6078      	str	r0, [r7, #4]
	led_effect_stop();
 80005b4:	f7ff ffd4 	bl	8000560 <led_effect_stop>
	xTimerStart(handle_led_timer[a-1],portMAX_DELAY);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	3b01      	subs	r3, #1
 80005bc:	4a08      	ldr	r2, [pc, #32]	@ (80005e0 <led_effect+0x34>)
 80005be:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80005c2:	f005 f809 	bl	80055d8 <xTaskGetTickCount>
 80005c6:	4602      	mov	r2, r0
 80005c8:	f04f 33ff 	mov.w	r3, #4294967295
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	2300      	movs	r3, #0
 80005d0:	2101      	movs	r1, #1
 80005d2:	4620      	mov	r0, r4
 80005d4:	f005 fedc 	bl	8006390 <xTimerGenericCommand>

}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd90      	pop	{r4, r7, pc}
 80005e0:	200000cc 	.word	0x200000cc

080005e4 <led_effect1>:

void led_effect1(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
	static int flag=1;
	(flag^=1) ? turn_off_all_leds():turn_on_all_leds();
 80005e8:	4b08      	ldr	r3, [pc, #32]	@ (800060c <led_effect1+0x28>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f083 0301 	eor.w	r3, r3, #1
 80005f0:	4a06      	ldr	r2, [pc, #24]	@ (800060c <led_effect1+0x28>)
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b05      	ldr	r3, [pc, #20]	@ (800060c <led_effect1+0x28>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d002      	beq.n	8000602 <led_effect1+0x1e>
 80005fc:	f000 f856 	bl	80006ac <turn_off_all_leds>
}
 8000600:	e001      	b.n	8000606 <led_effect1+0x22>
	(flag^=1) ? turn_off_all_leds():turn_on_all_leds();
 8000602:	f000 f847 	bl	8000694 <turn_on_all_leds>
}
 8000606:	bf00      	nop
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	20000000 	.word	0x20000000

08000610 <led_effect2>:

void led_effect2(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
	static int flag=1;
	(flag^=1) ? turn_off_all_leds_500ms():turn_on_all_leds_500ms();
 8000614:	4b08      	ldr	r3, [pc, #32]	@ (8000638 <led_effect2+0x28>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	f083 0301 	eor.w	r3, r3, #1
 800061c:	4a06      	ldr	r2, [pc, #24]	@ (8000638 <led_effect2+0x28>)
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b05      	ldr	r3, [pc, #20]	@ (8000638 <led_effect2+0x28>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d002      	beq.n	800062e <led_effect2+0x1e>
 8000628:	f000 f84c 	bl	80006c4 <turn_off_all_leds_500ms>
}
 800062c:	e001      	b.n	8000632 <led_effect2+0x22>
	(flag^=1) ? turn_off_all_leds_500ms():turn_on_all_leds_500ms();
 800062e:	f000 f859 	bl	80006e4 <turn_on_all_leds_500ms>
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000004 	.word	0x20000004

0800063c <led_effect3>:

void led_effect3(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	static int flag=1;
	(flag^=1) ? turn_off_all_leds_1000ms():turn_on_all_leds_1000ms();
 8000640:	4b08      	ldr	r3, [pc, #32]	@ (8000664 <led_effect3+0x28>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f083 0301 	eor.w	r3, r3, #1
 8000648:	4a06      	ldr	r2, [pc, #24]	@ (8000664 <led_effect3+0x28>)
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b05      	ldr	r3, [pc, #20]	@ (8000664 <led_effect3+0x28>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d002      	beq.n	800065a <led_effect3+0x1e>
 8000654:	f000 f856 	bl	8000704 <turn_off_all_leds_1000ms>
}
 8000658:	e001      	b.n	800065e <led_effect3+0x22>
	(flag^=1) ? turn_off_all_leds_1000ms():turn_on_all_leds_1000ms();
 800065a:	f000 f863 	bl	8000724 <turn_on_all_leds_1000ms>
}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000008 	.word	0x20000008

08000668 <led_effect4>:

void led_effect4(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	static int flag=1;
	(flag^=1) ? turn_off_all_leds_2000ms():turn_on_all_leds_2000ms();
 800066c:	4b08      	ldr	r3, [pc, #32]	@ (8000690 <led_effect4+0x28>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f083 0301 	eor.w	r3, r3, #1
 8000674:	4a06      	ldr	r2, [pc, #24]	@ (8000690 <led_effect4+0x28>)
 8000676:	6013      	str	r3, [r2, #0]
 8000678:	4b05      	ldr	r3, [pc, #20]	@ (8000690 <led_effect4+0x28>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d002      	beq.n	8000686 <led_effect4+0x1e>
 8000680:	f000 f860 	bl	8000744 <turn_off_all_leds_2000ms>
}
 8000684:	e001      	b.n	800068a <led_effect4+0x22>
	(flag^=1) ? turn_off_all_leds_2000ms():turn_on_all_leds_2000ms();
 8000686:	f000 f86d 	bl	8000764 <turn_on_all_leds_2000ms>
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	2000000c 	.word	0x2000000c

08000694 <turn_on_all_leds>:

void turn_on_all_leds(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000698:	2201      	movs	r2, #1
 800069a:	2120      	movs	r1, #32
 800069c:	4802      	ldr	r0, [pc, #8]	@ (80006a8 <turn_on_all_leds+0x14>)
 800069e:	f001 f9bd 	bl	8001a1c <HAL_GPIO_WritePin>
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40020000 	.word	0x40020000

080006ac <turn_off_all_leds>:

void turn_off_all_leds(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006b0:	2200      	movs	r2, #0
 80006b2:	2120      	movs	r1, #32
 80006b4:	4802      	ldr	r0, [pc, #8]	@ (80006c0 <turn_off_all_leds+0x14>)
 80006b6:	f001 f9b1 	bl	8001a1c <HAL_GPIO_WritePin>
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40020000 	.word	0x40020000

080006c4 <turn_off_all_leds_500ms>:

void turn_off_all_leds_500ms(void )
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 80006c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006cc:	f000 fe7a 	bl	80013c4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2120      	movs	r1, #32
 80006d4:	4802      	ldr	r0, [pc, #8]	@ (80006e0 <turn_off_all_leds_500ms+0x1c>)
 80006d6:	f001 f9a1 	bl	8001a1c <HAL_GPIO_WritePin>
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40020000 	.word	0x40020000

080006e4 <turn_on_all_leds_500ms>:

void turn_on_all_leds_500ms(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 80006e8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006ec:	f000 fe6a 	bl	80013c4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 80006f0:	2201      	movs	r2, #1
 80006f2:	2120      	movs	r1, #32
 80006f4:	4802      	ldr	r0, [pc, #8]	@ (8000700 <turn_on_all_leds_500ms+0x1c>)
 80006f6:	f001 f991 	bl	8001a1c <HAL_GPIO_WritePin>
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	40020000 	.word	0x40020000

08000704 <turn_off_all_leds_1000ms>:

void turn_off_all_leds_1000ms(void )
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 8000708:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800070c:	f000 fe5a 	bl	80013c4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	2120      	movs	r1, #32
 8000714:	4802      	ldr	r0, [pc, #8]	@ (8000720 <turn_off_all_leds_1000ms+0x1c>)
 8000716:	f001 f981 	bl	8001a1c <HAL_GPIO_WritePin>
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40020000 	.word	0x40020000

08000724 <turn_on_all_leds_1000ms>:

void turn_on_all_leds_1000ms(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	HAL_Delay(1000);
 8000728:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800072c:	f000 fe4a 	bl	80013c4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000730:	2201      	movs	r2, #1
 8000732:	2120      	movs	r1, #32
 8000734:	4802      	ldr	r0, [pc, #8]	@ (8000740 <turn_on_all_leds_1000ms+0x1c>)
 8000736:	f001 f971 	bl	8001a1c <HAL_GPIO_WritePin>
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40020000 	.word	0x40020000

08000744 <turn_off_all_leds_2000ms>:

void turn_off_all_leds_2000ms(void )
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
	HAL_Delay(2000);
 8000748:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800074c:	f000 fe3a 	bl	80013c4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	2120      	movs	r1, #32
 8000754:	4802      	ldr	r0, [pc, #8]	@ (8000760 <turn_off_all_leds_2000ms+0x1c>)
 8000756:	f001 f961 	bl	8001a1c <HAL_GPIO_WritePin>
}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40020000 	.word	0x40020000

08000764 <turn_on_all_leds_2000ms>:

void turn_on_all_leds_2000ms(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	HAL_Delay(2000);
 8000768:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800076c:	f000 fe2a 	bl	80013c4 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000770:	2201      	movs	r2, #1
 8000772:	2120      	movs	r1, #32
 8000774:	4802      	ldr	r0, [pc, #8]	@ (8000780 <turn_on_all_leds_2000ms+0x1c>)
 8000776:	f001 f951 	bl	8001a1c <HAL_GPIO_WritePin>
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40020000 	.word	0x40020000

08000784 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b08a      	sub	sp, #40	@ 0x28
 8000788:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078a:	f000 fdd9 	bl	8001340 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800078e:	f000 f8f5 	bl	800097c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 f9b5 	bl	8000b00 <MX_GPIO_Init>
  MX_RTC_Init();
 8000796:	f000 f963 	bl	8000a60 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800079a:	f000 f987 	bl	8000aac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  status=xTaskCreate(menu_task,"Menu task",200,NULL,2,&handle_menu_task);
 800079e:	4b63      	ldr	r3, [pc, #396]	@ (800092c <main+0x1a8>)
 80007a0:	9301      	str	r3, [sp, #4]
 80007a2:	2302      	movs	r3, #2
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	2300      	movs	r3, #0
 80007a8:	22c8      	movs	r2, #200	@ 0xc8
 80007aa:	4961      	ldr	r1, [pc, #388]	@ (8000930 <main+0x1ac>)
 80007ac:	4861      	ldr	r0, [pc, #388]	@ (8000934 <main+0x1b0>)
 80007ae:	f004 fceb 	bl	8005188 <xTaskCreate>
 80007b2:	4603      	mov	r3, r0
 80007b4:	4a60      	ldr	r2, [pc, #384]	@ (8000938 <main+0x1b4>)
 80007b6:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 80007b8:	4b5f      	ldr	r3, [pc, #380]	@ (8000938 <main+0x1b4>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d00b      	beq.n	80007d8 <main+0x54>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80007c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007c4:	f383 8811 	msr	BASEPRI, r3
 80007c8:	f3bf 8f6f 	isb	sy
 80007cc:	f3bf 8f4f 	dsb	sy
 80007d0:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80007d2:	bf00      	nop
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <main+0x50>

  status=xTaskCreate(cmd_task,"CMD task",200,NULL,2,&handle_cmd_task);
 80007d8:	4b58      	ldr	r3, [pc, #352]	@ (800093c <main+0x1b8>)
 80007da:	9301      	str	r3, [sp, #4]
 80007dc:	2302      	movs	r3, #2
 80007de:	9300      	str	r3, [sp, #0]
 80007e0:	2300      	movs	r3, #0
 80007e2:	22c8      	movs	r2, #200	@ 0xc8
 80007e4:	4956      	ldr	r1, [pc, #344]	@ (8000940 <main+0x1bc>)
 80007e6:	4857      	ldr	r0, [pc, #348]	@ (8000944 <main+0x1c0>)
 80007e8:	f004 fcce 	bl	8005188 <xTaskCreate>
 80007ec:	4603      	mov	r3, r0
 80007ee:	4a52      	ldr	r2, [pc, #328]	@ (8000938 <main+0x1b4>)
 80007f0:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 80007f2:	4b51      	ldr	r3, [pc, #324]	@ (8000938 <main+0x1b4>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d00b      	beq.n	8000812 <main+0x8e>
        __asm volatile
 80007fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007fe:	f383 8811 	msr	BASEPRI, r3
 8000802:	f3bf 8f6f 	isb	sy
 8000806:	f3bf 8f4f 	dsb	sy
 800080a:	617b      	str	r3, [r7, #20]
    }
 800080c:	bf00      	nop
 800080e:	bf00      	nop
 8000810:	e7fd      	b.n	800080e <main+0x8a>

  status=xTaskCreate(print_task,"Print task",200,NULL,2,&handle_print_task);
 8000812:	4b4d      	ldr	r3, [pc, #308]	@ (8000948 <main+0x1c4>)
 8000814:	9301      	str	r3, [sp, #4]
 8000816:	2302      	movs	r3, #2
 8000818:	9300      	str	r3, [sp, #0]
 800081a:	2300      	movs	r3, #0
 800081c:	22c8      	movs	r2, #200	@ 0xc8
 800081e:	494b      	ldr	r1, [pc, #300]	@ (800094c <main+0x1c8>)
 8000820:	484b      	ldr	r0, [pc, #300]	@ (8000950 <main+0x1cc>)
 8000822:	f004 fcb1 	bl	8005188 <xTaskCreate>
 8000826:	4603      	mov	r3, r0
 8000828:	4a43      	ldr	r2, [pc, #268]	@ (8000938 <main+0x1b4>)
 800082a:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 800082c:	4b42      	ldr	r3, [pc, #264]	@ (8000938 <main+0x1b4>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d00b      	beq.n	800084c <main+0xc8>
        __asm volatile
 8000834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000838:	f383 8811 	msr	BASEPRI, r3
 800083c:	f3bf 8f6f 	isb	sy
 8000840:	f3bf 8f4f 	dsb	sy
 8000844:	613b      	str	r3, [r7, #16]
    }
 8000846:	bf00      	nop
 8000848:	bf00      	nop
 800084a:	e7fd      	b.n	8000848 <main+0xc4>

  status=xTaskCreate(led_task,"LED task",200,NULL,2,&handle_led_task);
 800084c:	4b41      	ldr	r3, [pc, #260]	@ (8000954 <main+0x1d0>)
 800084e:	9301      	str	r3, [sp, #4]
 8000850:	2302      	movs	r3, #2
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	2300      	movs	r3, #0
 8000856:	22c8      	movs	r2, #200	@ 0xc8
 8000858:	493f      	ldr	r1, [pc, #252]	@ (8000958 <main+0x1d4>)
 800085a:	4840      	ldr	r0, [pc, #256]	@ (800095c <main+0x1d8>)
 800085c:	f004 fc94 	bl	8005188 <xTaskCreate>
 8000860:	4603      	mov	r3, r0
 8000862:	4a35      	ldr	r2, [pc, #212]	@ (8000938 <main+0x1b4>)
 8000864:	6013      	str	r3, [r2, #0]
  configASSERT(status == pdPASS);
 8000866:	4b34      	ldr	r3, [pc, #208]	@ (8000938 <main+0x1b4>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d00b      	beq.n	8000886 <main+0x102>
        __asm volatile
 800086e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000872:	f383 8811 	msr	BASEPRI, r3
 8000876:	f3bf 8f6f 	isb	sy
 800087a:	f3bf 8f4f 	dsb	sy
 800087e:	60fb      	str	r3, [r7, #12]
    }
 8000880:	bf00      	nop
 8000882:	bf00      	nop
 8000884:	e7fd      	b.n	8000882 <main+0xfe>

  //status=xTaskCreate(rtc_task,"RTC task",200,NULL,2,&handle_rtc_task);
   //configASSERT(status == pdPASS);

   // Queue creation
   q_data = xQueueCreate(10,sizeof(char)); // no of items is 10 and each item is of size char
 8000886:	2200      	movs	r2, #0
 8000888:	2101      	movs	r1, #1
 800088a:	200a      	movs	r0, #10
 800088c:	f003 ff40 	bl	8004710 <xQueueGenericCreate>
 8000890:	4603      	mov	r3, r0
 8000892:	4a33      	ldr	r2, [pc, #204]	@ (8000960 <main+0x1dc>)
 8000894:	6013      	str	r3, [r2, #0]
   configASSERT(q_data != NULL); // xQueueCreate returns NULL id queue is not created
 8000896:	4b32      	ldr	r3, [pc, #200]	@ (8000960 <main+0x1dc>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d10b      	bne.n	80008b6 <main+0x132>
        __asm volatile
 800089e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008a2:	f383 8811 	msr	BASEPRI, r3
 80008a6:	f3bf 8f6f 	isb	sy
 80008aa:	f3bf 8f4f 	dsb	sy
 80008ae:	60bb      	str	r3, [r7, #8]
    }
 80008b0:	bf00      	nop
 80008b2:	bf00      	nop
 80008b4:	e7fd      	b.n	80008b2 <main+0x12e>

   q_print= xQueueCreate(10,sizeof(size_t)); //size of the pointer pointed to
 80008b6:	2200      	movs	r2, #0
 80008b8:	2104      	movs	r1, #4
 80008ba:	200a      	movs	r0, #10
 80008bc:	f003 ff28 	bl	8004710 <xQueueGenericCreate>
 80008c0:	4603      	mov	r3, r0
 80008c2:	4a28      	ldr	r2, [pc, #160]	@ (8000964 <main+0x1e0>)
 80008c4:	6013      	str	r3, [r2, #0]
   configASSERT(q_print != NULL);
 80008c6:	4b27      	ldr	r3, [pc, #156]	@ (8000964 <main+0x1e0>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d10b      	bne.n	80008e6 <main+0x162>
        __asm volatile
 80008ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80008d2:	f383 8811 	msr	BASEPRI, r3
 80008d6:	f3bf 8f6f 	isb	sy
 80008da:	f3bf 8f4f 	dsb	sy
 80008de:	607b      	str	r3, [r7, #4]
    }
 80008e0:	bf00      	nop
 80008e2:	bf00      	nop
 80008e4:	e7fd      	b.n	80008e2 <main+0x15e>

   //Create software timer for the LED effects

   for(int i=0;i<4;i++)
 80008e6:	2300      	movs	r3, #0
 80008e8:	61fb      	str	r3, [r7, #28]
 80008ea:	e013      	b.n	8000914 <main+0x190>
   {
	   handle_led_timer[i]=xTimerCreate("Led_Timer",pdMS_TO_TICKS(500),pdTRUE,(void *)(i+1),led_effect_callback);
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	3301      	adds	r3, #1
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000968 <main+0x1e4>)
 80008f4:	9300      	str	r3, [sp, #0]
 80008f6:	4613      	mov	r3, r2
 80008f8:	2201      	movs	r2, #1
 80008fa:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80008fe:	481b      	ldr	r0, [pc, #108]	@ (800096c <main+0x1e8>)
 8000900:	f005 fce8 	bl	80062d4 <xTimerCreate>
 8000904:	4602      	mov	r2, r0
 8000906:	491a      	ldr	r1, [pc, #104]	@ (8000970 <main+0x1ec>)
 8000908:	69fb      	ldr	r3, [r7, #28]
 800090a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   for(int i=0;i<4;i++)
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	3301      	adds	r3, #1
 8000912:	61fb      	str	r3, [r7, #28]
 8000914:	69fb      	ldr	r3, [r7, #28]
 8000916:	2b03      	cmp	r3, #3
 8000918:	dde8      	ble.n	80008ec <main+0x168>
   }

   // Prepares the UART peripheral to receive data in interrupt mode
   HAL_UART_Receive_IT(&huart2, (uint8_t *)&user_data, 1);
 800091a:	2201      	movs	r2, #1
 800091c:	4915      	ldr	r1, [pc, #84]	@ (8000974 <main+0x1f0>)
 800091e:	4816      	ldr	r0, [pc, #88]	@ (8000978 <main+0x1f4>)
 8000920:	f002 fe55 	bl	80035ce <HAL_UART_Receive_IT>

   //Start task scheduler
   vTaskStartScheduler();
 8000924:	f004 fd68 	bl	80053f8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <main+0x1a4>
 800092c:	200000a8 	.word	0x200000a8
 8000930:	080072f0 	.word	0x080072f0
 8000934:	08000f85 	.word	0x08000f85
 8000938:	200000c4 	.word	0x200000c4
 800093c:	200000ac 	.word	0x200000ac
 8000940:	080072fc 	.word	0x080072fc
 8000944:	08001071 	.word	0x08001071
 8000948:	200000b0 	.word	0x200000b0
 800094c:	08007308 	.word	0x08007308
 8000950:	080010a1 	.word	0x080010a1
 8000954:	200000b4 	.word	0x200000b4
 8000958:	08007314 	.word	0x08007314
 800095c:	080010e1 	.word	0x080010e1
 8000960:	200000bc 	.word	0x200000bc
 8000964:	200000c0 	.word	0x200000c0
 8000968:	08000bb1 	.word	0x08000bb1
 800096c:	08007320 	.word	0x08007320
 8000970:	200000cc 	.word	0x200000cc
 8000974:	200000c8 	.word	0x200000c8
 8000978:	20000060 	.word	0x20000060

0800097c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b094      	sub	sp, #80	@ 0x50
 8000980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	2234      	movs	r2, #52	@ 0x34
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f006 fc6a 	bl	8007264 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000990:	f107 0308 	add.w	r3, r7, #8
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a0:	2300      	movs	r3, #0
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	4b2c      	ldr	r3, [pc, #176]	@ (8000a58 <SystemClock_Config+0xdc>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a8:	4a2b      	ldr	r2, [pc, #172]	@ (8000a58 <SystemClock_Config+0xdc>)
 80009aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b0:	4b29      	ldr	r3, [pc, #164]	@ (8000a58 <SystemClock_Config+0xdc>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009bc:	2300      	movs	r3, #0
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	4b26      	ldr	r3, [pc, #152]	@ (8000a5c <SystemClock_Config+0xe0>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009c8:	4a24      	ldr	r2, [pc, #144]	@ (8000a5c <SystemClock_Config+0xe0>)
 80009ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009ce:	6013      	str	r3, [r2, #0]
 80009d0:	4b22      	ldr	r3, [pc, #136]	@ (8000a5c <SystemClock_Config+0xe0>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80009dc:	230a      	movs	r3, #10
 80009de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 80009e0:	2300      	movs	r3, #0
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009e4:	2301      	movs	r3, #1
 80009e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e8:	2310      	movs	r3, #16
 80009ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80009ec:	2301      	movs	r3, #1
 80009ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f0:	2302      	movs	r3, #2
 80009f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009f4:	2300      	movs	r3, #0
 80009f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80009f8:	2310      	movs	r3, #16
 80009fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009fc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000a00:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a02:	2304      	movs	r3, #4
 8000a04:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a06:	2302      	movs	r3, #2
 8000a08:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0e:	f107 031c 	add.w	r3, r7, #28
 8000a12:	4618      	mov	r0, r3
 8000a14:	f001 fec2 	bl	800279c <HAL_RCC_OscConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a1e:	f000 f94b 	bl	8000cb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a22:	230f      	movs	r3, #15
 8000a24:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a26:	2302      	movs	r3, #2
 8000a28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a2e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a32:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a38:	f107 0308 	add.w	r3, r7, #8
 8000a3c:	2102      	movs	r1, #2
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f001 f806 	bl	8001a50 <HAL_RCC_ClockConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000a4a:	f000 f935 	bl	8000cb8 <Error_Handler>
  }
}
 8000a4e:	bf00      	nop
 8000a50:	3750      	adds	r7, #80	@ 0x50
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40007000 	.word	0x40007000

08000a60 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa4 <MX_RTC_Init+0x44>)
 8000a66:	4a10      	ldr	r2, [pc, #64]	@ (8000aa8 <MX_RTC_Init+0x48>)
 8000a68:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_12;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa4 <MX_RTC_Init+0x44>)
 8000a6c:	2240      	movs	r2, #64	@ 0x40
 8000a6e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa4 <MX_RTC_Init+0x44>)
 8000a72:	227f      	movs	r2, #127	@ 0x7f
 8000a74:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa4 <MX_RTC_Init+0x44>)
 8000a78:	22ff      	movs	r2, #255	@ 0xff
 8000a7a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	@ (8000aa4 <MX_RTC_Init+0x44>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a82:	4b08      	ldr	r3, [pc, #32]	@ (8000aa4 <MX_RTC_Init+0x44>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a88:	4b06      	ldr	r3, [pc, #24]	@ (8000aa4 <MX_RTC_Init+0x44>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a8e:	4805      	ldr	r0, [pc, #20]	@ (8000aa4 <MX_RTC_Init+0x44>)
 8000a90:	f002 f922 	bl	8002cd8 <HAL_RTC_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8000a9a:	f000 f90d 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000040 	.word	0x20000040
 8000aa8:	40002800 	.word	0x40002800

08000aac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ab0:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ab2:	4a12      	ldr	r2, [pc, #72]	@ (8000afc <MX_USART2_UART_Init+0x50>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ab6:	4b10      	ldr	r3, [pc, #64]	@ (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ab8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000abc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b0b      	ldr	r3, [pc, #44]	@ (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	@ (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ae2:	4805      	ldr	r0, [pc, #20]	@ (8000af8 <MX_USART2_UART_Init+0x4c>)
 8000ae4:	f002 fc98 	bl	8003418 <HAL_UART_Init>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000aee:	f000 f8e3 	bl	8000cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000af2:	bf00      	nop
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000060 	.word	0x20000060
 8000afc:	40004400 	.word	0x40004400

08000b00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	@ 0x28
 8000b04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	4b23      	ldr	r3, [pc, #140]	@ (8000ba8 <MX_GPIO_Init+0xa8>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a22      	ldr	r2, [pc, #136]	@ (8000ba8 <MX_GPIO_Init+0xa8>)
 8000b20:	f043 0304 	orr.w	r3, r3, #4
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b20      	ldr	r3, [pc, #128]	@ (8000ba8 <MX_GPIO_Init+0xa8>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0304 	and.w	r3, r3, #4
 8000b2e:	613b      	str	r3, [r7, #16]
 8000b30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ba8 <MX_GPIO_Init+0xa8>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	4a1b      	ldr	r2, [pc, #108]	@ (8000ba8 <MX_GPIO_Init+0xa8>)
 8000b3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b42:	4b19      	ldr	r3, [pc, #100]	@ (8000ba8 <MX_GPIO_Init+0xa8>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b4a:	60fb      	str	r3, [r7, #12]
 8000b4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	4b15      	ldr	r3, [pc, #84]	@ (8000ba8 <MX_GPIO_Init+0xa8>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	4a14      	ldr	r2, [pc, #80]	@ (8000ba8 <MX_GPIO_Init+0xa8>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b5e:	4b12      	ldr	r3, [pc, #72]	@ (8000ba8 <MX_GPIO_Init+0xa8>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ba8 <MX_GPIO_Init+0xa8>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba8 <MX_GPIO_Init+0xa8>)
 8000b74:	f043 0302 	orr.w	r3, r3, #2
 8000b78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba8 <MX_GPIO_Init+0xa8>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	f003 0302 	and.w	r3, r3, #2
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b86:	2320      	movs	r3, #32
 8000b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b8a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b94:	f107 0314 	add.w	r3, r7, #20
 8000b98:	4619      	mov	r1, r3
 8000b9a:	4804      	ldr	r0, [pc, #16]	@ (8000bac <MX_GPIO_Init+0xac>)
 8000b9c:	f000 fdaa 	bl	80016f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ba0:	bf00      	nop
 8000ba2:	3728      	adds	r7, #40	@ 0x28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40023800 	.word	0x40023800
 8000bac:	40020000 	.word	0x40020000

08000bb0 <led_effect_callback>:

/* USER CODE BEGIN 4 */

void led_effect_callback(TimerHandle_t xTimer)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	int id;
	id=(uint32_t)pvTimerGetTimerID(xTimer);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f005 fed3 	bl	8006964 <pvTimerGetTimerID>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	60fb      	str	r3, [r7, #12]
	switch(id)
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	2b03      	cmp	r3, #3
 8000bc8:	d816      	bhi.n	8000bf8 <led_effect_callback+0x48>
 8000bca:	a201      	add	r2, pc, #4	@ (adr r2, 8000bd0 <led_effect_callback+0x20>)
 8000bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bd0:	08000be1 	.word	0x08000be1
 8000bd4:	08000be7 	.word	0x08000be7
 8000bd8:	08000bed 	.word	0x08000bed
 8000bdc:	08000bf3 	.word	0x08000bf3
	{
	case 1:
		led_effect1();
 8000be0:	f7ff fd00 	bl	80005e4 <led_effect1>
		break;
 8000be4:	e008      	b.n	8000bf8 <led_effect_callback+0x48>
	case 2:
		led_effect2();
 8000be6:	f7ff fd13 	bl	8000610 <led_effect2>
		break;
 8000bea:	e005      	b.n	8000bf8 <led_effect_callback+0x48>
	case 3:
		led_effect3();
 8000bec:	f7ff fd26 	bl	800063c <led_effect3>
		break;
 8000bf0:	e002      	b.n	8000bf8 <led_effect_callback+0x48>
	case 4:
		led_effect4();
 8000bf2:	f7ff fd39 	bl	8000668 <led_effect4>
		break;
 8000bf6:	bf00      	nop
	}
}
 8000bf8:	bf00      	nop
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <HAL_UART_RxCpltCallback>:
// This function is called once the data from the user is received by the UART peripheral
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af02      	add	r7, sp, #8
 8000c06:	6078      	str	r0, [r7, #4]

	uint8_t dummy;
	/*TODO: check : is queue full ? */
	if(xQueueIsQueueFullFromISR(q_data)==pdFALSE)
 8000c08:	4b1e      	ldr	r3, [pc, #120]	@ (8000c84 <HAL_UART_RxCpltCallback+0x84>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f004 fa36 	bl	800507e <xQueueIsQueueFullFromISR>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d107      	bne.n	8000c28 <HAL_UART_RxCpltCallback+0x28>
		{
			/*Queue is not full if the body of the if condition is entered */

			/* Enqueue data byte - add data item to the end of queue*/
		xQueueSendFromISR(q_data, (void *)&user_data, NULL);
 8000c18:	4b1a      	ldr	r3, [pc, #104]	@ (8000c84 <HAL_UART_RxCpltCallback+0x84>)
 8000c1a:	6818      	ldr	r0, [r3, #0]
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	2200      	movs	r2, #0
 8000c20:	4919      	ldr	r1, [pc, #100]	@ (8000c88 <HAL_UART_RxCpltCallback+0x88>)
 8000c22:	f003 fee5 	bl	80049f0 <xQueueGenericSendFromISR>
 8000c26:	e013      	b.n	8000c50 <HAL_UART_RxCpltCallback+0x50>
		}
	else
	{
			/*Queue is full */

			if(user_data == '\n')
 8000c28:	4b17      	ldr	r3, [pc, #92]	@ (8000c88 <HAL_UART_RxCpltCallback+0x88>)
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	2b0a      	cmp	r3, #10
 8000c30:	d10e      	bne.n	8000c50 <HAL_UART_RxCpltCallback+0x50>
			{
				/*user_data = '\n' */

				/*TODO: make sure that last data byte of the queue is '\n' */
				xQueueReceiveFromISR(q_data, (void *)&dummy, NULL);
 8000c32:	4b14      	ldr	r3, [pc, #80]	@ (8000c84 <HAL_UART_RxCpltCallback+0x84>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f107 010f 	add.w	r1, r7, #15
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f004 f85d 	bl	8004cfc <xQueueReceiveFromISR>
				xQueueSendFromISR(q_data, (void *)&user_data, NULL);
 8000c42:	4b10      	ldr	r3, [pc, #64]	@ (8000c84 <HAL_UART_RxCpltCallback+0x84>)
 8000c44:	6818      	ldr	r0, [r3, #0]
 8000c46:	2300      	movs	r3, #0
 8000c48:	2200      	movs	r2, #0
 8000c4a:	490f      	ldr	r1, [pc, #60]	@ (8000c88 <HAL_UART_RxCpltCallback+0x88>)
 8000c4c:	f003 fed0 	bl	80049f0 <xQueueGenericSendFromISR>
		     }

	}
		/*TODO: send notification to command handling task if user_data = '\n' */
        if(user_data == '\n')
 8000c50:	4b0d      	ldr	r3, [pc, #52]	@ (8000c88 <HAL_UART_RxCpltCallback+0x88>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	2b0a      	cmp	r3, #10
 8000c58:	d10a      	bne.n	8000c70 <HAL_UART_RxCpltCallback+0x70>
        	xTaskNotifyFromISR(handle_cmd_task,0,eNoAction,NULL);
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c8c <HAL_UART_RxCpltCallback+0x8c>)
 8000c5c:	6818      	ldr	r0, [r3, #0]
 8000c5e:	2300      	movs	r3, #0
 8000c60:	9301      	str	r3, [sp, #4]
 8000c62:	2300      	movs	r3, #0
 8000c64:	9300      	str	r3, [sp, #0]
 8000c66:	2300      	movs	r3, #0
 8000c68:	2200      	movs	r2, #0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	f005 f992 	bl	8005f94 <xTaskGenericNotifyFromISR>


		/* TODO: Enable UART data byte reception again in IT mode */
        HAL_UART_Receive_IT(&huart2,(uint8_t *) &user_data, 1);
 8000c70:	2201      	movs	r2, #1
 8000c72:	4905      	ldr	r1, [pc, #20]	@ (8000c88 <HAL_UART_RxCpltCallback+0x88>)
 8000c74:	4806      	ldr	r0, [pc, #24]	@ (8000c90 <HAL_UART_RxCpltCallback+0x90>)
 8000c76:	f002 fcaa 	bl	80035ce <HAL_UART_Receive_IT>
}
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	200000bc 	.word	0x200000bc
 8000c88:	200000c8 	.word	0x200000c8
 8000c8c:	200000ac 	.word	0x200000ac
 8000c90:	20000060 	.word	0x20000060

08000c94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a04      	ldr	r2, [pc, #16]	@ (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d101      	bne.n	8000caa <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000ca6:	f000 fb6d 	bl	8001384 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000caa:	bf00      	nop
 8000cac:	3708      	adds	r7, #8
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40001000 	.word	0x40001000

08000cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cbc:	b672      	cpsid	i
}
 8000cbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <Error_Handler+0x8>

08000cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	607b      	str	r3, [r7, #4]
 8000cce:	4b10      	ldr	r3, [pc, #64]	@ (8000d10 <HAL_MspInit+0x4c>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd2:	4a0f      	ldr	r2, [pc, #60]	@ (8000d10 <HAL_MspInit+0x4c>)
 8000cd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cda:	4b0d      	ldr	r3, [pc, #52]	@ (8000d10 <HAL_MspInit+0x4c>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ce2:	607b      	str	r3, [r7, #4]
 8000ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	603b      	str	r3, [r7, #0]
 8000cea:	4b09      	ldr	r3, [pc, #36]	@ (8000d10 <HAL_MspInit+0x4c>)
 8000cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cee:	4a08      	ldr	r2, [pc, #32]	@ (8000d10 <HAL_MspInit+0x4c>)
 8000cf0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cf6:	4b06      	ldr	r3, [pc, #24]	@ (8000d10 <HAL_MspInit+0x4c>)
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cfe:	603b      	str	r3, [r7, #0]
 8000d00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40023800 	.word	0x40023800

08000d14 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b09a      	sub	sp, #104	@ 0x68
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d1c:	f107 030c 	add.w	r3, r7, #12
 8000d20:	225c      	movs	r2, #92	@ 0x5c
 8000d22:	2100      	movs	r1, #0
 8000d24:	4618      	mov	r0, r3
 8000d26:	f006 fa9d 	bl	8007264 <memset>
  if(hrtc->Instance==RTC)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a0c      	ldr	r2, [pc, #48]	@ (8000d60 <HAL_RTC_MspInit+0x4c>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d111      	bne.n	8000d58 <HAL_RTC_MspInit+0x44>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d34:	2320      	movs	r3, #32
 8000d36:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d38:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3e:	f107 030c 	add.w	r3, r7, #12
 8000d42:	4618      	mov	r0, r3
 8000d44:	f000 ffd0 	bl	8001ce8 <HAL_RCCEx_PeriphCLKConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000d4e:	f7ff ffb3 	bl	8000cb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d52:	4b04      	ldr	r3, [pc, #16]	@ (8000d64 <HAL_RTC_MspInit+0x50>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8000d58:	bf00      	nop
 8000d5a:	3768      	adds	r7, #104	@ 0x68
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40002800 	.word	0x40002800
 8000d64:	42470e3c 	.word	0x42470e3c

08000d68 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	@ 0x28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a1d      	ldr	r2, [pc, #116]	@ (8000dfc <HAL_UART_MspInit+0x94>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d133      	bne.n	8000df2 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e00 <HAL_UART_MspInit+0x98>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d92:	4a1b      	ldr	r2, [pc, #108]	@ (8000e00 <HAL_UART_MspInit+0x98>)
 8000d94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d9a:	4b19      	ldr	r3, [pc, #100]	@ (8000e00 <HAL_UART_MspInit+0x98>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b15      	ldr	r3, [pc, #84]	@ (8000e00 <HAL_UART_MspInit+0x98>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a14      	ldr	r2, [pc, #80]	@ (8000e00 <HAL_UART_MspInit+0x98>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b12      	ldr	r3, [pc, #72]	@ (8000e00 <HAL_UART_MspInit+0x98>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dc2:	230c      	movs	r3, #12
 8000dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dd2:	2307      	movs	r3, #7
 8000dd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4809      	ldr	r0, [pc, #36]	@ (8000e04 <HAL_UART_MspInit+0x9c>)
 8000dde:	f000 fc89 	bl	80016f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 6, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2106      	movs	r1, #6
 8000de6:	2026      	movs	r0, #38	@ 0x26
 8000de8:	f000 fbc8 	bl	800157c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dec:	2026      	movs	r0, #38	@ 0x26
 8000dee:	f000 fbe1 	bl	80015b4 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000df2:	bf00      	nop
 8000df4:	3728      	adds	r7, #40	@ 0x28
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40004400 	.word	0x40004400
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020000 	.word	0x40020000

08000e08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08e      	sub	sp, #56	@ 0x38
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e10:	2300      	movs	r3, #0
 8000e12:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	4b33      	ldr	r3, [pc, #204]	@ (8000eec <HAL_InitTick+0xe4>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e20:	4a32      	ldr	r2, [pc, #200]	@ (8000eec <HAL_InitTick+0xe4>)
 8000e22:	f043 0310 	orr.w	r3, r3, #16
 8000e26:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e28:	4b30      	ldr	r3, [pc, #192]	@ (8000eec <HAL_InitTick+0xe4>)
 8000e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2c:	f003 0310 	and.w	r3, r3, #16
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e34:	f107 0210 	add.w	r2, r7, #16
 8000e38:	f107 0314 	add.w	r3, r7, #20
 8000e3c:	4611      	mov	r1, r2
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 ff20 	bl	8001c84 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e44:	6a3b      	ldr	r3, [r7, #32]
 8000e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d103      	bne.n	8000e56 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e4e:	f000 fef1 	bl	8001c34 <HAL_RCC_GetPCLK1Freq>
 8000e52:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e54:	e004      	b.n	8000e60 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e56:	f000 feed 	bl	8001c34 <HAL_RCC_GetPCLK1Freq>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e62:	4a23      	ldr	r2, [pc, #140]	@ (8000ef0 <HAL_InitTick+0xe8>)
 8000e64:	fba2 2303 	umull	r2, r3, r2, r3
 8000e68:	0c9b      	lsrs	r3, r3, #18
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e6e:	4b21      	ldr	r3, [pc, #132]	@ (8000ef4 <HAL_InitTick+0xec>)
 8000e70:	4a21      	ldr	r2, [pc, #132]	@ (8000ef8 <HAL_InitTick+0xf0>)
 8000e72:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e74:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef4 <HAL_InitTick+0xec>)
 8000e76:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e7a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ef4 <HAL_InitTick+0xec>)
 8000e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e80:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e82:	4b1c      	ldr	r3, [pc, #112]	@ (8000ef4 <HAL_InitTick+0xec>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e88:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef4 <HAL_InitTick+0xec>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8e:	4b19      	ldr	r3, [pc, #100]	@ (8000ef4 <HAL_InitTick+0xec>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e94:	4817      	ldr	r0, [pc, #92]	@ (8000ef4 <HAL_InitTick+0xec>)
 8000e96:	f002 f823 	bl	8002ee0 <HAL_TIM_Base_Init>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000ea0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d11b      	bne.n	8000ee0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ea8:	4812      	ldr	r0, [pc, #72]	@ (8000ef4 <HAL_InitTick+0xec>)
 8000eaa:	f002 f873 	bl	8002f94 <HAL_TIM_Base_Start_IT>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000eb4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d111      	bne.n	8000ee0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ebc:	2036      	movs	r0, #54	@ 0x36
 8000ebe:	f000 fb79 	bl	80015b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b0f      	cmp	r3, #15
 8000ec6:	d808      	bhi.n	8000eda <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	2036      	movs	r0, #54	@ 0x36
 8000ece:	f000 fb55 	bl	800157c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ed2:	4a0a      	ldr	r2, [pc, #40]	@ (8000efc <HAL_InitTick+0xf4>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	e002      	b.n	8000ee0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000eda:	2301      	movs	r3, #1
 8000edc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ee0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3738      	adds	r7, #56	@ 0x38
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	431bde83 	.word	0x431bde83
 8000ef4:	200000dc 	.word	0x200000dc
 8000ef8:	40001000 	.word	0x40001000
 8000efc:	20000018 	.word	0x20000018

08000f00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <NMI_Handler+0x4>

08000f08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0c:	bf00      	nop
 8000f0e:	e7fd      	b.n	8000f0c <HardFault_Handler+0x4>

08000f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f14:	bf00      	nop
 8000f16:	e7fd      	b.n	8000f14 <MemManage_Handler+0x4>

08000f18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1c:	bf00      	nop
 8000f1e:	e7fd      	b.n	8000f1c <BusFault_Handler+0x4>

08000f20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <UsageFault_Handler+0x4>

08000f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f3c:	4802      	ldr	r0, [pc, #8]	@ (8000f48 <USART2_IRQHandler+0x10>)
 8000f3e:	f002 fb6b 	bl	8003618 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000060 	.word	0x20000060

08000f4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f50:	4802      	ldr	r0, [pc, #8]	@ (8000f5c <TIM6_DAC_IRQHandler+0x10>)
 8000f52:	f002 f88f 	bl	8003074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200000dc 	.word	0x200000dc

08000f60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <SystemInit+0x20>)
 8000f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f6a:	4a05      	ldr	r2, [pc, #20]	@ (8000f80 <SystemInit+0x20>)
 8000f6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <menu_task>:
int extract_command(command_t *cmd); // extract the bytes from the command

const char* msg_invalid="Invalid option";

void menu_task(void *param)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08a      	sub	sp, #40	@ 0x28
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	6078      	str	r0, [r7, #4]
	uint32_t cmd_addr;
	command_t *cmd;
	int option;
	state_t curr_state=sMainMenu;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	77fb      	strb	r3, [r7, #31]
	// Create the string that is printed first
			const char* msg_menu="===============================\n"
 8000f90:	4b32      	ldr	r3, [pc, #200]	@ (800105c <menu_task+0xd8>)
 8000f92:	60fb      	str	r3, [r7, #12]
					         "==============================\n"
					         "LED Effect ------------->0     \n"
					         "Date and Time ---------->1     \n"
					         "Exit ------------------->2      \n"
			                 "Enter your choice here  :       ";
			const char* msg_invalid="Invalid option \n";
 8000f94:	4b32      	ldr	r3, [pc, #200]	@ (8001060 <menu_task+0xdc>)
 8000f96:	60bb      	str	r3, [r7, #8]
	while(1)
	{
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 8000f98:	4b32      	ldr	r3, [pc, #200]	@ (8001064 <menu_task+0xe0>)
 8000f9a:	6818      	ldr	r0, [r3, #0]
 8000f9c:	f107 010c 	add.w	r1, r7, #12
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa6:	f003 fc39 	bl	800481c <xQueueGenericSend>
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8000faa:	f107 0310 	add.w	r3, r7, #16
 8000fae:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb2:	9200      	str	r2, [sp, #0]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	2000      	movs	r0, #0
 8000fba:	f004 fe95 	bl	8005ce8 <xTaskGenericNotifyWait>
		cmd=(command_t *)cmd_addr;
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	61bb      	str	r3, [r7, #24]

		if(cmd->len == 1)
 8000fc2:	69bb      	ldr	r3, [r7, #24]
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d132      	bne.n	8001030 <menu_task+0xac>
		{
			option = cmd->payload[0]-48; // convert ASCII to number
 8000fca:	69bb      	ldr	r3, [r7, #24]
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	3b30      	subs	r3, #48	@ 0x30
 8000fd0:	617b      	str	r3, [r7, #20]
			switch(option)
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d035      	beq.n	8001044 <menu_task+0xc0>
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	dc1e      	bgt.n	800101c <menu_task+0x98>
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <menu_task+0x68>
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	d00c      	beq.n	8001004 <menu_task+0x80>
 8000fea:	e017      	b.n	800101c <menu_task+0x98>
			{
			case 0:
				curr_state=sLedEffect;
 8000fec:	2301      	movs	r3, #1
 8000fee:	77fb      	strb	r3, [r7, #31]
				xTaskNotify(handle_led_task,0,eNoAction);
 8000ff0:	4b1d      	ldr	r3, [pc, #116]	@ (8001068 <menu_task+0xe4>)
 8000ff2:	6818      	ldr	r0, [r3, #0]
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	f004 fef3 	bl	8005de8 <xTaskGenericNotify>
				break;
 8001002:	e020      	b.n	8001046 <menu_task+0xc2>
			case 1:
				curr_state=sRtcMenu;
 8001004:	2302      	movs	r3, #2
 8001006:	77fb      	strb	r3, [r7, #31]
				xTaskNotify(handle_rtc_task,0,eNoAction);
 8001008:	4b18      	ldr	r3, [pc, #96]	@ (800106c <menu_task+0xe8>)
 800100a:	6818      	ldr	r0, [r3, #0]
 800100c:	2300      	movs	r3, #0
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2300      	movs	r3, #0
 8001012:	2200      	movs	r2, #0
 8001014:	2100      	movs	r1, #0
 8001016:	f004 fee7 	bl	8005de8 <xTaskGenericNotify>
				break;
 800101a:	e014      	b.n	8001046 <menu_task+0xc2>
			case 2:
				break;
			default:
				xQueueSend(q_print,&msg_invalid,portMAX_DELAY);
 800101c:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <menu_task+0xe0>)
 800101e:	6818      	ldr	r0, [r3, #0]
 8001020:	f107 0108 	add.w	r1, r7, #8
 8001024:	2300      	movs	r3, #0
 8001026:	f04f 32ff 	mov.w	r2, #4294967295
 800102a:	f003 fbf7 	bl	800481c <xQueueGenericSend>
				continue;
 800102e:	e013      	b.n	8001058 <menu_task+0xd4>
			}
		}
		else
		{
			//Invalid option
			xQueueSend(q_print,&msg_invalid,portMAX_DELAY);
 8001030:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <menu_task+0xe0>)
 8001032:	6818      	ldr	r0, [r3, #0]
 8001034:	f107 0108 	add.w	r1, r7, #8
 8001038:	2300      	movs	r3, #0
 800103a:	f04f 32ff 	mov.w	r2, #4294967295
 800103e:	f003 fbed 	bl	800481c <xQueueGenericSend>
			continue;
 8001042:	e009      	b.n	8001058 <menu_task+0xd4>
				break;
 8001044:	bf00      	nop
		}

		//Exit for this
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2300      	movs	r3, #0
 800104e:	2200      	movs	r2, #0
 8001050:	2100      	movs	r1, #0
 8001052:	2000      	movs	r0, #0
 8001054:	f004 fe48 	bl	8005ce8 <xTaskGenericNotifyWait>
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
 8001058:	e79e      	b.n	8000f98 <menu_task+0x14>
 800105a:	bf00      	nop
 800105c:	0800733c 	.word	0x0800733c
 8001060:	08007420 	.word	0x08007420
 8001064:	200000c0 	.word	0x200000c0
 8001068:	200000b4 	.word	0x200000b4
 800106c:	200000b8 	.word	0x200000b8

08001070 <cmd_task>:
	}
}

void cmd_task(void *param)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	@ 0x28
 8001074:	af02      	add	r7, sp, #8
 8001076:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	command_t cmd;
	while(1)
	{
		//Implement notify wait
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // waits indefinitely
 8001078:	f04f 33ff 	mov.w	r3, #4294967295
 800107c:	9300      	str	r3, [sp, #0]
 800107e:	2300      	movs	r3, #0
 8001080:	2200      	movs	r2, #0
 8001082:	2100      	movs	r1, #0
 8001084:	2000      	movs	r0, #0
 8001086:	f004 fe2f 	bl	8005ce8 <xTaskGenericNotifyWait>
 800108a:	61f8      	str	r0, [r7, #28]
		if(ret == pdTRUE)                              // Notification received
 800108c:	69fb      	ldr	r3, [r7, #28]
 800108e:	2b01      	cmp	r3, #1
 8001090:	d1f2      	bne.n	8001078 <cmd_task+0x8>
		{
			process_command(&cmd);
 8001092:	f107 030c 	add.w	r3, r7, #12
 8001096:	4618      	mov	r0, r3
 8001098:	f000 f8b6 	bl	8001208 <process_command>
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // waits indefinitely
 800109c:	e7ec      	b.n	8001078 <cmd_task+0x8>
	...

080010a0 <print_task>:
		}
	}
}

void print_task(void *param)
{
 80010a0:	b590      	push	{r4, r7, lr}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	uint32_t *msg;
	while(1)
	{
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 80010a8:	4b0b      	ldr	r3, [pc, #44]	@ (80010d8 <print_task+0x38>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f107 010c 	add.w	r1, r7, #12
 80010b0:	f04f 32ff 	mov.w	r2, #4294967295
 80010b4:	4618      	mov	r0, r3
 80010b6:	f003 fd49 	bl	8004b4c <xQueueReceive>
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen((char *)msg), HAL_MAX_DELAY);
 80010ba:	68fc      	ldr	r4, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff f8b0 	bl	8000224 <strlen>
 80010c4:	4603      	mov	r3, r0
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	f04f 33ff 	mov.w	r3, #4294967295
 80010cc:	4621      	mov	r1, r4
 80010ce:	4803      	ldr	r0, [pc, #12]	@ (80010dc <print_task+0x3c>)
 80010d0:	f002 f9f2 	bl	80034b8 <HAL_UART_Transmit>
		xQueueReceive(q_print, &msg, portMAX_DELAY);
 80010d4:	bf00      	nop
 80010d6:	e7e7      	b.n	80010a8 <print_task+0x8>
 80010d8:	200000c0 	.word	0x200000c0
 80010dc:	20000060 	.word	0x20000060

080010e0 <led_task>:
	}
}

void led_task(void *param)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af02      	add	r7, sp, #8
 80010e6:	6078      	str	r0, [r7, #4]
	while(1)
	{
		uint32_t cmd_addr;
			command_t *cmd;
			state_t curr_state=sMainMenu;
 80010e8:	2300      	movs	r3, #0
 80010ea:	75fb      	strb	r3, [r7, #23]
			const char* msg_led = "========================\n"
 80010ec:	4b3d      	ldr	r3, [pc, #244]	@ (80011e4 <led_task+0x104>)
 80010ee:	60bb      	str	r3, [r7, #8]
								  "(none,e1,e2,e3,e4)\n"
								  "Enter your choice here : ";

			while(1){
				/*TODO: Wait for notification (Notify wait) */
				xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80010f0:	f04f 33ff 	mov.w	r3, #4294967295
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2300      	movs	r3, #0
 80010f8:	2200      	movs	r2, #0
 80010fa:	2100      	movs	r1, #0
 80010fc:	2000      	movs	r0, #0
 80010fe:	f004 fdf3 	bl	8005ce8 <xTaskGenericNotifyWait>
				/*TODO: Print LED menu */
				xQueueSend(q_print,&msg_led,portMAX_DELAY);
 8001102:	4b39      	ldr	r3, [pc, #228]	@ (80011e8 <led_task+0x108>)
 8001104:	6818      	ldr	r0, [r3, #0]
 8001106:	f107 0108 	add.w	r1, r7, #8
 800110a:	2300      	movs	r3, #0
 800110c:	f04f 32ff 	mov.w	r2, #4294967295
 8001110:	f003 fb84 	bl	800481c <xQueueGenericSend>
				/*TODO: wait for LED command (Notify wait) */
				xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	f04f 32ff 	mov.w	r2, #4294967295
 800111c:	9200      	str	r2, [sp, #0]
 800111e:	2200      	movs	r2, #0
 8001120:	2100      	movs	r1, #0
 8001122:	2000      	movs	r0, #0
 8001124:	f004 fde0 	bl	8005ce8 <xTaskGenericNotifyWait>
				cmd=(command_t*)cmd_addr;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	613b      	str	r3, [r7, #16]
				if(cmd->len <= 4)
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	2b04      	cmp	r3, #4
 8001132:	d843      	bhi.n	80011bc <led_task+0xdc>
				{
					if(! strcmp((char*)cmd->payload,"none"))
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	492d      	ldr	r1, [pc, #180]	@ (80011ec <led_task+0x10c>)
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff f869 	bl	8000210 <strcmp>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d102      	bne.n	800114a <led_task+0x6a>
						led_effect_stop();
 8001144:	f7ff fa0c 	bl	8000560 <led_effect_stop>
 8001148:	e040      	b.n	80011cc <led_task+0xec>
					else if (! strcmp((char*)cmd->payload,"e1"))
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	4928      	ldr	r1, [pc, #160]	@ (80011f0 <led_task+0x110>)
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff f85e 	bl	8000210 <strcmp>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d103      	bne.n	8001162 <led_task+0x82>
						led_effect(1);
 800115a:	2001      	movs	r0, #1
 800115c:	f7ff fa26 	bl	80005ac <led_effect>
 8001160:	e034      	b.n	80011cc <led_task+0xec>
					else if (! strcmp((char*)cmd->payload,"e2"))
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	4923      	ldr	r1, [pc, #140]	@ (80011f4 <led_task+0x114>)
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f852 	bl	8000210 <strcmp>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d103      	bne.n	800117a <led_task+0x9a>
						led_effect(2);
 8001172:	2002      	movs	r0, #2
 8001174:	f7ff fa1a 	bl	80005ac <led_effect>
 8001178:	e028      	b.n	80011cc <led_task+0xec>
					else if (! strcmp((char*)cmd->payload,"e3"))
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	491e      	ldr	r1, [pc, #120]	@ (80011f8 <led_task+0x118>)
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff f846 	bl	8000210 <strcmp>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d103      	bne.n	8001192 <led_task+0xb2>
						led_effect(3);
 800118a:	2003      	movs	r0, #3
 800118c:	f7ff fa0e 	bl	80005ac <led_effect>
 8001190:	e01c      	b.n	80011cc <led_task+0xec>
					else if (! strcmp((char*)cmd->payload,"e4"))
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	4919      	ldr	r1, [pc, #100]	@ (80011fc <led_task+0x11c>)
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f83a 	bl	8000210 <strcmp>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d103      	bne.n	80011aa <led_task+0xca>
						led_effect(4);
 80011a2:	2004      	movs	r0, #4
 80011a4:	f7ff fa02 	bl	80005ac <led_effect>
 80011a8:	e010      	b.n	80011cc <led_task+0xec>
					else
						/*TODO: print invalid message */
						xQueueSend(q_print,&msg_invalid,portMAX_DELAY);
 80011aa:	4b0f      	ldr	r3, [pc, #60]	@ (80011e8 <led_task+0x108>)
 80011ac:	6818      	ldr	r0, [r3, #0]
 80011ae:	2300      	movs	r3, #0
 80011b0:	f04f 32ff 	mov.w	r2, #4294967295
 80011b4:	4912      	ldr	r1, [pc, #72]	@ (8001200 <led_task+0x120>)
 80011b6:	f003 fb31 	bl	800481c <xQueueGenericSend>
 80011ba:	e007      	b.n	80011cc <led_task+0xec>
				}else
					/*TODO: print invalid message */
					xQueueSend(q_print,&msg_invalid,portMAX_DELAY);
 80011bc:	4b0a      	ldr	r3, [pc, #40]	@ (80011e8 <led_task+0x108>)
 80011be:	6818      	ldr	r0, [r3, #0]
 80011c0:	2300      	movs	r3, #0
 80011c2:	f04f 32ff 	mov.w	r2, #4294967295
 80011c6:	490e      	ldr	r1, [pc, #56]	@ (8001200 <led_task+0x120>)
 80011c8:	f003 fb28 	bl	800481c <xQueueGenericSend>
				/*TODO : update state variable */
				curr_state = sMainMenu;
 80011cc:	2300      	movs	r3, #0
 80011ce:	75fb      	strb	r3, [r7, #23]

				/*TODO : Notify menu task */
				xTaskNotify(handle_menu_task,0,eNoAction);
 80011d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001204 <led_task+0x124>)
 80011d2:	6818      	ldr	r0, [r3, #0]
 80011d4:	2300      	movs	r3, #0
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2300      	movs	r3, #0
 80011da:	2200      	movs	r2, #0
 80011dc:	2100      	movs	r1, #0
 80011de:	f004 fe03 	bl	8005de8 <xTaskGenericNotify>
				xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
 80011e2:	e785      	b.n	80010f0 <led_task+0x10>
 80011e4:	08007434 	.word	0x08007434
 80011e8:	200000c0 	.word	0x200000c0
 80011ec:	080074ac 	.word	0x080074ac
 80011f0:	080074b4 	.word	0x080074b4
 80011f4:	080074b8 	.word	0x080074b8
 80011f8:	080074bc 	.word	0x080074bc
 80011fc:	080074c0 	.word	0x080074c0
 8001200:	20000014 	.word	0x20000014
 8001204:	200000a8 	.word	0x200000a8

08001208 <process_command>:

	}
}

void process_command(command_t *cmd)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af02      	add	r7, sp, #8
 800120e:	6078      	str	r0, [r7, #4]
	extract_command(cmd);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 f833 	bl	800127c <extract_command>
    state_t curr_state;
	switch(curr_state)               // based on the state do the further processing
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	2b05      	cmp	r3, #5
 800121a:	dc24      	bgt.n	8001266 <process_command+0x5e>
 800121c:	2b02      	cmp	r3, #2
 800121e:	da18      	bge.n	8001252 <process_command+0x4a>
 8001220:	2b00      	cmp	r3, #0
 8001222:	d002      	beq.n	800122a <process_command+0x22>
 8001224:	2b01      	cmp	r3, #1
 8001226:	d00a      	beq.n	800123e <process_command+0x36>
	    case sRtcDateConfig:
	    case sRtcReport:
	    	 xTaskNotify(handle_rtc_task,(uint32_t)cmd,eSetValueWithOverwrite);
	    break;
	}
}
 8001228:	e01d      	b.n	8001266 <process_command+0x5e>
		  xTaskNotify(handle_menu_task,(uint32_t)cmd,eSetValueWithOverwrite);// notify menu task with the command
 800122a:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <process_command+0x68>)
 800122c:	6818      	ldr	r0, [r3, #0]
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	2300      	movs	r3, #0
 8001232:	9300      	str	r3, [sp, #0]
 8001234:	2303      	movs	r3, #3
 8001236:	2100      	movs	r1, #0
 8001238:	f004 fdd6 	bl	8005de8 <xTaskGenericNotify>
		break;
 800123c:	e013      	b.n	8001266 <process_command+0x5e>
	      xTaskNotify(handle_led_task,(uint32_t)cmd,eSetValueWithOverwrite);
 800123e:	4b0d      	ldr	r3, [pc, #52]	@ (8001274 <process_command+0x6c>)
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	2300      	movs	r3, #0
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2303      	movs	r3, #3
 800124a:	2100      	movs	r1, #0
 800124c:	f004 fdcc 	bl	8005de8 <xTaskGenericNotify>
	    break;
 8001250:	e009      	b.n	8001266 <process_command+0x5e>
	    	 xTaskNotify(handle_rtc_task,(uint32_t)cmd,eSetValueWithOverwrite);
 8001252:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <process_command+0x70>)
 8001254:	6818      	ldr	r0, [r3, #0]
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	2300      	movs	r3, #0
 800125a:	9300      	str	r3, [sp, #0]
 800125c:	2303      	movs	r3, #3
 800125e:	2100      	movs	r1, #0
 8001260:	f004 fdc2 	bl	8005de8 <xTaskGenericNotify>
	    break;
 8001264:	bf00      	nop
}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200000a8 	.word	0x200000a8
 8001274:	200000b4 	.word	0x200000b4
 8001278:	200000b8 	.word	0x200000b8

0800127c <extract_command>:

int extract_command(command_t *cmd)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	uint8_t item;
	BaseType_t status;

	// Check the status of the message queue q_data
	status= uxQueueMessagesWaiting(q_data);
 8001284:	4b18      	ldr	r3, [pc, #96]	@ (80012e8 <extract_command+0x6c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4618      	mov	r0, r3
 800128a:	f003 fdc9 	bl	8004e20 <uxQueueMessagesWaiting>
 800128e:	4603      	mov	r3, r0
 8001290:	613b      	str	r3, [r7, #16]
	if(!status)                            // check if the queue is empty
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <extract_command+0x22>
		return -1;
 8001298:	f04f 33ff 	mov.w	r3, #4294967295
 800129c:	e020      	b.n	80012e0 <extract_command+0x64>
	uint8_t i;

	do
	{
		// Check what is in the queue and populate the structure member payload with command in placeholder till we receive end of line ie \n
		status=xQueueReceive(q_data, &item, 0);
 800129e:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <extract_command+0x6c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f107 010f 	add.w	r1, r7, #15
 80012a6:	2200      	movs	r2, #0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f003 fc4f 	bl	8004b4c <xQueueReceive>
 80012ae:	6138      	str	r0, [r7, #16]
		if(status == pdTRUE)
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d106      	bne.n	80012c4 <extract_command+0x48>
			cmd->payload[i++]=item;
 80012b6:	7dfb      	ldrb	r3, [r7, #23]
 80012b8:	1c5a      	adds	r2, r3, #1
 80012ba:	75fa      	strb	r2, [r7, #23]
 80012bc:	461a      	mov	r2, r3
 80012be:	7bf9      	ldrb	r1, [r7, #15]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	5499      	strb	r1, [r3, r2]
	}while(item != '\n');
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
 80012c6:	2b0a      	cmp	r3, #10
 80012c8:	d1e9      	bne.n	800129e <extract_command+0x22>

     cmd->payload[i-1]='\0'; // replace the last element of the payload
 80012ca:	7dfb      	ldrb	r3, [r7, #23]
 80012cc:	3b01      	subs	r3, #1
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	2100      	movs	r1, #0
 80012d2:	54d1      	strb	r1, [r2, r3]
     cmd->len=i-1;           // save the number of data bytes captured
 80012d4:	7dfb      	ldrb	r3, [r7, #23]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	461a      	mov	r2, r3
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	60da      	str	r2, [r3, #12]

     return 0;
 80012de:	2300      	movs	r3, #0

}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3718      	adds	r7, #24
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200000bc 	.word	0x200000bc

080012ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001324 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80012f0:	f7ff fe36 	bl	8000f60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012f4:	480c      	ldr	r0, [pc, #48]	@ (8001328 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012f6:	490d      	ldr	r1, [pc, #52]	@ (800132c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001330 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012fc:	e002      	b.n	8001304 <LoopCopyDataInit>

080012fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001300:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001302:	3304      	adds	r3, #4

08001304 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001304:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001306:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001308:	d3f9      	bcc.n	80012fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130a:	4a0a      	ldr	r2, [pc, #40]	@ (8001334 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800130c:	4c0a      	ldr	r4, [pc, #40]	@ (8001338 <LoopFillZerobss+0x22>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001310:	e001      	b.n	8001316 <LoopFillZerobss>

08001312 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001312:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001314:	3204      	adds	r2, #4

08001316 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001316:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001318:	d3fb      	bcc.n	8001312 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800131a:	f005 ffab 	bl	8007274 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800131e:	f7ff fa31 	bl	8000784 <main>
  bx  lr    
 8001322:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001324:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001328:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800132c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001330:	08007508 	.word	0x08007508
  ldr r2, =_sbss
 8001334:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001338:	20012ed0 	.word	0x20012ed0

0800133c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800133c:	e7fe      	b.n	800133c <ADC_IRQHandler>
	...

08001340 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001344:	4b0e      	ldr	r3, [pc, #56]	@ (8001380 <HAL_Init+0x40>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a0d      	ldr	r2, [pc, #52]	@ (8001380 <HAL_Init+0x40>)
 800134a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800134e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001350:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <HAL_Init+0x40>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0a      	ldr	r2, [pc, #40]	@ (8001380 <HAL_Init+0x40>)
 8001356:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800135a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800135c:	4b08      	ldr	r3, [pc, #32]	@ (8001380 <HAL_Init+0x40>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a07      	ldr	r2, [pc, #28]	@ (8001380 <HAL_Init+0x40>)
 8001362:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001366:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001368:	2003      	movs	r0, #3
 800136a:	f000 f8fc 	bl	8001566 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800136e:	2000      	movs	r0, #0
 8001370:	f7ff fd4a 	bl	8000e08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001374:	f7ff fca6 	bl	8000cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001378:	2300      	movs	r3, #0
}
 800137a:	4618      	mov	r0, r3
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40023c00 	.word	0x40023c00

08001384 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001388:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <HAL_IncTick+0x20>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	461a      	mov	r2, r3
 800138e:	4b06      	ldr	r3, [pc, #24]	@ (80013a8 <HAL_IncTick+0x24>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	4413      	add	r3, r2
 8001394:	4a04      	ldr	r2, [pc, #16]	@ (80013a8 <HAL_IncTick+0x24>)
 8001396:	6013      	str	r3, [r2, #0]
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	2000001c 	.word	0x2000001c
 80013a8:	20000124 	.word	0x20000124

080013ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return uwTick;
 80013b0:	4b03      	ldr	r3, [pc, #12]	@ (80013c0 <HAL_GetTick+0x14>)
 80013b2:	681b      	ldr	r3, [r3, #0]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	20000124 	.word	0x20000124

080013c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013cc:	f7ff ffee 	bl	80013ac <HAL_GetTick>
 80013d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013dc:	d005      	beq.n	80013ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013de:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <HAL_Delay+0x44>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	4413      	add	r3, r2
 80013e8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013ea:	bf00      	nop
 80013ec:	f7ff ffde 	bl	80013ac <HAL_GetTick>
 80013f0:	4602      	mov	r2, r0
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	68fa      	ldr	r2, [r7, #12]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d8f7      	bhi.n	80013ec <HAL_Delay+0x28>
  {
  }
}
 80013fc:	bf00      	nop
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	2000001c 	.word	0x2000001c

0800140c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800141c:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001428:	4013      	ands	r3, r2
 800142a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001434:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001438:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800143c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143e:	4a04      	ldr	r2, [pc, #16]	@ (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	60d3      	str	r3, [r2, #12]
}
 8001444:	bf00      	nop
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001458:	4b04      	ldr	r3, [pc, #16]	@ (800146c <__NVIC_GetPriorityGrouping+0x18>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	0a1b      	lsrs	r3, r3, #8
 800145e:	f003 0307 	and.w	r3, r3, #7
}
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	2b00      	cmp	r3, #0
 8001480:	db0b      	blt.n	800149a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	f003 021f 	and.w	r2, r3, #31
 8001488:	4907      	ldr	r1, [pc, #28]	@ (80014a8 <__NVIC_EnableIRQ+0x38>)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	095b      	lsrs	r3, r3, #5
 8001490:	2001      	movs	r0, #1
 8001492:	fa00 f202 	lsl.w	r2, r0, r2
 8001496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000e100 	.word	0xe000e100

080014ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	6039      	str	r1, [r7, #0]
 80014b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	db0a      	blt.n	80014d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	490c      	ldr	r1, [pc, #48]	@ (80014f8 <__NVIC_SetPriority+0x4c>)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	0112      	lsls	r2, r2, #4
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	440b      	add	r3, r1
 80014d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d4:	e00a      	b.n	80014ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4908      	ldr	r1, [pc, #32]	@ (80014fc <__NVIC_SetPriority+0x50>)
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	3b04      	subs	r3, #4
 80014e4:	0112      	lsls	r2, r2, #4
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	440b      	add	r3, r1
 80014ea:	761a      	strb	r2, [r3, #24]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000e100 	.word	0xe000e100
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	@ 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f1c3 0307 	rsb	r3, r3, #7
 800151a:	2b04      	cmp	r3, #4
 800151c:	bf28      	it	cs
 800151e:	2304      	movcs	r3, #4
 8001520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3304      	adds	r3, #4
 8001526:	2b06      	cmp	r3, #6
 8001528:	d902      	bls.n	8001530 <NVIC_EncodePriority+0x30>
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3b03      	subs	r3, #3
 800152e:	e000      	b.n	8001532 <NVIC_EncodePriority+0x32>
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	f04f 32ff 	mov.w	r2, #4294967295
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43da      	mvns	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	401a      	ands	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001548:	f04f 31ff 	mov.w	r1, #4294967295
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa01 f303 	lsl.w	r3, r1, r3
 8001552:	43d9      	mvns	r1, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	4313      	orrs	r3, r2
         );
}
 800155a:	4618      	mov	r0, r3
 800155c:	3724      	adds	r7, #36	@ 0x24
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff ff4c 	bl	800140c <__NVIC_SetPriorityGrouping>
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800158e:	f7ff ff61 	bl	8001454 <__NVIC_GetPriorityGrouping>
 8001592:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	68b9      	ldr	r1, [r7, #8]
 8001598:	6978      	ldr	r0, [r7, #20]
 800159a:	f7ff ffb1 	bl	8001500 <NVIC_EncodePriority>
 800159e:	4602      	mov	r2, r0
 80015a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a4:	4611      	mov	r1, r2
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff ff80 	bl	80014ac <__NVIC_SetPriority>
}
 80015ac:	bf00      	nop
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff ff54 	bl	8001470 <__NVIC_EnableIRQ>
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015de:	f7ff fee5 	bl	80013ac <HAL_GetTick>
 80015e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d008      	beq.n	8001602 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2280      	movs	r2, #128	@ 0x80
 80015f4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e052      	b.n	80016a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 0216 	bic.w	r2, r2, #22
 8001610:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	695a      	ldr	r2, [r3, #20]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001620:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	2b00      	cmp	r3, #0
 8001628:	d103      	bne.n	8001632 <HAL_DMA_Abort+0x62>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800162e:	2b00      	cmp	r3, #0
 8001630:	d007      	beq.n	8001642 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f022 0208 	bic.w	r2, r2, #8
 8001640:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 0201 	bic.w	r2, r2, #1
 8001650:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001652:	e013      	b.n	800167c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001654:	f7ff feaa 	bl	80013ac <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	68bb      	ldr	r3, [r7, #8]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b05      	cmp	r3, #5
 8001660:	d90c      	bls.n	800167c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2220      	movs	r2, #32
 8001666:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2203      	movs	r2, #3
 800166c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e015      	b.n	80016a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1e4      	bne.n	8001654 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800168e:	223f      	movs	r2, #63	@ 0x3f
 8001690:	409a      	lsls	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3710      	adds	r7, #16
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d004      	beq.n	80016ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2280      	movs	r2, #128	@ 0x80
 80016c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e00c      	b.n	80016e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2205      	movs	r2, #5
 80016d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 0201 	bic.w	r2, r2, #1
 80016e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b089      	sub	sp, #36	@ 0x24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001706:	2300      	movs	r3, #0
 8001708:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800170a:	2300      	movs	r3, #0
 800170c:	61fb      	str	r3, [r7, #28]
 800170e:	e165      	b.n	80019dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001710:	2201      	movs	r2, #1
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	4013      	ands	r3, r2
 8001722:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	429a      	cmp	r2, r3
 800172a:	f040 8154 	bne.w	80019d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f003 0303 	and.w	r3, r3, #3
 8001736:	2b01      	cmp	r3, #1
 8001738:	d005      	beq.n	8001746 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001742:	2b02      	cmp	r3, #2
 8001744:	d130      	bne.n	80017a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	2203      	movs	r2, #3
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	43db      	mvns	r3, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4013      	ands	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	68da      	ldr	r2, [r3, #12]
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	69ba      	ldr	r2, [r7, #24]
 800176c:	4313      	orrs	r3, r2
 800176e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800177c:	2201      	movs	r2, #1
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	091b      	lsrs	r3, r3, #4
 8001792:	f003 0201 	and.w	r2, r3, #1
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4313      	orrs	r3, r2
 80017a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	2b03      	cmp	r3, #3
 80017b2:	d017      	beq.n	80017e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	2203      	movs	r2, #3
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	4013      	ands	r3, r2
 80017ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	689a      	ldr	r2, [r3, #8]
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	005b      	lsls	r3, r3, #1
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4313      	orrs	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f003 0303 	and.w	r3, r3, #3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d123      	bne.n	8001838 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017f0:	69fb      	ldr	r3, [r7, #28]
 80017f2:	08da      	lsrs	r2, r3, #3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	3208      	adds	r2, #8
 80017f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	f003 0307 	and.w	r3, r3, #7
 8001804:	009b      	lsls	r3, r3, #2
 8001806:	220f      	movs	r2, #15
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	691a      	ldr	r2, [r3, #16]
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	f003 0307 	and.w	r3, r3, #7
 800181e:	009b      	lsls	r3, r3, #2
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	4313      	orrs	r3, r2
 8001828:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	08da      	lsrs	r2, r3, #3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3208      	adds	r2, #8
 8001832:	69b9      	ldr	r1, [r7, #24]
 8001834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	2203      	movs	r2, #3
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	69ba      	ldr	r2, [r7, #24]
 800184c:	4013      	ands	r3, r2
 800184e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f003 0203 	and.w	r2, r3, #3
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69ba      	ldr	r2, [r7, #24]
 800186a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001874:	2b00      	cmp	r3, #0
 8001876:	f000 80ae 	beq.w	80019d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	4b5d      	ldr	r3, [pc, #372]	@ (80019f4 <HAL_GPIO_Init+0x300>)
 8001880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001882:	4a5c      	ldr	r2, [pc, #368]	@ (80019f4 <HAL_GPIO_Init+0x300>)
 8001884:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001888:	6453      	str	r3, [r2, #68]	@ 0x44
 800188a:	4b5a      	ldr	r3, [pc, #360]	@ (80019f4 <HAL_GPIO_Init+0x300>)
 800188c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800188e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001896:	4a58      	ldr	r2, [pc, #352]	@ (80019f8 <HAL_GPIO_Init+0x304>)
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	089b      	lsrs	r3, r3, #2
 800189c:	3302      	adds	r3, #2
 800189e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	220f      	movs	r2, #15
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43db      	mvns	r3, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4013      	ands	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a4f      	ldr	r2, [pc, #316]	@ (80019fc <HAL_GPIO_Init+0x308>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d025      	beq.n	800190e <HAL_GPIO_Init+0x21a>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a4e      	ldr	r2, [pc, #312]	@ (8001a00 <HAL_GPIO_Init+0x30c>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d01f      	beq.n	800190a <HAL_GPIO_Init+0x216>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a4d      	ldr	r2, [pc, #308]	@ (8001a04 <HAL_GPIO_Init+0x310>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d019      	beq.n	8001906 <HAL_GPIO_Init+0x212>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a4c      	ldr	r2, [pc, #304]	@ (8001a08 <HAL_GPIO_Init+0x314>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d013      	beq.n	8001902 <HAL_GPIO_Init+0x20e>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a4b      	ldr	r2, [pc, #300]	@ (8001a0c <HAL_GPIO_Init+0x318>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d00d      	beq.n	80018fe <HAL_GPIO_Init+0x20a>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4a      	ldr	r2, [pc, #296]	@ (8001a10 <HAL_GPIO_Init+0x31c>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d007      	beq.n	80018fa <HAL_GPIO_Init+0x206>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a49      	ldr	r2, [pc, #292]	@ (8001a14 <HAL_GPIO_Init+0x320>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d101      	bne.n	80018f6 <HAL_GPIO_Init+0x202>
 80018f2:	2306      	movs	r3, #6
 80018f4:	e00c      	b.n	8001910 <HAL_GPIO_Init+0x21c>
 80018f6:	2307      	movs	r3, #7
 80018f8:	e00a      	b.n	8001910 <HAL_GPIO_Init+0x21c>
 80018fa:	2305      	movs	r3, #5
 80018fc:	e008      	b.n	8001910 <HAL_GPIO_Init+0x21c>
 80018fe:	2304      	movs	r3, #4
 8001900:	e006      	b.n	8001910 <HAL_GPIO_Init+0x21c>
 8001902:	2303      	movs	r3, #3
 8001904:	e004      	b.n	8001910 <HAL_GPIO_Init+0x21c>
 8001906:	2302      	movs	r3, #2
 8001908:	e002      	b.n	8001910 <HAL_GPIO_Init+0x21c>
 800190a:	2301      	movs	r3, #1
 800190c:	e000      	b.n	8001910 <HAL_GPIO_Init+0x21c>
 800190e:	2300      	movs	r3, #0
 8001910:	69fa      	ldr	r2, [r7, #28]
 8001912:	f002 0203 	and.w	r2, r2, #3
 8001916:	0092      	lsls	r2, r2, #2
 8001918:	4093      	lsls	r3, r2
 800191a:	69ba      	ldr	r2, [r7, #24]
 800191c:	4313      	orrs	r3, r2
 800191e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001920:	4935      	ldr	r1, [pc, #212]	@ (80019f8 <HAL_GPIO_Init+0x304>)
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	089b      	lsrs	r3, r3, #2
 8001926:	3302      	adds	r3, #2
 8001928:	69ba      	ldr	r2, [r7, #24]
 800192a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800192e:	4b3a      	ldr	r3, [pc, #232]	@ (8001a18 <HAL_GPIO_Init+0x324>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	43db      	mvns	r3, r3
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	4013      	ands	r3, r2
 800193c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	4313      	orrs	r3, r2
 8001950:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001952:	4a31      	ldr	r2, [pc, #196]	@ (8001a18 <HAL_GPIO_Init+0x324>)
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001958:	4b2f      	ldr	r3, [pc, #188]	@ (8001a18 <HAL_GPIO_Init+0x324>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800197c:	4a26      	ldr	r2, [pc, #152]	@ (8001a18 <HAL_GPIO_Init+0x324>)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001982:	4b25      	ldr	r3, [pc, #148]	@ (8001a18 <HAL_GPIO_Init+0x324>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	43db      	mvns	r3, r3
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	4013      	ands	r3, r2
 8001990:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800199e:	69ba      	ldr	r2, [r7, #24]
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019a6:	4a1c      	ldr	r2, [pc, #112]	@ (8001a18 <HAL_GPIO_Init+0x324>)
 80019a8:	69bb      	ldr	r3, [r7, #24]
 80019aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001a18 <HAL_GPIO_Init+0x324>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4013      	ands	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019d0:	4a11      	ldr	r2, [pc, #68]	@ (8001a18 <HAL_GPIO_Init+0x324>)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3301      	adds	r3, #1
 80019da:	61fb      	str	r3, [r7, #28]
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	2b0f      	cmp	r3, #15
 80019e0:	f67f ae96 	bls.w	8001710 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019e4:	bf00      	nop
 80019e6:	bf00      	nop
 80019e8:	3724      	adds	r7, #36	@ 0x24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40023800 	.word	0x40023800
 80019f8:	40013800 	.word	0x40013800
 80019fc:	40020000 	.word	0x40020000
 8001a00:	40020400 	.word	0x40020400
 8001a04:	40020800 	.word	0x40020800
 8001a08:	40020c00 	.word	0x40020c00
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	40021400 	.word	0x40021400
 8001a14:	40021800 	.word	0x40021800
 8001a18:	40013c00 	.word	0x40013c00

08001a1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	460b      	mov	r3, r1
 8001a26:	807b      	strh	r3, [r7, #2]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a2c:	787b      	ldrb	r3, [r7, #1]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d003      	beq.n	8001a3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a32:	887a      	ldrh	r2, [r7, #2]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a38:	e003      	b.n	8001a42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a3a:	887b      	ldrh	r3, [r7, #2]
 8001a3c:	041a      	lsls	r2, r3, #16
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	619a      	str	r2, [r3, #24]
}
 8001a42:	bf00      	nop
 8001a44:	370c      	adds	r7, #12
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr
	...

08001a50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0cc      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a64:	4b68      	ldr	r3, [pc, #416]	@ (8001c08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 030f 	and.w	r3, r3, #15
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d90c      	bls.n	8001a8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a72:	4b65      	ldr	r3, [pc, #404]	@ (8001c08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7a:	4b63      	ldr	r3, [pc, #396]	@ (8001c08 <HAL_RCC_ClockConfig+0x1b8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0b8      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d020      	beq.n	8001ada <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0304 	and.w	r3, r3, #4
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d005      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aa4:	4b59      	ldr	r3, [pc, #356]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	4a58      	ldr	r2, [pc, #352]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001aaa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001aae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0308 	and.w	r3, r3, #8
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d005      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001abc:	4b53      	ldr	r3, [pc, #332]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	4a52      	ldr	r2, [pc, #328]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ac2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001ac6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ac8:	4b50      	ldr	r3, [pc, #320]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	494d      	ldr	r1, [pc, #308]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d044      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d107      	bne.n	8001afe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aee:	4b47      	ldr	r3, [pc, #284]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d119      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e07f      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d003      	beq.n	8001b0e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b0a:	2b03      	cmp	r3, #3
 8001b0c:	d107      	bne.n	8001b1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b0e:	4b3f      	ldr	r3, [pc, #252]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d109      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e06f      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e067      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b2e:	4b37      	ldr	r3, [pc, #220]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	f023 0203 	bic.w	r2, r3, #3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	4934      	ldr	r1, [pc, #208]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b40:	f7ff fc34 	bl	80013ac <HAL_GetTick>
 8001b44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b46:	e00a      	b.n	8001b5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b48:	f7ff fc30 	bl	80013ac <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e04f      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b5e:	4b2b      	ldr	r3, [pc, #172]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 020c 	and.w	r2, r3, #12
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d1eb      	bne.n	8001b48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b70:	4b25      	ldr	r3, [pc, #148]	@ (8001c08 <HAL_RCC_ClockConfig+0x1b8>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 030f 	and.w	r3, r3, #15
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d20c      	bcs.n	8001b98 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7e:	4b22      	ldr	r3, [pc, #136]	@ (8001c08 <HAL_RCC_ClockConfig+0x1b8>)
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	b2d2      	uxtb	r2, r2
 8001b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b86:	4b20      	ldr	r3, [pc, #128]	@ (8001c08 <HAL_RCC_ClockConfig+0x1b8>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	683a      	ldr	r2, [r7, #0]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d001      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e032      	b.n	8001bfe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d008      	beq.n	8001bb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ba4:	4b19      	ldr	r3, [pc, #100]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	4916      	ldr	r1, [pc, #88]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0308 	and.w	r3, r3, #8
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d009      	beq.n	8001bd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bc2:	4b12      	ldr	r3, [pc, #72]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	490e      	ldr	r1, [pc, #56]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bd6:	f000 fbb1 	bl	800233c <HAL_RCC_GetSysClockFreq>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8001c0c <HAL_RCC_ClockConfig+0x1bc>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f003 030f 	and.w	r3, r3, #15
 8001be6:	490a      	ldr	r1, [pc, #40]	@ (8001c10 <HAL_RCC_ClockConfig+0x1c0>)
 8001be8:	5ccb      	ldrb	r3, [r1, r3]
 8001bea:	fa22 f303 	lsr.w	r3, r2, r3
 8001bee:	4a09      	ldr	r2, [pc, #36]	@ (8001c14 <HAL_RCC_ClockConfig+0x1c4>)
 8001bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001bf2:	4b09      	ldr	r3, [pc, #36]	@ (8001c18 <HAL_RCC_ClockConfig+0x1c8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff f906 	bl	8000e08 <HAL_InitTick>

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40023c00 	.word	0x40023c00
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	080074dc 	.word	0x080074dc
 8001c14:	20000010 	.word	0x20000010
 8001c18:	20000018 	.word	0x20000018

08001c1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c20:	4b03      	ldr	r3, [pc, #12]	@ (8001c30 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c22:	681b      	ldr	r3, [r3, #0]
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000010 	.word	0x20000010

08001c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c38:	f7ff fff0 	bl	8001c1c <HAL_RCC_GetHCLKFreq>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	4b05      	ldr	r3, [pc, #20]	@ (8001c54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	0a9b      	lsrs	r3, r3, #10
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	4903      	ldr	r1, [pc, #12]	@ (8001c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c4a:	5ccb      	ldrb	r3, [r1, r3]
 8001c4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40023800 	.word	0x40023800
 8001c58:	080074ec 	.word	0x080074ec

08001c5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c60:	f7ff ffdc 	bl	8001c1c <HAL_RCC_GetHCLKFreq>
 8001c64:	4602      	mov	r2, r0
 8001c66:	4b05      	ldr	r3, [pc, #20]	@ (8001c7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	0b5b      	lsrs	r3, r3, #13
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	4903      	ldr	r1, [pc, #12]	@ (8001c80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c72:	5ccb      	ldrb	r3, [r1, r3]
 8001c74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	080074ec 	.word	0x080074ec

08001c84 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
 8001c8c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	220f      	movs	r2, #15
 8001c92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c94:	4b12      	ldr	r3, [pc, #72]	@ (8001ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f003 0203 	and.w	r2, r3, #3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001cac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001cb8:	4b09      	ldr	r3, [pc, #36]	@ (8001ce0 <HAL_RCC_GetClockConfig+0x5c>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	08db      	lsrs	r3, r3, #3
 8001cbe:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cc6:	4b07      	ldr	r3, [pc, #28]	@ (8001ce4 <HAL_RCC_GetClockConfig+0x60>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 020f 	and.w	r2, r3, #15
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	601a      	str	r2, [r3, #0]
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40023c00 	.word	0x40023c00

08001ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08c      	sub	sp, #48	@ 0x30
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d010      	beq.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001d20:	4b6f      	ldr	r3, [pc, #444]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d26:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d2e:	496c      	ldr	r1, [pc, #432]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d010      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001d4e:	4b64      	ldr	r3, [pc, #400]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d54:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d5c:	4960      	ldr	r1, [pc, #384]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0304 	and.w	r3, r3, #4
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d017      	beq.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d7c:	4b58      	ldr	r3, [pc, #352]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001d82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d8a:	4955      	ldr	r1, [pc, #340]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d101      	bne.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001da8:	2301      	movs	r3, #1
 8001daa:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f003 0308 	and.w	r3, r3, #8
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d017      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001db8:	4b49      	ldr	r3, [pc, #292]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001dbe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dc6:	4946      	ldr	r1, [pc, #280]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001dd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001dd6:	d101      	bne.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001de4:	2301      	movs	r3, #1
 8001de6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0320 	and.w	r3, r3, #32
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 808a 	beq.w	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001df6:	2300      	movs	r3, #0
 8001df8:	60bb      	str	r3, [r7, #8]
 8001dfa:	4b39      	ldr	r3, [pc, #228]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfe:	4a38      	ldr	r2, [pc, #224]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e04:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e06:	4b36      	ldr	r3, [pc, #216]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e0e:	60bb      	str	r3, [r7, #8]
 8001e10:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001e12:	4b34      	ldr	r3, [pc, #208]	@ (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a33      	ldr	r2, [pc, #204]	@ (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001e18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e1c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e1e:	f7ff fac5 	bl	80013ac <HAL_GetTick>
 8001e22:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001e24:	e008      	b.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e26:	f7ff fac1 	bl	80013ac <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e278      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001e38:	4b2a      	ldr	r3, [pc, #168]	@ (8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d0f0      	beq.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001e44:	4b26      	ldr	r3, [pc, #152]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e4c:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d02f      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e5c:	6a3a      	ldr	r2, [r7, #32]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d028      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001e62:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e6a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e6c:	4b1e      	ldr	r3, [pc, #120]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e72:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001e78:	4a19      	ldr	r2, [pc, #100]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e7a:	6a3b      	ldr	r3, [r7, #32]
 8001e7c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001e7e:	4b18      	ldr	r3, [pc, #96]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d114      	bne.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001e8a:	f7ff fa8f 	bl	80013ac <HAL_GetTick>
 8001e8e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e90:	e00a      	b.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e92:	f7ff fa8b 	bl	80013ac <HAL_GetTick>
 8001e96:	4602      	mov	r2, r0
 8001e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9a:	1ad3      	subs	r3, r2, r3
 8001e9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d901      	bls.n	8001ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001ea4:	2303      	movs	r3, #3
 8001ea6:	e240      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d0ee      	beq.n	8001e92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ebc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001ec0:	d114      	bne.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001ec2:	4b07      	ldr	r3, [pc, #28]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001ed2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001ed6:	4902      	ldr	r1, [pc, #8]	@ (8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	608b      	str	r3, [r1, #8]
 8001edc:	e00c      	b.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001ede:	bf00      	nop
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	40007000 	.word	0x40007000
 8001ee8:	42470e40 	.word	0x42470e40
 8001eec:	4b4a      	ldr	r3, [pc, #296]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	4a49      	ldr	r2, [pc, #292]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ef2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001ef6:	6093      	str	r3, [r2, #8]
 8001ef8:	4b47      	ldr	r3, [pc, #284]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001efa:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f04:	4944      	ldr	r1, [pc, #272]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0310 	and.w	r3, r3, #16
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d004      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8001f1c:	4b3f      	ldr	r3, [pc, #252]	@ (800201c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001f1e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00a      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001f2c:	4b3a      	ldr	r3, [pc, #232]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f32:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f3a:	4937      	ldr	r1, [pc, #220]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00a      	beq.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f4e:	4b32      	ldr	r3, [pc, #200]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f54:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f5c:	492e      	ldr	r1, [pc, #184]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d011      	beq.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001f70:	4b29      	ldr	r3, [pc, #164]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f76:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f7e:	4926      	ldr	r1, [pc, #152]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001f90:	2301      	movs	r3, #1
 8001f92:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00a      	beq.n	8001fb6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fa6:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fae:	491a      	ldr	r1, [pc, #104]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d011      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001fc2:	4b15      	ldr	r3, [pc, #84]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001fc8:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fd0:	4911      	ldr	r1, [pc, #68]	@ (8002018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001fe0:	d101      	bne.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d005      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ff4:	f040 80ff 	bne.w	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001ff8:	4b09      	ldr	r3, [pc, #36]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ffe:	f7ff f9d5 	bl	80013ac <HAL_GetTick>
 8002002:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002004:	e00e      	b.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002006:	f7ff f9d1 	bl	80013ac <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	2b02      	cmp	r3, #2
 8002012:	d907      	bls.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002014:	2303      	movs	r3, #3
 8002016:	e188      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002018:	40023800 	.word	0x40023800
 800201c:	424711e0 	.word	0x424711e0
 8002020:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002024:	4b7e      	ldr	r3, [pc, #504]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d1ea      	bne.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002040:	2b00      	cmp	r3, #0
 8002042:	d009      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800204c:	2b00      	cmp	r3, #0
 800204e:	d028      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002054:	2b00      	cmp	r3, #0
 8002056:	d124      	bne.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002058:	4b71      	ldr	r3, [pc, #452]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800205a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800205e:	0c1b      	lsrs	r3, r3, #16
 8002060:	f003 0303 	and.w	r3, r3, #3
 8002064:	3301      	adds	r3, #1
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800206a:	4b6d      	ldr	r3, [pc, #436]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800206c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002070:	0e1b      	lsrs	r3, r3, #24
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	019b      	lsls	r3, r3, #6
 8002082:	431a      	orrs	r2, r3
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	085b      	lsrs	r3, r3, #1
 8002088:	3b01      	subs	r3, #1
 800208a:	041b      	lsls	r3, r3, #16
 800208c:	431a      	orrs	r2, r3
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	061b      	lsls	r3, r3, #24
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	071b      	lsls	r3, r3, #28
 800209a:	4961      	ldr	r1, [pc, #388]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800209c:	4313      	orrs	r3, r2
 800209e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d004      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020b6:	d00a      	beq.n	80020ce <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d035      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80020cc:	d130      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80020ce:	4b54      	ldr	r3, [pc, #336]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020d4:	0c1b      	lsrs	r3, r3, #16
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	3301      	adds	r3, #1
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80020e0:	4b4f      	ldr	r3, [pc, #316]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80020e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020e6:	0f1b      	lsrs	r3, r3, #28
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	019b      	lsls	r3, r3, #6
 80020f8:	431a      	orrs	r2, r3
 80020fa:	69fb      	ldr	r3, [r7, #28]
 80020fc:	085b      	lsrs	r3, r3, #1
 80020fe:	3b01      	subs	r3, #1
 8002100:	041b      	lsls	r3, r3, #16
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	061b      	lsls	r3, r3, #24
 800210a:	431a      	orrs	r2, r3
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	071b      	lsls	r3, r3, #28
 8002110:	4943      	ldr	r1, [pc, #268]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002112:	4313      	orrs	r3, r2
 8002114:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002118:	4b41      	ldr	r3, [pc, #260]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800211a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800211e:	f023 021f 	bic.w	r2, r3, #31
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002126:	3b01      	subs	r3, #1
 8002128:	493d      	ldr	r1, [pc, #244]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800212a:	4313      	orrs	r3, r2
 800212c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002138:	2b00      	cmp	r3, #0
 800213a:	d029      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002140:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002144:	d124      	bne.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002146:	4b36      	ldr	r3, [pc, #216]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002148:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800214c:	0c1b      	lsrs	r3, r3, #16
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	3301      	adds	r3, #1
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002158:	4b31      	ldr	r3, [pc, #196]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800215a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800215e:	0f1b      	lsrs	r3, r3, #28
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	019b      	lsls	r3, r3, #6
 8002170:	431a      	orrs	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	085b      	lsrs	r3, r3, #1
 8002178:	3b01      	subs	r3, #1
 800217a:	041b      	lsls	r3, r3, #16
 800217c:	431a      	orrs	r2, r3
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	061b      	lsls	r3, r3, #24
 8002182:	431a      	orrs	r2, r3
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	071b      	lsls	r3, r3, #28
 8002188:	4925      	ldr	r1, [pc, #148]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002198:	2b00      	cmp	r3, #0
 800219a:	d016      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	019b      	lsls	r3, r3, #6
 80021a6:	431a      	orrs	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	085b      	lsrs	r3, r3, #1
 80021ae:	3b01      	subs	r3, #1
 80021b0:	041b      	lsls	r3, r3, #16
 80021b2:	431a      	orrs	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	061b      	lsls	r3, r3, #24
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	071b      	lsls	r3, r3, #28
 80021c2:	4917      	ldr	r1, [pc, #92]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021c4:	4313      	orrs	r3, r2
 80021c6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80021ca:	4b16      	ldr	r3, [pc, #88]	@ (8002224 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80021cc:	2201      	movs	r2, #1
 80021ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80021d0:	f7ff f8ec 	bl	80013ac <HAL_GetTick>
 80021d4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021d6:	e008      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80021d8:	f7ff f8e8 	bl	80013ac <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e09f      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 80021f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	f040 8095 	bne.w	8002328 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80021fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002200:	2200      	movs	r2, #0
 8002202:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002204:	f7ff f8d2 	bl	80013ac <HAL_GetTick>
 8002208:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800220a:	e00f      	b.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800220c:	f7ff f8ce 	bl	80013ac <HAL_GetTick>
 8002210:	4602      	mov	r2, r0
 8002212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002214:	1ad3      	subs	r3, r2, r3
 8002216:	2b02      	cmp	r3, #2
 8002218:	d908      	bls.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e085      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800221e:	bf00      	nop
 8002220:	40023800 	.word	0x40023800
 8002224:	42470068 	.word	0x42470068
 8002228:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800222c:	4b41      	ldr	r3, [pc, #260]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002234:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002238:	d0e8      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0304 	and.w	r3, r3, #4
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224a:	2b00      	cmp	r3, #0
 800224c:	d009      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002256:	2b00      	cmp	r3, #0
 8002258:	d02b      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800225e:	2b00      	cmp	r3, #0
 8002260:	d127      	bne.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002262:	4b34      	ldr	r3, [pc, #208]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002264:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002268:	0c1b      	lsrs	r3, r3, #16
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	3301      	adds	r3, #1
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	699a      	ldr	r2, [r3, #24]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	019b      	lsls	r3, r3, #6
 800227e:	431a      	orrs	r2, r3
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	085b      	lsrs	r3, r3, #1
 8002284:	3b01      	subs	r3, #1
 8002286:	041b      	lsls	r3, r3, #16
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800228e:	061b      	lsls	r3, r3, #24
 8002290:	4928      	ldr	r1, [pc, #160]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002292:	4313      	orrs	r3, r2
 8002294:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002298:	4b26      	ldr	r3, [pc, #152]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800229a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800229e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a6:	3b01      	subs	r3, #1
 80022a8:	021b      	lsls	r3, r3, #8
 80022aa:	4922      	ldr	r1, [pc, #136]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d01d      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022c6:	d118      	bne.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80022c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ce:	0e1b      	lsrs	r3, r3, #24
 80022d0:	f003 030f 	and.w	r3, r3, #15
 80022d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	699a      	ldr	r2, [r3, #24]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	019b      	lsls	r3, r3, #6
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a1b      	ldr	r3, [r3, #32]
 80022e6:	085b      	lsrs	r3, r3, #1
 80022e8:	3b01      	subs	r3, #1
 80022ea:	041b      	lsls	r3, r3, #16
 80022ec:	431a      	orrs	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	061b      	lsls	r3, r3, #24
 80022f2:	4910      	ldr	r1, [pc, #64]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80022f4:	4313      	orrs	r3, r2
 80022f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80022fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002338 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002300:	f7ff f854 	bl	80013ac <HAL_GetTick>
 8002304:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002306:	e008      	b.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002308:	f7ff f850 	bl	80013ac <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e007      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800231a:	4b06      	ldr	r3, [pc, #24]	@ (8002334 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002322:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002326:	d1ef      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002328:	2300      	movs	r3, #0
}
 800232a:	4618      	mov	r0, r3
 800232c:	3730      	adds	r7, #48	@ 0x30
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	40023800 	.word	0x40023800
 8002338:	42470070 	.word	0x42470070

0800233c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800233c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002340:	b0ae      	sub	sp, #184	@ 0xb8
 8002342:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002344:	2300      	movs	r3, #0
 8002346:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800234a:	2300      	movs	r3, #0
 800234c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002350:	2300      	movs	r3, #0
 8002352:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002356:	2300      	movs	r3, #0
 8002358:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800235c:	2300      	movs	r3, #0
 800235e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002362:	4bcb      	ldr	r3, [pc, #812]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x354>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f003 030c 	and.w	r3, r3, #12
 800236a:	2b0c      	cmp	r3, #12
 800236c:	f200 8206 	bhi.w	800277c <HAL_RCC_GetSysClockFreq+0x440>
 8002370:	a201      	add	r2, pc, #4	@ (adr r2, 8002378 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002376:	bf00      	nop
 8002378:	080023ad 	.word	0x080023ad
 800237c:	0800277d 	.word	0x0800277d
 8002380:	0800277d 	.word	0x0800277d
 8002384:	0800277d 	.word	0x0800277d
 8002388:	080023b5 	.word	0x080023b5
 800238c:	0800277d 	.word	0x0800277d
 8002390:	0800277d 	.word	0x0800277d
 8002394:	0800277d 	.word	0x0800277d
 8002398:	080023bd 	.word	0x080023bd
 800239c:	0800277d 	.word	0x0800277d
 80023a0:	0800277d 	.word	0x0800277d
 80023a4:	0800277d 	.word	0x0800277d
 80023a8:	080025ad 	.word	0x080025ad
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023ac:	4bb9      	ldr	r3, [pc, #740]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x358>)
 80023ae:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80023b2:	e1e7      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023b4:	4bb8      	ldr	r3, [pc, #736]	@ (8002698 <HAL_RCC_GetSysClockFreq+0x35c>)
 80023b6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80023ba:	e1e3      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023bc:	4bb4      	ldr	r3, [pc, #720]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x354>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80023c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023c8:	4bb1      	ldr	r3, [pc, #708]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x354>)
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d071      	beq.n	80024b8 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023d4:	4bae      	ldr	r3, [pc, #696]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x354>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	099b      	lsrs	r3, r3, #6
 80023da:	2200      	movs	r2, #0
 80023dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80023e0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80023e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80023e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023ec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80023f0:	2300      	movs	r3, #0
 80023f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80023f6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80023fa:	4622      	mov	r2, r4
 80023fc:	462b      	mov	r3, r5
 80023fe:	f04f 0000 	mov.w	r0, #0
 8002402:	f04f 0100 	mov.w	r1, #0
 8002406:	0159      	lsls	r1, r3, #5
 8002408:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800240c:	0150      	lsls	r0, r2, #5
 800240e:	4602      	mov	r2, r0
 8002410:	460b      	mov	r3, r1
 8002412:	4621      	mov	r1, r4
 8002414:	1a51      	subs	r1, r2, r1
 8002416:	6439      	str	r1, [r7, #64]	@ 0x40
 8002418:	4629      	mov	r1, r5
 800241a:	eb63 0301 	sbc.w	r3, r3, r1
 800241e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	f04f 0300 	mov.w	r3, #0
 8002428:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800242c:	4649      	mov	r1, r9
 800242e:	018b      	lsls	r3, r1, #6
 8002430:	4641      	mov	r1, r8
 8002432:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002436:	4641      	mov	r1, r8
 8002438:	018a      	lsls	r2, r1, #6
 800243a:	4641      	mov	r1, r8
 800243c:	1a51      	subs	r1, r2, r1
 800243e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002440:	4649      	mov	r1, r9
 8002442:	eb63 0301 	sbc.w	r3, r3, r1
 8002446:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	f04f 0300 	mov.w	r3, #0
 8002450:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002454:	4649      	mov	r1, r9
 8002456:	00cb      	lsls	r3, r1, #3
 8002458:	4641      	mov	r1, r8
 800245a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800245e:	4641      	mov	r1, r8
 8002460:	00ca      	lsls	r2, r1, #3
 8002462:	4610      	mov	r0, r2
 8002464:	4619      	mov	r1, r3
 8002466:	4603      	mov	r3, r0
 8002468:	4622      	mov	r2, r4
 800246a:	189b      	adds	r3, r3, r2
 800246c:	633b      	str	r3, [r7, #48]	@ 0x30
 800246e:	462b      	mov	r3, r5
 8002470:	460a      	mov	r2, r1
 8002472:	eb42 0303 	adc.w	r3, r2, r3
 8002476:	637b      	str	r3, [r7, #52]	@ 0x34
 8002478:	f04f 0200 	mov.w	r2, #0
 800247c:	f04f 0300 	mov.w	r3, #0
 8002480:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002484:	4629      	mov	r1, r5
 8002486:	024b      	lsls	r3, r1, #9
 8002488:	4621      	mov	r1, r4
 800248a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800248e:	4621      	mov	r1, r4
 8002490:	024a      	lsls	r2, r1, #9
 8002492:	4610      	mov	r0, r2
 8002494:	4619      	mov	r1, r3
 8002496:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800249a:	2200      	movs	r2, #0
 800249c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80024a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80024a4:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80024a8:	f7fd fec4 	bl	8000234 <__aeabi_uldivmod>
 80024ac:	4602      	mov	r2, r0
 80024ae:	460b      	mov	r3, r1
 80024b0:	4613      	mov	r3, r2
 80024b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024b6:	e067      	b.n	8002588 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024b8:	4b75      	ldr	r3, [pc, #468]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x354>)
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	099b      	lsrs	r3, r3, #6
 80024be:	2200      	movs	r2, #0
 80024c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80024c4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80024c8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80024cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80024d2:	2300      	movs	r3, #0
 80024d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80024d6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80024da:	4622      	mov	r2, r4
 80024dc:	462b      	mov	r3, r5
 80024de:	f04f 0000 	mov.w	r0, #0
 80024e2:	f04f 0100 	mov.w	r1, #0
 80024e6:	0159      	lsls	r1, r3, #5
 80024e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024ec:	0150      	lsls	r0, r2, #5
 80024ee:	4602      	mov	r2, r0
 80024f0:	460b      	mov	r3, r1
 80024f2:	4621      	mov	r1, r4
 80024f4:	1a51      	subs	r1, r2, r1
 80024f6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80024f8:	4629      	mov	r1, r5
 80024fa:	eb63 0301 	sbc.w	r3, r3, r1
 80024fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 800250c:	4649      	mov	r1, r9
 800250e:	018b      	lsls	r3, r1, #6
 8002510:	4641      	mov	r1, r8
 8002512:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002516:	4641      	mov	r1, r8
 8002518:	018a      	lsls	r2, r1, #6
 800251a:	4641      	mov	r1, r8
 800251c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002520:	4649      	mov	r1, r9
 8002522:	eb63 0b01 	sbc.w	fp, r3, r1
 8002526:	f04f 0200 	mov.w	r2, #0
 800252a:	f04f 0300 	mov.w	r3, #0
 800252e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002532:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002536:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800253a:	4692      	mov	sl, r2
 800253c:	469b      	mov	fp, r3
 800253e:	4623      	mov	r3, r4
 8002540:	eb1a 0303 	adds.w	r3, sl, r3
 8002544:	623b      	str	r3, [r7, #32]
 8002546:	462b      	mov	r3, r5
 8002548:	eb4b 0303 	adc.w	r3, fp, r3
 800254c:	627b      	str	r3, [r7, #36]	@ 0x24
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	f04f 0300 	mov.w	r3, #0
 8002556:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800255a:	4629      	mov	r1, r5
 800255c:	028b      	lsls	r3, r1, #10
 800255e:	4621      	mov	r1, r4
 8002560:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002564:	4621      	mov	r1, r4
 8002566:	028a      	lsls	r2, r1, #10
 8002568:	4610      	mov	r0, r2
 800256a:	4619      	mov	r1, r3
 800256c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002570:	2200      	movs	r2, #0
 8002572:	673b      	str	r3, [r7, #112]	@ 0x70
 8002574:	677a      	str	r2, [r7, #116]	@ 0x74
 8002576:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800257a:	f7fd fe5b 	bl	8000234 <__aeabi_uldivmod>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4613      	mov	r3, r2
 8002584:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002588:	4b41      	ldr	r3, [pc, #260]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x354>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	0c1b      	lsrs	r3, r3, #16
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	3301      	adds	r3, #1
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800259a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800259e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80025a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80025aa:	e0eb      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025ac:	4b38      	ldr	r3, [pc, #224]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x354>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025b4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025b8:	4b35      	ldr	r3, [pc, #212]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x354>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d06b      	beq.n	800269c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025c4:	4b32      	ldr	r3, [pc, #200]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x354>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	099b      	lsrs	r3, r3, #6
 80025ca:	2200      	movs	r2, #0
 80025cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80025ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80025d0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80025d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80025d8:	2300      	movs	r3, #0
 80025da:	667b      	str	r3, [r7, #100]	@ 0x64
 80025dc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80025e0:	4622      	mov	r2, r4
 80025e2:	462b      	mov	r3, r5
 80025e4:	f04f 0000 	mov.w	r0, #0
 80025e8:	f04f 0100 	mov.w	r1, #0
 80025ec:	0159      	lsls	r1, r3, #5
 80025ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025f2:	0150      	lsls	r0, r2, #5
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4621      	mov	r1, r4
 80025fa:	1a51      	subs	r1, r2, r1
 80025fc:	61b9      	str	r1, [r7, #24]
 80025fe:	4629      	mov	r1, r5
 8002600:	eb63 0301 	sbc.w	r3, r3, r1
 8002604:	61fb      	str	r3, [r7, #28]
 8002606:	f04f 0200 	mov.w	r2, #0
 800260a:	f04f 0300 	mov.w	r3, #0
 800260e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002612:	4659      	mov	r1, fp
 8002614:	018b      	lsls	r3, r1, #6
 8002616:	4651      	mov	r1, sl
 8002618:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800261c:	4651      	mov	r1, sl
 800261e:	018a      	lsls	r2, r1, #6
 8002620:	4651      	mov	r1, sl
 8002622:	ebb2 0801 	subs.w	r8, r2, r1
 8002626:	4659      	mov	r1, fp
 8002628:	eb63 0901 	sbc.w	r9, r3, r1
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	f04f 0300 	mov.w	r3, #0
 8002634:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002638:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800263c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002640:	4690      	mov	r8, r2
 8002642:	4699      	mov	r9, r3
 8002644:	4623      	mov	r3, r4
 8002646:	eb18 0303 	adds.w	r3, r8, r3
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	462b      	mov	r3, r5
 800264e:	eb49 0303 	adc.w	r3, r9, r3
 8002652:	617b      	str	r3, [r7, #20]
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002660:	4629      	mov	r1, r5
 8002662:	024b      	lsls	r3, r1, #9
 8002664:	4621      	mov	r1, r4
 8002666:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800266a:	4621      	mov	r1, r4
 800266c:	024a      	lsls	r2, r1, #9
 800266e:	4610      	mov	r0, r2
 8002670:	4619      	mov	r1, r3
 8002672:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002676:	2200      	movs	r2, #0
 8002678:	65bb      	str	r3, [r7, #88]	@ 0x58
 800267a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800267c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002680:	f7fd fdd8 	bl	8000234 <__aeabi_uldivmod>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4613      	mov	r3, r2
 800268a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800268e:	e065      	b.n	800275c <HAL_RCC_GetSysClockFreq+0x420>
 8002690:	40023800 	.word	0x40023800
 8002694:	00f42400 	.word	0x00f42400
 8002698:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800269c:	4b3d      	ldr	r3, [pc, #244]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x458>)
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	099b      	lsrs	r3, r3, #6
 80026a2:	2200      	movs	r2, #0
 80026a4:	4618      	mov	r0, r3
 80026a6:	4611      	mov	r1, r2
 80026a8:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80026ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80026ae:	2300      	movs	r3, #0
 80026b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80026b2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80026b6:	4642      	mov	r2, r8
 80026b8:	464b      	mov	r3, r9
 80026ba:	f04f 0000 	mov.w	r0, #0
 80026be:	f04f 0100 	mov.w	r1, #0
 80026c2:	0159      	lsls	r1, r3, #5
 80026c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026c8:	0150      	lsls	r0, r2, #5
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	4641      	mov	r1, r8
 80026d0:	1a51      	subs	r1, r2, r1
 80026d2:	60b9      	str	r1, [r7, #8]
 80026d4:	4649      	mov	r1, r9
 80026d6:	eb63 0301 	sbc.w	r3, r3, r1
 80026da:	60fb      	str	r3, [r7, #12]
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80026e8:	4659      	mov	r1, fp
 80026ea:	018b      	lsls	r3, r1, #6
 80026ec:	4651      	mov	r1, sl
 80026ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026f2:	4651      	mov	r1, sl
 80026f4:	018a      	lsls	r2, r1, #6
 80026f6:	4651      	mov	r1, sl
 80026f8:	1a54      	subs	r4, r2, r1
 80026fa:	4659      	mov	r1, fp
 80026fc:	eb63 0501 	sbc.w	r5, r3, r1
 8002700:	f04f 0200 	mov.w	r2, #0
 8002704:	f04f 0300 	mov.w	r3, #0
 8002708:	00eb      	lsls	r3, r5, #3
 800270a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800270e:	00e2      	lsls	r2, r4, #3
 8002710:	4614      	mov	r4, r2
 8002712:	461d      	mov	r5, r3
 8002714:	4643      	mov	r3, r8
 8002716:	18e3      	adds	r3, r4, r3
 8002718:	603b      	str	r3, [r7, #0]
 800271a:	464b      	mov	r3, r9
 800271c:	eb45 0303 	adc.w	r3, r5, r3
 8002720:	607b      	str	r3, [r7, #4]
 8002722:	f04f 0200 	mov.w	r2, #0
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800272e:	4629      	mov	r1, r5
 8002730:	028b      	lsls	r3, r1, #10
 8002732:	4621      	mov	r1, r4
 8002734:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002738:	4621      	mov	r1, r4
 800273a:	028a      	lsls	r2, r1, #10
 800273c:	4610      	mov	r0, r2
 800273e:	4619      	mov	r1, r3
 8002740:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002744:	2200      	movs	r2, #0
 8002746:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002748:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800274a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800274e:	f7fd fd71 	bl	8000234 <__aeabi_uldivmod>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	4613      	mov	r3, r2
 8002758:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800275c:	4b0d      	ldr	r3, [pc, #52]	@ (8002794 <HAL_RCC_GetSysClockFreq+0x458>)
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	0f1b      	lsrs	r3, r3, #28
 8002762:	f003 0307 	and.w	r3, r3, #7
 8002766:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800276a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800276e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002772:	fbb2 f3f3 	udiv	r3, r2, r3
 8002776:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800277a:	e003      	b.n	8002784 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800277c:	4b06      	ldr	r3, [pc, #24]	@ (8002798 <HAL_RCC_GetSysClockFreq+0x45c>)
 800277e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002782:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002784:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002788:	4618      	mov	r0, r3
 800278a:	37b8      	adds	r7, #184	@ 0xb8
 800278c:	46bd      	mov	sp, r7
 800278e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002792:	bf00      	nop
 8002794:	40023800 	.word	0x40023800
 8002798:	00f42400 	.word	0x00f42400

0800279c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e28d      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 8083 	beq.w	80028c2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80027bc:	4b94      	ldr	r3, [pc, #592]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	f003 030c 	and.w	r3, r3, #12
 80027c4:	2b04      	cmp	r3, #4
 80027c6:	d019      	beq.n	80027fc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80027c8:	4b91      	ldr	r3, [pc, #580]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 030c 	and.w	r3, r3, #12
        || \
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d106      	bne.n	80027e2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80027d4:	4b8e      	ldr	r3, [pc, #568]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027e0:	d00c      	beq.n	80027fc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027e2:	4b8b      	ldr	r3, [pc, #556]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80027ea:	2b0c      	cmp	r3, #12
 80027ec:	d112      	bne.n	8002814 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ee:	4b88      	ldr	r3, [pc, #544]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027fa:	d10b      	bne.n	8002814 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027fc:	4b84      	ldr	r3, [pc, #528]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d05b      	beq.n	80028c0 <HAL_RCC_OscConfig+0x124>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d157      	bne.n	80028c0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e25a      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800281c:	d106      	bne.n	800282c <HAL_RCC_OscConfig+0x90>
 800281e:	4b7c      	ldr	r3, [pc, #496]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a7b      	ldr	r2, [pc, #492]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 8002824:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e01d      	b.n	8002868 <HAL_RCC_OscConfig+0xcc>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002834:	d10c      	bne.n	8002850 <HAL_RCC_OscConfig+0xb4>
 8002836:	4b76      	ldr	r3, [pc, #472]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a75      	ldr	r2, [pc, #468]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 800283c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	4b73      	ldr	r3, [pc, #460]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a72      	ldr	r2, [pc, #456]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 8002848:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	e00b      	b.n	8002868 <HAL_RCC_OscConfig+0xcc>
 8002850:	4b6f      	ldr	r3, [pc, #444]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a6e      	ldr	r2, [pc, #440]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 8002856:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	4b6c      	ldr	r3, [pc, #432]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a6b      	ldr	r2, [pc, #428]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 8002862:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d013      	beq.n	8002898 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002870:	f7fe fd9c 	bl	80013ac <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002878:	f7fe fd98 	bl	80013ac <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b64      	cmp	r3, #100	@ 0x64
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e21f      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288a:	4b61      	ldr	r3, [pc, #388]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0xdc>
 8002896:	e014      	b.n	80028c2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002898:	f7fe fd88 	bl	80013ac <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a0:	f7fe fd84 	bl	80013ac <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b64      	cmp	r3, #100	@ 0x64
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e20b      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b2:	4b57      	ldr	r3, [pc, #348]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0x104>
 80028be:	e000      	b.n	80028c2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d06f      	beq.n	80029ae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80028ce:	4b50      	ldr	r3, [pc, #320]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 030c 	and.w	r3, r3, #12
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d017      	beq.n	800290a <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80028da:	4b4d      	ldr	r3, [pc, #308]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 030c 	and.w	r3, r3, #12
        || \
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d105      	bne.n	80028f2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80028e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00b      	beq.n	800290a <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028f2:	4b47      	ldr	r3, [pc, #284]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80028fa:	2b0c      	cmp	r3, #12
 80028fc:	d11c      	bne.n	8002938 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028fe:	4b44      	ldr	r3, [pc, #272]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002906:	2b00      	cmp	r3, #0
 8002908:	d116      	bne.n	8002938 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800290a:	4b41      	ldr	r3, [pc, #260]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d005      	beq.n	8002922 <HAL_RCC_OscConfig+0x186>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d001      	beq.n	8002922 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e1d3      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002922:	4b3b      	ldr	r3, [pc, #236]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	00db      	lsls	r3, r3, #3
 8002930:	4937      	ldr	r1, [pc, #220]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 8002932:	4313      	orrs	r3, r2
 8002934:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002936:	e03a      	b.n	80029ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d020      	beq.n	8002982 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002940:	4b34      	ldr	r3, [pc, #208]	@ (8002a14 <HAL_RCC_OscConfig+0x278>)
 8002942:	2201      	movs	r2, #1
 8002944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002946:	f7fe fd31 	bl	80013ac <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800294e:	f7fe fd2d 	bl	80013ac <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e1b4      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002960:	4b2b      	ldr	r3, [pc, #172]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b00      	cmp	r3, #0
 800296a:	d0f0      	beq.n	800294e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800296c:	4b28      	ldr	r3, [pc, #160]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	691b      	ldr	r3, [r3, #16]
 8002978:	00db      	lsls	r3, r3, #3
 800297a:	4925      	ldr	r1, [pc, #148]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 800297c:	4313      	orrs	r3, r2
 800297e:	600b      	str	r3, [r1, #0]
 8002980:	e015      	b.n	80029ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002982:	4b24      	ldr	r3, [pc, #144]	@ (8002a14 <HAL_RCC_OscConfig+0x278>)
 8002984:	2200      	movs	r2, #0
 8002986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002988:	f7fe fd10 	bl	80013ac <HAL_GetTick>
 800298c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002990:	f7fe fd0c 	bl	80013ac <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e193      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029a2:	4b1b      	ldr	r3, [pc, #108]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d1f0      	bne.n	8002990 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0308 	and.w	r3, r3, #8
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d036      	beq.n	8002a28 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d016      	beq.n	80029f0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029c2:	4b15      	ldr	r3, [pc, #84]	@ (8002a18 <HAL_RCC_OscConfig+0x27c>)
 80029c4:	2201      	movs	r2, #1
 80029c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c8:	f7fe fcf0 	bl	80013ac <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029d0:	f7fe fcec 	bl	80013ac <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e173      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002a10 <HAL_RCC_OscConfig+0x274>)
 80029e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f0      	beq.n	80029d0 <HAL_RCC_OscConfig+0x234>
 80029ee:	e01b      	b.n	8002a28 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f0:	4b09      	ldr	r3, [pc, #36]	@ (8002a18 <HAL_RCC_OscConfig+0x27c>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f6:	f7fe fcd9 	bl	80013ac <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029fc:	e00e      	b.n	8002a1c <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029fe:	f7fe fcd5 	bl	80013ac <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d907      	bls.n	8002a1c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e15c      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
 8002a10:	40023800 	.word	0x40023800
 8002a14:	42470000 	.word	0x42470000
 8002a18:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a1c:	4b8a      	ldr	r3, [pc, #552]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002a1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1ea      	bne.n	80029fe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f000 8097 	beq.w	8002b64 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a36:	2300      	movs	r3, #0
 8002a38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a3a:	4b83      	ldr	r3, [pc, #524]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10f      	bne.n	8002a66 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	60bb      	str	r3, [r7, #8]
 8002a4a:	4b7f      	ldr	r3, [pc, #508]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4e:	4a7e      	ldr	r2, [pc, #504]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002a50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a56:	4b7c      	ldr	r3, [pc, #496]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a5e:	60bb      	str	r3, [r7, #8]
 8002a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a62:	2301      	movs	r3, #1
 8002a64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a66:	4b79      	ldr	r3, [pc, #484]	@ (8002c4c <HAL_RCC_OscConfig+0x4b0>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d118      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a72:	4b76      	ldr	r3, [pc, #472]	@ (8002c4c <HAL_RCC_OscConfig+0x4b0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a75      	ldr	r2, [pc, #468]	@ (8002c4c <HAL_RCC_OscConfig+0x4b0>)
 8002a78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a7e:	f7fe fc95 	bl	80013ac <HAL_GetTick>
 8002a82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a84:	e008      	b.n	8002a98 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a86:	f7fe fc91 	bl	80013ac <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	1ad3      	subs	r3, r2, r3
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d901      	bls.n	8002a98 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002a94:	2303      	movs	r3, #3
 8002a96:	e118      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a98:	4b6c      	ldr	r3, [pc, #432]	@ (8002c4c <HAL_RCC_OscConfig+0x4b0>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0f0      	beq.n	8002a86 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d106      	bne.n	8002aba <HAL_RCC_OscConfig+0x31e>
 8002aac:	4b66      	ldr	r3, [pc, #408]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002aae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab0:	4a65      	ldr	r2, [pc, #404]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002ab2:	f043 0301 	orr.w	r3, r3, #1
 8002ab6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ab8:	e01c      	b.n	8002af4 <HAL_RCC_OscConfig+0x358>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2b05      	cmp	r3, #5
 8002ac0:	d10c      	bne.n	8002adc <HAL_RCC_OscConfig+0x340>
 8002ac2:	4b61      	ldr	r3, [pc, #388]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002ac4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac6:	4a60      	ldr	r2, [pc, #384]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002ac8:	f043 0304 	orr.w	r3, r3, #4
 8002acc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ace:	4b5e      	ldr	r3, [pc, #376]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad2:	4a5d      	ldr	r2, [pc, #372]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ada:	e00b      	b.n	8002af4 <HAL_RCC_OscConfig+0x358>
 8002adc:	4b5a      	ldr	r3, [pc, #360]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002ade:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ae0:	4a59      	ldr	r2, [pc, #356]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002ae2:	f023 0301 	bic.w	r3, r3, #1
 8002ae6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ae8:	4b57      	ldr	r3, [pc, #348]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002aea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aec:	4a56      	ldr	r2, [pc, #344]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002aee:	f023 0304 	bic.w	r3, r3, #4
 8002af2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d015      	beq.n	8002b28 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002afc:	f7fe fc56 	bl	80013ac <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b02:	e00a      	b.n	8002b1a <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b04:	f7fe fc52 	bl	80013ac <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e0d7      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b1a:	4b4b      	ldr	r3, [pc, #300]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0ee      	beq.n	8002b04 <HAL_RCC_OscConfig+0x368>
 8002b26:	e014      	b.n	8002b52 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b28:	f7fe fc40 	bl	80013ac <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2e:	e00a      	b.n	8002b46 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b30:	f7fe fc3c 	bl	80013ac <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d901      	bls.n	8002b46 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002b42:	2303      	movs	r3, #3
 8002b44:	e0c1      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b46:	4b40      	ldr	r3, [pc, #256]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1ee      	bne.n	8002b30 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b52:	7dfb      	ldrb	r3, [r7, #23]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d105      	bne.n	8002b64 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b58:	4b3b      	ldr	r3, [pc, #236]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5c:	4a3a      	ldr	r2, [pc, #232]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002b5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 80ad 	beq.w	8002cc8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b6e:	4b36      	ldr	r3, [pc, #216]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 030c 	and.w	r3, r3, #12
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d060      	beq.n	8002c3c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d145      	bne.n	8002c0e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b82:	4b33      	ldr	r3, [pc, #204]	@ (8002c50 <HAL_RCC_OscConfig+0x4b4>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b88:	f7fe fc10 	bl	80013ac <HAL_GetTick>
 8002b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8e:	e008      	b.n	8002ba2 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b90:	f7fe fc0c 	bl	80013ac <HAL_GetTick>
 8002b94:	4602      	mov	r2, r0
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	1ad3      	subs	r3, r2, r3
 8002b9a:	2b02      	cmp	r3, #2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e093      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ba2:	4b29      	ldr	r3, [pc, #164]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1f0      	bne.n	8002b90 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69da      	ldr	r2, [r3, #28]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbc:	019b      	lsls	r3, r3, #6
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc4:	085b      	lsrs	r3, r3, #1
 8002bc6:	3b01      	subs	r3, #1
 8002bc8:	041b      	lsls	r3, r3, #16
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd0:	061b      	lsls	r3, r3, #24
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd8:	071b      	lsls	r3, r3, #28
 8002bda:	491b      	ldr	r1, [pc, #108]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c50 <HAL_RCC_OscConfig+0x4b4>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be6:	f7fe fbe1 	bl	80013ac <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bee:	f7fe fbdd 	bl	80013ac <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e064      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c00:	4b11      	ldr	r3, [pc, #68]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f0      	beq.n	8002bee <HAL_RCC_OscConfig+0x452>
 8002c0c:	e05c      	b.n	8002cc8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0e:	4b10      	ldr	r3, [pc, #64]	@ (8002c50 <HAL_RCC_OscConfig+0x4b4>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c14:	f7fe fbca 	bl	80013ac <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7fe fbc6 	bl	80013ac <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e04d      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2e:	4b06      	ldr	r3, [pc, #24]	@ (8002c48 <HAL_RCC_OscConfig+0x4ac>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x480>
 8002c3a:	e045      	b.n	8002cc8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d107      	bne.n	8002c54 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e040      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40007000 	.word	0x40007000
 8002c50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c54:	4b1f      	ldr	r3, [pc, #124]	@ (8002cd4 <HAL_RCC_OscConfig+0x538>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d030      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d129      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d122      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c84:	4013      	ands	r3, r2
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d119      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c9a:	085b      	lsrs	r3, r3, #1
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d10f      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d107      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cbe:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d001      	beq.n	8002cc8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e000      	b.n	8002cca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40023800 	.word	0x40023800

08002cd8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e073      	b.n	8002dd2 <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	7f5b      	ldrb	r3, [r3, #29]
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d105      	bne.n	8002d00 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7fe f80a 	bl	8000d14 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	2b10      	cmp	r3, #16
 8002d12:	d055      	beq.n	8002dc0 <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	22ca      	movs	r2, #202	@ 0xca
 8002d1a:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2253      	movs	r2, #83	@ 0x53
 8002d22:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 f87f 	bl	8002e28 <RTC_EnterInitMode>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d12c      	bne.n	8002d8e <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	689b      	ldr	r3, [r3, #8]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6812      	ldr	r2, [r2, #0]
 8002d3e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002d42:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d46:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	6899      	ldr	r1, [r3, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685a      	ldr	r2, [r3, #4]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	68d2      	ldr	r2, [r2, #12]
 8002d6e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	6919      	ldr	r1, [r3, #16]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	041a      	lsls	r2, r3, #16
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 f886 	bl	8002e96 <RTC_ExitInitMode>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002d8e:	7bfb      	ldrb	r3, [r7, #15]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d110      	bne.n	8002db6 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002da2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	699a      	ldr	r2, [r3, #24]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	430a      	orrs	r2, r1
 8002db4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	22ff      	movs	r2, #255	@ 0xff
 8002dbc:	625a      	str	r2, [r3, #36]	@ 0x24
 8002dbe:	e001      	b.n	8002dc4 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d102      	bne.n	8002dd0 <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2201      	movs	r2, #1
 8002dce:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
	...

08002ddc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a0d      	ldr	r2, [pc, #52]	@ (8002e24 <HAL_RTC_WaitForSynchro+0x48>)
 8002dee:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002df0:	f7fe fadc 	bl	80013ac <HAL_GetTick>
 8002df4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002df6:	e009      	b.n	8002e0c <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002df8:	f7fe fad8 	bl	80013ac <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e06:	d901      	bls.n	8002e0c <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e007      	b.n	8002e1c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f003 0320 	and.w	r3, r3, #32
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0ee      	beq.n	8002df8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	3710      	adds	r7, #16
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	00017f5f 	.word	0x00017f5f

08002e28 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d122      	bne.n	8002e8c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68da      	ldr	r2, [r3, #12]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002e54:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e56:	f7fe faa9 	bl	80013ac <HAL_GetTick>
 8002e5a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002e5c:	e00c      	b.n	8002e78 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e5e:	f7fe faa5 	bl	80013ac <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e6c:	d904      	bls.n	8002e78 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2204      	movs	r2, #4
 8002e72:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002e74:	2301      	movs	r3, #1
 8002e76:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d102      	bne.n	8002e8c <RTC_EnterInitMode+0x64>
 8002e86:	7bfb      	ldrb	r3, [r7, #15]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d1e8      	bne.n	8002e5e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b084      	sub	sp, #16
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002eb0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f003 0320 	and.w	r3, r3, #32
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10a      	bne.n	8002ed6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f7ff ff8b 	bl	8002ddc <HAL_RTC_WaitForSynchro>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d004      	beq.n	8002ed6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2204      	movs	r2, #4
 8002ed0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8002ed6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e041      	b.n	8002f76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d106      	bne.n	8002f0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f000 f839 	bl	8002f7e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4610      	mov	r0, r2
 8002f20:	f000 f9c0 	bl	80032a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}

08002f7e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	b083      	sub	sp, #12
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
	...

08002f94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d001      	beq.n	8002fac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e04e      	b.n	800304a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2202      	movs	r2, #2
 8002fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68da      	ldr	r2, [r3, #12]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0201 	orr.w	r2, r2, #1
 8002fc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a23      	ldr	r2, [pc, #140]	@ (8003058 <HAL_TIM_Base_Start_IT+0xc4>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d022      	beq.n	8003014 <HAL_TIM_Base_Start_IT+0x80>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fd6:	d01d      	beq.n	8003014 <HAL_TIM_Base_Start_IT+0x80>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a1f      	ldr	r2, [pc, #124]	@ (800305c <HAL_TIM_Base_Start_IT+0xc8>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d018      	beq.n	8003014 <HAL_TIM_Base_Start_IT+0x80>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a1e      	ldr	r2, [pc, #120]	@ (8003060 <HAL_TIM_Base_Start_IT+0xcc>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d013      	beq.n	8003014 <HAL_TIM_Base_Start_IT+0x80>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a1c      	ldr	r2, [pc, #112]	@ (8003064 <HAL_TIM_Base_Start_IT+0xd0>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d00e      	beq.n	8003014 <HAL_TIM_Base_Start_IT+0x80>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a1b      	ldr	r2, [pc, #108]	@ (8003068 <HAL_TIM_Base_Start_IT+0xd4>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d009      	beq.n	8003014 <HAL_TIM_Base_Start_IT+0x80>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a19      	ldr	r2, [pc, #100]	@ (800306c <HAL_TIM_Base_Start_IT+0xd8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d004      	beq.n	8003014 <HAL_TIM_Base_Start_IT+0x80>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a18      	ldr	r2, [pc, #96]	@ (8003070 <HAL_TIM_Base_Start_IT+0xdc>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d111      	bne.n	8003038 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 0307 	and.w	r3, r3, #7
 800301e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2b06      	cmp	r3, #6
 8003024:	d010      	beq.n	8003048 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 0201 	orr.w	r2, r2, #1
 8003034:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003036:	e007      	b.n	8003048 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f042 0201 	orr.w	r2, r2, #1
 8003046:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3714      	adds	r7, #20
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop
 8003058:	40010000 	.word	0x40010000
 800305c:	40000400 	.word	0x40000400
 8003060:	40000800 	.word	0x40000800
 8003064:	40000c00 	.word	0x40000c00
 8003068:	40010400 	.word	0x40010400
 800306c:	40014000 	.word	0x40014000
 8003070:	40001800 	.word	0x40001800

08003074 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68db      	ldr	r3, [r3, #12]
 8003082:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	f003 0302 	and.w	r3, r3, #2
 8003092:	2b00      	cmp	r3, #0
 8003094:	d020      	beq.n	80030d8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d01b      	beq.n	80030d8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f06f 0202 	mvn.w	r2, #2
 80030a8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	f003 0303 	and.w	r3, r3, #3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 f8d2 	bl	8003268 <HAL_TIM_IC_CaptureCallback>
 80030c4:	e005      	b.n	80030d2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 f8c4 	bl	8003254 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f000 f8d5 	bl	800327c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	f003 0304 	and.w	r3, r3, #4
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d020      	beq.n	8003124 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d01b      	beq.n	8003124 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f06f 0204 	mvn.w	r2, #4
 80030f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2202      	movs	r2, #2
 80030fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f8ac 	bl	8003268 <HAL_TIM_IC_CaptureCallback>
 8003110:	e005      	b.n	800311e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f89e 	bl	8003254 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f8af 	bl	800327c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d020      	beq.n	8003170 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f003 0308 	and.w	r3, r3, #8
 8003134:	2b00      	cmp	r3, #0
 8003136:	d01b      	beq.n	8003170 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 0208 	mvn.w	r2, #8
 8003140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2204      	movs	r2, #4
 8003146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f886 	bl	8003268 <HAL_TIM_IC_CaptureCallback>
 800315c:	e005      	b.n	800316a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f878 	bl	8003254 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f889 	bl	800327c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2200      	movs	r2, #0
 800316e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f003 0310 	and.w	r3, r3, #16
 8003176:	2b00      	cmp	r3, #0
 8003178:	d020      	beq.n	80031bc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f003 0310 	and.w	r3, r3, #16
 8003180:	2b00      	cmp	r3, #0
 8003182:	d01b      	beq.n	80031bc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f06f 0210 	mvn.w	r2, #16
 800318c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2208      	movs	r2, #8
 8003192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	69db      	ldr	r3, [r3, #28]
 800319a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d003      	beq.n	80031aa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f000 f860 	bl	8003268 <HAL_TIM_IC_CaptureCallback>
 80031a8:	e005      	b.n	80031b6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 f852 	bl	8003254 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 f863 	bl	800327c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00c      	beq.n	80031e0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d007      	beq.n	80031e0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f06f 0201 	mvn.w	r2, #1
 80031d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7fd fd5a 	bl	8000c94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00c      	beq.n	8003204 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d007      	beq.n	8003204 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80031fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f900 	bl	8003404 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00c      	beq.n	8003228 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003214:	2b00      	cmp	r3, #0
 8003216:	d007      	beq.n	8003228 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 f834 	bl	8003290 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00c      	beq.n	800324c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f003 0320 	and.w	r3, r3, #32
 8003238:	2b00      	cmp	r3, #0
 800323a:	d007      	beq.n	800324c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0220 	mvn.w	r2, #32
 8003244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 f8d2 	bl	80033f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800324c:	bf00      	nop
 800324e:	3710      	adds	r7, #16
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	4a43      	ldr	r2, [pc, #268]	@ (80033c4 <TIM_Base_SetConfig+0x120>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d013      	beq.n	80032e4 <TIM_Base_SetConfig+0x40>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032c2:	d00f      	beq.n	80032e4 <TIM_Base_SetConfig+0x40>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a40      	ldr	r2, [pc, #256]	@ (80033c8 <TIM_Base_SetConfig+0x124>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d00b      	beq.n	80032e4 <TIM_Base_SetConfig+0x40>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4a3f      	ldr	r2, [pc, #252]	@ (80033cc <TIM_Base_SetConfig+0x128>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d007      	beq.n	80032e4 <TIM_Base_SetConfig+0x40>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a3e      	ldr	r2, [pc, #248]	@ (80033d0 <TIM_Base_SetConfig+0x12c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d003      	beq.n	80032e4 <TIM_Base_SetConfig+0x40>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	4a3d      	ldr	r2, [pc, #244]	@ (80033d4 <TIM_Base_SetConfig+0x130>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d108      	bne.n	80032f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	68fa      	ldr	r2, [r7, #12]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a32      	ldr	r2, [pc, #200]	@ (80033c4 <TIM_Base_SetConfig+0x120>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d02b      	beq.n	8003356 <TIM_Base_SetConfig+0xb2>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003304:	d027      	beq.n	8003356 <TIM_Base_SetConfig+0xb2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a2f      	ldr	r2, [pc, #188]	@ (80033c8 <TIM_Base_SetConfig+0x124>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d023      	beq.n	8003356 <TIM_Base_SetConfig+0xb2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a2e      	ldr	r2, [pc, #184]	@ (80033cc <TIM_Base_SetConfig+0x128>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d01f      	beq.n	8003356 <TIM_Base_SetConfig+0xb2>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a2d      	ldr	r2, [pc, #180]	@ (80033d0 <TIM_Base_SetConfig+0x12c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d01b      	beq.n	8003356 <TIM_Base_SetConfig+0xb2>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a2c      	ldr	r2, [pc, #176]	@ (80033d4 <TIM_Base_SetConfig+0x130>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d017      	beq.n	8003356 <TIM_Base_SetConfig+0xb2>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a2b      	ldr	r2, [pc, #172]	@ (80033d8 <TIM_Base_SetConfig+0x134>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d013      	beq.n	8003356 <TIM_Base_SetConfig+0xb2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a2a      	ldr	r2, [pc, #168]	@ (80033dc <TIM_Base_SetConfig+0x138>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d00f      	beq.n	8003356 <TIM_Base_SetConfig+0xb2>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a29      	ldr	r2, [pc, #164]	@ (80033e0 <TIM_Base_SetConfig+0x13c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d00b      	beq.n	8003356 <TIM_Base_SetConfig+0xb2>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a28      	ldr	r2, [pc, #160]	@ (80033e4 <TIM_Base_SetConfig+0x140>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d007      	beq.n	8003356 <TIM_Base_SetConfig+0xb2>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a27      	ldr	r2, [pc, #156]	@ (80033e8 <TIM_Base_SetConfig+0x144>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d003      	beq.n	8003356 <TIM_Base_SetConfig+0xb2>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	4a26      	ldr	r2, [pc, #152]	@ (80033ec <TIM_Base_SetConfig+0x148>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d108      	bne.n	8003368 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800335c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	68db      	ldr	r3, [r3, #12]
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4313      	orrs	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	4313      	orrs	r3, r2
 8003374:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	689a      	ldr	r2, [r3, #8]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a0e      	ldr	r2, [pc, #56]	@ (80033c4 <TIM_Base_SetConfig+0x120>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d003      	beq.n	8003396 <TIM_Base_SetConfig+0xf2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a10      	ldr	r2, [pc, #64]	@ (80033d4 <TIM_Base_SetConfig+0x130>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d103      	bne.n	800339e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	691a      	ldr	r2, [r3, #16]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f043 0204 	orr.w	r2, r3, #4
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	601a      	str	r2, [r3, #0]
}
 80033b6:	bf00      	nop
 80033b8:	3714      	adds	r7, #20
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40010000 	.word	0x40010000
 80033c8:	40000400 	.word	0x40000400
 80033cc:	40000800 	.word	0x40000800
 80033d0:	40000c00 	.word	0x40000c00
 80033d4:	40010400 	.word	0x40010400
 80033d8:	40014000 	.word	0x40014000
 80033dc:	40014400 	.word	0x40014400
 80033e0:	40014800 	.word	0x40014800
 80033e4:	40001800 	.word	0x40001800
 80033e8:	40001c00 	.word	0x40001c00
 80033ec:	40002000 	.word	0x40002000

080033f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800340c:	bf00      	nop
 800340e:	370c      	adds	r7, #12
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr

08003418 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d101      	bne.n	800342a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e042      	b.n	80034b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d106      	bne.n	8003444 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7fd fc92 	bl	8000d68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2224      	movs	r2, #36	@ 0x24
 8003448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68da      	ldr	r2, [r3, #12]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800345a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	f000 fdd3 	bl	8004008 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003470:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695a      	ldr	r2, [r3, #20]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003480:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68da      	ldr	r2, [r3, #12]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003490:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2220      	movs	r2, #32
 800349c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2220      	movs	r2, #32
 80034a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b08a      	sub	sp, #40	@ 0x28
 80034bc:	af02      	add	r7, sp, #8
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	603b      	str	r3, [r7, #0]
 80034c4:	4613      	mov	r3, r2
 80034c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	d175      	bne.n	80035c4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d002      	beq.n	80034e4 <HAL_UART_Transmit+0x2c>
 80034de:	88fb      	ldrh	r3, [r7, #6]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d101      	bne.n	80034e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e06e      	b.n	80035c6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2200      	movs	r2, #0
 80034ec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2221      	movs	r2, #33	@ 0x21
 80034f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034f6:	f7fd ff59 	bl	80013ac <HAL_GetTick>
 80034fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	88fa      	ldrh	r2, [r7, #6]
 8003500:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	88fa      	ldrh	r2, [r7, #6]
 8003506:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003510:	d108      	bne.n	8003524 <HAL_UART_Transmit+0x6c>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d104      	bne.n	8003524 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800351a:	2300      	movs	r3, #0
 800351c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	61bb      	str	r3, [r7, #24]
 8003522:	e003      	b.n	800352c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003528:	2300      	movs	r3, #0
 800352a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800352c:	e02e      	b.n	800358c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	9300      	str	r3, [sp, #0]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	2200      	movs	r2, #0
 8003536:	2180      	movs	r1, #128	@ 0x80
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f000 fb37 	bl	8003bac <UART_WaitOnFlagUntilTimeout>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e03a      	b.n	80035c6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10b      	bne.n	800356e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	461a      	mov	r2, r3
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003564:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	3302      	adds	r3, #2
 800356a:	61bb      	str	r3, [r7, #24]
 800356c:	e007      	b.n	800357e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	781a      	ldrb	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	3301      	adds	r3, #1
 800357c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003590:	b29b      	uxth	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d1cb      	bne.n	800352e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2200      	movs	r2, #0
 800359e:	2140      	movs	r1, #64	@ 0x40
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 fb03 	bl	8003bac <UART_WaitOnFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e006      	b.n	80035c6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80035c0:	2300      	movs	r3, #0
 80035c2:	e000      	b.n	80035c6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80035c4:	2302      	movs	r3, #2
  }
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3720      	adds	r7, #32
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b084      	sub	sp, #16
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	60f8      	str	r0, [r7, #12]
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	4613      	mov	r3, r2
 80035da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b20      	cmp	r3, #32
 80035e6:	d112      	bne.n	800360e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <HAL_UART_Receive_IT+0x26>
 80035ee:	88fb      	ldrh	r3, [r7, #6]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d101      	bne.n	80035f8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e00b      	b.n	8003610 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80035fe:	88fb      	ldrh	r3, [r7, #6]
 8003600:	461a      	mov	r2, r3
 8003602:	68b9      	ldr	r1, [r7, #8]
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 fb2a 	bl	8003c5e <UART_Start_Receive_IT>
 800360a:	4603      	mov	r3, r0
 800360c:	e000      	b.n	8003610 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800360e:	2302      	movs	r3, #2
  }
}
 8003610:	4618      	mov	r0, r3
 8003612:	3710      	adds	r7, #16
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b0ba      	sub	sp, #232	@ 0xe8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	695b      	ldr	r3, [r3, #20]
 800363a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800363e:	2300      	movs	r3, #0
 8003640:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003644:	2300      	movs	r3, #0
 8003646:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800364a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800364e:	f003 030f 	and.w	r3, r3, #15
 8003652:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003656:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10f      	bne.n	800367e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800365e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003662:	f003 0320 	and.w	r3, r3, #32
 8003666:	2b00      	cmp	r3, #0
 8003668:	d009      	beq.n	800367e <HAL_UART_IRQHandler+0x66>
 800366a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800366e:	f003 0320 	and.w	r3, r3, #32
 8003672:	2b00      	cmp	r3, #0
 8003674:	d003      	beq.n	800367e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f000 fc07 	bl	8003e8a <UART_Receive_IT>
      return;
 800367c:	e273      	b.n	8003b66 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800367e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003682:	2b00      	cmp	r3, #0
 8003684:	f000 80de 	beq.w	8003844 <HAL_UART_IRQHandler+0x22c>
 8003688:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d106      	bne.n	80036a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003698:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 80d1 	beq.w	8003844 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00b      	beq.n	80036c6 <HAL_UART_IRQHandler+0xae>
 80036ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d005      	beq.n	80036c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036be:	f043 0201 	orr.w	r2, r3, #1
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ca:	f003 0304 	and.w	r3, r3, #4
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d00b      	beq.n	80036ea <HAL_UART_IRQHandler+0xd2>
 80036d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d005      	beq.n	80036ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036e2:	f043 0202 	orr.w	r2, r3, #2
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00b      	beq.n	800370e <HAL_UART_IRQHandler+0xf6>
 80036f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d005      	beq.n	800370e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003706:	f043 0204 	orr.w	r2, r3, #4
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800370e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003712:	f003 0308 	and.w	r3, r3, #8
 8003716:	2b00      	cmp	r3, #0
 8003718:	d011      	beq.n	800373e <HAL_UART_IRQHandler+0x126>
 800371a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800371e:	f003 0320 	and.w	r3, r3, #32
 8003722:	2b00      	cmp	r3, #0
 8003724:	d105      	bne.n	8003732 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003726:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800372a:	f003 0301 	and.w	r3, r3, #1
 800372e:	2b00      	cmp	r3, #0
 8003730:	d005      	beq.n	800373e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003736:	f043 0208 	orr.w	r2, r3, #8
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 820a 	beq.w	8003b5c <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800374c:	f003 0320 	and.w	r3, r3, #32
 8003750:	2b00      	cmp	r3, #0
 8003752:	d008      	beq.n	8003766 <HAL_UART_IRQHandler+0x14e>
 8003754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003758:	f003 0320 	and.w	r3, r3, #32
 800375c:	2b00      	cmp	r3, #0
 800375e:	d002      	beq.n	8003766 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f000 fb92 	bl	8003e8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003770:	2b40      	cmp	r3, #64	@ 0x40
 8003772:	bf0c      	ite	eq
 8003774:	2301      	moveq	r3, #1
 8003776:	2300      	movne	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d103      	bne.n	8003792 <HAL_UART_IRQHandler+0x17a>
 800378a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800378e:	2b00      	cmp	r3, #0
 8003790:	d04f      	beq.n	8003832 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f000 fa9d 	bl	8003cd2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a2:	2b40      	cmp	r3, #64	@ 0x40
 80037a4:	d141      	bne.n	800382a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	3314      	adds	r3, #20
 80037ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037b4:	e853 3f00 	ldrex	r3, [r3]
 80037b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80037bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80037c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	3314      	adds	r3, #20
 80037ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80037d2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80037d6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80037de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80037e2:	e841 2300 	strex	r3, r2, [r1]
 80037e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80037ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1d9      	bne.n	80037a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d013      	beq.n	8003822 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037fe:	4a8a      	ldr	r2, [pc, #552]	@ (8003a28 <HAL_UART_IRQHandler+0x410>)
 8003800:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003806:	4618      	mov	r0, r3
 8003808:	f7fd ff52 	bl	80016b0 <HAL_DMA_Abort_IT>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d016      	beq.n	8003840 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003816:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800381c:	4610      	mov	r0, r2
 800381e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003820:	e00e      	b.n	8003840 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 f9ac 	bl	8003b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003828:	e00a      	b.n	8003840 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 f9a8 	bl	8003b80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003830:	e006      	b.n	8003840 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f000 f9a4 	bl	8003b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800383e:	e18d      	b.n	8003b5c <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003840:	bf00      	nop
    return;
 8003842:	e18b      	b.n	8003b5c <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003848:	2b01      	cmp	r3, #1
 800384a:	f040 8167 	bne.w	8003b1c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800384e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003852:	f003 0310 	and.w	r3, r3, #16
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 8160 	beq.w	8003b1c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 800385c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003860:	f003 0310 	and.w	r3, r3, #16
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 8159 	beq.w	8003b1c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800386a:	2300      	movs	r3, #0
 800386c:	60bb      	str	r3, [r7, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	60bb      	str	r3, [r7, #8]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	60bb      	str	r3, [r7, #8]
 800387e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800388a:	2b40      	cmp	r3, #64	@ 0x40
 800388c:	f040 80ce 	bne.w	8003a2c <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800389c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 80a9 	beq.w	80039f8 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038ae:	429a      	cmp	r2, r3
 80038b0:	f080 80a2 	bcs.w	80039f8 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038ba:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038c0:	69db      	ldr	r3, [r3, #28]
 80038c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038c6:	f000 8088 	beq.w	80039da <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	330c      	adds	r3, #12
 80038d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80038d8:	e853 3f00 	ldrex	r3, [r3]
 80038dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80038e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80038e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80038e8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	330c      	adds	r3, #12
 80038f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80038f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80038fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003902:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003906:	e841 2300 	strex	r3, r2, [r1]
 800390a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800390e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1d9      	bne.n	80038ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3314      	adds	r3, #20
 800391c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003920:	e853 3f00 	ldrex	r3, [r3]
 8003924:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003926:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003928:	f023 0301 	bic.w	r3, r3, #1
 800392c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3314      	adds	r3, #20
 8003936:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800393a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800393e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003940:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003942:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003946:	e841 2300 	strex	r3, r2, [r1]
 800394a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800394c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1e1      	bne.n	8003916 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	3314      	adds	r3, #20
 8003958:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800395c:	e853 3f00 	ldrex	r3, [r3]
 8003960:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003962:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003964:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003968:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3314      	adds	r3, #20
 8003972:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003976:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003978:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800397c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800397e:	e841 2300 	strex	r3, r2, [r1]
 8003982:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003984:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1e3      	bne.n	8003952 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2220      	movs	r2, #32
 800398e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	330c      	adds	r3, #12
 800399e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039a2:	e853 3f00 	ldrex	r3, [r3]
 80039a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80039a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039aa:	f023 0310 	bic.w	r3, r3, #16
 80039ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	330c      	adds	r3, #12
 80039b8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80039bc:	65ba      	str	r2, [r7, #88]	@ 0x58
 80039be:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80039c2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80039c4:	e841 2300 	strex	r3, r2, [r1]
 80039c8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80039ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1e3      	bne.n	8003998 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039d4:	4618      	mov	r0, r3
 80039d6:	f7fd fdfb 	bl	80015d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2202      	movs	r2, #2
 80039de:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	4619      	mov	r1, r3
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f8cf 	bl	8003b94 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80039f6:	e0b3      	b.n	8003b60 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003a00:	429a      	cmp	r2, r3
 8003a02:	f040 80ad 	bne.w	8003b60 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a10:	f040 80a6 	bne.w	8003b60 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a1e:	4619      	mov	r1, r3
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 f8b7 	bl	8003b94 <HAL_UARTEx_RxEventCallback>
      return;
 8003a26:	e09b      	b.n	8003b60 <HAL_UART_IRQHandler+0x548>
 8003a28:	08003d99 	.word	0x08003d99
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	f000 808e 	beq.w	8003b64 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003a48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f000 8089 	beq.w	8003b64 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	330c      	adds	r3, #12
 8003a58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a5c:	e853 3f00 	ldrex	r3, [r3]
 8003a60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a68:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	330c      	adds	r3, #12
 8003a72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a76:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a78:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a7a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a7c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a7e:	e841 2300 	strex	r3, r2, [r1]
 8003a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a84:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1e3      	bne.n	8003a52 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3314      	adds	r3, #20
 8003a90:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a94:	e853 3f00 	ldrex	r3, [r3]
 8003a98:	623b      	str	r3, [r7, #32]
   return(result);
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	f023 0301 	bic.w	r3, r3, #1
 8003aa0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3314      	adds	r3, #20
 8003aaa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003aae:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ab0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ab4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ab6:	e841 2300 	strex	r3, r2, [r1]
 8003aba:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1e3      	bne.n	8003a8a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	330c      	adds	r3, #12
 8003ad6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	e853 3f00 	ldrex	r3, [r3]
 8003ade:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 0310 	bic.w	r3, r3, #16
 8003ae6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	330c      	adds	r3, #12
 8003af0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003af4:	61fa      	str	r2, [r7, #28]
 8003af6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003af8:	69b9      	ldr	r1, [r7, #24]
 8003afa:	69fa      	ldr	r2, [r7, #28]
 8003afc:	e841 2300 	strex	r3, r2, [r1]
 8003b00:	617b      	str	r3, [r7, #20]
   return(result);
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d1e3      	bne.n	8003ad0 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b0e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b12:	4619      	mov	r1, r3
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f83d 	bl	8003b94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b1a:	e023      	b.n	8003b64 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d009      	beq.n	8003b3c <HAL_UART_IRQHandler+0x524>
 8003b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d003      	beq.n	8003b3c <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f000 f940 	bl	8003dba <UART_Transmit_IT>
    return;
 8003b3a:	e014      	b.n	8003b66 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00e      	beq.n	8003b66 <HAL_UART_IRQHandler+0x54e>
 8003b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d008      	beq.n	8003b66 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f980 	bl	8003e5a <UART_EndTransmit_IT>
    return;
 8003b5a:	e004      	b.n	8003b66 <HAL_UART_IRQHandler+0x54e>
    return;
 8003b5c:	bf00      	nop
 8003b5e:	e002      	b.n	8003b66 <HAL_UART_IRQHandler+0x54e>
      return;
 8003b60:	bf00      	nop
 8003b62:	e000      	b.n	8003b66 <HAL_UART_IRQHandler+0x54e>
      return;
 8003b64:	bf00      	nop
  }
}
 8003b66:	37e8      	adds	r7, #232	@ 0xe8
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003b74:	bf00      	nop
 8003b76:	370c      	adds	r7, #12
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003b88:	bf00      	nop
 8003b8a:	370c      	adds	r7, #12
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b92:	4770      	bx	lr

08003b94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	460b      	mov	r3, r1
 8003b9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	603b      	str	r3, [r7, #0]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bbc:	e03b      	b.n	8003c36 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bbe:	6a3b      	ldr	r3, [r7, #32]
 8003bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bc4:	d037      	beq.n	8003c36 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bc6:	f7fd fbf1 	bl	80013ac <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	6a3a      	ldr	r2, [r7, #32]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d302      	bcc.n	8003bdc <UART_WaitOnFlagUntilTimeout+0x30>
 8003bd6:	6a3b      	ldr	r3, [r7, #32]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d101      	bne.n	8003be0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e03a      	b.n	8003c56 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	f003 0304 	and.w	r3, r3, #4
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d023      	beq.n	8003c36 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	2b80      	cmp	r3, #128	@ 0x80
 8003bf2:	d020      	beq.n	8003c36 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	2b40      	cmp	r3, #64	@ 0x40
 8003bf8:	d01d      	beq.n	8003c36 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 0308 	and.w	r3, r3, #8
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d116      	bne.n	8003c36 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c08:	2300      	movs	r3, #0
 8003c0a:	617b      	str	r3, [r7, #20]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	617b      	str	r3, [r7, #20]
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c1e:	68f8      	ldr	r0, [r7, #12]
 8003c20:	f000 f857 	bl	8003cd2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2208      	movs	r2, #8
 8003c28:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e00f      	b.n	8003c56 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681a      	ldr	r2, [r3, #0]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	4013      	ands	r3, r2
 8003c40:	68ba      	ldr	r2, [r7, #8]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	bf0c      	ite	eq
 8003c46:	2301      	moveq	r3, #1
 8003c48:	2300      	movne	r3, #0
 8003c4a:	b2db      	uxtb	r3, r3
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d0b4      	beq.n	8003bbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c54:	2300      	movs	r3, #0
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3718      	adds	r7, #24
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b085      	sub	sp, #20
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	60f8      	str	r0, [r7, #12]
 8003c66:	60b9      	str	r1, [r7, #8]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	68ba      	ldr	r2, [r7, #8]
 8003c70:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	88fa      	ldrh	r2, [r7, #6]
 8003c76:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	88fa      	ldrh	r2, [r7, #6]
 8003c7c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2200      	movs	r2, #0
 8003c82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2222      	movs	r2, #34	@ 0x22
 8003c88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d007      	beq.n	8003ca4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68da      	ldr	r2, [r3, #12]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ca2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	695a      	ldr	r2, [r3, #20]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0201 	orr.w	r2, r2, #1
 8003cb2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0220 	orr.w	r2, r2, #32
 8003cc2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3714      	adds	r7, #20
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr

08003cd2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003cd2:	b480      	push	{r7}
 8003cd4:	b095      	sub	sp, #84	@ 0x54
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	330c      	adds	r3, #12
 8003ce0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ce4:	e853 3f00 	ldrex	r3, [r3]
 8003ce8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	330c      	adds	r3, #12
 8003cf8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cfa:	643a      	str	r2, [r7, #64]	@ 0x40
 8003cfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d00:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d02:	e841 2300 	strex	r3, r2, [r1]
 8003d06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1e5      	bne.n	8003cda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	3314      	adds	r3, #20
 8003d14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d16:	6a3b      	ldr	r3, [r7, #32]
 8003d18:	e853 3f00 	ldrex	r3, [r3]
 8003d1c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	f023 0301 	bic.w	r3, r3, #1
 8003d24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	3314      	adds	r3, #20
 8003d2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d30:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d36:	e841 2300 	strex	r3, r2, [r1]
 8003d3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d1e5      	bne.n	8003d0e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d119      	bne.n	8003d7e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	330c      	adds	r3, #12
 8003d50:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	e853 3f00 	ldrex	r3, [r3]
 8003d58:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f023 0310 	bic.w	r3, r3, #16
 8003d60:	647b      	str	r3, [r7, #68]	@ 0x44
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	330c      	adds	r3, #12
 8003d68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d6a:	61ba      	str	r2, [r7, #24]
 8003d6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d6e:	6979      	ldr	r1, [r7, #20]
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	e841 2300 	strex	r3, r2, [r1]
 8003d76:	613b      	str	r3, [r7, #16]
   return(result);
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d1e5      	bne.n	8003d4a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2220      	movs	r2, #32
 8003d82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003d8c:	bf00      	nop
 8003d8e:	3754      	adds	r7, #84	@ 0x54
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f7ff fee7 	bl	8003b80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003db2:	bf00      	nop
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b085      	sub	sp, #20
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dc8:	b2db      	uxtb	r3, r3
 8003dca:	2b21      	cmp	r3, #33	@ 0x21
 8003dcc:	d13e      	bne.n	8003e4c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dd6:	d114      	bne.n	8003e02 <UART_Transmit_IT+0x48>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d110      	bne.n	8003e02 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a1b      	ldr	r3, [r3, #32]
 8003de4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	881b      	ldrh	r3, [r3, #0]
 8003dea:	461a      	mov	r2, r3
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003df4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	1c9a      	adds	r2, r3, #2
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	621a      	str	r2, [r3, #32]
 8003e00:	e008      	b.n	8003e14 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	1c59      	adds	r1, r3, #1
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6211      	str	r1, [r2, #32]
 8003e0c:	781a      	ldrb	r2, [r3, #0]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	3b01      	subs	r3, #1
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	4619      	mov	r1, r3
 8003e22:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d10f      	bne.n	8003e48 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68da      	ldr	r2, [r3, #12]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e36:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	68da      	ldr	r2, [r3, #12]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e46:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	e000      	b.n	8003e4e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003e4c:	2302      	movs	r3, #2
  }
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3714      	adds	r7, #20
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr

08003e5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e5a:	b580      	push	{r7, lr}
 8003e5c:	b082      	sub	sp, #8
 8003e5e:	af00      	add	r7, sp, #0
 8003e60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2220      	movs	r2, #32
 8003e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff fe76 	bl	8003b6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003e80:	2300      	movs	r3, #0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3708      	adds	r7, #8
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b08c      	sub	sp, #48	@ 0x30
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8003e92:	2300      	movs	r3, #0
 8003e94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b22      	cmp	r3, #34	@ 0x22
 8003ea4:	f040 80aa 	bne.w	8003ffc <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eb0:	d115      	bne.n	8003ede <UART_Receive_IT+0x54>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	691b      	ldr	r3, [r3, #16]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d111      	bne.n	8003ede <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ed6:	1c9a      	adds	r2, r3, #2
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	629a      	str	r2, [r3, #40]	@ 0x28
 8003edc:	e024      	b.n	8003f28 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eec:	d007      	beq.n	8003efe <UART_Receive_IT+0x74>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10a      	bne.n	8003f0c <UART_Receive_IT+0x82>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d106      	bne.n	8003f0c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f08:	701a      	strb	r2, [r3, #0]
 8003f0a:	e008      	b.n	8003f1e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f1c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f2c:	b29b      	uxth	r3, r3
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	4619      	mov	r1, r3
 8003f36:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d15d      	bne.n	8003ff8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68da      	ldr	r2, [r3, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0220 	bic.w	r2, r2, #32
 8003f4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f5a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	695a      	ldr	r2, [r3, #20]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0201 	bic.w	r2, r2, #1
 8003f6a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d135      	bne.n	8003fee <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	330c      	adds	r3, #12
 8003f8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	e853 3f00 	ldrex	r3, [r3]
 8003f96:	613b      	str	r3, [r7, #16]
   return(result);
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	f023 0310 	bic.w	r3, r3, #16
 8003f9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	330c      	adds	r3, #12
 8003fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fa8:	623a      	str	r2, [r7, #32]
 8003faa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fac:	69f9      	ldr	r1, [r7, #28]
 8003fae:	6a3a      	ldr	r2, [r7, #32]
 8003fb0:	e841 2300 	strex	r3, r2, [r1]
 8003fb4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1e5      	bne.n	8003f88 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f003 0310 	and.w	r3, r3, #16
 8003fc6:	2b10      	cmp	r3, #16
 8003fc8:	d10a      	bne.n	8003fe0 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fca:	2300      	movs	r3, #0
 8003fcc:	60fb      	str	r3, [r7, #12]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f7ff fdd4 	bl	8003b94 <HAL_UARTEx_RxEventCallback>
 8003fec:	e002      	b.n	8003ff4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7fc fe06 	bl	8000c00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	e002      	b.n	8003ffe <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	e000      	b.n	8003ffe <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003ffc:	2302      	movs	r3, #2
  }
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3730      	adds	r7, #48	@ 0x30
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800400c:	b0c0      	sub	sp, #256	@ 0x100
 800400e:	af00      	add	r7, sp, #0
 8004010:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	691b      	ldr	r3, [r3, #16]
 800401c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004024:	68d9      	ldr	r1, [r3, #12]
 8004026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	ea40 0301 	orr.w	r3, r0, r1
 8004030:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	431a      	orrs	r2, r3
 8004040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	431a      	orrs	r2, r3
 8004048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800404c:	69db      	ldr	r3, [r3, #28]
 800404e:	4313      	orrs	r3, r2
 8004050:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004060:	f021 010c 	bic.w	r1, r1, #12
 8004064:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800406e:	430b      	orrs	r3, r1
 8004070:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800407e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004082:	6999      	ldr	r1, [r3, #24]
 8004084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	ea40 0301 	orr.w	r3, r0, r1
 800408e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	4b8f      	ldr	r3, [pc, #572]	@ (80042d4 <UART_SetConfig+0x2cc>)
 8004098:	429a      	cmp	r2, r3
 800409a:	d005      	beq.n	80040a8 <UART_SetConfig+0xa0>
 800409c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	4b8d      	ldr	r3, [pc, #564]	@ (80042d8 <UART_SetConfig+0x2d0>)
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d104      	bne.n	80040b2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80040a8:	f7fd fdd8 	bl	8001c5c <HAL_RCC_GetPCLK2Freq>
 80040ac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80040b0:	e003      	b.n	80040ba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80040b2:	f7fd fdbf 	bl	8001c34 <HAL_RCC_GetPCLK1Freq>
 80040b6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80040ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040be:	69db      	ldr	r3, [r3, #28]
 80040c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040c4:	f040 810c 	bne.w	80042e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80040c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040cc:	2200      	movs	r2, #0
 80040ce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80040d2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80040d6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80040da:	4622      	mov	r2, r4
 80040dc:	462b      	mov	r3, r5
 80040de:	1891      	adds	r1, r2, r2
 80040e0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80040e2:	415b      	adcs	r3, r3
 80040e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80040e6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80040ea:	4621      	mov	r1, r4
 80040ec:	eb12 0801 	adds.w	r8, r2, r1
 80040f0:	4629      	mov	r1, r5
 80040f2:	eb43 0901 	adc.w	r9, r3, r1
 80040f6:	f04f 0200 	mov.w	r2, #0
 80040fa:	f04f 0300 	mov.w	r3, #0
 80040fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004102:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004106:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800410a:	4690      	mov	r8, r2
 800410c:	4699      	mov	r9, r3
 800410e:	4623      	mov	r3, r4
 8004110:	eb18 0303 	adds.w	r3, r8, r3
 8004114:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004118:	462b      	mov	r3, r5
 800411a:	eb49 0303 	adc.w	r3, r9, r3
 800411e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800412e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004132:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004136:	460b      	mov	r3, r1
 8004138:	18db      	adds	r3, r3, r3
 800413a:	653b      	str	r3, [r7, #80]	@ 0x50
 800413c:	4613      	mov	r3, r2
 800413e:	eb42 0303 	adc.w	r3, r2, r3
 8004142:	657b      	str	r3, [r7, #84]	@ 0x54
 8004144:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004148:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800414c:	f7fc f872 	bl	8000234 <__aeabi_uldivmod>
 8004150:	4602      	mov	r2, r0
 8004152:	460b      	mov	r3, r1
 8004154:	4b61      	ldr	r3, [pc, #388]	@ (80042dc <UART_SetConfig+0x2d4>)
 8004156:	fba3 2302 	umull	r2, r3, r3, r2
 800415a:	095b      	lsrs	r3, r3, #5
 800415c:	011c      	lsls	r4, r3, #4
 800415e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004162:	2200      	movs	r2, #0
 8004164:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004168:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800416c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004170:	4642      	mov	r2, r8
 8004172:	464b      	mov	r3, r9
 8004174:	1891      	adds	r1, r2, r2
 8004176:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004178:	415b      	adcs	r3, r3
 800417a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800417c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004180:	4641      	mov	r1, r8
 8004182:	eb12 0a01 	adds.w	sl, r2, r1
 8004186:	4649      	mov	r1, r9
 8004188:	eb43 0b01 	adc.w	fp, r3, r1
 800418c:	f04f 0200 	mov.w	r2, #0
 8004190:	f04f 0300 	mov.w	r3, #0
 8004194:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004198:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800419c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041a0:	4692      	mov	sl, r2
 80041a2:	469b      	mov	fp, r3
 80041a4:	4643      	mov	r3, r8
 80041a6:	eb1a 0303 	adds.w	r3, sl, r3
 80041aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80041ae:	464b      	mov	r3, r9
 80041b0:	eb4b 0303 	adc.w	r3, fp, r3
 80041b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80041b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80041c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80041c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80041cc:	460b      	mov	r3, r1
 80041ce:	18db      	adds	r3, r3, r3
 80041d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80041d2:	4613      	mov	r3, r2
 80041d4:	eb42 0303 	adc.w	r3, r2, r3
 80041d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80041da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80041de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80041e2:	f7fc f827 	bl	8000234 <__aeabi_uldivmod>
 80041e6:	4602      	mov	r2, r0
 80041e8:	460b      	mov	r3, r1
 80041ea:	4611      	mov	r1, r2
 80041ec:	4b3b      	ldr	r3, [pc, #236]	@ (80042dc <UART_SetConfig+0x2d4>)
 80041ee:	fba3 2301 	umull	r2, r3, r3, r1
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	2264      	movs	r2, #100	@ 0x64
 80041f6:	fb02 f303 	mul.w	r3, r2, r3
 80041fa:	1acb      	subs	r3, r1, r3
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004202:	4b36      	ldr	r3, [pc, #216]	@ (80042dc <UART_SetConfig+0x2d4>)
 8004204:	fba3 2302 	umull	r2, r3, r3, r2
 8004208:	095b      	lsrs	r3, r3, #5
 800420a:	005b      	lsls	r3, r3, #1
 800420c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004210:	441c      	add	r4, r3
 8004212:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004216:	2200      	movs	r2, #0
 8004218:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800421c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004220:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004224:	4642      	mov	r2, r8
 8004226:	464b      	mov	r3, r9
 8004228:	1891      	adds	r1, r2, r2
 800422a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800422c:	415b      	adcs	r3, r3
 800422e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004230:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004234:	4641      	mov	r1, r8
 8004236:	1851      	adds	r1, r2, r1
 8004238:	6339      	str	r1, [r7, #48]	@ 0x30
 800423a:	4649      	mov	r1, r9
 800423c:	414b      	adcs	r3, r1
 800423e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800424c:	4659      	mov	r1, fp
 800424e:	00cb      	lsls	r3, r1, #3
 8004250:	4651      	mov	r1, sl
 8004252:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004256:	4651      	mov	r1, sl
 8004258:	00ca      	lsls	r2, r1, #3
 800425a:	4610      	mov	r0, r2
 800425c:	4619      	mov	r1, r3
 800425e:	4603      	mov	r3, r0
 8004260:	4642      	mov	r2, r8
 8004262:	189b      	adds	r3, r3, r2
 8004264:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004268:	464b      	mov	r3, r9
 800426a:	460a      	mov	r2, r1
 800426c:	eb42 0303 	adc.w	r3, r2, r3
 8004270:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004280:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004284:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004288:	460b      	mov	r3, r1
 800428a:	18db      	adds	r3, r3, r3
 800428c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800428e:	4613      	mov	r3, r2
 8004290:	eb42 0303 	adc.w	r3, r2, r3
 8004294:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004296:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800429a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800429e:	f7fb ffc9 	bl	8000234 <__aeabi_uldivmod>
 80042a2:	4602      	mov	r2, r0
 80042a4:	460b      	mov	r3, r1
 80042a6:	4b0d      	ldr	r3, [pc, #52]	@ (80042dc <UART_SetConfig+0x2d4>)
 80042a8:	fba3 1302 	umull	r1, r3, r3, r2
 80042ac:	095b      	lsrs	r3, r3, #5
 80042ae:	2164      	movs	r1, #100	@ 0x64
 80042b0:	fb01 f303 	mul.w	r3, r1, r3
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	00db      	lsls	r3, r3, #3
 80042b8:	3332      	adds	r3, #50	@ 0x32
 80042ba:	4a08      	ldr	r2, [pc, #32]	@ (80042dc <UART_SetConfig+0x2d4>)
 80042bc:	fba2 2303 	umull	r2, r3, r2, r3
 80042c0:	095b      	lsrs	r3, r3, #5
 80042c2:	f003 0207 	and.w	r2, r3, #7
 80042c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4422      	add	r2, r4
 80042ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80042d0:	e106      	b.n	80044e0 <UART_SetConfig+0x4d8>
 80042d2:	bf00      	nop
 80042d4:	40011000 	.word	0x40011000
 80042d8:	40011400 	.word	0x40011400
 80042dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80042e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042e4:	2200      	movs	r2, #0
 80042e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80042ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80042f2:	4642      	mov	r2, r8
 80042f4:	464b      	mov	r3, r9
 80042f6:	1891      	adds	r1, r2, r2
 80042f8:	6239      	str	r1, [r7, #32]
 80042fa:	415b      	adcs	r3, r3
 80042fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80042fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004302:	4641      	mov	r1, r8
 8004304:	1854      	adds	r4, r2, r1
 8004306:	4649      	mov	r1, r9
 8004308:	eb43 0501 	adc.w	r5, r3, r1
 800430c:	f04f 0200 	mov.w	r2, #0
 8004310:	f04f 0300 	mov.w	r3, #0
 8004314:	00eb      	lsls	r3, r5, #3
 8004316:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800431a:	00e2      	lsls	r2, r4, #3
 800431c:	4614      	mov	r4, r2
 800431e:	461d      	mov	r5, r3
 8004320:	4643      	mov	r3, r8
 8004322:	18e3      	adds	r3, r4, r3
 8004324:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004328:	464b      	mov	r3, r9
 800432a:	eb45 0303 	adc.w	r3, r5, r3
 800432e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800433e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800434e:	4629      	mov	r1, r5
 8004350:	008b      	lsls	r3, r1, #2
 8004352:	4621      	mov	r1, r4
 8004354:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004358:	4621      	mov	r1, r4
 800435a:	008a      	lsls	r2, r1, #2
 800435c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004360:	f7fb ff68 	bl	8000234 <__aeabi_uldivmod>
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	4b60      	ldr	r3, [pc, #384]	@ (80044ec <UART_SetConfig+0x4e4>)
 800436a:	fba3 2302 	umull	r2, r3, r3, r2
 800436e:	095b      	lsrs	r3, r3, #5
 8004370:	011c      	lsls	r4, r3, #4
 8004372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004376:	2200      	movs	r2, #0
 8004378:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800437c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004380:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004384:	4642      	mov	r2, r8
 8004386:	464b      	mov	r3, r9
 8004388:	1891      	adds	r1, r2, r2
 800438a:	61b9      	str	r1, [r7, #24]
 800438c:	415b      	adcs	r3, r3
 800438e:	61fb      	str	r3, [r7, #28]
 8004390:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004394:	4641      	mov	r1, r8
 8004396:	1851      	adds	r1, r2, r1
 8004398:	6139      	str	r1, [r7, #16]
 800439a:	4649      	mov	r1, r9
 800439c:	414b      	adcs	r3, r1
 800439e:	617b      	str	r3, [r7, #20]
 80043a0:	f04f 0200 	mov.w	r2, #0
 80043a4:	f04f 0300 	mov.w	r3, #0
 80043a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80043ac:	4659      	mov	r1, fp
 80043ae:	00cb      	lsls	r3, r1, #3
 80043b0:	4651      	mov	r1, sl
 80043b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043b6:	4651      	mov	r1, sl
 80043b8:	00ca      	lsls	r2, r1, #3
 80043ba:	4610      	mov	r0, r2
 80043bc:	4619      	mov	r1, r3
 80043be:	4603      	mov	r3, r0
 80043c0:	4642      	mov	r2, r8
 80043c2:	189b      	adds	r3, r3, r2
 80043c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80043c8:	464b      	mov	r3, r9
 80043ca:	460a      	mov	r2, r1
 80043cc:	eb42 0303 	adc.w	r3, r2, r3
 80043d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80043d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	f04f 0300 	mov.w	r3, #0
 80043e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80043ec:	4649      	mov	r1, r9
 80043ee:	008b      	lsls	r3, r1, #2
 80043f0:	4641      	mov	r1, r8
 80043f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80043f6:	4641      	mov	r1, r8
 80043f8:	008a      	lsls	r2, r1, #2
 80043fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80043fe:	f7fb ff19 	bl	8000234 <__aeabi_uldivmod>
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	4611      	mov	r1, r2
 8004408:	4b38      	ldr	r3, [pc, #224]	@ (80044ec <UART_SetConfig+0x4e4>)
 800440a:	fba3 2301 	umull	r2, r3, r3, r1
 800440e:	095b      	lsrs	r3, r3, #5
 8004410:	2264      	movs	r2, #100	@ 0x64
 8004412:	fb02 f303 	mul.w	r3, r2, r3
 8004416:	1acb      	subs	r3, r1, r3
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	3332      	adds	r3, #50	@ 0x32
 800441c:	4a33      	ldr	r2, [pc, #204]	@ (80044ec <UART_SetConfig+0x4e4>)
 800441e:	fba2 2303 	umull	r2, r3, r2, r3
 8004422:	095b      	lsrs	r3, r3, #5
 8004424:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004428:	441c      	add	r4, r3
 800442a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800442e:	2200      	movs	r2, #0
 8004430:	673b      	str	r3, [r7, #112]	@ 0x70
 8004432:	677a      	str	r2, [r7, #116]	@ 0x74
 8004434:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004438:	4642      	mov	r2, r8
 800443a:	464b      	mov	r3, r9
 800443c:	1891      	adds	r1, r2, r2
 800443e:	60b9      	str	r1, [r7, #8]
 8004440:	415b      	adcs	r3, r3
 8004442:	60fb      	str	r3, [r7, #12]
 8004444:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004448:	4641      	mov	r1, r8
 800444a:	1851      	adds	r1, r2, r1
 800444c:	6039      	str	r1, [r7, #0]
 800444e:	4649      	mov	r1, r9
 8004450:	414b      	adcs	r3, r1
 8004452:	607b      	str	r3, [r7, #4]
 8004454:	f04f 0200 	mov.w	r2, #0
 8004458:	f04f 0300 	mov.w	r3, #0
 800445c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004460:	4659      	mov	r1, fp
 8004462:	00cb      	lsls	r3, r1, #3
 8004464:	4651      	mov	r1, sl
 8004466:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800446a:	4651      	mov	r1, sl
 800446c:	00ca      	lsls	r2, r1, #3
 800446e:	4610      	mov	r0, r2
 8004470:	4619      	mov	r1, r3
 8004472:	4603      	mov	r3, r0
 8004474:	4642      	mov	r2, r8
 8004476:	189b      	adds	r3, r3, r2
 8004478:	66bb      	str	r3, [r7, #104]	@ 0x68
 800447a:	464b      	mov	r3, r9
 800447c:	460a      	mov	r2, r1
 800447e:	eb42 0303 	adc.w	r3, r2, r3
 8004482:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	663b      	str	r3, [r7, #96]	@ 0x60
 800448e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800449c:	4649      	mov	r1, r9
 800449e:	008b      	lsls	r3, r1, #2
 80044a0:	4641      	mov	r1, r8
 80044a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044a6:	4641      	mov	r1, r8
 80044a8:	008a      	lsls	r2, r1, #2
 80044aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80044ae:	f7fb fec1 	bl	8000234 <__aeabi_uldivmod>
 80044b2:	4602      	mov	r2, r0
 80044b4:	460b      	mov	r3, r1
 80044b6:	4b0d      	ldr	r3, [pc, #52]	@ (80044ec <UART_SetConfig+0x4e4>)
 80044b8:	fba3 1302 	umull	r1, r3, r3, r2
 80044bc:	095b      	lsrs	r3, r3, #5
 80044be:	2164      	movs	r1, #100	@ 0x64
 80044c0:	fb01 f303 	mul.w	r3, r1, r3
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	011b      	lsls	r3, r3, #4
 80044c8:	3332      	adds	r3, #50	@ 0x32
 80044ca:	4a08      	ldr	r2, [pc, #32]	@ (80044ec <UART_SetConfig+0x4e4>)
 80044cc:	fba2 2303 	umull	r2, r3, r2, r3
 80044d0:	095b      	lsrs	r3, r3, #5
 80044d2:	f003 020f 	and.w	r2, r3, #15
 80044d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4422      	add	r2, r4
 80044de:	609a      	str	r2, [r3, #8]
}
 80044e0:	bf00      	nop
 80044e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80044e6:	46bd      	mov	sp, r7
 80044e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ec:	51eb851f 	.word	0x51eb851f

080044f0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f103 0208 	add.w	r2, r3, #8
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f04f 32ff 	mov.w	r2, #4294967295
 8004508:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f103 0208 	add.w	r2, r3, #8
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f103 0208 	add.w	r2, r3, #8
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800453e:	bf00      	nop
 8004540:	370c      	adds	r7, #12
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800454a:	b480      	push	{r7}
 800454c:	b085      	sub	sp, #20
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
 8004552:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	601a      	str	r2, [r3, #0]
}
 8004586:	bf00      	nop
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8004592:	b480      	push	{r7}
 8004594:	b085      	sub	sp, #20
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a8:	d103      	bne.n	80045b2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	e00c      	b.n	80045cc <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	3308      	adds	r3, #8
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	e002      	b.n	80045c0 <vListInsert+0x2e>
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	60fb      	str	r3, [r7, #12]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d2f6      	bcs.n	80045ba <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	601a      	str	r2, [r3, #0]
}
 80045f8:	bf00      	nop
 80045fa:	3714      	adds	r7, #20
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	691b      	ldr	r3, [r3, #16]
 8004610:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	6892      	ldr	r2, [r2, #8]
 800461a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6852      	ldr	r2, [r2, #4]
 8004624:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	429a      	cmp	r2, r3
 800462e:	d103      	bne.n	8004638 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689a      	ldr	r2, [r3, #8]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	1e5a      	subs	r2, r3, #1
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3714      	adds	r7, #20
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10b      	bne.n	8004684 <xQueueGenericReset+0x2c>
        __asm volatile
 800466c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004670:	f383 8811 	msr	BASEPRI, r3
 8004674:	f3bf 8f6f 	isb	sy
 8004678:	f3bf 8f4f 	dsb	sy
 800467c:	60bb      	str	r3, [r7, #8]
    }
 800467e:	bf00      	nop
 8004680:	bf00      	nop
 8004682:	e7fd      	b.n	8004680 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8004684:	f002 fac2 	bl	8006c0c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004690:	68f9      	ldr	r1, [r7, #12]
 8004692:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004694:	fb01 f303 	mul.w	r3, r1, r3
 8004698:	441a      	add	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b4:	3b01      	subs	r3, #1
 80046b6:	68f9      	ldr	r1, [r7, #12]
 80046b8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80046ba:	fb01 f303 	mul.w	r3, r1, r3
 80046be:	441a      	add	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	22ff      	movs	r2, #255	@ 0xff
 80046c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	22ff      	movs	r2, #255	@ 0xff
 80046d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d109      	bne.n	80046ee <xQueueGenericReset+0x96>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	691b      	ldr	r3, [r3, #16]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00f      	beq.n	8004702 <xQueueGenericReset+0xaa>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	3310      	adds	r3, #16
 80046e6:	4618      	mov	r0, r3
 80046e8:	f001 f8ca 	bl	8005880 <xTaskRemoveFromEventList>
 80046ec:	e009      	b.n	8004702 <xQueueGenericReset+0xaa>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	3310      	adds	r3, #16
 80046f2:	4618      	mov	r0, r3
 80046f4:	f7ff fefc 	bl	80044f0 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	3324      	adds	r3, #36	@ 0x24
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7ff fef7 	bl	80044f0 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8004702:	f002 fab5 	bl	8006c70 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8004706:	2301      	movs	r3, #1
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8004710:	b580      	push	{r7, lr}
 8004712:	b08c      	sub	sp, #48	@ 0x30
 8004714:	af02      	add	r7, sp, #8
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	4613      	mov	r3, r2
 800471c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10b      	bne.n	800473c <xQueueGenericCreate+0x2c>
        __asm volatile
 8004724:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004728:	f383 8811 	msr	BASEPRI, r3
 800472c:	f3bf 8f6f 	isb	sy
 8004730:	f3bf 8f4f 	dsb	sy
 8004734:	61bb      	str	r3, [r7, #24]
    }
 8004736:	bf00      	nop
 8004738:	bf00      	nop
 800473a:	e7fd      	b.n	8004738 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	fb02 f303 	mul.w	r3, r2, r3
 8004744:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d006      	beq.n	800475a <xQueueGenericCreate+0x4a>
 800474c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	fbb2 f3f3 	udiv	r3, r2, r3
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	429a      	cmp	r2, r3
 8004758:	d101      	bne.n	800475e <xQueueGenericCreate+0x4e>
 800475a:	2301      	movs	r3, #1
 800475c:	e000      	b.n	8004760 <xQueueGenericCreate+0x50>
 800475e:	2300      	movs	r3, #0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10b      	bne.n	800477c <xQueueGenericCreate+0x6c>
        __asm volatile
 8004764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004768:	f383 8811 	msr	BASEPRI, r3
 800476c:	f3bf 8f6f 	isb	sy
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	617b      	str	r3, [r7, #20]
    }
 8004776:	bf00      	nop
 8004778:	bf00      	nop
 800477a:	e7fd      	b.n	8004778 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 800477c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800477e:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8004782:	d90b      	bls.n	800479c <xQueueGenericCreate+0x8c>
        __asm volatile
 8004784:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004788:	f383 8811 	msr	BASEPRI, r3
 800478c:	f3bf 8f6f 	isb	sy
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	613b      	str	r3, [r7, #16]
    }
 8004796:	bf00      	nop
 8004798:	bf00      	nop
 800479a:	e7fd      	b.n	8004798 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800479c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800479e:	3350      	adds	r3, #80	@ 0x50
 80047a0:	4618      	mov	r0, r3
 80047a2:	f002 fb5d 	bl	8006e60 <pvPortMalloc>
 80047a6:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00d      	beq.n	80047ca <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80047ae:	6a3b      	ldr	r3, [r7, #32]
 80047b0:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	3350      	adds	r3, #80	@ 0x50
 80047b6:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80047b8:	79fa      	ldrb	r2, [r7, #7]
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	4613      	mov	r3, r2
 80047c0:	69fa      	ldr	r2, [r7, #28]
 80047c2:	68b9      	ldr	r1, [r7, #8]
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 f805 	bl	80047d4 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80047ca:	6a3b      	ldr	r3, [r7, #32]
    }
 80047cc:	4618      	mov	r0, r3
 80047ce:	3728      	adds	r7, #40	@ 0x28
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
 80047e0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d103      	bne.n	80047f0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	e002      	b.n	80047f6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004802:	2101      	movs	r1, #1
 8004804:	69b8      	ldr	r0, [r7, #24]
 8004806:	f7ff ff27 	bl	8004658 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	78fa      	ldrb	r2, [r7, #3]
 800480e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8004812:	bf00      	nop
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08e      	sub	sp, #56	@ 0x38
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800482a:	2300      	movs	r3, #0
 800482c:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8004832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10b      	bne.n	8004850 <xQueueGenericSend+0x34>
        __asm volatile
 8004838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800484a:	bf00      	nop
 800484c:	bf00      	nop
 800484e:	e7fd      	b.n	800484c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d103      	bne.n	800485e <xQueueGenericSend+0x42>
 8004856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800485a:	2b00      	cmp	r3, #0
 800485c:	d101      	bne.n	8004862 <xQueueGenericSend+0x46>
 800485e:	2301      	movs	r3, #1
 8004860:	e000      	b.n	8004864 <xQueueGenericSend+0x48>
 8004862:	2300      	movs	r3, #0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d10b      	bne.n	8004880 <xQueueGenericSend+0x64>
        __asm volatile
 8004868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800486c:	f383 8811 	msr	BASEPRI, r3
 8004870:	f3bf 8f6f 	isb	sy
 8004874:	f3bf 8f4f 	dsb	sy
 8004878:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800487a:	bf00      	nop
 800487c:	bf00      	nop
 800487e:	e7fd      	b.n	800487c <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d103      	bne.n	800488e <xQueueGenericSend+0x72>
 8004886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800488a:	2b01      	cmp	r3, #1
 800488c:	d101      	bne.n	8004892 <xQueueGenericSend+0x76>
 800488e:	2301      	movs	r3, #1
 8004890:	e000      	b.n	8004894 <xQueueGenericSend+0x78>
 8004892:	2300      	movs	r3, #0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10b      	bne.n	80048b0 <xQueueGenericSend+0x94>
        __asm volatile
 8004898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	623b      	str	r3, [r7, #32]
    }
 80048aa:	bf00      	nop
 80048ac:	bf00      	nop
 80048ae:	e7fd      	b.n	80048ac <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048b0:	f001 f980 	bl	8005bb4 <xTaskGetSchedulerState>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d102      	bne.n	80048c0 <xQueueGenericSend+0xa4>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d101      	bne.n	80048c4 <xQueueGenericSend+0xa8>
 80048c0:	2301      	movs	r3, #1
 80048c2:	e000      	b.n	80048c6 <xQueueGenericSend+0xaa>
 80048c4:	2300      	movs	r3, #0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10b      	bne.n	80048e2 <xQueueGenericSend+0xc6>
        __asm volatile
 80048ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ce:	f383 8811 	msr	BASEPRI, r3
 80048d2:	f3bf 8f6f 	isb	sy
 80048d6:	f3bf 8f4f 	dsb	sy
 80048da:	61fb      	str	r3, [r7, #28]
    }
 80048dc:	bf00      	nop
 80048de:	bf00      	nop
 80048e0:	e7fd      	b.n	80048de <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80048e2:	f002 f993 	bl	8006c0c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d302      	bcc.n	80048f8 <xQueueGenericSend+0xdc>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d112      	bne.n	800491e <xQueueGenericSend+0x102>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048f8:	683a      	ldr	r2, [r7, #0]
 80048fa:	68b9      	ldr	r1, [r7, #8]
 80048fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80048fe:	f000 faae 	bl	8004e5e <prvCopyDataToQueue>
 8004902:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004908:	2b00      	cmp	r3, #0
 800490a:	d004      	beq.n	8004916 <xQueueGenericSend+0xfa>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800490c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800490e:	3324      	adds	r3, #36	@ 0x24
 8004910:	4618      	mov	r0, r3
 8004912:	f000 ffb5 	bl	8005880 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004916:	f002 f9ab 	bl	8006c70 <vPortExitCritical>
                return pdPASS;
 800491a:	2301      	movs	r3, #1
 800491c:	e062      	b.n	80049e4 <xQueueGenericSend+0x1c8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d103      	bne.n	800492c <xQueueGenericSend+0x110>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004924:	f002 f9a4 	bl	8006c70 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8004928:	2300      	movs	r3, #0
 800492a:	e05b      	b.n	80049e4 <xQueueGenericSend+0x1c8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800492c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800492e:	2b00      	cmp	r3, #0
 8004930:	d106      	bne.n	8004940 <xQueueGenericSend+0x124>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004932:	f107 0314 	add.w	r3, r7, #20
 8004936:	4618      	mov	r0, r3
 8004938:	f001 f806 	bl	8005948 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800493c:	2301      	movs	r3, #1
 800493e:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004940:	f002 f996 	bl	8006c70 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004944:	f000 fdaa 	bl	800549c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004948:	f002 f960 	bl	8006c0c <vPortEnterCritical>
 800494c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800494e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004952:	b25b      	sxtb	r3, r3
 8004954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004958:	d103      	bne.n	8004962 <xQueueGenericSend+0x146>
 800495a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004964:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004968:	b25b      	sxtb	r3, r3
 800496a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496e:	d103      	bne.n	8004978 <xQueueGenericSend+0x15c>
 8004970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004972:	2200      	movs	r2, #0
 8004974:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004978:	f002 f97a 	bl	8006c70 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800497c:	1d3a      	adds	r2, r7, #4
 800497e:	f107 0314 	add.w	r3, r7, #20
 8004982:	4611      	mov	r1, r2
 8004984:	4618      	mov	r0, r3
 8004986:	f000 fff5 	bl	8005974 <xTaskCheckForTimeOut>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d123      	bne.n	80049d8 <xQueueGenericSend+0x1bc>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004990:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004992:	f000 fb5c 	bl	800504e <prvIsQueueFull>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d017      	beq.n	80049cc <xQueueGenericSend+0x1b0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800499c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800499e:	3310      	adds	r3, #16
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	4611      	mov	r1, r2
 80049a4:	4618      	mov	r0, r3
 80049a6:	f000 ff19 	bl	80057dc <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80049aa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049ac:	f000 fae7 	bl	8004f7e <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80049b0:	f000 fd82 	bl	80054b8 <xTaskResumeAll>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d193      	bne.n	80048e2 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 80049ba:	4b0c      	ldr	r3, [pc, #48]	@ (80049ec <xQueueGenericSend+0x1d0>)
 80049bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049c0:	601a      	str	r2, [r3, #0]
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	e78a      	b.n	80048e2 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80049cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049ce:	f000 fad6 	bl	8004f7e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80049d2:	f000 fd71 	bl	80054b8 <xTaskResumeAll>
 80049d6:	e784      	b.n	80048e2 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80049d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80049da:	f000 fad0 	bl	8004f7e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80049de:	f000 fd6b 	bl	80054b8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80049e2:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3738      	adds	r7, #56	@ 0x38
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	e000ed04 	.word	0xe000ed04

080049f0 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b090      	sub	sp, #64	@ 0x40
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
 80049fc:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8004a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10b      	bne.n	8004a20 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8004a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8004a1a:	bf00      	nop
 8004a1c:	bf00      	nop
 8004a1e:	e7fd      	b.n	8004a1c <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d103      	bne.n	8004a2e <xQueueGenericSendFromISR+0x3e>
 8004a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d101      	bne.n	8004a32 <xQueueGenericSendFromISR+0x42>
 8004a2e:	2301      	movs	r3, #1
 8004a30:	e000      	b.n	8004a34 <xQueueGenericSendFromISR+0x44>
 8004a32:	2300      	movs	r3, #0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10b      	bne.n	8004a50 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 8004a38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a3c:	f383 8811 	msr	BASEPRI, r3
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8004a4a:	bf00      	nop
 8004a4c:	bf00      	nop
 8004a4e:	e7fd      	b.n	8004a4c <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d103      	bne.n	8004a5e <xQueueGenericSendFromISR+0x6e>
 8004a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d101      	bne.n	8004a62 <xQueueGenericSendFromISR+0x72>
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e000      	b.n	8004a64 <xQueueGenericSendFromISR+0x74>
 8004a62:	2300      	movs	r3, #0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10b      	bne.n	8004a80 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 8004a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a6c:	f383 8811 	msr	BASEPRI, r3
 8004a70:	f3bf 8f6f 	isb	sy
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	623b      	str	r3, [r7, #32]
    }
 8004a7a:	bf00      	nop
 8004a7c:	bf00      	nop
 8004a7e:	e7fd      	b.n	8004a7c <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a80:	f002 f9ac 	bl	8006ddc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8004a84:	f3ef 8211 	mrs	r2, BASEPRI
 8004a88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a8c:	f383 8811 	msr	BASEPRI, r3
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	61fa      	str	r2, [r7, #28]
 8004a9a:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8004a9c:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a9e:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d302      	bcc.n	8004ab2 <xQueueGenericSendFromISR+0xc2>
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d13f      	bne.n	8004b32 <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004ab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ab4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004ab8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ac2:	683a      	ldr	r2, [r7, #0]
 8004ac4:	68b9      	ldr	r1, [r7, #8]
 8004ac6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004ac8:	f000 f9c9 	bl	8004e5e <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004acc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ad4:	d112      	bne.n	8004afc <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d026      	beq.n	8004b2c <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ae0:	3324      	adds	r3, #36	@ 0x24
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f000 fecc 	bl	8005880 <xTaskRemoveFromEventList>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d01e      	beq.n	8004b2c <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d01b      	beq.n	8004b2c <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	e017      	b.n	8004b2c <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8004afc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004b00:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b02:	d10b      	bne.n	8004b1c <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 8004b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b08:	f383 8811 	msr	BASEPRI, r3
 8004b0c:	f3bf 8f6f 	isb	sy
 8004b10:	f3bf 8f4f 	dsb	sy
 8004b14:	617b      	str	r3, [r7, #20]
    }
 8004b16:	bf00      	nop
 8004b18:	bf00      	nop
 8004b1a:	e7fd      	b.n	8004b18 <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004b20:	3301      	adds	r3, #1
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	b25a      	sxtb	r2, r3
 8004b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8004b30:	e001      	b.n	8004b36 <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b38:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004b40:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004b42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3740      	adds	r7, #64	@ 0x40
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b08c      	sub	sp, #48	@ 0x30
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8004b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10b      	bne.n	8004b7e <xQueueReceive+0x32>
        __asm volatile
 8004b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	623b      	str	r3, [r7, #32]
    }
 8004b78:	bf00      	nop
 8004b7a:	bf00      	nop
 8004b7c:	e7fd      	b.n	8004b7a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d103      	bne.n	8004b8c <xQueueReceive+0x40>
 8004b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d101      	bne.n	8004b90 <xQueueReceive+0x44>
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e000      	b.n	8004b92 <xQueueReceive+0x46>
 8004b90:	2300      	movs	r3, #0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d10b      	bne.n	8004bae <xQueueReceive+0x62>
        __asm volatile
 8004b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b9a:	f383 8811 	msr	BASEPRI, r3
 8004b9e:	f3bf 8f6f 	isb	sy
 8004ba2:	f3bf 8f4f 	dsb	sy
 8004ba6:	61fb      	str	r3, [r7, #28]
    }
 8004ba8:	bf00      	nop
 8004baa:	bf00      	nop
 8004bac:	e7fd      	b.n	8004baa <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bae:	f001 f801 	bl	8005bb4 <xTaskGetSchedulerState>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d102      	bne.n	8004bbe <xQueueReceive+0x72>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <xQueueReceive+0x76>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e000      	b.n	8004bc4 <xQueueReceive+0x78>
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10b      	bne.n	8004be0 <xQueueReceive+0x94>
        __asm volatile
 8004bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bcc:	f383 8811 	msr	BASEPRI, r3
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	61bb      	str	r3, [r7, #24]
    }
 8004bda:	bf00      	nop
 8004bdc:	bf00      	nop
 8004bde:	e7fd      	b.n	8004bdc <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004be0:	f002 f814 	bl	8006c0c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be8:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d014      	beq.n	8004c1a <xQueueReceive+0xce>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004bf0:	68b9      	ldr	r1, [r7, #8]
 8004bf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004bf4:	f000 f99d 	bl	8004f32 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfa:	1e5a      	subs	r2, r3, #1
 8004bfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bfe:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d004      	beq.n	8004c12 <xQueueReceive+0xc6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c0a:	3310      	adds	r3, #16
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 fe37 	bl	8005880 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8004c12:	f002 f82d 	bl	8006c70 <vPortExitCritical>
                return pdPASS;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e069      	b.n	8004cee <xQueueReceive+0x1a2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d103      	bne.n	8004c28 <xQueueReceive+0xdc>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004c20:	f002 f826 	bl	8006c70 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8004c24:	2300      	movs	r3, #0
 8004c26:	e062      	b.n	8004cee <xQueueReceive+0x1a2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d106      	bne.n	8004c3c <xQueueReceive+0xf0>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004c2e:	f107 0310 	add.w	r3, r7, #16
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 fe88 	bl	8005948 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004c3c:	f002 f818 	bl	8006c70 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004c40:	f000 fc2c 	bl	800549c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004c44:	f001 ffe2 	bl	8006c0c <vPortEnterCritical>
 8004c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c4a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c4e:	b25b      	sxtb	r3, r3
 8004c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c54:	d103      	bne.n	8004c5e <xQueueReceive+0x112>
 8004c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c58:	2200      	movs	r2, #0
 8004c5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c64:	b25b      	sxtb	r3, r3
 8004c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6a:	d103      	bne.n	8004c74 <xQueueReceive+0x128>
 8004c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c74:	f001 fffc 	bl	8006c70 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c78:	1d3a      	adds	r2, r7, #4
 8004c7a:	f107 0310 	add.w	r3, r7, #16
 8004c7e:	4611      	mov	r1, r2
 8004c80:	4618      	mov	r0, r3
 8004c82:	f000 fe77 	bl	8005974 <xTaskCheckForTimeOut>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d123      	bne.n	8004cd4 <xQueueReceive+0x188>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c8e:	f000 f9c8 	bl	8005022 <prvIsQueueEmpty>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d017      	beq.n	8004cc8 <xQueueReceive+0x17c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c9a:	3324      	adds	r3, #36	@ 0x24
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	4611      	mov	r1, r2
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 fd9b 	bl	80057dc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004ca6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ca8:	f000 f969 	bl	8004f7e <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004cac:	f000 fc04 	bl	80054b8 <xTaskResumeAll>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d194      	bne.n	8004be0 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8004cb6:	4b10      	ldr	r3, [pc, #64]	@ (8004cf8 <xQueueReceive+0x1ac>)
 8004cb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004cbc:	601a      	str	r2, [r3, #0]
 8004cbe:	f3bf 8f4f 	dsb	sy
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	e78b      	b.n	8004be0 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004cc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cca:	f000 f958 	bl	8004f7e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004cce:	f000 fbf3 	bl	80054b8 <xTaskResumeAll>
 8004cd2:	e785      	b.n	8004be0 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8004cd4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cd6:	f000 f952 	bl	8004f7e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004cda:	f000 fbed 	bl	80054b8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ce0:	f000 f99f 	bl	8005022 <prvIsQueueEmpty>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f43f af7a 	beq.w	8004be0 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004cec:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3730      	adds	r7, #48	@ 0x30
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	e000ed04 	.word	0xe000ed04

08004cfc <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue,
                                 void * const pvBuffer,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b090      	sub	sp, #64	@ 0x40
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8004d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10b      	bne.n	8004d2a <xQueueReceiveFromISR+0x2e>
        __asm volatile
 8004d12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d16:	f383 8811 	msr	BASEPRI, r3
 8004d1a:	f3bf 8f6f 	isb	sy
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8004d24:	bf00      	nop
 8004d26:	bf00      	nop
 8004d28:	e7fd      	b.n	8004d26 <xQueueReceiveFromISR+0x2a>
    configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d103      	bne.n	8004d38 <xQueueReceiveFromISR+0x3c>
 8004d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <xQueueReceiveFromISR+0x40>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e000      	b.n	8004d3e <xQueueReceiveFromISR+0x42>
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10b      	bne.n	8004d5a <xQueueReceiveFromISR+0x5e>
        __asm volatile
 8004d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d46:	f383 8811 	msr	BASEPRI, r3
 8004d4a:	f3bf 8f6f 	isb	sy
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8004d54:	bf00      	nop
 8004d56:	bf00      	nop
 8004d58:	e7fd      	b.n	8004d56 <xQueueReceiveFromISR+0x5a>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d5a:	f002 f83f 	bl	8006ddc <vPortValidateInterruptPriority>
        __asm volatile
 8004d5e:	f3ef 8211 	mrs	r2, BASEPRI
 8004d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d66:	f383 8811 	msr	BASEPRI, r3
 8004d6a:	f3bf 8f6f 	isb	sy
 8004d6e:	f3bf 8f4f 	dsb	sy
 8004d72:	623a      	str	r2, [r7, #32]
 8004d74:	61fb      	str	r3, [r7, #28]
        return ulOriginalBASEPRI;
 8004d76:	6a3b      	ldr	r3, [r7, #32]

    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d78:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d7e:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Cannot block in an ISR, so check there is data available. */
        if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d03f      	beq.n	8004e06 <xQueueReceiveFromISR+0x10a>
        {
            const int8_t cRxLock = pxQueue->cRxLock;
 8004d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d88:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004d8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

            prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004d90:	68b9      	ldr	r1, [r7, #8]
 8004d92:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004d94:	f000 f8cd 	bl	8004f32 <prvCopyDataFromQueue>
            pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d9a:	1e5a      	subs	r2, r3, #1
 8004d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d9e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* If the queue is locked the event list will not be modified.
             * Instead update the lock count so the task that unlocks the queue
             * will know that an ISR has removed data while the queue was
             * locked. */
            if( cRxLock == queueUNLOCKED )
 8004da0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da8:	d112      	bne.n	8004dd0 <xQueueReceiveFromISR+0xd4>
            {
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d026      	beq.n	8004e00 <xQueueReceiveFromISR+0x104>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004db4:	3310      	adds	r3, #16
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 fd62 	bl	8005880 <xTaskRemoveFromEventList>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d01e      	beq.n	8004e00 <xQueueReceiveFromISR+0x104>
                    {
                        /* The task waiting has a higher priority than us so
                         * force a context switch. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d01b      	beq.n	8004e00 <xQueueReceiveFromISR+0x104>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	601a      	str	r2, [r3, #0]
 8004dce:	e017      	b.n	8004e00 <xQueueReceiveFromISR+0x104>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was removed while it was locked. */
                configASSERT( cRxLock != queueINT8_MAX );
 8004dd0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8004dd4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004dd6:	d10b      	bne.n	8004df0 <xQueueReceiveFromISR+0xf4>
        __asm volatile
 8004dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	61bb      	str	r3, [r7, #24]
    }
 8004dea:	bf00      	nop
 8004dec:	bf00      	nop
 8004dee:	e7fd      	b.n	8004dec <xQueueReceiveFromISR+0xf0>

                pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004df0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004df4:	3301      	adds	r3, #1
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	b25a      	sxtb	r2, r3
 8004dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            }

            xReturn = pdPASS;
 8004e00:	2301      	movs	r3, #1
 8004e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e04:	e001      	b.n	8004e0a <xQueueReceiveFromISR+0x10e>
        }
        else
        {
            xReturn = pdFAIL;
 8004e06:	2300      	movs	r3, #0
 8004e08:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e0c:	617b      	str	r3, [r7, #20]
        __asm volatile
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f383 8811 	msr	BASEPRI, r3
    }
 8004e14:	bf00      	nop
            traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3740      	adds	r7, #64	@ 0x40
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}

08004e20 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b084      	sub	sp, #16
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    configASSERT( xQueue );
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10b      	bne.n	8004e46 <uxQueueMessagesWaiting+0x26>
        __asm volatile
 8004e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	60bb      	str	r3, [r7, #8]
    }
 8004e40:	bf00      	nop
 8004e42:	bf00      	nop
 8004e44:	e7fd      	b.n	8004e42 <uxQueueMessagesWaiting+0x22>

    taskENTER_CRITICAL();
 8004e46:	f001 fee1 	bl	8006c0c <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e4e:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8004e50:	f001 ff0e 	bl	8006c70 <vPortExitCritical>

    return uxReturn;
 8004e54:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004e56:	4618      	mov	r0, r3
 8004e58:	3710      	adds	r7, #16
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004e5e:	b580      	push	{r7, lr}
 8004e60:	b086      	sub	sp, #24
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	60f8      	str	r0, [r7, #12]
 8004e66:	60b9      	str	r1, [r7, #8]
 8004e68:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e72:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10d      	bne.n	8004e98 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d14d      	bne.n	8004f20 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 feb1 	bl	8005bf0 <xTaskPriorityDisinherit>
 8004e8e:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	609a      	str	r2, [r3, #8]
 8004e96:	e043      	b.n	8004f20 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d119      	bne.n	8004ed2 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6858      	ldr	r0, [r3, #4]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	68b9      	ldr	r1, [r7, #8]
 8004eaa:	f002 fa07 	bl	80072bc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb6:	441a      	add	r2, r3
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d32b      	bcc.n	8004f20 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	605a      	str	r2, [r3, #4]
 8004ed0:	e026      	b.n	8004f20 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	68d8      	ldr	r0, [r3, #12]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eda:	461a      	mov	r2, r3
 8004edc:	68b9      	ldr	r1, [r7, #8]
 8004ede:	f002 f9ed 	bl	80072bc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eea:	425b      	negs	r3, r3
 8004eec:	441a      	add	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	68da      	ldr	r2, [r3, #12]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d207      	bcs.n	8004f0e <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	689a      	ldr	r2, [r3, #8]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f06:	425b      	negs	r3, r3
 8004f08:	441a      	add	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d105      	bne.n	8004f20 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	3b01      	subs	r3, #1
 8004f1e:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8004f28:	697b      	ldr	r3, [r7, #20]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3718      	adds	r7, #24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b082      	sub	sp, #8
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
 8004f3a:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d018      	beq.n	8004f76 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68da      	ldr	r2, [r3, #12]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4c:	441a      	add	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	68da      	ldr	r2, [r3, #12]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d303      	bcc.n	8004f66 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	68d9      	ldr	r1, [r3, #12]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6e:	461a      	mov	r2, r3
 8004f70:	6838      	ldr	r0, [r7, #0]
 8004f72:	f002 f9a3 	bl	80072bc <memcpy>
    }
}
 8004f76:	bf00      	nop
 8004f78:	3708      	adds	r7, #8
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	bd80      	pop	{r7, pc}

08004f7e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004f7e:	b580      	push	{r7, lr}
 8004f80:	b084      	sub	sp, #16
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8004f86:	f001 fe41 	bl	8006c0c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f90:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004f92:	e011      	b.n	8004fb8 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d012      	beq.n	8004fc2 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3324      	adds	r3, #36	@ 0x24
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	f000 fc6d 	bl	8005880 <xTaskRemoveFromEventList>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d001      	beq.n	8004fb0 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8004fac:	f000 fd4a 	bl	8005a44 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8004fb0:	7bfb      	ldrb	r3, [r7, #15]
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	b2db      	uxtb	r3, r3
 8004fb6:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	dce9      	bgt.n	8004f94 <prvUnlockQueue+0x16>
 8004fc0:	e000      	b.n	8004fc4 <prvUnlockQueue+0x46>
                        break;
 8004fc2:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	22ff      	movs	r2, #255	@ 0xff
 8004fc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8004fcc:	f001 fe50 	bl	8006c70 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8004fd0:	f001 fe1c 	bl	8006c0c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004fda:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004fdc:	e011      	b.n	8005002 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d012      	beq.n	800500c <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	3310      	adds	r3, #16
 8004fea:	4618      	mov	r0, r3
 8004fec:	f000 fc48 	bl	8005880 <xTaskRemoveFromEventList>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d001      	beq.n	8004ffa <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8004ff6:	f000 fd25 	bl	8005a44 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004ffa:	7bbb      	ldrb	r3, [r7, #14]
 8004ffc:	3b01      	subs	r3, #1
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8005002:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005006:	2b00      	cmp	r3, #0
 8005008:	dce9      	bgt.n	8004fde <prvUnlockQueue+0x60>
 800500a:	e000      	b.n	800500e <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800500c:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	22ff      	movs	r2, #255	@ 0xff
 8005012:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8005016:	f001 fe2b 	bl	8006c70 <vPortExitCritical>
}
 800501a:	bf00      	nop
 800501c:	3710      	adds	r7, #16
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b084      	sub	sp, #16
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800502a:	f001 fdef 	bl	8006c0c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005032:	2b00      	cmp	r3, #0
 8005034:	d102      	bne.n	800503c <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8005036:	2301      	movs	r3, #1
 8005038:	60fb      	str	r3, [r7, #12]
 800503a:	e001      	b.n	8005040 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800503c:	2300      	movs	r3, #0
 800503e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005040:	f001 fe16 	bl	8006c70 <vPortExitCritical>

    return xReturn;
 8005044:	68fb      	ldr	r3, [r7, #12]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b084      	sub	sp, #16
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8005056:	f001 fdd9 	bl	8006c0c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005062:	429a      	cmp	r2, r3
 8005064:	d102      	bne.n	800506c <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8005066:	2301      	movs	r3, #1
 8005068:	60fb      	str	r3, [r7, #12]
 800506a:	e001      	b.n	8005070 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800506c:	2300      	movs	r3, #0
 800506e:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8005070:	f001 fdfe 	bl	8006c70 <vPortExitCritical>

    return xReturn;
 8005074:	68fb      	ldr	r3, [r7, #12]
}
 8005076:	4618      	mov	r0, r3
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <xQueueIsQueueFullFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueIsQueueFullFromISR( const QueueHandle_t xQueue )
{
 800507e:	b480      	push	{r7}
 8005080:	b087      	sub	sp, #28
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    Queue_t * const pxQueue = xQueue;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10b      	bne.n	80050a8 <xQueueIsQueueFullFromISR+0x2a>
        __asm volatile
 8005090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005094:	f383 8811 	msr	BASEPRI, r3
 8005098:	f3bf 8f6f 	isb	sy
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	60fb      	str	r3, [r7, #12]
    }
 80050a2:	bf00      	nop
 80050a4:	bf00      	nop
 80050a6:	e7fd      	b.n	80050a4 <xQueueIsQueueFullFromISR+0x26>

    if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d102      	bne.n	80050ba <xQueueIsQueueFullFromISR+0x3c>
    {
        xReturn = pdTRUE;
 80050b4:	2301      	movs	r3, #1
 80050b6:	617b      	str	r3, [r7, #20]
 80050b8:	e001      	b.n	80050be <xQueueIsQueueFullFromISR+0x40>
    }
    else
    {
        xReturn = pdFALSE;
 80050ba:	2300      	movs	r3, #0
 80050bc:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80050be:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80050c0:	4618      	mov	r0, r3
 80050c2:	371c      	adds	r7, #28
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80050d6:	2300      	movs	r3, #0
 80050d8:	60fb      	str	r3, [r7, #12]
 80050da:	e014      	b.n	8005106 <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80050dc:	4a0f      	ldr	r2, [pc, #60]	@ (800511c <vQueueAddToRegistry+0x50>)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d10b      	bne.n	8005100 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80050e8:	490c      	ldr	r1, [pc, #48]	@ (800511c <vQueueAddToRegistry+0x50>)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80050f2:	4a0a      	ldr	r2, [pc, #40]	@ (800511c <vQueueAddToRegistry+0x50>)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	00db      	lsls	r3, r3, #3
 80050f8:	4413      	add	r3, r2
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80050fe:	e006      	b.n	800510e <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	3301      	adds	r3, #1
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2b07      	cmp	r3, #7
 800510a:	d9e7      	bls.n	80050dc <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 800510c:	bf00      	nop
 800510e:	bf00      	nop
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	20000128 	.word	0x20000128

08005120 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8005120:	b580      	push	{r7, lr}
 8005122:	b086      	sub	sp, #24
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8005130:	f001 fd6c 	bl	8006c0c <vPortEnterCritical>
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800513a:	b25b      	sxtb	r3, r3
 800513c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005140:	d103      	bne.n	800514a <vQueueWaitForMessageRestricted+0x2a>
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005150:	b25b      	sxtb	r3, r3
 8005152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005156:	d103      	bne.n	8005160 <vQueueWaitForMessageRestricted+0x40>
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	2200      	movs	r2, #0
 800515c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005160:	f001 fd86 	bl	8006c70 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005168:	2b00      	cmp	r3, #0
 800516a:	d106      	bne.n	800517a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	3324      	adds	r3, #36	@ 0x24
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	68b9      	ldr	r1, [r7, #8]
 8005174:	4618      	mov	r0, r3
 8005176:	f000 fb57 	bl	8005828 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800517a:	6978      	ldr	r0, [r7, #20]
 800517c:	f7ff feff 	bl	8004f7e <prvUnlockQueue>
    }
 8005180:	bf00      	nop
 8005182:	3718      	adds	r7, #24
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8005188:	b580      	push	{r7, lr}
 800518a:	b08c      	sub	sp, #48	@ 0x30
 800518c:	af04      	add	r7, sp, #16
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	603b      	str	r3, [r7, #0]
 8005194:	4613      	mov	r3, r2
 8005196:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005198:	88fb      	ldrh	r3, [r7, #6]
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4618      	mov	r0, r3
 800519e:	f001 fe5f 	bl	8006e60 <pvPortMalloc>
 80051a2:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00e      	beq.n	80051c8 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80051aa:	2058      	movs	r0, #88	@ 0x58
 80051ac:	f001 fe58 	bl	8006e60 <pvPortMalloc>
 80051b0:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d003      	beq.n	80051c0 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80051be:	e005      	b.n	80051cc <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 80051c0:	6978      	ldr	r0, [r7, #20]
 80051c2:	f001 ff2f 	bl	8007024 <vPortFree>
 80051c6:	e001      	b.n	80051cc <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80051c8:	2300      	movs	r3, #0
 80051ca:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d013      	beq.n	80051fa <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80051d2:	88fa      	ldrh	r2, [r7, #6]
 80051d4:	2300      	movs	r3, #0
 80051d6:	9303      	str	r3, [sp, #12]
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	9302      	str	r3, [sp, #8]
 80051dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051de:	9301      	str	r3, [sp, #4]
 80051e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	68b9      	ldr	r1, [r7, #8]
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f000 f80e 	bl	800520a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80051ee:	69f8      	ldr	r0, [r7, #28]
 80051f0:	f000 f8a2 	bl	8005338 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80051f4:	2301      	movs	r3, #1
 80051f6:	61bb      	str	r3, [r7, #24]
 80051f8:	e002      	b.n	8005200 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80051fa:	f04f 33ff 	mov.w	r3, #4294967295
 80051fe:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8005200:	69bb      	ldr	r3, [r7, #24]
    }
 8005202:	4618      	mov	r0, r3
 8005204:	3720      	adds	r7, #32
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800520a:	b580      	push	{r7, lr}
 800520c:	b088      	sub	sp, #32
 800520e:	af00      	add	r7, sp, #0
 8005210:	60f8      	str	r0, [r7, #12]
 8005212:	60b9      	str	r1, [r7, #8]
 8005214:	607a      	str	r2, [r7, #4]
 8005216:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	461a      	mov	r2, r3
 8005222:	21a5      	movs	r1, #165	@ 0xa5
 8005224:	f002 f81e 	bl	8007264 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800522a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005232:	3b01      	subs	r3, #1
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	f023 0307 	bic.w	r3, r3, #7
 8005240:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	f003 0307 	and.w	r3, r3, #7
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00b      	beq.n	8005264 <prvInitialiseNewTask+0x5a>
        __asm volatile
 800524c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005250:	f383 8811 	msr	BASEPRI, r3
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	617b      	str	r3, [r7, #20]
    }
 800525e:	bf00      	nop
 8005260:	bf00      	nop
 8005262:	e7fd      	b.n	8005260 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d01f      	beq.n	80052aa <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800526a:	2300      	movs	r3, #0
 800526c:	61fb      	str	r3, [r7, #28]
 800526e:	e012      	b.n	8005296 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	4413      	add	r3, r2
 8005276:	7819      	ldrb	r1, [r3, #0]
 8005278:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	4413      	add	r3, r2
 800527e:	3334      	adds	r3, #52	@ 0x34
 8005280:	460a      	mov	r2, r1
 8005282:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8005284:	68ba      	ldr	r2, [r7, #8]
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	4413      	add	r3, r2
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d006      	beq.n	800529e <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	3301      	adds	r3, #1
 8005294:	61fb      	str	r3, [r7, #28]
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	2b09      	cmp	r3, #9
 800529a:	d9e9      	bls.n	8005270 <prvInitialiseNewTask+0x66>
 800529c:	e000      	b.n	80052a0 <prvInitialiseNewTask+0x96>
            {
                break;
 800529e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80052a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a2:	2200      	movs	r2, #0
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80052a8:	e003      	b.n	80052b2 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80052aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80052b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052b4:	2b04      	cmp	r3, #4
 80052b6:	d901      	bls.n	80052bc <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80052b8:	2304      	movs	r3, #4
 80052ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80052bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052c0:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80052c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052c6:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80052c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ca:	2200      	movs	r2, #0
 80052cc:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80052ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d0:	3304      	adds	r3, #4
 80052d2:	4618      	mov	r0, r3
 80052d4:	f7ff f92c 	bl	8004530 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80052d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052da:	3318      	adds	r3, #24
 80052dc:	4618      	mov	r0, r3
 80052de:	f7ff f927 	bl	8004530 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80052e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052e6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ea:	f1c3 0205 	rsb	r2, r3, #5
 80052ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80052f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80052f6:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80052f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052fa:	3350      	adds	r3, #80	@ 0x50
 80052fc:	2204      	movs	r2, #4
 80052fe:	2100      	movs	r1, #0
 8005300:	4618      	mov	r0, r3
 8005302:	f001 ffaf 	bl	8007264 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8005306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005308:	3354      	adds	r3, #84	@ 0x54
 800530a:	2201      	movs	r2, #1
 800530c:	2100      	movs	r1, #0
 800530e:	4618      	mov	r0, r3
 8005310:	f001 ffa8 	bl	8007264 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	68f9      	ldr	r1, [r7, #12]
 8005318:	69b8      	ldr	r0, [r7, #24]
 800531a:	f001 fb45 	bl	80069a8 <pxPortInitialiseStack>
 800531e:	4602      	mov	r2, r0
 8005320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005322:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8005324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005326:	2b00      	cmp	r3, #0
 8005328:	d002      	beq.n	8005330 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800532a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800532c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800532e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005330:	bf00      	nop
 8005332:	3720      	adds	r7, #32
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8005340:	f001 fc64 	bl	8006c0c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8005344:	4b26      	ldr	r3, [pc, #152]	@ (80053e0 <prvAddNewTaskToReadyList+0xa8>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	3301      	adds	r3, #1
 800534a:	4a25      	ldr	r2, [pc, #148]	@ (80053e0 <prvAddNewTaskToReadyList+0xa8>)
 800534c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800534e:	4b25      	ldr	r3, [pc, #148]	@ (80053e4 <prvAddNewTaskToReadyList+0xac>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d109      	bne.n	800536a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8005356:	4a23      	ldr	r2, [pc, #140]	@ (80053e4 <prvAddNewTaskToReadyList+0xac>)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800535c:	4b20      	ldr	r3, [pc, #128]	@ (80053e0 <prvAddNewTaskToReadyList+0xa8>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d110      	bne.n	8005386 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8005364:	f000 fb8c 	bl	8005a80 <prvInitialiseTaskLists>
 8005368:	e00d      	b.n	8005386 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800536a:	4b1f      	ldr	r3, [pc, #124]	@ (80053e8 <prvAddNewTaskToReadyList+0xb0>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d109      	bne.n	8005386 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005372:	4b1c      	ldr	r3, [pc, #112]	@ (80053e4 <prvAddNewTaskToReadyList+0xac>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537c:	429a      	cmp	r2, r3
 800537e:	d802      	bhi.n	8005386 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8005380:	4a18      	ldr	r2, [pc, #96]	@ (80053e4 <prvAddNewTaskToReadyList+0xac>)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8005386:	4b19      	ldr	r3, [pc, #100]	@ (80053ec <prvAddNewTaskToReadyList+0xb4>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	3301      	adds	r3, #1
 800538c:	4a17      	ldr	r2, [pc, #92]	@ (80053ec <prvAddNewTaskToReadyList+0xb4>)
 800538e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005390:	4b16      	ldr	r3, [pc, #88]	@ (80053ec <prvAddNewTaskToReadyList+0xb4>)
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800539c:	2201      	movs	r2, #1
 800539e:	409a      	lsls	r2, r3
 80053a0:	4b13      	ldr	r3, [pc, #76]	@ (80053f0 <prvAddNewTaskToReadyList+0xb8>)
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	4a12      	ldr	r2, [pc, #72]	@ (80053f0 <prvAddNewTaskToReadyList+0xb8>)
 80053a8:	6013      	str	r3, [r2, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053ae:	4613      	mov	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4413      	add	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	4a0f      	ldr	r2, [pc, #60]	@ (80053f4 <prvAddNewTaskToReadyList+0xbc>)
 80053b8:	441a      	add	r2, r3
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	3304      	adds	r3, #4
 80053be:	4619      	mov	r1, r3
 80053c0:	4610      	mov	r0, r2
 80053c2:	f7ff f8c2 	bl	800454a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80053c6:	f001 fc53 	bl	8006c70 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80053ca:	4b07      	ldr	r3, [pc, #28]	@ (80053e8 <prvAddNewTaskToReadyList+0xb0>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d001      	beq.n	80053d6 <prvAddNewTaskToReadyList+0x9e>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80053d2:	4b04      	ldr	r3, [pc, #16]	@ (80053e4 <prvAddNewTaskToReadyList+0xac>)
 80053d4:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80053d6:	bf00      	nop
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	20000240 	.word	0x20000240
 80053e4:	20000168 	.word	0x20000168
 80053e8:	2000024c 	.word	0x2000024c
 80053ec:	2000025c 	.word	0x2000025c
 80053f0:	20000248 	.word	0x20000248
 80053f4:	2000016c 	.word	0x2000016c

080053f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 80053fe:	4b20      	ldr	r3, [pc, #128]	@ (8005480 <vTaskStartScheduler+0x88>)
 8005400:	9301      	str	r3, [sp, #4]
 8005402:	2300      	movs	r3, #0
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	2300      	movs	r3, #0
 8005408:	2282      	movs	r2, #130	@ 0x82
 800540a:	491e      	ldr	r1, [pc, #120]	@ (8005484 <vTaskStartScheduler+0x8c>)
 800540c:	481e      	ldr	r0, [pc, #120]	@ (8005488 <vTaskStartScheduler+0x90>)
 800540e:	f7ff febb 	bl	8005188 <xTaskCreate>
 8005412:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d102      	bne.n	8005420 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 800541a:	f000 ff27 	bl	800626c <xTimerCreateTimerTask>
 800541e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d116      	bne.n	8005454 <vTaskStartScheduler+0x5c>
        __asm volatile
 8005426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800542a:	f383 8811 	msr	BASEPRI, r3
 800542e:	f3bf 8f6f 	isb	sy
 8005432:	f3bf 8f4f 	dsb	sy
 8005436:	60bb      	str	r3, [r7, #8]
    }
 8005438:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 800543a:	4b14      	ldr	r3, [pc, #80]	@ (800548c <vTaskStartScheduler+0x94>)
 800543c:	f04f 32ff 	mov.w	r2, #4294967295
 8005440:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8005442:	4b13      	ldr	r3, [pc, #76]	@ (8005490 <vTaskStartScheduler+0x98>)
 8005444:	2201      	movs	r2, #1
 8005446:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005448:	4b12      	ldr	r3, [pc, #72]	@ (8005494 <vTaskStartScheduler+0x9c>)
 800544a:	2200      	movs	r2, #0
 800544c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 800544e:	f001 fb39 	bl	8006ac4 <xPortStartScheduler>
 8005452:	e00f      	b.n	8005474 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545a:	d10b      	bne.n	8005474 <vTaskStartScheduler+0x7c>
        __asm volatile
 800545c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005460:	f383 8811 	msr	BASEPRI, r3
 8005464:	f3bf 8f6f 	isb	sy
 8005468:	f3bf 8f4f 	dsb	sy
 800546c:	607b      	str	r3, [r7, #4]
    }
 800546e:	bf00      	nop
 8005470:	bf00      	nop
 8005472:	e7fd      	b.n	8005470 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8005474:	4b08      	ldr	r3, [pc, #32]	@ (8005498 <vTaskStartScheduler+0xa0>)
 8005476:	681b      	ldr	r3, [r3, #0]
}
 8005478:	bf00      	nop
 800547a:	3710      	adds	r7, #16
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}
 8005480:	20000264 	.word	0x20000264
 8005484:	080074c4 	.word	0x080074c4
 8005488:	08005a5d 	.word	0x08005a5d
 800548c:	20000260 	.word	0x20000260
 8005490:	2000024c 	.word	0x2000024c
 8005494:	20000244 	.word	0x20000244
 8005498:	080074f4 	.word	0x080074f4

0800549c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800549c:	b480      	push	{r7}
 800549e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80054a0:	4b04      	ldr	r3, [pc, #16]	@ (80054b4 <vTaskSuspendAll+0x18>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	3301      	adds	r3, #1
 80054a6:	4a03      	ldr	r2, [pc, #12]	@ (80054b4 <vTaskSuspendAll+0x18>)
 80054a8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80054aa:	bf00      	nop
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	20000268 	.word	0x20000268

080054b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80054be:	2300      	movs	r3, #0
 80054c0:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 80054c2:	2300      	movs	r3, #0
 80054c4:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80054c6:	4b3c      	ldr	r3, [pc, #240]	@ (80055b8 <xTaskResumeAll+0x100>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10b      	bne.n	80054e6 <xTaskResumeAll+0x2e>
        __asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	603b      	str	r3, [r7, #0]
    }
 80054e0:	bf00      	nop
 80054e2:	bf00      	nop
 80054e4:	e7fd      	b.n	80054e2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80054e6:	f001 fb91 	bl	8006c0c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80054ea:	4b33      	ldr	r3, [pc, #204]	@ (80055b8 <xTaskResumeAll+0x100>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	4a31      	ldr	r2, [pc, #196]	@ (80055b8 <xTaskResumeAll+0x100>)
 80054f2:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054f4:	4b30      	ldr	r3, [pc, #192]	@ (80055b8 <xTaskResumeAll+0x100>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d155      	bne.n	80055a8 <xTaskResumeAll+0xf0>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054fc:	4b2f      	ldr	r3, [pc, #188]	@ (80055bc <xTaskResumeAll+0x104>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d051      	beq.n	80055a8 <xTaskResumeAll+0xf0>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005504:	e02e      	b.n	8005564 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005506:	4b2e      	ldr	r3, [pc, #184]	@ (80055c0 <xTaskResumeAll+0x108>)
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	3318      	adds	r3, #24
 8005512:	4618      	mov	r0, r3
 8005514:	f7ff f876 	bl	8004604 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	3304      	adds	r3, #4
 800551c:	4618      	mov	r0, r3
 800551e:	f7ff f871 	bl	8004604 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005526:	2201      	movs	r2, #1
 8005528:	409a      	lsls	r2, r3
 800552a:	4b26      	ldr	r3, [pc, #152]	@ (80055c4 <xTaskResumeAll+0x10c>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4313      	orrs	r3, r2
 8005530:	4a24      	ldr	r2, [pc, #144]	@ (80055c4 <xTaskResumeAll+0x10c>)
 8005532:	6013      	str	r3, [r2, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005538:	4613      	mov	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4a21      	ldr	r2, [pc, #132]	@ (80055c8 <xTaskResumeAll+0x110>)
 8005542:	441a      	add	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	3304      	adds	r3, #4
 8005548:	4619      	mov	r1, r3
 800554a:	4610      	mov	r0, r2
 800554c:	f7fe fffd 	bl	800454a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005554:	4b1d      	ldr	r3, [pc, #116]	@ (80055cc <xTaskResumeAll+0x114>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800555a:	429a      	cmp	r2, r3
 800555c:	d302      	bcc.n	8005564 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 800555e:	4b1c      	ldr	r3, [pc, #112]	@ (80055d0 <xTaskResumeAll+0x118>)
 8005560:	2201      	movs	r2, #1
 8005562:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005564:	4b16      	ldr	r3, [pc, #88]	@ (80055c0 <xTaskResumeAll+0x108>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d1cc      	bne.n	8005506 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d001      	beq.n	8005576 <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8005572:	f000 fb03 	bl	8005b7c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005576:	4b17      	ldr	r3, [pc, #92]	@ (80055d4 <xTaskResumeAll+0x11c>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d010      	beq.n	80055a4 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8005582:	f000 f839 	bl	80055f8 <xTaskIncrementTick>
 8005586:	4603      	mov	r3, r0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 800558c:	4b10      	ldr	r3, [pc, #64]	@ (80055d0 <xTaskResumeAll+0x118>)
 800558e:	2201      	movs	r2, #1
 8005590:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	3b01      	subs	r3, #1
 8005596:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1f1      	bne.n	8005582 <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 800559e:	4b0d      	ldr	r3, [pc, #52]	@ (80055d4 <xTaskResumeAll+0x11c>)
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80055a4:	4b0a      	ldr	r3, [pc, #40]	@ (80055d0 <xTaskResumeAll+0x118>)
 80055a6:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80055a8:	f001 fb62 	bl	8006c70 <vPortExitCritical>

    return xAlreadyYielded;
 80055ac:	687b      	ldr	r3, [r7, #4]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	20000268 	.word	0x20000268
 80055bc:	20000240 	.word	0x20000240
 80055c0:	20000200 	.word	0x20000200
 80055c4:	20000248 	.word	0x20000248
 80055c8:	2000016c 	.word	0x2000016c
 80055cc:	20000168 	.word	0x20000168
 80055d0:	20000254 	.word	0x20000254
 80055d4:	20000250 	.word	0x20000250

080055d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80055de:	4b05      	ldr	r3, [pc, #20]	@ (80055f4 <xTaskGetTickCount+0x1c>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80055e4:	687b      	ldr	r3, [r7, #4]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr
 80055f2:	bf00      	nop
 80055f4:	20000244 	.word	0x20000244

080055f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b086      	sub	sp, #24
 80055fc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80055fe:	2300      	movs	r3, #0
 8005600:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005602:	4b3f      	ldr	r3, [pc, #252]	@ (8005700 <xTaskIncrementTick+0x108>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d170      	bne.n	80056ec <xTaskIncrementTick+0xf4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800560a:	4b3e      	ldr	r3, [pc, #248]	@ (8005704 <xTaskIncrementTick+0x10c>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	3301      	adds	r3, #1
 8005610:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8005612:	4a3c      	ldr	r2, [pc, #240]	@ (8005704 <xTaskIncrementTick+0x10c>)
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d121      	bne.n	8005662 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800561e:	4b3a      	ldr	r3, [pc, #232]	@ (8005708 <xTaskIncrementTick+0x110>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00b      	beq.n	8005640 <xTaskIncrementTick+0x48>
        __asm volatile
 8005628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562c:	f383 8811 	msr	BASEPRI, r3
 8005630:	f3bf 8f6f 	isb	sy
 8005634:	f3bf 8f4f 	dsb	sy
 8005638:	603b      	str	r3, [r7, #0]
    }
 800563a:	bf00      	nop
 800563c:	bf00      	nop
 800563e:	e7fd      	b.n	800563c <xTaskIncrementTick+0x44>
 8005640:	4b31      	ldr	r3, [pc, #196]	@ (8005708 <xTaskIncrementTick+0x110>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	60fb      	str	r3, [r7, #12]
 8005646:	4b31      	ldr	r3, [pc, #196]	@ (800570c <xTaskIncrementTick+0x114>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a2f      	ldr	r2, [pc, #188]	@ (8005708 <xTaskIncrementTick+0x110>)
 800564c:	6013      	str	r3, [r2, #0]
 800564e:	4a2f      	ldr	r2, [pc, #188]	@ (800570c <xTaskIncrementTick+0x114>)
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6013      	str	r3, [r2, #0]
 8005654:	4b2e      	ldr	r3, [pc, #184]	@ (8005710 <xTaskIncrementTick+0x118>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3301      	adds	r3, #1
 800565a:	4a2d      	ldr	r2, [pc, #180]	@ (8005710 <xTaskIncrementTick+0x118>)
 800565c:	6013      	str	r3, [r2, #0]
 800565e:	f000 fa8d 	bl	8005b7c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8005662:	4b2c      	ldr	r3, [pc, #176]	@ (8005714 <xTaskIncrementTick+0x11c>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	693a      	ldr	r2, [r7, #16]
 8005668:	429a      	cmp	r2, r3
 800566a:	d344      	bcc.n	80056f6 <xTaskIncrementTick+0xfe>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800566c:	4b26      	ldr	r3, [pc, #152]	@ (8005708 <xTaskIncrementTick+0x110>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d104      	bne.n	8005680 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005676:	4b27      	ldr	r3, [pc, #156]	@ (8005714 <xTaskIncrementTick+0x11c>)
 8005678:	f04f 32ff 	mov.w	r2, #4294967295
 800567c:	601a      	str	r2, [r3, #0]
                    break;
 800567e:	e03a      	b.n	80056f6 <xTaskIncrementTick+0xfe>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005680:	4b21      	ldr	r3, [pc, #132]	@ (8005708 <xTaskIncrementTick+0x110>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	429a      	cmp	r2, r3
 8005696:	d203      	bcs.n	80056a0 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8005698:	4a1e      	ldr	r2, [pc, #120]	@ (8005714 <xTaskIncrementTick+0x11c>)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800569e:	e02a      	b.n	80056f6 <xTaskIncrementTick+0xfe>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	3304      	adds	r3, #4
 80056a4:	4618      	mov	r0, r3
 80056a6:	f7fe ffad 	bl	8004604 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d004      	beq.n	80056bc <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	3318      	adds	r3, #24
 80056b6:	4618      	mov	r0, r3
 80056b8:	f7fe ffa4 	bl	8004604 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056c0:	2201      	movs	r2, #1
 80056c2:	409a      	lsls	r2, r3
 80056c4:	4b14      	ldr	r3, [pc, #80]	@ (8005718 <xTaskIncrementTick+0x120>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	4a13      	ldr	r2, [pc, #76]	@ (8005718 <xTaskIncrementTick+0x120>)
 80056cc:	6013      	str	r3, [r2, #0]
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056d2:	4613      	mov	r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	4413      	add	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4a10      	ldr	r2, [pc, #64]	@ (800571c <xTaskIncrementTick+0x124>)
 80056dc:	441a      	add	r2, r3
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	3304      	adds	r3, #4
 80056e2:	4619      	mov	r1, r3
 80056e4:	4610      	mov	r0, r2
 80056e6:	f7fe ff30 	bl	800454a <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056ea:	e7bf      	b.n	800566c <xTaskIncrementTick+0x74>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80056ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005720 <xTaskIncrementTick+0x128>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3301      	adds	r3, #1
 80056f2:	4a0b      	ldr	r2, [pc, #44]	@ (8005720 <xTaskIncrementTick+0x128>)
 80056f4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80056f6:	697b      	ldr	r3, [r7, #20]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3718      	adds	r7, #24
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	20000268 	.word	0x20000268
 8005704:	20000244 	.word	0x20000244
 8005708:	200001f8 	.word	0x200001f8
 800570c:	200001fc 	.word	0x200001fc
 8005710:	20000258 	.word	0x20000258
 8005714:	20000260 	.word	0x20000260
 8005718:	20000248 	.word	0x20000248
 800571c:	2000016c 	.word	0x2000016c
 8005720:	20000250 	.word	0x20000250

08005724 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005724:	b480      	push	{r7}
 8005726:	b087      	sub	sp, #28
 8005728:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800572a:	4b27      	ldr	r3, [pc, #156]	@ (80057c8 <vTaskSwitchContext+0xa4>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8005732:	4b26      	ldr	r3, [pc, #152]	@ (80057cc <vTaskSwitchContext+0xa8>)
 8005734:	2201      	movs	r2, #1
 8005736:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8005738:	e040      	b.n	80057bc <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 800573a:	4b24      	ldr	r3, [pc, #144]	@ (80057cc <vTaskSwitchContext+0xa8>)
 800573c:	2200      	movs	r2, #0
 800573e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005740:	4b23      	ldr	r3, [pc, #140]	@ (80057d0 <vTaskSwitchContext+0xac>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	fab3 f383 	clz	r3, r3
 800574c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800574e:	7afb      	ldrb	r3, [r7, #11]
 8005750:	f1c3 031f 	rsb	r3, r3, #31
 8005754:	617b      	str	r3, [r7, #20]
 8005756:	491f      	ldr	r1, [pc, #124]	@ (80057d4 <vTaskSwitchContext+0xb0>)
 8005758:	697a      	ldr	r2, [r7, #20]
 800575a:	4613      	mov	r3, r2
 800575c:	009b      	lsls	r3, r3, #2
 800575e:	4413      	add	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	440b      	add	r3, r1
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d10b      	bne.n	8005782 <vTaskSwitchContext+0x5e>
        __asm volatile
 800576a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800576e:	f383 8811 	msr	BASEPRI, r3
 8005772:	f3bf 8f6f 	isb	sy
 8005776:	f3bf 8f4f 	dsb	sy
 800577a:	607b      	str	r3, [r7, #4]
    }
 800577c:	bf00      	nop
 800577e:	bf00      	nop
 8005780:	e7fd      	b.n	800577e <vTaskSwitchContext+0x5a>
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	4613      	mov	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4413      	add	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4a11      	ldr	r2, [pc, #68]	@ (80057d4 <vTaskSwitchContext+0xb0>)
 800578e:	4413      	add	r3, r2
 8005790:	613b      	str	r3, [r7, #16]
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	685a      	ldr	r2, [r3, #4]
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	605a      	str	r2, [r3, #4]
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	685a      	ldr	r2, [r3, #4]
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	3308      	adds	r3, #8
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d104      	bne.n	80057b2 <vTaskSwitchContext+0x8e>
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	685a      	ldr	r2, [r3, #4]
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	605a      	str	r2, [r3, #4]
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	4a07      	ldr	r2, [pc, #28]	@ (80057d8 <vTaskSwitchContext+0xb4>)
 80057ba:	6013      	str	r3, [r2, #0]
}
 80057bc:	bf00      	nop
 80057be:	371c      	adds	r7, #28
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	20000268 	.word	0x20000268
 80057cc:	20000254 	.word	0x20000254
 80057d0:	20000248 	.word	0x20000248
 80057d4:	2000016c 	.word	0x2000016c
 80057d8:	20000168 	.word	0x20000168

080057dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
 80057e4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10b      	bne.n	8005804 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80057ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f0:	f383 8811 	msr	BASEPRI, r3
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	60fb      	str	r3, [r7, #12]
    }
 80057fe:	bf00      	nop
 8005800:	bf00      	nop
 8005802:	e7fd      	b.n	8005800 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005804:	4b07      	ldr	r3, [pc, #28]	@ (8005824 <vTaskPlaceOnEventList+0x48>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3318      	adds	r3, #24
 800580a:	4619      	mov	r1, r3
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f7fe fec0 	bl	8004592 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005812:	2101      	movs	r1, #1
 8005814:	6838      	ldr	r0, [r7, #0]
 8005816:	f000 fcc3 	bl	80061a0 <prvAddCurrentTaskToDelayedList>
}
 800581a:	bf00      	nop
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	20000168 	.word	0x20000168

08005828 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8005828:	b580      	push	{r7, lr}
 800582a:	b086      	sub	sp, #24
 800582c:	af00      	add	r7, sp, #0
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10b      	bne.n	8005852 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 800583a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800583e:	f383 8811 	msr	BASEPRI, r3
 8005842:	f3bf 8f6f 	isb	sy
 8005846:	f3bf 8f4f 	dsb	sy
 800584a:	617b      	str	r3, [r7, #20]
    }
 800584c:	bf00      	nop
 800584e:	bf00      	nop
 8005850:	e7fd      	b.n	800584e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005852:	4b0a      	ldr	r3, [pc, #40]	@ (800587c <vTaskPlaceOnEventListRestricted+0x54>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	3318      	adds	r3, #24
 8005858:	4619      	mov	r1, r3
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f7fe fe75 	bl	800454a <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d002      	beq.n	800586c <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 8005866:	f04f 33ff 	mov.w	r3, #4294967295
 800586a:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800586c:	6879      	ldr	r1, [r7, #4]
 800586e:	68b8      	ldr	r0, [r7, #8]
 8005870:	f000 fc96 	bl	80061a0 <prvAddCurrentTaskToDelayedList>
    }
 8005874:	bf00      	nop
 8005876:	3718      	adds	r7, #24
 8005878:	46bd      	mov	sp, r7
 800587a:	bd80      	pop	{r7, pc}
 800587c:	20000168 	.word	0x20000168

08005880 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	68db      	ldr	r3, [r3, #12]
 800588e:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10b      	bne.n	80058ae <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8005896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	60fb      	str	r3, [r7, #12]
    }
 80058a8:	bf00      	nop
 80058aa:	bf00      	nop
 80058ac:	e7fd      	b.n	80058aa <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	3318      	adds	r3, #24
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7fe fea6 	bl	8004604 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058b8:	4b1d      	ldr	r3, [pc, #116]	@ (8005930 <xTaskRemoveFromEventList+0xb0>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d11c      	bne.n	80058fa <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	3304      	adds	r3, #4
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7fe fe9d 	bl	8004604 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058ce:	2201      	movs	r2, #1
 80058d0:	409a      	lsls	r2, r3
 80058d2:	4b18      	ldr	r3, [pc, #96]	@ (8005934 <xTaskRemoveFromEventList+0xb4>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	4a16      	ldr	r2, [pc, #88]	@ (8005934 <xTaskRemoveFromEventList+0xb4>)
 80058da:	6013      	str	r3, [r2, #0]
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058e0:	4613      	mov	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4413      	add	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4a13      	ldr	r2, [pc, #76]	@ (8005938 <xTaskRemoveFromEventList+0xb8>)
 80058ea:	441a      	add	r2, r3
 80058ec:	693b      	ldr	r3, [r7, #16]
 80058ee:	3304      	adds	r3, #4
 80058f0:	4619      	mov	r1, r3
 80058f2:	4610      	mov	r0, r2
 80058f4:	f7fe fe29 	bl	800454a <vListInsertEnd>
 80058f8:	e005      	b.n	8005906 <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	3318      	adds	r3, #24
 80058fe:	4619      	mov	r1, r3
 8005900:	480e      	ldr	r0, [pc, #56]	@ (800593c <xTaskRemoveFromEventList+0xbc>)
 8005902:	f7fe fe22 	bl	800454a <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800590a:	4b0d      	ldr	r3, [pc, #52]	@ (8005940 <xTaskRemoveFromEventList+0xc0>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005910:	429a      	cmp	r2, r3
 8005912:	d905      	bls.n	8005920 <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8005914:	2301      	movs	r3, #1
 8005916:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8005918:	4b0a      	ldr	r3, [pc, #40]	@ (8005944 <xTaskRemoveFromEventList+0xc4>)
 800591a:	2201      	movs	r2, #1
 800591c:	601a      	str	r2, [r3, #0]
 800591e:	e001      	b.n	8005924 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 8005920:	2300      	movs	r3, #0
 8005922:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8005924:	697b      	ldr	r3, [r7, #20]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3718      	adds	r7, #24
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20000268 	.word	0x20000268
 8005934:	20000248 	.word	0x20000248
 8005938:	2000016c 	.word	0x2000016c
 800593c:	20000200 	.word	0x20000200
 8005940:	20000168 	.word	0x20000168
 8005944:	20000254 	.word	0x20000254

08005948 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005950:	4b06      	ldr	r3, [pc, #24]	@ (800596c <vTaskInternalSetTimeOutState+0x24>)
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8005958:	4b05      	ldr	r3, [pc, #20]	@ (8005970 <vTaskInternalSetTimeOutState+0x28>)
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	605a      	str	r2, [r3, #4]
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr
 800596c:	20000258 	.word	0x20000258
 8005970:	20000244 	.word	0x20000244

08005974 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b088      	sub	sp, #32
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10b      	bne.n	800599c <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8005984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005988:	f383 8811 	msr	BASEPRI, r3
 800598c:	f3bf 8f6f 	isb	sy
 8005990:	f3bf 8f4f 	dsb	sy
 8005994:	613b      	str	r3, [r7, #16]
    }
 8005996:	bf00      	nop
 8005998:	bf00      	nop
 800599a:	e7fd      	b.n	8005998 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10b      	bne.n	80059ba <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80059a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a6:	f383 8811 	msr	BASEPRI, r3
 80059aa:	f3bf 8f6f 	isb	sy
 80059ae:	f3bf 8f4f 	dsb	sy
 80059b2:	60fb      	str	r3, [r7, #12]
    }
 80059b4:	bf00      	nop
 80059b6:	bf00      	nop
 80059b8:	e7fd      	b.n	80059b6 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80059ba:	f001 f927 	bl	8006c0c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80059be:	4b1f      	ldr	r3, [pc, #124]	@ (8005a3c <xTaskCheckForTimeOut+0xc8>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	69ba      	ldr	r2, [r7, #24]
 80059ca:	1ad3      	subs	r3, r2, r3
 80059cc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d6:	d102      	bne.n	80059de <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80059d8:	2300      	movs	r3, #0
 80059da:	61fb      	str	r3, [r7, #28]
 80059dc:	e026      	b.n	8005a2c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	4b17      	ldr	r3, [pc, #92]	@ (8005a40 <xTaskCheckForTimeOut+0xcc>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d00a      	beq.n	8005a00 <xTaskCheckForTimeOut+0x8c>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	69ba      	ldr	r2, [r7, #24]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d305      	bcc.n	8005a00 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80059f4:	2301      	movs	r3, #1
 80059f6:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	2200      	movs	r2, #0
 80059fc:	601a      	str	r2, [r3, #0]
 80059fe:	e015      	b.n	8005a2c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d20b      	bcs.n	8005a22 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	1ad2      	subs	r2, r2, r3
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7ff ff96 	bl	8005948 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	61fb      	str	r3, [r7, #28]
 8005a20:	e004      	b.n	8005a2c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	2200      	movs	r2, #0
 8005a26:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8005a2c:	f001 f920 	bl	8006c70 <vPortExitCritical>

    return xReturn;
 8005a30:	69fb      	ldr	r3, [r7, #28]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3720      	adds	r7, #32
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	20000244 	.word	0x20000244
 8005a40:	20000258 	.word	0x20000258

08005a44 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a44:	b480      	push	{r7}
 8005a46:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8005a48:	4b03      	ldr	r3, [pc, #12]	@ (8005a58 <vTaskMissedYield+0x14>)
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	601a      	str	r2, [r3, #0]
}
 8005a4e:	bf00      	nop
 8005a50:	46bd      	mov	sp, r7
 8005a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a56:	4770      	bx	lr
 8005a58:	20000254 	.word	0x20000254

08005a5c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005a64:	f000 f84c 	bl	8005b00 <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8005a68:	4b04      	ldr	r3, [pc, #16]	@ (8005a7c <prvIdleTask+0x20>)
 8005a6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a6e:	601a      	str	r2, [r3, #0]
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005a78:	bf00      	nop
 8005a7a:	e7f3      	b.n	8005a64 <prvIdleTask+0x8>
 8005a7c:	e000ed04 	.word	0xe000ed04

08005a80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b082      	sub	sp, #8
 8005a84:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005a86:	2300      	movs	r3, #0
 8005a88:	607b      	str	r3, [r7, #4]
 8005a8a:	e00c      	b.n	8005aa6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	4413      	add	r3, r2
 8005a94:	009b      	lsls	r3, r3, #2
 8005a96:	4a12      	ldr	r2, [pc, #72]	@ (8005ae0 <prvInitialiseTaskLists+0x60>)
 8005a98:	4413      	add	r3, r2
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7fe fd28 	bl	80044f0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	607b      	str	r3, [r7, #4]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2b04      	cmp	r3, #4
 8005aaa:	d9ef      	bls.n	8005a8c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8005aac:	480d      	ldr	r0, [pc, #52]	@ (8005ae4 <prvInitialiseTaskLists+0x64>)
 8005aae:	f7fe fd1f 	bl	80044f0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005ab2:	480d      	ldr	r0, [pc, #52]	@ (8005ae8 <prvInitialiseTaskLists+0x68>)
 8005ab4:	f7fe fd1c 	bl	80044f0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005ab8:	480c      	ldr	r0, [pc, #48]	@ (8005aec <prvInitialiseTaskLists+0x6c>)
 8005aba:	f7fe fd19 	bl	80044f0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8005abe:	480c      	ldr	r0, [pc, #48]	@ (8005af0 <prvInitialiseTaskLists+0x70>)
 8005ac0:	f7fe fd16 	bl	80044f0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8005ac4:	480b      	ldr	r0, [pc, #44]	@ (8005af4 <prvInitialiseTaskLists+0x74>)
 8005ac6:	f7fe fd13 	bl	80044f0 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8005aca:	4b0b      	ldr	r3, [pc, #44]	@ (8005af8 <prvInitialiseTaskLists+0x78>)
 8005acc:	4a05      	ldr	r2, [pc, #20]	@ (8005ae4 <prvInitialiseTaskLists+0x64>)
 8005ace:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8005afc <prvInitialiseTaskLists+0x7c>)
 8005ad2:	4a05      	ldr	r2, [pc, #20]	@ (8005ae8 <prvInitialiseTaskLists+0x68>)
 8005ad4:	601a      	str	r2, [r3, #0]
}
 8005ad6:	bf00      	nop
 8005ad8:	3708      	adds	r7, #8
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	2000016c 	.word	0x2000016c
 8005ae4:	200001d0 	.word	0x200001d0
 8005ae8:	200001e4 	.word	0x200001e4
 8005aec:	20000200 	.word	0x20000200
 8005af0:	20000214 	.word	0x20000214
 8005af4:	2000022c 	.word	0x2000022c
 8005af8:	200001f8 	.word	0x200001f8
 8005afc:	200001fc 	.word	0x200001fc

08005b00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b06:	e019      	b.n	8005b3c <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8005b08:	f001 f880 	bl	8006c0c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b0c:	4b10      	ldr	r3, [pc, #64]	@ (8005b50 <prvCheckTasksWaitingTermination+0x50>)
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	3304      	adds	r3, #4
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7fe fd73 	bl	8004604 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8005b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b54 <prvCheckTasksWaitingTermination+0x54>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3b01      	subs	r3, #1
 8005b24:	4a0b      	ldr	r2, [pc, #44]	@ (8005b54 <prvCheckTasksWaitingTermination+0x54>)
 8005b26:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8005b28:	4b0b      	ldr	r3, [pc, #44]	@ (8005b58 <prvCheckTasksWaitingTermination+0x58>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8005b58 <prvCheckTasksWaitingTermination+0x58>)
 8005b30:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8005b32:	f001 f89d 	bl	8006c70 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f810 	bl	8005b5c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b3c:	4b06      	ldr	r3, [pc, #24]	@ (8005b58 <prvCheckTasksWaitingTermination+0x58>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1e1      	bne.n	8005b08 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8005b44:	bf00      	nop
 8005b46:	bf00      	nop
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	20000214 	.word	0x20000214
 8005b54:	20000240 	.word	0x20000240
 8005b58:	20000228 	.word	0x20000228

08005b5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b082      	sub	sp, #8
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f001 fa5b 	bl	8007024 <vPortFree>
                vPortFree( pxTCB );
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f001 fa58 	bl	8007024 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005b74:	bf00      	nop
 8005b76:	3708      	adds	r7, #8
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}

08005b7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b80:	4b0a      	ldr	r3, [pc, #40]	@ (8005bac <prvResetNextTaskUnblockTime+0x30>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d104      	bne.n	8005b94 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8005b8a:	4b09      	ldr	r3, [pc, #36]	@ (8005bb0 <prvResetNextTaskUnblockTime+0x34>)
 8005b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8005b90:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005b92:	e005      	b.n	8005ba0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005b94:	4b05      	ldr	r3, [pc, #20]	@ (8005bac <prvResetNextTaskUnblockTime+0x30>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a04      	ldr	r2, [pc, #16]	@ (8005bb0 <prvResetNextTaskUnblockTime+0x34>)
 8005b9e:	6013      	str	r3, [r2, #0]
}
 8005ba0:	bf00      	nop
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	200001f8 	.word	0x200001f8
 8005bb0:	20000260 	.word	0x20000260

08005bb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8005bba:	4b0b      	ldr	r3, [pc, #44]	@ (8005be8 <xTaskGetSchedulerState+0x34>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d102      	bne.n	8005bc8 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	607b      	str	r3, [r7, #4]
 8005bc6:	e008      	b.n	8005bda <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bc8:	4b08      	ldr	r3, [pc, #32]	@ (8005bec <xTaskGetSchedulerState+0x38>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d102      	bne.n	8005bd6 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	607b      	str	r3, [r7, #4]
 8005bd4:	e001      	b.n	8005bda <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8005bda:	687b      	ldr	r3, [r7, #4]
    }
 8005bdc:	4618      	mov	r0, r3
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr
 8005be8:	2000024c 	.word	0x2000024c
 8005bec:	20000268 	.word	0x20000268

08005bf0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d065      	beq.n	8005cd2 <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8005c06:	4b35      	ldr	r3, [pc, #212]	@ (8005cdc <xTaskPriorityDisinherit+0xec>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d00b      	beq.n	8005c28 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	60fb      	str	r3, [r7, #12]
    }
 8005c22:	bf00      	nop
 8005c24:	bf00      	nop
 8005c26:	e7fd      	b.n	8005c24 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8005c28:	693b      	ldr	r3, [r7, #16]
 8005c2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d10b      	bne.n	8005c48 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8005c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c34:	f383 8811 	msr	BASEPRI, r3
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	f3bf 8f4f 	dsb	sy
 8005c40:	60bb      	str	r3, [r7, #8]
    }
 8005c42:	bf00      	nop
 8005c44:	bf00      	nop
 8005c46:	e7fd      	b.n	8005c44 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c4c:	1e5a      	subs	r2, r3, #1
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d039      	beq.n	8005cd2 <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d135      	bne.n	8005cd2 <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	3304      	adds	r3, #4
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7fe fcca 	bl	8004604 <uxListRemove>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d10a      	bne.n	8005c8c <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005c80:	43da      	mvns	r2, r3
 8005c82:	4b17      	ldr	r3, [pc, #92]	@ (8005ce0 <xTaskPriorityDisinherit+0xf0>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4013      	ands	r3, r2
 8005c88:	4a15      	ldr	r2, [pc, #84]	@ (8005ce0 <xTaskPriorityDisinherit+0xf0>)
 8005c8a:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c98:	f1c3 0205 	rsb	r2, r3, #5
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca4:	2201      	movs	r2, #1
 8005ca6:	409a      	lsls	r2, r3
 8005ca8:	4b0d      	ldr	r3, [pc, #52]	@ (8005ce0 <xTaskPriorityDisinherit+0xf0>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	4a0c      	ldr	r2, [pc, #48]	@ (8005ce0 <xTaskPriorityDisinherit+0xf0>)
 8005cb0:	6013      	str	r3, [r2, #0]
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	4413      	add	r3, r2
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4a09      	ldr	r2, [pc, #36]	@ (8005ce4 <xTaskPriorityDisinherit+0xf4>)
 8005cc0:	441a      	add	r2, r3
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	3304      	adds	r3, #4
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	4610      	mov	r0, r2
 8005cca:	f7fe fc3e 	bl	800454a <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005cd2:	697b      	ldr	r3, [r7, #20]
    }
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	3718      	adds	r7, #24
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	bd80      	pop	{r7, pc}
 8005cdc:	20000168 	.word	0x20000168
 8005ce0:	20000248 	.word	0x20000248
 8005ce4:	2000016c 	.word	0x2000016c

08005ce8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
 8005cf4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00b      	beq.n	8005d14 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 8005cfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d00:	f383 8811 	msr	BASEPRI, r3
 8005d04:	f3bf 8f6f 	isb	sy
 8005d08:	f3bf 8f4f 	dsb	sy
 8005d0c:	613b      	str	r3, [r7, #16]
    }
 8005d0e:	bf00      	nop
 8005d10:	bf00      	nop
 8005d12:	e7fd      	b.n	8005d10 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8005d14:	f000 ff7a 	bl	8006c0c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8005d18:	4b31      	ldr	r3, [pc, #196]	@ (8005de0 <xTaskGenericNotifyWait+0xf8>)
 8005d1a:	681a      	ldr	r2, [r3, #0]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	4413      	add	r3, r2
 8005d20:	3354      	adds	r3, #84	@ 0x54
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b02      	cmp	r3, #2
 8005d28:	d022      	beq.n	8005d70 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8005d2a:	4b2d      	ldr	r3, [pc, #180]	@ (8005de0 <xTaskGenericNotifyWait+0xf8>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	68fa      	ldr	r2, [r7, #12]
 8005d30:	3214      	adds	r2, #20
 8005d32:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005d36:	68ba      	ldr	r2, [r7, #8]
 8005d38:	43d2      	mvns	r2, r2
 8005d3a:	4011      	ands	r1, r2
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	3214      	adds	r2, #20
 8005d40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8005d44:	4b26      	ldr	r3, [pc, #152]	@ (8005de0 <xTaskGenericNotifyWait+0xf8>)
 8005d46:	681a      	ldr	r2, [r3, #0]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4413      	add	r3, r2
 8005d4c:	3354      	adds	r3, #84	@ 0x54
 8005d4e:	2201      	movs	r2, #1
 8005d50:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00b      	beq.n	8005d70 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005d58:	2101      	movs	r1, #1
 8005d5a:	6a38      	ldr	r0, [r7, #32]
 8005d5c:	f000 fa20 	bl	80061a0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8005d60:	4b20      	ldr	r3, [pc, #128]	@ (8005de4 <xTaskGenericNotifyWait+0xfc>)
 8005d62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	f3bf 8f4f 	dsb	sy
 8005d6c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005d70:	f000 ff7e 	bl	8006c70 <vPortExitCritical>

        taskENTER_CRITICAL();
 8005d74:	f000 ff4a 	bl	8006c0c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );

            if( pulNotificationValue != NULL )
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d007      	beq.n	8005d8e <xTaskGenericNotifyWait+0xa6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8005d7e:	4b18      	ldr	r3, [pc, #96]	@ (8005de0 <xTaskGenericNotifyWait+0xf8>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	3214      	adds	r2, #20
 8005d86:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8005d8e:	4b14      	ldr	r3, [pc, #80]	@ (8005de0 <xTaskGenericNotifyWait+0xf8>)
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	4413      	add	r3, r2
 8005d96:	3354      	adds	r3, #84	@ 0x54
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	2b02      	cmp	r3, #2
 8005d9e:	d002      	beq.n	8005da6 <xTaskGenericNotifyWait+0xbe>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8005da0:	2300      	movs	r3, #0
 8005da2:	617b      	str	r3, [r7, #20]
 8005da4:	e00e      	b.n	8005dc4 <xTaskGenericNotifyWait+0xdc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8005da6:	4b0e      	ldr	r3, [pc, #56]	@ (8005de0 <xTaskGenericNotifyWait+0xf8>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	3214      	adds	r2, #20
 8005dae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	43d2      	mvns	r2, r2
 8005db6:	4011      	ands	r1, r2
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	3214      	adds	r2, #20
 8005dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8005dc4:	4b06      	ldr	r3, [pc, #24]	@ (8005de0 <xTaskGenericNotifyWait+0xf8>)
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4413      	add	r3, r2
 8005dcc:	3354      	adds	r3, #84	@ 0x54
 8005dce:	2200      	movs	r2, #0
 8005dd0:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005dd2:	f000 ff4d 	bl	8006c70 <vPortExitCritical>

        return xReturn;
 8005dd6:	697b      	ldr	r3, [r7, #20]
    }
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3718      	adds	r7, #24
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	20000168 	.word	0x20000168
 8005de4:	e000ed04 	.word	0xe000ed04

08005de8 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b08c      	sub	sp, #48	@ 0x30
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
 8005df4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8005df6:	2301      	movs	r3, #1
 8005df8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00b      	beq.n	8005e18 <xTaskGenericNotify+0x30>
        __asm volatile
 8005e00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e04:	f383 8811 	msr	BASEPRI, r3
 8005e08:	f3bf 8f6f 	isb	sy
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	623b      	str	r3, [r7, #32]
    }
 8005e12:	bf00      	nop
 8005e14:	bf00      	nop
 8005e16:	e7fd      	b.n	8005e14 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10b      	bne.n	8005e36 <xTaskGenericNotify+0x4e>
        __asm volatile
 8005e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e22:	f383 8811 	msr	BASEPRI, r3
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	61fb      	str	r3, [r7, #28]
    }
 8005e30:	bf00      	nop
 8005e32:	bf00      	nop
 8005e34:	e7fd      	b.n	8005e32 <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	62bb      	str	r3, [r7, #40]	@ 0x28

        taskENTER_CRITICAL();
 8005e3a:	f000 fee7 	bl	8006c0c <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8005e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d006      	beq.n	8005e52 <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005e44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	3214      	adds	r2, #20
 8005e4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e50:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005e52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	4413      	add	r3, r2
 8005e58:	3354      	adds	r3, #84	@ 0x54
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005e60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	4413      	add	r3, r2
 8005e66:	3354      	adds	r3, #84	@ 0x54
 8005e68:	2202      	movs	r2, #2
 8005e6a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005e6c:	78fb      	ldrb	r3, [r7, #3]
 8005e6e:	2b04      	cmp	r3, #4
 8005e70:	d83b      	bhi.n	8005eea <xTaskGenericNotify+0x102>
 8005e72:	a201      	add	r2, pc, #4	@ (adr r2, 8005e78 <xTaskGenericNotify+0x90>)
 8005e74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e78:	08005f0b 	.word	0x08005f0b
 8005e7c:	08005e8d 	.word	0x08005e8d
 8005e80:	08005ea9 	.word	0x08005ea9
 8005e84:	08005ec1 	.word	0x08005ec1
 8005e88:	08005ecf 	.word	0x08005ecf
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005e8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	3214      	adds	r2, #20
 8005e92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	ea42 0103 	orr.w	r1, r2, r3
 8005e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	3214      	adds	r2, #20
 8005ea2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005ea6:	e033      	b.n	8005f10 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	3214      	adds	r2, #20
 8005eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb2:	1c59      	adds	r1, r3, #1
 8005eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	3214      	adds	r2, #20
 8005eba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005ebe:	e027      	b.n	8005f10 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	3214      	adds	r2, #20
 8005ec6:	6879      	ldr	r1, [r7, #4]
 8005ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005ecc:	e020      	b.n	8005f10 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005ece:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d006      	beq.n	8005ee4 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed8:	68ba      	ldr	r2, [r7, #8]
 8005eda:	3214      	adds	r2, #20
 8005edc:	6879      	ldr	r1, [r7, #4]
 8005ede:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8005ee2:	e015      	b.n	8005f10 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    break;
 8005ee8:	e012      	b.n	8005f10 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005eea:	4b26      	ldr	r3, [pc, #152]	@ (8005f84 <xTaskGenericNotify+0x19c>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00d      	beq.n	8005f0e <xTaskGenericNotify+0x126>
        __asm volatile
 8005ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ef6:	f383 8811 	msr	BASEPRI, r3
 8005efa:	f3bf 8f6f 	isb	sy
 8005efe:	f3bf 8f4f 	dsb	sy
 8005f02:	61bb      	str	r3, [r7, #24]
    }
 8005f04:	bf00      	nop
 8005f06:	bf00      	nop
 8005f08:	e7fd      	b.n	8005f06 <xTaskGenericNotify+0x11e>
                    break;
 8005f0a:	bf00      	nop
 8005f0c:	e000      	b.n	8005f10 <xTaskGenericNotify+0x128>

                    break;
 8005f0e:	bf00      	nop

            traceTASK_NOTIFY(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8005f10:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d12d      	bne.n	8005f74 <xTaskGenericNotify+0x18c>
            {
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f1a:	3304      	adds	r3, #4
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	f7fe fb71 	bl	8004604 <uxListRemove>
                prvAddTaskToReadyList( pxTCB );
 8005f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f26:	2201      	movs	r2, #1
 8005f28:	409a      	lsls	r2, r3
 8005f2a:	4b17      	ldr	r3, [pc, #92]	@ (8005f88 <xTaskGenericNotify+0x1a0>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	4a15      	ldr	r2, [pc, #84]	@ (8005f88 <xTaskGenericNotify+0x1a0>)
 8005f32:	6013      	str	r3, [r2, #0]
 8005f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f38:	4613      	mov	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4a12      	ldr	r2, [pc, #72]	@ (8005f8c <xTaskGenericNotify+0x1a4>)
 8005f42:	441a      	add	r2, r3
 8005f44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f46:	3304      	adds	r3, #4
 8005f48:	4619      	mov	r1, r3
 8005f4a:	4610      	mov	r0, r2
 8005f4c:	f7fe fafd 	bl	800454a <vListInsertEnd>

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00b      	beq.n	8005f70 <xTaskGenericNotify+0x188>
        __asm volatile
 8005f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f5c:	f383 8811 	msr	BASEPRI, r3
 8005f60:	f3bf 8f6f 	isb	sy
 8005f64:	f3bf 8f4f 	dsb	sy
 8005f68:	617b      	str	r3, [r7, #20]
    }
 8005f6a:	bf00      	nop
 8005f6c:	bf00      	nop
 8005f6e:	e7fd      	b.n	8005f6c <xTaskGenericNotify+0x184>
                         * earliest possible time. */
                        prvResetNextTaskUnblockTime();
                    }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005f70:	4b07      	ldr	r3, [pc, #28]	@ (8005f90 <xTaskGenericNotify+0x1a8>)
 8005f72:	681b      	ldr	r3, [r3, #0]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005f74:	f000 fe7c 	bl	8006c70 <vPortExitCritical>

        return xReturn;
 8005f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3730      	adds	r7, #48	@ 0x30
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	20000244 	.word	0x20000244
 8005f88:	20000248 	.word	0x20000248
 8005f8c:	2000016c 	.word	0x2000016c
 8005f90:	20000168 	.word	0x20000168

08005f94 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b090      	sub	sp, #64	@ 0x40
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
 8005fa0:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10b      	bne.n	8005fc4 <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 8005fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fb0:	f383 8811 	msr	BASEPRI, r3
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 8005fbe:	bf00      	nop
 8005fc0:	bf00      	nop
 8005fc2:	e7fd      	b.n	8005fc0 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00b      	beq.n	8005fe2 <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 8005fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8005fdc:	bf00      	nop
 8005fde:	bf00      	nop
 8005fe0:	e7fd      	b.n	8005fde <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fe2:	f000 fefb 	bl	8006ddc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	63bb      	str	r3, [r7, #56]	@ 0x38
        __asm volatile
 8005fea:	f3ef 8211 	mrs	r2, BASEPRI
 8005fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff2:	f383 8811 	msr	BASEPRI, r3
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	627a      	str	r2, [r7, #36]	@ 0x24
 8006000:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8006002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006004:	637b      	str	r3, [r7, #52]	@ 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 8006006:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006008:	2b00      	cmp	r3, #0
 800600a:	d006      	beq.n	800601a <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 800600c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	3214      	adds	r2, #20
 8006012:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006016:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006018:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800601a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	4413      	add	r3, r2
 8006020:	3354      	adds	r3, #84	@ 0x54
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8006028:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	4413      	add	r3, r2
 800602e:	3354      	adds	r3, #84	@ 0x54
 8006030:	2202      	movs	r2, #2
 8006032:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8006034:	78fb      	ldrb	r3, [r7, #3]
 8006036:	2b04      	cmp	r3, #4
 8006038:	d83b      	bhi.n	80060b2 <xTaskGenericNotifyFromISR+0x11e>
 800603a:	a201      	add	r2, pc, #4	@ (adr r2, 8006040 <xTaskGenericNotifyFromISR+0xac>)
 800603c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006040:	080060d3 	.word	0x080060d3
 8006044:	08006055 	.word	0x08006055
 8006048:	08006071 	.word	0x08006071
 800604c:	08006089 	.word	0x08006089
 8006050:	08006097 	.word	0x08006097
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8006054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006056:	68ba      	ldr	r2, [r7, #8]
 8006058:	3214      	adds	r2, #20
 800605a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	ea42 0103 	orr.w	r1, r2, r3
 8006064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	3214      	adds	r2, #20
 800606a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800606e:	e033      	b.n	80060d8 <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8006070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	3214      	adds	r2, #20
 8006076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800607a:	1c59      	adds	r1, r3, #1
 800607c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	3214      	adds	r2, #20
 8006082:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006086:	e027      	b.n	80060d8 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8006088:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800608a:	68ba      	ldr	r2, [r7, #8]
 800608c:	3214      	adds	r2, #20
 800608e:	6879      	ldr	r1, [r7, #4]
 8006090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8006094:	e020      	b.n	80060d8 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006096:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800609a:	2b02      	cmp	r3, #2
 800609c:	d006      	beq.n	80060ac <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800609e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	3214      	adds	r2, #20
 80060a4:	6879      	ldr	r1, [r7, #4]
 80060a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80060aa:	e015      	b.n	80060d8 <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 80060ac:	2300      	movs	r3, #0
 80060ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    break;
 80060b0:	e012      	b.n	80060d8 <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80060b2:	4b34      	ldr	r3, [pc, #208]	@ (8006184 <xTaskGenericNotifyFromISR+0x1f0>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00d      	beq.n	80060d6 <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 80060ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060be:	f383 8811 	msr	BASEPRI, r3
 80060c2:	f3bf 8f6f 	isb	sy
 80060c6:	f3bf 8f4f 	dsb	sy
 80060ca:	61fb      	str	r3, [r7, #28]
    }
 80060cc:	bf00      	nop
 80060ce:	bf00      	nop
 80060d0:	e7fd      	b.n	80060ce <xTaskGenericNotifyFromISR+0x13a>
                    break;
 80060d2:	bf00      	nop
 80060d4:	e000      	b.n	80060d8 <xTaskGenericNotifyFromISR+0x144>
                    break;
 80060d6:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR(  );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80060d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d146      	bne.n	800616e <xTaskGenericNotifyFromISR+0x1da>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80060e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00b      	beq.n	8006100 <xTaskGenericNotifyFromISR+0x16c>
        __asm volatile
 80060e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060ec:	f383 8811 	msr	BASEPRI, r3
 80060f0:	f3bf 8f6f 	isb	sy
 80060f4:	f3bf 8f4f 	dsb	sy
 80060f8:	61bb      	str	r3, [r7, #24]
    }
 80060fa:	bf00      	nop
 80060fc:	bf00      	nop
 80060fe:	e7fd      	b.n	80060fc <xTaskGenericNotifyFromISR+0x168>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006100:	4b21      	ldr	r3, [pc, #132]	@ (8006188 <xTaskGenericNotifyFromISR+0x1f4>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d11c      	bne.n	8006142 <xTaskGenericNotifyFromISR+0x1ae>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800610a:	3304      	adds	r3, #4
 800610c:	4618      	mov	r0, r3
 800610e:	f7fe fa79 	bl	8004604 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8006112:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006116:	2201      	movs	r2, #1
 8006118:	409a      	lsls	r2, r3
 800611a:	4b1c      	ldr	r3, [pc, #112]	@ (800618c <xTaskGenericNotifyFromISR+0x1f8>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4313      	orrs	r3, r2
 8006120:	4a1a      	ldr	r2, [pc, #104]	@ (800618c <xTaskGenericNotifyFromISR+0x1f8>)
 8006122:	6013      	str	r3, [r2, #0]
 8006124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006126:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006128:	4613      	mov	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4a17      	ldr	r2, [pc, #92]	@ (8006190 <xTaskGenericNotifyFromISR+0x1fc>)
 8006132:	441a      	add	r2, r3
 8006134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006136:	3304      	adds	r3, #4
 8006138:	4619      	mov	r1, r3
 800613a:	4610      	mov	r0, r2
 800613c:	f7fe fa05 	bl	800454a <vListInsertEnd>
 8006140:	e005      	b.n	800614e <xTaskGenericNotifyFromISR+0x1ba>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006144:	3318      	adds	r3, #24
 8006146:	4619      	mov	r1, r3
 8006148:	4812      	ldr	r0, [pc, #72]	@ (8006194 <xTaskGenericNotifyFromISR+0x200>)
 800614a:	f7fe f9fe 	bl	800454a <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800614e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006152:	4b11      	ldr	r3, [pc, #68]	@ (8006198 <xTaskGenericNotifyFromISR+0x204>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006158:	429a      	cmp	r2, r3
 800615a:	d908      	bls.n	800616e <xTaskGenericNotifyFromISR+0x1da>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 800615c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800615e:	2b00      	cmp	r3, #0
 8006160:	d002      	beq.n	8006168 <xTaskGenericNotifyFromISR+0x1d4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8006162:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006164:	2201      	movs	r2, #1
 8006166:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8006168:	4b0c      	ldr	r3, [pc, #48]	@ (800619c <xTaskGenericNotifyFromISR+0x208>)
 800616a:	2201      	movs	r2, #1
 800616c:	601a      	str	r2, [r3, #0]
 800616e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006170:	617b      	str	r3, [r7, #20]
        __asm volatile
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f383 8811 	msr	BASEPRI, r3
    }
 8006178:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800617a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
 800617c:	4618      	mov	r0, r3
 800617e:	3740      	adds	r7, #64	@ 0x40
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	20000244 	.word	0x20000244
 8006188:	20000268 	.word	0x20000268
 800618c:	20000248 	.word	0x20000248
 8006190:	2000016c 	.word	0x2000016c
 8006194:	20000200 	.word	0x20000200
 8006198:	20000168 	.word	0x20000168
 800619c:	20000254 	.word	0x20000254

080061a0 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80061aa:	4b29      	ldr	r3, [pc, #164]	@ (8006250 <prvAddCurrentTaskToDelayedList+0xb0>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061b0:	4b28      	ldr	r3, [pc, #160]	@ (8006254 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	3304      	adds	r3, #4
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fe fa24 	bl	8004604 <uxListRemove>
 80061bc:	4603      	mov	r3, r0
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10b      	bne.n	80061da <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80061c2:	4b24      	ldr	r3, [pc, #144]	@ (8006254 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061c8:	2201      	movs	r2, #1
 80061ca:	fa02 f303 	lsl.w	r3, r2, r3
 80061ce:	43da      	mvns	r2, r3
 80061d0:	4b21      	ldr	r3, [pc, #132]	@ (8006258 <prvAddCurrentTaskToDelayedList+0xb8>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	4013      	ands	r3, r2
 80061d6:	4a20      	ldr	r2, [pc, #128]	@ (8006258 <prvAddCurrentTaskToDelayedList+0xb8>)
 80061d8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e0:	d10a      	bne.n	80061f8 <prvAddCurrentTaskToDelayedList+0x58>
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d007      	beq.n	80061f8 <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061e8:	4b1a      	ldr	r3, [pc, #104]	@ (8006254 <prvAddCurrentTaskToDelayedList+0xb4>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3304      	adds	r3, #4
 80061ee:	4619      	mov	r1, r3
 80061f0:	481a      	ldr	r0, [pc, #104]	@ (800625c <prvAddCurrentTaskToDelayedList+0xbc>)
 80061f2:	f7fe f9aa 	bl	800454a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80061f6:	e026      	b.n	8006246 <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80061f8:	68fa      	ldr	r2, [r7, #12]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4413      	add	r3, r2
 80061fe:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006200:	4b14      	ldr	r3, [pc, #80]	@ (8006254 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68ba      	ldr	r2, [r7, #8]
 8006206:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	429a      	cmp	r2, r3
 800620e:	d209      	bcs.n	8006224 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006210:	4b13      	ldr	r3, [pc, #76]	@ (8006260 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	4b0f      	ldr	r3, [pc, #60]	@ (8006254 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	3304      	adds	r3, #4
 800621a:	4619      	mov	r1, r3
 800621c:	4610      	mov	r0, r2
 800621e:	f7fe f9b8 	bl	8004592 <vListInsert>
}
 8006222:	e010      	b.n	8006246 <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006224:	4b0f      	ldr	r3, [pc, #60]	@ (8006264 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006226:	681a      	ldr	r2, [r3, #0]
 8006228:	4b0a      	ldr	r3, [pc, #40]	@ (8006254 <prvAddCurrentTaskToDelayedList+0xb4>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3304      	adds	r3, #4
 800622e:	4619      	mov	r1, r3
 8006230:	4610      	mov	r0, r2
 8006232:	f7fe f9ae 	bl	8004592 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8006236:	4b0c      	ldr	r3, [pc, #48]	@ (8006268 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68ba      	ldr	r2, [r7, #8]
 800623c:	429a      	cmp	r2, r3
 800623e:	d202      	bcs.n	8006246 <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8006240:	4a09      	ldr	r2, [pc, #36]	@ (8006268 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	6013      	str	r3, [r2, #0]
}
 8006246:	bf00      	nop
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}
 800624e:	bf00      	nop
 8006250:	20000244 	.word	0x20000244
 8006254:	20000168 	.word	0x20000168
 8006258:	20000248 	.word	0x20000248
 800625c:	2000022c 	.word	0x2000022c
 8006260:	200001fc 	.word	0x200001fc
 8006264:	200001f8 	.word	0x200001f8
 8006268:	20000260 	.word	0x20000260

0800626c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8006272:	2300      	movs	r3, #0
 8006274:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8006276:	f000 fb3f 	bl	80068f8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800627a:	4b12      	ldr	r3, [pc, #72]	@ (80062c4 <xTimerCreateTimerTask+0x58>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00b      	beq.n	800629a <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8006282:	4b11      	ldr	r3, [pc, #68]	@ (80062c8 <xTimerCreateTimerTask+0x5c>)
 8006284:	9301      	str	r3, [sp, #4]
 8006286:	2302      	movs	r3, #2
 8006288:	9300      	str	r3, [sp, #0]
 800628a:	2300      	movs	r3, #0
 800628c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8006290:	490e      	ldr	r1, [pc, #56]	@ (80062cc <xTimerCreateTimerTask+0x60>)
 8006292:	480f      	ldr	r0, [pc, #60]	@ (80062d0 <xTimerCreateTimerTask+0x64>)
 8006294:	f7fe ff78 	bl	8005188 <xTaskCreate>
 8006298:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10b      	bne.n	80062b8 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80062a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a4:	f383 8811 	msr	BASEPRI, r3
 80062a8:	f3bf 8f6f 	isb	sy
 80062ac:	f3bf 8f4f 	dsb	sy
 80062b0:	603b      	str	r3, [r7, #0]
    }
 80062b2:	bf00      	nop
 80062b4:	bf00      	nop
 80062b6:	e7fd      	b.n	80062b4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80062b8:	687b      	ldr	r3, [r7, #4]
    }
 80062ba:	4618      	mov	r0, r3
 80062bc:	3708      	adds	r7, #8
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	2000029c 	.word	0x2000029c
 80062c8:	200002a0 	.word	0x200002a0
 80062cc:	080074cc 	.word	0x080074cc
 80062d0:	080064c9 	.word	0x080064c9

080062d4 <xTimerCreate>:
        TimerHandle_t xTimerCreate( const char * const pcTimerName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                                    const TickType_t xTimerPeriodInTicks,
                                    const UBaseType_t uxAutoReload,
                                    void * const pvTimerID,
                                    TimerCallbackFunction_t pxCallbackFunction )
        {
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b088      	sub	sp, #32
 80062d8:	af02      	add	r7, sp, #8
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
 80062e0:	603b      	str	r3, [r7, #0]
            Timer_t * pxNewTimer;

            pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80062e2:	202c      	movs	r0, #44	@ 0x2c
 80062e4:	f000 fdbc 	bl	8006e60 <pvPortMalloc>
 80062e8:	6178      	str	r0, [r7, #20]

            if( pxNewTimer != NULL )
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d00d      	beq.n	800630c <xTimerCreate+0x38>
            {
                /* Status is thus far zero as the timer is not created statically
                 * and has not been started.  The auto-reload bit may get set in
                 * prvInitialiseNewTimer. */
                pxNewTimer->ucStatus = 0x00;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	2200      	movs	r2, #0
 80062f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	9301      	str	r3, [sp, #4]
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	68b9      	ldr	r1, [r7, #8]
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f000 f805 	bl	8006316 <prvInitialiseNewTimer>
            }

            return pxNewTimer;
 800630c:	697b      	ldr	r3, [r7, #20]
        }
 800630e:	4618      	mov	r0, r3
 8006310:	3718      	adds	r7, #24
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <prvInitialiseNewTimer>:
                                       const TickType_t xTimerPeriodInTicks,
                                       const UBaseType_t uxAutoReload,
                                       void * const pvTimerID,
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer )
    {
 8006316:	b580      	push	{r7, lr}
 8006318:	b086      	sub	sp, #24
 800631a:	af00      	add	r7, sp, #0
 800631c:	60f8      	str	r0, [r7, #12]
 800631e:	60b9      	str	r1, [r7, #8]
 8006320:	607a      	str	r2, [r7, #4]
 8006322:	603b      	str	r3, [r7, #0]
        /* 0 is not a valid value for xTimerPeriodInTicks. */
        configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10b      	bne.n	8006342 <prvInitialiseNewTimer+0x2c>
        __asm volatile
 800632a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	617b      	str	r3, [r7, #20]
    }
 800633c:	bf00      	nop
 800633e:	bf00      	nop
 8006340:	e7fd      	b.n	800633e <prvInitialiseNewTimer+0x28>

        if( pxNewTimer != NULL )
 8006342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006344:	2b00      	cmp	r3, #0
 8006346:	d01e      	beq.n	8006386 <prvInitialiseNewTimer+0x70>
        {
            /* Ensure the infrastructure used by the timer service task has been
             * created/initialised. */
            prvCheckForValidListAndQueue();
 8006348:	f000 fad6 	bl	80068f8 <prvCheckForValidListAndQueue>

            /* Initialise the timer structure members using the function
             * parameters. */
            pxNewTimer->pcTimerName = pcTimerName;
 800634c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	601a      	str	r2, [r3, #0]
            pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	619a      	str	r2, [r3, #24]
            pxNewTimer->pvTimerID = pvTimerID;
 8006358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635a:	683a      	ldr	r2, [r7, #0]
 800635c:	61da      	str	r2, [r3, #28]
            pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800635e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006360:	6a3a      	ldr	r2, [r7, #32]
 8006362:	621a      	str	r2, [r3, #32]
            vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006366:	3304      	adds	r3, #4
 8006368:	4618      	mov	r0, r3
 800636a:	f7fe f8e1 	bl	8004530 <vListInitialiseItem>

            if( uxAutoReload != pdFALSE )
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d008      	beq.n	8006386 <prvInitialiseNewTimer+0x70>
            {
                pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006376:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800637a:	f043 0304 	orr.w	r3, r3, #4
 800637e:	b2da      	uxtb	r2, r3
 8006380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006382:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            }

            traceTIMER_CREATE( pxNewTimer );
        }
    }
 8006386:	bf00      	nop
 8006388:	3718      	adds	r7, #24
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
	...

08006390 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8006390:	b580      	push	{r7, lr}
 8006392:	b08a      	sub	sp, #40	@ 0x28
 8006394:	af00      	add	r7, sp, #0
 8006396:	60f8      	str	r0, [r7, #12]
 8006398:	60b9      	str	r1, [r7, #8]
 800639a:	607a      	str	r2, [r7, #4]
 800639c:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 800639e:	2300      	movs	r3, #0
 80063a0:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d10b      	bne.n	80063c0 <xTimerGenericCommand+0x30>
        __asm volatile
 80063a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ac:	f383 8811 	msr	BASEPRI, r3
 80063b0:	f3bf 8f6f 	isb	sy
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	623b      	str	r3, [r7, #32]
    }
 80063ba:	bf00      	nop
 80063bc:	bf00      	nop
 80063be:	e7fd      	b.n	80063bc <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 80063c0:	4b19      	ldr	r3, [pc, #100]	@ (8006428 <xTimerGenericCommand+0x98>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d02a      	beq.n	800641e <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2b05      	cmp	r3, #5
 80063d8:	dc18      	bgt.n	800640c <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80063da:	f7ff fbeb 	bl	8005bb4 <xTaskGetSchedulerState>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b02      	cmp	r3, #2
 80063e2:	d109      	bne.n	80063f8 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80063e4:	4b10      	ldr	r3, [pc, #64]	@ (8006428 <xTimerGenericCommand+0x98>)
 80063e6:	6818      	ldr	r0, [r3, #0]
 80063e8:	f107 0114 	add.w	r1, r7, #20
 80063ec:	2300      	movs	r3, #0
 80063ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063f0:	f7fe fa14 	bl	800481c <xQueueGenericSend>
 80063f4:	6278      	str	r0, [r7, #36]	@ 0x24
 80063f6:	e012      	b.n	800641e <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80063f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006428 <xTimerGenericCommand+0x98>)
 80063fa:	6818      	ldr	r0, [r3, #0]
 80063fc:	f107 0114 	add.w	r1, r7, #20
 8006400:	2300      	movs	r3, #0
 8006402:	2200      	movs	r2, #0
 8006404:	f7fe fa0a 	bl	800481c <xQueueGenericSend>
 8006408:	6278      	str	r0, [r7, #36]	@ 0x24
 800640a:	e008      	b.n	800641e <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800640c:	4b06      	ldr	r3, [pc, #24]	@ (8006428 <xTimerGenericCommand+0x98>)
 800640e:	6818      	ldr	r0, [r3, #0]
 8006410:	f107 0114 	add.w	r1, r7, #20
 8006414:	2300      	movs	r3, #0
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	f7fe faea 	bl	80049f0 <xQueueGenericSendFromISR>
 800641c:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800641e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8006420:	4618      	mov	r0, r3
 8006422:	3728      	adds	r7, #40	@ 0x28
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	2000029c 	.word	0x2000029c

0800642c <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 800642c:	b580      	push	{r7, lr}
 800642e:	b088      	sub	sp, #32
 8006430:	af02      	add	r7, sp, #8
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006436:	4b23      	ldr	r3, [pc, #140]	@ (80064c4 <prvProcessExpiredTimer+0x98>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	3304      	adds	r3, #4
 8006444:	4618      	mov	r0, r3
 8006446:	f7fe f8dd 	bl	8004604 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006450:	f003 0304 	and.w	r3, r3, #4
 8006454:	2b00      	cmp	r3, #0
 8006456:	d023      	beq.n	80064a0 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	699a      	ldr	r2, [r3, #24]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	18d1      	adds	r1, r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	683a      	ldr	r2, [r7, #0]
 8006464:	6978      	ldr	r0, [r7, #20]
 8006466:	f000 f8d5 	bl	8006614 <prvInsertTimerInActiveList>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d020      	beq.n	80064b2 <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006470:	2300      	movs	r3, #0
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	2300      	movs	r3, #0
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	2100      	movs	r1, #0
 800647a:	6978      	ldr	r0, [r7, #20]
 800647c:	f7ff ff88 	bl	8006390 <xTimerGenericCommand>
 8006480:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d114      	bne.n	80064b2 <prvProcessExpiredTimer+0x86>
        __asm volatile
 8006488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648c:	f383 8811 	msr	BASEPRI, r3
 8006490:	f3bf 8f6f 	isb	sy
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	60fb      	str	r3, [r7, #12]
    }
 800649a:	bf00      	nop
 800649c:	bf00      	nop
 800649e:	e7fd      	b.n	800649c <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80064a6:	f023 0301 	bic.w	r3, r3, #1
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	6978      	ldr	r0, [r7, #20]
 80064b8:	4798      	blx	r3
    }
 80064ba:	bf00      	nop
 80064bc:	3718      	adds	r7, #24
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
 80064c2:	bf00      	nop
 80064c4:	20000294 	.word	0x20000294

080064c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064d0:	f107 0308 	add.w	r3, r7, #8
 80064d4:	4618      	mov	r0, r3
 80064d6:	f000 f859 	bl	800658c <prvGetNextExpireTime>
 80064da:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	4619      	mov	r1, r3
 80064e0:	68f8      	ldr	r0, [r7, #12]
 80064e2:	f000 f805 	bl	80064f0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80064e6:	f000 f8d7 	bl	8006698 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80064ea:	bf00      	nop
 80064ec:	e7f0      	b.n	80064d0 <prvTimerTask+0x8>
	...

080064f0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b084      	sub	sp, #16
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80064fa:	f7fe ffcf 	bl	800549c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064fe:	f107 0308 	add.w	r3, r7, #8
 8006502:	4618      	mov	r0, r3
 8006504:	f000 f866 	bl	80065d4 <prvSampleTimeNow>
 8006508:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d130      	bne.n	8006572 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10a      	bne.n	800652c <prvProcessTimerOrBlockTask+0x3c>
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	429a      	cmp	r2, r3
 800651c:	d806      	bhi.n	800652c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800651e:	f7fe ffcb 	bl	80054b8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006522:	68f9      	ldr	r1, [r7, #12]
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7ff ff81 	bl	800642c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800652a:	e024      	b.n	8006576 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d008      	beq.n	8006544 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006532:	4b13      	ldr	r3, [pc, #76]	@ (8006580 <prvProcessTimerOrBlockTask+0x90>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <prvProcessTimerOrBlockTask+0x50>
 800653c:	2301      	movs	r3, #1
 800653e:	e000      	b.n	8006542 <prvProcessTimerOrBlockTask+0x52>
 8006540:	2300      	movs	r3, #0
 8006542:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006544:	4b0f      	ldr	r3, [pc, #60]	@ (8006584 <prvProcessTimerOrBlockTask+0x94>)
 8006546:	6818      	ldr	r0, [r3, #0]
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	683a      	ldr	r2, [r7, #0]
 8006550:	4619      	mov	r1, r3
 8006552:	f7fe fde5 	bl	8005120 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8006556:	f7fe ffaf 	bl	80054b8 <xTaskResumeAll>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10a      	bne.n	8006576 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8006560:	4b09      	ldr	r3, [pc, #36]	@ (8006588 <prvProcessTimerOrBlockTask+0x98>)
 8006562:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006566:	601a      	str	r2, [r3, #0]
 8006568:	f3bf 8f4f 	dsb	sy
 800656c:	f3bf 8f6f 	isb	sy
    }
 8006570:	e001      	b.n	8006576 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8006572:	f7fe ffa1 	bl	80054b8 <xTaskResumeAll>
    }
 8006576:	bf00      	nop
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	20000298 	.word	0x20000298
 8006584:	2000029c 	.word	0x2000029c
 8006588:	e000ed04 	.word	0xe000ed04

0800658c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006594:	4b0e      	ldr	r3, [pc, #56]	@ (80065d0 <prvGetNextExpireTime+0x44>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <prvGetNextExpireTime+0x16>
 800659e:	2201      	movs	r2, #1
 80065a0:	e000      	b.n	80065a4 <prvGetNextExpireTime+0x18>
 80065a2:	2200      	movs	r2, #0
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d105      	bne.n	80065bc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065b0:	4b07      	ldr	r3, [pc, #28]	@ (80065d0 <prvGetNextExpireTime+0x44>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	60fb      	str	r3, [r7, #12]
 80065ba:	e001      	b.n	80065c0 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80065bc:	2300      	movs	r3, #0
 80065be:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80065c0:	68fb      	ldr	r3, [r7, #12]
    }
 80065c2:	4618      	mov	r0, r3
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	20000294 	.word	0x20000294

080065d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80065dc:	f7fe fffc 	bl	80055d8 <xTaskGetTickCount>
 80065e0:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80065e2:	4b0b      	ldr	r3, [pc, #44]	@ (8006610 <prvSampleTimeNow+0x3c>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68fa      	ldr	r2, [r7, #12]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d205      	bcs.n	80065f8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80065ec:	f000 f91e 	bl	800682c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	601a      	str	r2, [r3, #0]
 80065f6:	e002      	b.n	80065fe <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80065fe:	4a04      	ldr	r2, [pc, #16]	@ (8006610 <prvSampleTimeNow+0x3c>)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8006604:	68fb      	ldr	r3, [r7, #12]
    }
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	200002a4 	.word	0x200002a4

08006614 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8006614:	b580      	push	{r7, lr}
 8006616:	b086      	sub	sp, #24
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
 8006620:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8006622:	2300      	movs	r3, #0
 8006624:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	68ba      	ldr	r2, [r7, #8]
 800662a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	68fa      	ldr	r2, [r7, #12]
 8006630:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8006632:	68ba      	ldr	r2, [r7, #8]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	429a      	cmp	r2, r3
 8006638:	d812      	bhi.n	8006660 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	1ad2      	subs	r2, r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	699b      	ldr	r3, [r3, #24]
 8006644:	429a      	cmp	r2, r3
 8006646:	d302      	bcc.n	800664e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8006648:	2301      	movs	r3, #1
 800664a:	617b      	str	r3, [r7, #20]
 800664c:	e01b      	b.n	8006686 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800664e:	4b10      	ldr	r3, [pc, #64]	@ (8006690 <prvInsertTimerInActiveList+0x7c>)
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	3304      	adds	r3, #4
 8006656:	4619      	mov	r1, r3
 8006658:	4610      	mov	r0, r2
 800665a:	f7fd ff9a 	bl	8004592 <vListInsert>
 800665e:	e012      	b.n	8006686 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	429a      	cmp	r2, r3
 8006666:	d206      	bcs.n	8006676 <prvInsertTimerInActiveList+0x62>
 8006668:	68ba      	ldr	r2, [r7, #8]
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	429a      	cmp	r2, r3
 800666e:	d302      	bcc.n	8006676 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8006670:	2301      	movs	r3, #1
 8006672:	617b      	str	r3, [r7, #20]
 8006674:	e007      	b.n	8006686 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006676:	4b07      	ldr	r3, [pc, #28]	@ (8006694 <prvInsertTimerInActiveList+0x80>)
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	3304      	adds	r3, #4
 800667e:	4619      	mov	r1, r3
 8006680:	4610      	mov	r0, r2
 8006682:	f7fd ff86 	bl	8004592 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8006686:	697b      	ldr	r3, [r7, #20]
    }
 8006688:	4618      	mov	r0, r3
 800668a:	3718      	adds	r7, #24
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}
 8006690:	20000298 	.word	0x20000298
 8006694:	20000294 	.word	0x20000294

08006698 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8006698:	b580      	push	{r7, lr}
 800669a:	b08c      	sub	sp, #48	@ 0x30
 800669c:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800669e:	e0b2      	b.n	8006806 <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	f2c0 80af 	blt.w	8006806 <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80066ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ae:	695b      	ldr	r3, [r3, #20]
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d004      	beq.n	80066be <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b6:	3304      	adds	r3, #4
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7fd ffa3 	bl	8004604 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066be:	1d3b      	adds	r3, r7, #4
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7ff ff87 	bl	80065d4 <prvSampleTimeNow>
 80066c6:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2b09      	cmp	r3, #9
 80066cc:	f200 8098 	bhi.w	8006800 <prvProcessReceivedCommands+0x168>
 80066d0:	a201      	add	r2, pc, #4	@ (adr r2, 80066d8 <prvProcessReceivedCommands+0x40>)
 80066d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d6:	bf00      	nop
 80066d8:	08006701 	.word	0x08006701
 80066dc:	08006701 	.word	0x08006701
 80066e0:	08006701 	.word	0x08006701
 80066e4:	08006777 	.word	0x08006777
 80066e8:	0800678b 	.word	0x0800678b
 80066ec:	080067d7 	.word	0x080067d7
 80066f0:	08006701 	.word	0x08006701
 80066f4:	08006701 	.word	0x08006701
 80066f8:	08006777 	.word	0x08006777
 80066fc:	0800678b 	.word	0x0800678b
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006702:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006706:	f043 0301 	orr.w	r3, r3, #1
 800670a:	b2da      	uxtb	r2, r3
 800670c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800670e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	18d1      	adds	r1, r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6a3a      	ldr	r2, [r7, #32]
 800671e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006720:	f7ff ff78 	bl	8006614 <prvInsertTimerInActiveList>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d06c      	beq.n	8006804 <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800672a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006730:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006734:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006738:	f003 0304 	and.w	r3, r3, #4
 800673c:	2b00      	cmp	r3, #0
 800673e:	d061      	beq.n	8006804 <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	441a      	add	r2, r3
 8006748:	2300      	movs	r3, #0
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	2300      	movs	r3, #0
 800674e:	2100      	movs	r1, #0
 8006750:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006752:	f7ff fe1d 	bl	8006390 <xTimerGenericCommand>
 8006756:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d152      	bne.n	8006804 <prvProcessReceivedCommands+0x16c>
        __asm volatile
 800675e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006762:	f383 8811 	msr	BASEPRI, r3
 8006766:	f3bf 8f6f 	isb	sy
 800676a:	f3bf 8f4f 	dsb	sy
 800676e:	61bb      	str	r3, [r7, #24]
    }
 8006770:	bf00      	nop
 8006772:	bf00      	nop
 8006774:	e7fd      	b.n	8006772 <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006778:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800677c:	f023 0301 	bic.w	r3, r3, #1
 8006780:	b2da      	uxtb	r2, r3
 8006782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006784:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8006788:	e03d      	b.n	8006806 <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800678a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800678c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006790:	f043 0301 	orr.w	r3, r3, #1
 8006794:	b2da      	uxtb	r2, r3
 8006796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006798:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a0:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80067a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a4:	699b      	ldr	r3, [r3, #24]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10b      	bne.n	80067c2 <prvProcessReceivedCommands+0x12a>
        __asm volatile
 80067aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ae:	f383 8811 	msr	BASEPRI, r3
 80067b2:	f3bf 8f6f 	isb	sy
 80067b6:	f3bf 8f4f 	dsb	sy
 80067ba:	617b      	str	r3, [r7, #20]
    }
 80067bc:	bf00      	nop
 80067be:	bf00      	nop
 80067c0:	e7fd      	b.n	80067be <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80067c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c4:	699a      	ldr	r2, [r3, #24]
 80067c6:	6a3b      	ldr	r3, [r7, #32]
 80067c8:	18d1      	adds	r1, r2, r3
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	6a3a      	ldr	r2, [r7, #32]
 80067ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80067d0:	f7ff ff20 	bl	8006614 <prvInsertTimerInActiveList>
                        break;
 80067d4:	e017      	b.n	8006806 <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80067d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067dc:	f003 0302 	and.w	r3, r3, #2
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d103      	bne.n	80067ec <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 80067e4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80067e6:	f000 fc1d 	bl	8007024 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80067ea:	e00c      	b.n	8006806 <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80067ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80067f2:	f023 0301 	bic.w	r3, r3, #1
 80067f6:	b2da      	uxtb	r2, r3
 80067f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80067fe:	e002      	b.n	8006806 <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8006800:	bf00      	nop
 8006802:	e000      	b.n	8006806 <prvProcessReceivedCommands+0x16e>
                        break;
 8006804:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006806:	4b08      	ldr	r3, [pc, #32]	@ (8006828 <prvProcessReceivedCommands+0x190>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f107 0108 	add.w	r1, r7, #8
 800680e:	2200      	movs	r2, #0
 8006810:	4618      	mov	r0, r3
 8006812:	f7fe f99b 	bl	8004b4c <xQueueReceive>
 8006816:	4603      	mov	r3, r0
 8006818:	2b00      	cmp	r3, #0
 800681a:	f47f af41 	bne.w	80066a0 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800681e:	bf00      	nop
 8006820:	bf00      	nop
 8006822:	3728      	adds	r7, #40	@ 0x28
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	2000029c 	.word	0x2000029c

0800682c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800682c:	b580      	push	{r7, lr}
 800682e:	b088      	sub	sp, #32
 8006830:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006832:	e049      	b.n	80068c8 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006834:	4b2e      	ldr	r3, [pc, #184]	@ (80068f0 <prvSwitchTimerLists+0xc4>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800683e:	4b2c      	ldr	r3, [pc, #176]	@ (80068f0 <prvSwitchTimerLists+0xc4>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	3304      	adds	r3, #4
 800684c:	4618      	mov	r0, r3
 800684e:	f7fd fed9 	bl	8004604 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	68f8      	ldr	r0, [r7, #12]
 8006858:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006860:	f003 0304 	and.w	r3, r3, #4
 8006864:	2b00      	cmp	r3, #0
 8006866:	d02f      	beq.n	80068c8 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	699b      	ldr	r3, [r3, #24]
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	4413      	add	r3, r2
 8006870:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	429a      	cmp	r2, r3
 8006878:	d90e      	bls.n	8006898 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	68ba      	ldr	r2, [r7, #8]
 800687e:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006886:	4b1a      	ldr	r3, [pc, #104]	@ (80068f0 <prvSwitchTimerLists+0xc4>)
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	3304      	adds	r3, #4
 800688e:	4619      	mov	r1, r3
 8006890:	4610      	mov	r0, r2
 8006892:	f7fd fe7e 	bl	8004592 <vListInsert>
 8006896:	e017      	b.n	80068c8 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006898:	2300      	movs	r3, #0
 800689a:	9300      	str	r3, [sp, #0]
 800689c:	2300      	movs	r3, #0
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	2100      	movs	r1, #0
 80068a2:	68f8      	ldr	r0, [r7, #12]
 80068a4:	f7ff fd74 	bl	8006390 <xTimerGenericCommand>
 80068a8:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10b      	bne.n	80068c8 <prvSwitchTimerLists+0x9c>
        __asm volatile
 80068b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	603b      	str	r3, [r7, #0]
    }
 80068c2:	bf00      	nop
 80068c4:	bf00      	nop
 80068c6:	e7fd      	b.n	80068c4 <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068c8:	4b09      	ldr	r3, [pc, #36]	@ (80068f0 <prvSwitchTimerLists+0xc4>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1b0      	bne.n	8006834 <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80068d2:	4b07      	ldr	r3, [pc, #28]	@ (80068f0 <prvSwitchTimerLists+0xc4>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80068d8:	4b06      	ldr	r3, [pc, #24]	@ (80068f4 <prvSwitchTimerLists+0xc8>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a04      	ldr	r2, [pc, #16]	@ (80068f0 <prvSwitchTimerLists+0xc4>)
 80068de:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80068e0:	4a04      	ldr	r2, [pc, #16]	@ (80068f4 <prvSwitchTimerLists+0xc8>)
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	6013      	str	r3, [r2, #0]
    }
 80068e6:	bf00      	nop
 80068e8:	3718      	adds	r7, #24
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	20000294 	.word	0x20000294
 80068f4:	20000298 	.word	0x20000298

080068f8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80068f8:	b580      	push	{r7, lr}
 80068fa:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80068fc:	f000 f986 	bl	8006c0c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8006900:	4b12      	ldr	r3, [pc, #72]	@ (800694c <prvCheckForValidListAndQueue+0x54>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d11d      	bne.n	8006944 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8006908:	4811      	ldr	r0, [pc, #68]	@ (8006950 <prvCheckForValidListAndQueue+0x58>)
 800690a:	f7fd fdf1 	bl	80044f0 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800690e:	4811      	ldr	r0, [pc, #68]	@ (8006954 <prvCheckForValidListAndQueue+0x5c>)
 8006910:	f7fd fdee 	bl	80044f0 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8006914:	4b10      	ldr	r3, [pc, #64]	@ (8006958 <prvCheckForValidListAndQueue+0x60>)
 8006916:	4a0e      	ldr	r2, [pc, #56]	@ (8006950 <prvCheckForValidListAndQueue+0x58>)
 8006918:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800691a:	4b10      	ldr	r3, [pc, #64]	@ (800695c <prvCheckForValidListAndQueue+0x64>)
 800691c:	4a0d      	ldr	r2, [pc, #52]	@ (8006954 <prvCheckForValidListAndQueue+0x5c>)
 800691e:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8006920:	2200      	movs	r2, #0
 8006922:	210c      	movs	r1, #12
 8006924:	200a      	movs	r0, #10
 8006926:	f7fd fef3 	bl	8004710 <xQueueGenericCreate>
 800692a:	4603      	mov	r3, r0
 800692c:	4a07      	ldr	r2, [pc, #28]	@ (800694c <prvCheckForValidListAndQueue+0x54>)
 800692e:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8006930:	4b06      	ldr	r3, [pc, #24]	@ (800694c <prvCheckForValidListAndQueue+0x54>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d005      	beq.n	8006944 <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006938:	4b04      	ldr	r3, [pc, #16]	@ (800694c <prvCheckForValidListAndQueue+0x54>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	4908      	ldr	r1, [pc, #32]	@ (8006960 <prvCheckForValidListAndQueue+0x68>)
 800693e:	4618      	mov	r0, r3
 8006940:	f7fe fbc4 	bl	80050cc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8006944:	f000 f994 	bl	8006c70 <vPortExitCritical>
    }
 8006948:	bf00      	nop
 800694a:	bd80      	pop	{r7, pc}
 800694c:	2000029c 	.word	0x2000029c
 8006950:	2000026c 	.word	0x2000026c
 8006954:	20000280 	.word	0x20000280
 8006958:	20000294 	.word	0x20000294
 800695c:	20000298 	.word	0x20000298
 8006960:	080074d4 	.word	0x080074d4

08006964 <pvTimerGetTimerID>:
        return xReturn;
    } /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

    void * pvTimerGetTimerID( const TimerHandle_t xTimer )
    {
 8006964:	b580      	push	{r7, lr}
 8006966:	b086      	sub	sp, #24
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
        Timer_t * const pxTimer = xTimer;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	617b      	str	r3, [r7, #20]
        void * pvReturn;

        configASSERT( xTimer );
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d10b      	bne.n	800698e <pvTimerGetTimerID+0x2a>
        __asm volatile
 8006976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800697a:	f383 8811 	msr	BASEPRI, r3
 800697e:	f3bf 8f6f 	isb	sy
 8006982:	f3bf 8f4f 	dsb	sy
 8006986:	60fb      	str	r3, [r7, #12]
    }
 8006988:	bf00      	nop
 800698a:	bf00      	nop
 800698c:	e7fd      	b.n	800698a <pvTimerGetTimerID+0x26>

        taskENTER_CRITICAL();
 800698e:	f000 f93d 	bl	8006c0c <vPortEnterCritical>
        {
            pvReturn = pxTimer->pvTimerID;
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	613b      	str	r3, [r7, #16]
        }
        taskEXIT_CRITICAL();
 8006998:	f000 f96a 	bl	8006c70 <vPortExitCritical>

        return pvReturn;
 800699c:	693b      	ldr	r3, [r7, #16]
    }
 800699e:	4618      	mov	r0, r3
 80069a0:	3718      	adds	r7, #24
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
	...

080069a8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80069a8:	b480      	push	{r7}
 80069aa:	b085      	sub	sp, #20
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	3b04      	subs	r3, #4
 80069b8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80069c0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	3b04      	subs	r3, #4
 80069c6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	f023 0201 	bic.w	r2, r3, #1
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	3b04      	subs	r3, #4
 80069d6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80069d8:	4a0c      	ldr	r2, [pc, #48]	@ (8006a0c <pxPortInitialiseStack+0x64>)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	3b14      	subs	r3, #20
 80069e2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	3b04      	subs	r3, #4
 80069ee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f06f 0202 	mvn.w	r2, #2
 80069f6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	3b20      	subs	r3, #32
 80069fc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80069fe:	68fb      	ldr	r3, [r7, #12]
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr
 8006a0c:	08006a11 	.word	0x08006a11

08006a10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a10:	b480      	push	{r7}
 8006a12:	b085      	sub	sp, #20
 8006a14:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8006a16:	2300      	movs	r3, #0
 8006a18:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8006a1a:	4b13      	ldr	r3, [pc, #76]	@ (8006a68 <prvTaskExitError+0x58>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a22:	d00b      	beq.n	8006a3c <prvTaskExitError+0x2c>
        __asm volatile
 8006a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	60fb      	str	r3, [r7, #12]
    }
 8006a36:	bf00      	nop
 8006a38:	bf00      	nop
 8006a3a:	e7fd      	b.n	8006a38 <prvTaskExitError+0x28>
        __asm volatile
 8006a3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a40:	f383 8811 	msr	BASEPRI, r3
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	60bb      	str	r3, [r7, #8]
    }
 8006a4e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8006a50:	bf00      	nop
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d0fc      	beq.n	8006a52 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8006a58:	bf00      	nop
 8006a5a:	bf00      	nop
 8006a5c:	3714      	adds	r7, #20
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	20000020 	.word	0x20000020
 8006a6c:	00000000 	.word	0x00000000

08006a70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8006a70:	4b07      	ldr	r3, [pc, #28]	@ (8006a90 <pxCurrentTCBConst2>)
 8006a72:	6819      	ldr	r1, [r3, #0]
 8006a74:	6808      	ldr	r0, [r1, #0]
 8006a76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a7a:	f380 8809 	msr	PSP, r0
 8006a7e:	f3bf 8f6f 	isb	sy
 8006a82:	f04f 0000 	mov.w	r0, #0
 8006a86:	f380 8811 	msr	BASEPRI, r0
 8006a8a:	4770      	bx	lr
 8006a8c:	f3af 8000 	nop.w

08006a90 <pxCurrentTCBConst2>:
 8006a90:	20000168 	.word	0x20000168
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop

08006a98 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8006a98:	4808      	ldr	r0, [pc, #32]	@ (8006abc <prvPortStartFirstTask+0x24>)
 8006a9a:	6800      	ldr	r0, [r0, #0]
 8006a9c:	6800      	ldr	r0, [r0, #0]
 8006a9e:	f380 8808 	msr	MSP, r0
 8006aa2:	f04f 0000 	mov.w	r0, #0
 8006aa6:	f380 8814 	msr	CONTROL, r0
 8006aaa:	b662      	cpsie	i
 8006aac:	b661      	cpsie	f
 8006aae:	f3bf 8f4f 	dsb	sy
 8006ab2:	f3bf 8f6f 	isb	sy
 8006ab6:	df00      	svc	0
 8006ab8:	bf00      	nop
 8006aba:	0000      	.short	0x0000
 8006abc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8006ac0:	bf00      	nop
 8006ac2:	bf00      	nop

08006ac4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b086      	sub	sp, #24
 8006ac8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006aca:	4b47      	ldr	r3, [pc, #284]	@ (8006be8 <xPortStartScheduler+0x124>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a47      	ldr	r2, [pc, #284]	@ (8006bec <xPortStartScheduler+0x128>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d10b      	bne.n	8006aec <xPortStartScheduler+0x28>
        __asm volatile
 8006ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad8:	f383 8811 	msr	BASEPRI, r3
 8006adc:	f3bf 8f6f 	isb	sy
 8006ae0:	f3bf 8f4f 	dsb	sy
 8006ae4:	60fb      	str	r3, [r7, #12]
    }
 8006ae6:	bf00      	nop
 8006ae8:	bf00      	nop
 8006aea:	e7fd      	b.n	8006ae8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006aec:	4b3e      	ldr	r3, [pc, #248]	@ (8006be8 <xPortStartScheduler+0x124>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a3f      	ldr	r2, [pc, #252]	@ (8006bf0 <xPortStartScheduler+0x12c>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d10b      	bne.n	8006b0e <xPortStartScheduler+0x4a>
        __asm volatile
 8006af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	613b      	str	r3, [r7, #16]
    }
 8006b08:	bf00      	nop
 8006b0a:	bf00      	nop
 8006b0c:	e7fd      	b.n	8006b0a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b0e:	4b39      	ldr	r3, [pc, #228]	@ (8006bf4 <xPortStartScheduler+0x130>)
 8006b10:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b1a:	697b      	ldr	r3, [r7, #20]
 8006b1c:	22ff      	movs	r2, #255	@ 0xff
 8006b1e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b28:	78fb      	ldrb	r3, [r7, #3]
 8006b2a:	b2db      	uxtb	r3, r3
 8006b2c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006b30:	b2da      	uxtb	r2, r3
 8006b32:	4b31      	ldr	r3, [pc, #196]	@ (8006bf8 <xPortStartScheduler+0x134>)
 8006b34:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b36:	4b31      	ldr	r3, [pc, #196]	@ (8006bfc <xPortStartScheduler+0x138>)
 8006b38:	2207      	movs	r2, #7
 8006b3a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b3c:	e009      	b.n	8006b52 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8006b3e:	4b2f      	ldr	r3, [pc, #188]	@ (8006bfc <xPortStartScheduler+0x138>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	3b01      	subs	r3, #1
 8006b44:	4a2d      	ldr	r2, [pc, #180]	@ (8006bfc <xPortStartScheduler+0x138>)
 8006b46:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006b48:	78fb      	ldrb	r3, [r7, #3]
 8006b4a:	b2db      	uxtb	r3, r3
 8006b4c:	005b      	lsls	r3, r3, #1
 8006b4e:	b2db      	uxtb	r3, r3
 8006b50:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b52:	78fb      	ldrb	r3, [r7, #3]
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b5a:	2b80      	cmp	r3, #128	@ 0x80
 8006b5c:	d0ef      	beq.n	8006b3e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006b5e:	4b27      	ldr	r3, [pc, #156]	@ (8006bfc <xPortStartScheduler+0x138>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f1c3 0307 	rsb	r3, r3, #7
 8006b66:	2b04      	cmp	r3, #4
 8006b68:	d00b      	beq.n	8006b82 <xPortStartScheduler+0xbe>
        __asm volatile
 8006b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b6e:	f383 8811 	msr	BASEPRI, r3
 8006b72:	f3bf 8f6f 	isb	sy
 8006b76:	f3bf 8f4f 	dsb	sy
 8006b7a:	60bb      	str	r3, [r7, #8]
    }
 8006b7c:	bf00      	nop
 8006b7e:	bf00      	nop
 8006b80:	e7fd      	b.n	8006b7e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006b82:	4b1e      	ldr	r3, [pc, #120]	@ (8006bfc <xPortStartScheduler+0x138>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	021b      	lsls	r3, r3, #8
 8006b88:	4a1c      	ldr	r2, [pc, #112]	@ (8006bfc <xPortStartScheduler+0x138>)
 8006b8a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006b8c:	4b1b      	ldr	r3, [pc, #108]	@ (8006bfc <xPortStartScheduler+0x138>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006b94:	4a19      	ldr	r2, [pc, #100]	@ (8006bfc <xPortStartScheduler+0x138>)
 8006b96:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	b2da      	uxtb	r2, r3
 8006b9c:	697b      	ldr	r3, [r7, #20]
 8006b9e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8006ba0:	4b17      	ldr	r3, [pc, #92]	@ (8006c00 <xPortStartScheduler+0x13c>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a16      	ldr	r2, [pc, #88]	@ (8006c00 <xPortStartScheduler+0x13c>)
 8006ba6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006baa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8006bac:	4b14      	ldr	r3, [pc, #80]	@ (8006c00 <xPortStartScheduler+0x13c>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a13      	ldr	r2, [pc, #76]	@ (8006c00 <xPortStartScheduler+0x13c>)
 8006bb2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006bb6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8006bb8:	f000 f8e0 	bl	8006d7c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8006bbc:	4b11      	ldr	r3, [pc, #68]	@ (8006c04 <xPortStartScheduler+0x140>)
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8006bc2:	f000 f8ff 	bl	8006dc4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006bc6:	4b10      	ldr	r3, [pc, #64]	@ (8006c08 <xPortStartScheduler+0x144>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a0f      	ldr	r2, [pc, #60]	@ (8006c08 <xPortStartScheduler+0x144>)
 8006bcc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8006bd0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8006bd2:	f7ff ff61 	bl	8006a98 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8006bd6:	f7fe fda5 	bl	8005724 <vTaskSwitchContext>
    prvTaskExitError();
 8006bda:	f7ff ff19 	bl	8006a10 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8006bde:	2300      	movs	r3, #0
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	3718      	adds	r7, #24
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	e000ed00 	.word	0xe000ed00
 8006bec:	410fc271 	.word	0x410fc271
 8006bf0:	410fc270 	.word	0x410fc270
 8006bf4:	e000e400 	.word	0xe000e400
 8006bf8:	200002a8 	.word	0x200002a8
 8006bfc:	200002ac 	.word	0x200002ac
 8006c00:	e000ed20 	.word	0xe000ed20
 8006c04:	20000020 	.word	0x20000020
 8006c08:	e000ef34 	.word	0xe000ef34

08006c0c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
        __asm volatile
 8006c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c16:	f383 8811 	msr	BASEPRI, r3
 8006c1a:	f3bf 8f6f 	isb	sy
 8006c1e:	f3bf 8f4f 	dsb	sy
 8006c22:	607b      	str	r3, [r7, #4]
    }
 8006c24:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006c26:	4b10      	ldr	r3, [pc, #64]	@ (8006c68 <vPortEnterCritical+0x5c>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	4a0e      	ldr	r2, [pc, #56]	@ (8006c68 <vPortEnterCritical+0x5c>)
 8006c2e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006c30:	4b0d      	ldr	r3, [pc, #52]	@ (8006c68 <vPortEnterCritical+0x5c>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b01      	cmp	r3, #1
 8006c36:	d110      	bne.n	8006c5a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c38:	4b0c      	ldr	r3, [pc, #48]	@ (8006c6c <vPortEnterCritical+0x60>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	b2db      	uxtb	r3, r3
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00b      	beq.n	8006c5a <vPortEnterCritical+0x4e>
        __asm volatile
 8006c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c46:	f383 8811 	msr	BASEPRI, r3
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	603b      	str	r3, [r7, #0]
    }
 8006c54:	bf00      	nop
 8006c56:	bf00      	nop
 8006c58:	e7fd      	b.n	8006c56 <vPortEnterCritical+0x4a>
    }
}
 8006c5a:	bf00      	nop
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	20000020 	.word	0x20000020
 8006c6c:	e000ed04 	.word	0xe000ed04

08006c70 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006c76:	4b12      	ldr	r3, [pc, #72]	@ (8006cc0 <vPortExitCritical+0x50>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10b      	bne.n	8006c96 <vPortExitCritical+0x26>
        __asm volatile
 8006c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	607b      	str	r3, [r7, #4]
    }
 8006c90:	bf00      	nop
 8006c92:	bf00      	nop
 8006c94:	e7fd      	b.n	8006c92 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006c96:	4b0a      	ldr	r3, [pc, #40]	@ (8006cc0 <vPortExitCritical+0x50>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	3b01      	subs	r3, #1
 8006c9c:	4a08      	ldr	r2, [pc, #32]	@ (8006cc0 <vPortExitCritical+0x50>)
 8006c9e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8006ca0:	4b07      	ldr	r3, [pc, #28]	@ (8006cc0 <vPortExitCritical+0x50>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d105      	bne.n	8006cb4 <vPortExitCritical+0x44>
 8006ca8:	2300      	movs	r3, #0
 8006caa:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	f383 8811 	msr	BASEPRI, r3
    }
 8006cb2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8006cb4:	bf00      	nop
 8006cb6:	370c      	adds	r7, #12
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbe:	4770      	bx	lr
 8006cc0:	20000020 	.word	0x20000020
	...

08006cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8006cd0:	f3ef 8009 	mrs	r0, PSP
 8006cd4:	f3bf 8f6f 	isb	sy
 8006cd8:	4b15      	ldr	r3, [pc, #84]	@ (8006d30 <pxCurrentTCBConst>)
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	f01e 0f10 	tst.w	lr, #16
 8006ce0:	bf08      	it	eq
 8006ce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006ce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cea:	6010      	str	r0, [r2, #0]
 8006cec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006cf0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8006cf4:	f380 8811 	msr	BASEPRI, r0
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	f7fe fd10 	bl	8005724 <vTaskSwitchContext>
 8006d04:	f04f 0000 	mov.w	r0, #0
 8006d08:	f380 8811 	msr	BASEPRI, r0
 8006d0c:	bc09      	pop	{r0, r3}
 8006d0e:	6819      	ldr	r1, [r3, #0]
 8006d10:	6808      	ldr	r0, [r1, #0]
 8006d12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d16:	f01e 0f10 	tst.w	lr, #16
 8006d1a:	bf08      	it	eq
 8006d1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d20:	f380 8809 	msr	PSP, r0
 8006d24:	f3bf 8f6f 	isb	sy
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	f3af 8000 	nop.w

08006d30 <pxCurrentTCBConst>:
 8006d30:	20000168 	.word	0x20000168
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006d34:	bf00      	nop
 8006d36:	bf00      	nop

08006d38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
        __asm volatile
 8006d3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d42:	f383 8811 	msr	BASEPRI, r3
 8006d46:	f3bf 8f6f 	isb	sy
 8006d4a:	f3bf 8f4f 	dsb	sy
 8006d4e:	607b      	str	r3, [r7, #4]
    }
 8006d50:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006d52:	f7fe fc51 	bl	80055f8 <xTaskIncrementTick>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d003      	beq.n	8006d64 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006d5c:	4b06      	ldr	r3, [pc, #24]	@ (8006d78 <SysTick_Handler+0x40>)
 8006d5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d62:	601a      	str	r2, [r3, #0]
 8006d64:	2300      	movs	r3, #0
 8006d66:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	f383 8811 	msr	BASEPRI, r3
    }
 8006d6e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8006d70:	bf00      	nop
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}
 8006d78:	e000ed04 	.word	0xe000ed04

08006d7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006d80:	4b0b      	ldr	r3, [pc, #44]	@ (8006db0 <vPortSetupTimerInterrupt+0x34>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006d86:	4b0b      	ldr	r3, [pc, #44]	@ (8006db4 <vPortSetupTimerInterrupt+0x38>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8006db8 <vPortSetupTimerInterrupt+0x3c>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a0a      	ldr	r2, [pc, #40]	@ (8006dbc <vPortSetupTimerInterrupt+0x40>)
 8006d92:	fba2 2303 	umull	r2, r3, r2, r3
 8006d96:	099b      	lsrs	r3, r3, #6
 8006d98:	4a09      	ldr	r2, [pc, #36]	@ (8006dc0 <vPortSetupTimerInterrupt+0x44>)
 8006d9a:	3b01      	subs	r3, #1
 8006d9c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006d9e:	4b04      	ldr	r3, [pc, #16]	@ (8006db0 <vPortSetupTimerInterrupt+0x34>)
 8006da0:	2207      	movs	r2, #7
 8006da2:	601a      	str	r2, [r3, #0]
}
 8006da4:	bf00      	nop
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	e000e010 	.word	0xe000e010
 8006db4:	e000e018 	.word	0xe000e018
 8006db8:	20000010 	.word	0x20000010
 8006dbc:	10624dd3 	.word	0x10624dd3
 8006dc0:	e000e014 	.word	0xe000e014

08006dc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8006dc4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8006dd4 <vPortEnableVFP+0x10>
 8006dc8:	6801      	ldr	r1, [r0, #0]
 8006dca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8006dce:	6001      	str	r1, [r0, #0]
 8006dd0:	4770      	bx	lr
 8006dd2:	0000      	.short	0x0000
 8006dd4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8006dd8:	bf00      	nop
 8006dda:	bf00      	nop

08006ddc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8006ddc:	b480      	push	{r7}
 8006dde:	b085      	sub	sp, #20
 8006de0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8006de2:	f3ef 8305 	mrs	r3, IPSR
 8006de6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2b0f      	cmp	r3, #15
 8006dec:	d915      	bls.n	8006e1a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006dee:	4a18      	ldr	r2, [pc, #96]	@ (8006e50 <vPortValidateInterruptPriority+0x74>)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	4413      	add	r3, r2
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006df8:	4b16      	ldr	r3, [pc, #88]	@ (8006e54 <vPortValidateInterruptPriority+0x78>)
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	7afa      	ldrb	r2, [r7, #11]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d20b      	bcs.n	8006e1a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8006e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	607b      	str	r3, [r7, #4]
    }
 8006e14:	bf00      	nop
 8006e16:	bf00      	nop
 8006e18:	e7fd      	b.n	8006e16 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8006e58 <vPortValidateInterruptPriority+0x7c>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006e22:	4b0e      	ldr	r3, [pc, #56]	@ (8006e5c <vPortValidateInterruptPriority+0x80>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d90b      	bls.n	8006e42 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8006e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e2e:	f383 8811 	msr	BASEPRI, r3
 8006e32:	f3bf 8f6f 	isb	sy
 8006e36:	f3bf 8f4f 	dsb	sy
 8006e3a:	603b      	str	r3, [r7, #0]
    }
 8006e3c:	bf00      	nop
 8006e3e:	bf00      	nop
 8006e40:	e7fd      	b.n	8006e3e <vPortValidateInterruptPriority+0x62>
    }
 8006e42:	bf00      	nop
 8006e44:	3714      	adds	r7, #20
 8006e46:	46bd      	mov	sp, r7
 8006e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4c:	4770      	bx	lr
 8006e4e:	bf00      	nop
 8006e50:	e000e3f0 	.word	0xe000e3f0
 8006e54:	200002a8 	.word	0x200002a8
 8006e58:	e000ed0c 	.word	0xe000ed0c
 8006e5c:	200002ac 	.word	0x200002ac

08006e60 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b08a      	sub	sp, #40	@ 0x28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8006e6c:	f7fe fb16 	bl	800549c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8006e70:	4b66      	ldr	r3, [pc, #408]	@ (800700c <pvPortMalloc+0x1ac>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d101      	bne.n	8006e7c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006e78:	f000 f938 	bl	80070ec <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006e7c:	4b64      	ldr	r3, [pc, #400]	@ (8007010 <pvPortMalloc+0x1b0>)
 8006e7e:	681a      	ldr	r2, [r3, #0]
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4013      	ands	r3, r2
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	f040 80a9 	bne.w	8006fdc <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d02e      	beq.n	8006eee <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8006e90:	2208      	movs	r2, #8
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8006e96:	687a      	ldr	r2, [r7, #4]
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d228      	bcs.n	8006eee <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 8006e9c:	2208      	movs	r2, #8
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f003 0307 	and.w	r3, r3, #7
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d022      	beq.n	8006ef4 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f023 0307 	bic.w	r3, r3, #7
 8006eb4:	3308      	adds	r3, #8
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	429a      	cmp	r2, r3
 8006eba:	d215      	bcs.n	8006ee8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f023 0307 	bic.w	r3, r3, #7
 8006ec2:	3308      	adds	r3, #8
 8006ec4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f003 0307 	and.w	r3, r3, #7
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d011      	beq.n	8006ef4 <pvPortMalloc+0x94>
        __asm volatile
 8006ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed4:	f383 8811 	msr	BASEPRI, r3
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	f3bf 8f4f 	dsb	sy
 8006ee0:	617b      	str	r3, [r7, #20]
    }
 8006ee2:	bf00      	nop
 8006ee4:	bf00      	nop
 8006ee6:	e7fd      	b.n	8006ee4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8006ee8:	2300      	movs	r3, #0
 8006eea:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006eec:	e002      	b.n	8006ef4 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	607b      	str	r3, [r7, #4]
 8006ef2:	e000      	b.n	8006ef6 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ef4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d06f      	beq.n	8006fdc <pvPortMalloc+0x17c>
 8006efc:	4b45      	ldr	r3, [pc, #276]	@ (8007014 <pvPortMalloc+0x1b4>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d86a      	bhi.n	8006fdc <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006f06:	4b44      	ldr	r3, [pc, #272]	@ (8007018 <pvPortMalloc+0x1b8>)
 8006f08:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8006f0a:	4b43      	ldr	r3, [pc, #268]	@ (8007018 <pvPortMalloc+0x1b8>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f10:	e004      	b.n	8006f1c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8006f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f14:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	687a      	ldr	r2, [r7, #4]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d903      	bls.n	8006f2e <pvPortMalloc+0xce>
 8006f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1f1      	bne.n	8006f12 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8006f2e:	4b37      	ldr	r3, [pc, #220]	@ (800700c <pvPortMalloc+0x1ac>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d051      	beq.n	8006fdc <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f38:	6a3b      	ldr	r3, [r7, #32]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2208      	movs	r2, #8
 8006f3e:	4413      	add	r3, r2
 8006f40:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	6a3b      	ldr	r3, [r7, #32]
 8006f48:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	1ad2      	subs	r2, r2, r3
 8006f52:	2308      	movs	r3, #8
 8006f54:	005b      	lsls	r3, r3, #1
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d920      	bls.n	8006f9c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4413      	add	r3, r2
 8006f60:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	f003 0307 	and.w	r3, r3, #7
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00b      	beq.n	8006f84 <pvPortMalloc+0x124>
        __asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	613b      	str	r3, [r7, #16]
    }
 8006f7e:	bf00      	nop
 8006f80:	bf00      	nop
 8006f82:	e7fd      	b.n	8006f80 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f86:	685a      	ldr	r2, [r3, #4]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	1ad2      	subs	r2, r2, r3
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006f96:	69b8      	ldr	r0, [r7, #24]
 8006f98:	f000 f90a 	bl	80071b0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8007014 <pvPortMalloc+0x1b4>)
 8006f9e:	681a      	ldr	r2, [r3, #0]
 8006fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa2:	685b      	ldr	r3, [r3, #4]
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8007014 <pvPortMalloc+0x1b4>)
 8006fa8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006faa:	4b1a      	ldr	r3, [pc, #104]	@ (8007014 <pvPortMalloc+0x1b4>)
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	4b1b      	ldr	r3, [pc, #108]	@ (800701c <pvPortMalloc+0x1bc>)
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d203      	bcs.n	8006fbe <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006fb6:	4b17      	ldr	r3, [pc, #92]	@ (8007014 <pvPortMalloc+0x1b4>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a18      	ldr	r2, [pc, #96]	@ (800701c <pvPortMalloc+0x1bc>)
 8006fbc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc0:	685a      	ldr	r2, [r3, #4]
 8006fc2:	4b13      	ldr	r3, [pc, #76]	@ (8007010 <pvPortMalloc+0x1b0>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	431a      	orrs	r2, r3
 8006fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fca:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fce:	2200      	movs	r2, #0
 8006fd0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8006fd2:	4b13      	ldr	r3, [pc, #76]	@ (8007020 <pvPortMalloc+0x1c0>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	3301      	adds	r3, #1
 8006fd8:	4a11      	ldr	r2, [pc, #68]	@ (8007020 <pvPortMalloc+0x1c0>)
 8006fda:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8006fdc:	f7fe fa6c 	bl	80054b8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	f003 0307 	and.w	r3, r3, #7
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00b      	beq.n	8007002 <pvPortMalloc+0x1a2>
        __asm volatile
 8006fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fee:	f383 8811 	msr	BASEPRI, r3
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	60fb      	str	r3, [r7, #12]
    }
 8006ffc:	bf00      	nop
 8006ffe:	bf00      	nop
 8007000:	e7fd      	b.n	8006ffe <pvPortMalloc+0x19e>
    return pvReturn;
 8007002:	69fb      	ldr	r3, [r7, #28]
}
 8007004:	4618      	mov	r0, r3
 8007006:	3728      	adds	r7, #40	@ 0x28
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	20012eb8 	.word	0x20012eb8
 8007010:	20012ecc 	.word	0x20012ecc
 8007014:	20012ebc 	.word	0x20012ebc
 8007018:	20012eb0 	.word	0x20012eb0
 800701c:	20012ec0 	.word	0x20012ec0
 8007020:	20012ec4 	.word	0x20012ec4

08007024 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d04f      	beq.n	80070d6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8007036:	2308      	movs	r3, #8
 8007038:	425b      	negs	r3, r3
 800703a:	697a      	ldr	r2, [r7, #20]
 800703c:	4413      	add	r3, r2
 800703e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8007040:	697b      	ldr	r3, [r7, #20]
 8007042:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	685a      	ldr	r2, [r3, #4]
 8007048:	4b25      	ldr	r3, [pc, #148]	@ (80070e0 <vPortFree+0xbc>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4013      	ands	r3, r2
 800704e:	2b00      	cmp	r3, #0
 8007050:	d10b      	bne.n	800706a <vPortFree+0x46>
        __asm volatile
 8007052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007056:	f383 8811 	msr	BASEPRI, r3
 800705a:	f3bf 8f6f 	isb	sy
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	60fb      	str	r3, [r7, #12]
    }
 8007064:	bf00      	nop
 8007066:	bf00      	nop
 8007068:	e7fd      	b.n	8007066 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00b      	beq.n	800708a <vPortFree+0x66>
        __asm volatile
 8007072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007076:	f383 8811 	msr	BASEPRI, r3
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	60bb      	str	r3, [r7, #8]
    }
 8007084:	bf00      	nop
 8007086:	bf00      	nop
 8007088:	e7fd      	b.n	8007086 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800708a:	693b      	ldr	r3, [r7, #16]
 800708c:	685a      	ldr	r2, [r3, #4]
 800708e:	4b14      	ldr	r3, [pc, #80]	@ (80070e0 <vPortFree+0xbc>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4013      	ands	r3, r2
 8007094:	2b00      	cmp	r3, #0
 8007096:	d01e      	beq.n	80070d6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d11a      	bne.n	80070d6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80070a0:	693b      	ldr	r3, [r7, #16]
 80070a2:	685a      	ldr	r2, [r3, #4]
 80070a4:	4b0e      	ldr	r3, [pc, #56]	@ (80070e0 <vPortFree+0xbc>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	43db      	mvns	r3, r3
 80070aa:	401a      	ands	r2, r3
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80070b0:	f7fe f9f4 	bl	800549c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	685a      	ldr	r2, [r3, #4]
 80070b8:	4b0a      	ldr	r3, [pc, #40]	@ (80070e4 <vPortFree+0xc0>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4413      	add	r3, r2
 80070be:	4a09      	ldr	r2, [pc, #36]	@ (80070e4 <vPortFree+0xc0>)
 80070c0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80070c2:	6938      	ldr	r0, [r7, #16]
 80070c4:	f000 f874 	bl	80071b0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80070c8:	4b07      	ldr	r3, [pc, #28]	@ (80070e8 <vPortFree+0xc4>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	3301      	adds	r3, #1
 80070ce:	4a06      	ldr	r2, [pc, #24]	@ (80070e8 <vPortFree+0xc4>)
 80070d0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80070d2:	f7fe f9f1 	bl	80054b8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80070d6:	bf00      	nop
 80070d8:	3718      	adds	r7, #24
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	20012ecc 	.word	0x20012ecc
 80070e4:	20012ebc 	.word	0x20012ebc
 80070e8:	20012ec8 	.word	0x20012ec8

080070ec <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80070f2:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80070f6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80070f8:	4b27      	ldr	r3, [pc, #156]	@ (8007198 <prvHeapInit+0xac>)
 80070fa:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f003 0307 	and.w	r3, r3, #7
 8007102:	2b00      	cmp	r3, #0
 8007104:	d00c      	beq.n	8007120 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	3307      	adds	r3, #7
 800710a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f023 0307 	bic.w	r3, r3, #7
 8007112:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007114:	68ba      	ldr	r2, [r7, #8]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	4a1f      	ldr	r2, [pc, #124]	@ (8007198 <prvHeapInit+0xac>)
 800711c:	4413      	add	r3, r2
 800711e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007124:	4a1d      	ldr	r2, [pc, #116]	@ (800719c <prvHeapInit+0xb0>)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800712a:	4b1c      	ldr	r3, [pc, #112]	@ (800719c <prvHeapInit+0xb0>)
 800712c:	2200      	movs	r2, #0
 800712e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	4413      	add	r3, r2
 8007136:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8007138:	2208      	movs	r2, #8
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	1a9b      	subs	r3, r3, r2
 800713e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	f023 0307 	bic.w	r3, r3, #7
 8007146:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	4a15      	ldr	r2, [pc, #84]	@ (80071a0 <prvHeapInit+0xb4>)
 800714c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800714e:	4b14      	ldr	r3, [pc, #80]	@ (80071a0 <prvHeapInit+0xb4>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2200      	movs	r2, #0
 8007154:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8007156:	4b12      	ldr	r3, [pc, #72]	@ (80071a0 <prvHeapInit+0xb4>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2200      	movs	r2, #0
 800715c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007162:	683b      	ldr	r3, [r7, #0]
 8007164:	68fa      	ldr	r2, [r7, #12]
 8007166:	1ad2      	subs	r2, r2, r3
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800716c:	4b0c      	ldr	r3, [pc, #48]	@ (80071a0 <prvHeapInit+0xb4>)
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	4a0a      	ldr	r2, [pc, #40]	@ (80071a4 <prvHeapInit+0xb8>)
 800717a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	4a09      	ldr	r2, [pc, #36]	@ (80071a8 <prvHeapInit+0xbc>)
 8007182:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007184:	4b09      	ldr	r3, [pc, #36]	@ (80071ac <prvHeapInit+0xc0>)
 8007186:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800718a:	601a      	str	r2, [r3, #0]
}
 800718c:	bf00      	nop
 800718e:	3714      	adds	r7, #20
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr
 8007198:	200002b0 	.word	0x200002b0
 800719c:	20012eb0 	.word	0x20012eb0
 80071a0:	20012eb8 	.word	0x20012eb8
 80071a4:	20012ec0 	.word	0x20012ec0
 80071a8:	20012ebc 	.word	0x20012ebc
 80071ac:	20012ecc 	.word	0x20012ecc

080071b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071b8:	4b28      	ldr	r3, [pc, #160]	@ (800725c <prvInsertBlockIntoFreeList+0xac>)
 80071ba:	60fb      	str	r3, [r7, #12]
 80071bc:	e002      	b.n	80071c4 <prvInsertBlockIntoFreeList+0x14>
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	60fb      	str	r3, [r7, #12]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d8f7      	bhi.n	80071be <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	4413      	add	r3, r2
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d108      	bne.n	80071f2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	685a      	ldr	r2, [r3, #4]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	441a      	add	r2, r3
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	441a      	add	r2, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	429a      	cmp	r2, r3
 8007204:	d118      	bne.n	8007238 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	4b15      	ldr	r3, [pc, #84]	@ (8007260 <prvInsertBlockIntoFreeList+0xb0>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	429a      	cmp	r2, r3
 8007210:	d00d      	beq.n	800722e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	685a      	ldr	r2, [r3, #4]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	441a      	add	r2, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	601a      	str	r2, [r3, #0]
 800722c:	e008      	b.n	8007240 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800722e:	4b0c      	ldr	r3, [pc, #48]	@ (8007260 <prvInsertBlockIntoFreeList+0xb0>)
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	601a      	str	r2, [r3, #0]
 8007236:	e003      	b.n	8007240 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	429a      	cmp	r2, r3
 8007246:	d002      	beq.n	800724e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800724e:	bf00      	nop
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop
 800725c:	20012eb0 	.word	0x20012eb0
 8007260:	20012eb8 	.word	0x20012eb8

08007264 <memset>:
 8007264:	4402      	add	r2, r0
 8007266:	4603      	mov	r3, r0
 8007268:	4293      	cmp	r3, r2
 800726a:	d100      	bne.n	800726e <memset+0xa>
 800726c:	4770      	bx	lr
 800726e:	f803 1b01 	strb.w	r1, [r3], #1
 8007272:	e7f9      	b.n	8007268 <memset+0x4>

08007274 <__libc_init_array>:
 8007274:	b570      	push	{r4, r5, r6, lr}
 8007276:	4d0d      	ldr	r5, [pc, #52]	@ (80072ac <__libc_init_array+0x38>)
 8007278:	4c0d      	ldr	r4, [pc, #52]	@ (80072b0 <__libc_init_array+0x3c>)
 800727a:	1b64      	subs	r4, r4, r5
 800727c:	10a4      	asrs	r4, r4, #2
 800727e:	2600      	movs	r6, #0
 8007280:	42a6      	cmp	r6, r4
 8007282:	d109      	bne.n	8007298 <__libc_init_array+0x24>
 8007284:	4d0b      	ldr	r5, [pc, #44]	@ (80072b4 <__libc_init_array+0x40>)
 8007286:	4c0c      	ldr	r4, [pc, #48]	@ (80072b8 <__libc_init_array+0x44>)
 8007288:	f000 f826 	bl	80072d8 <_init>
 800728c:	1b64      	subs	r4, r4, r5
 800728e:	10a4      	asrs	r4, r4, #2
 8007290:	2600      	movs	r6, #0
 8007292:	42a6      	cmp	r6, r4
 8007294:	d105      	bne.n	80072a2 <__libc_init_array+0x2e>
 8007296:	bd70      	pop	{r4, r5, r6, pc}
 8007298:	f855 3b04 	ldr.w	r3, [r5], #4
 800729c:	4798      	blx	r3
 800729e:	3601      	adds	r6, #1
 80072a0:	e7ee      	b.n	8007280 <__libc_init_array+0xc>
 80072a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80072a6:	4798      	blx	r3
 80072a8:	3601      	adds	r6, #1
 80072aa:	e7f2      	b.n	8007292 <__libc_init_array+0x1e>
 80072ac:	08007500 	.word	0x08007500
 80072b0:	08007500 	.word	0x08007500
 80072b4:	08007500 	.word	0x08007500
 80072b8:	08007504 	.word	0x08007504

080072bc <memcpy>:
 80072bc:	440a      	add	r2, r1
 80072be:	4291      	cmp	r1, r2
 80072c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80072c4:	d100      	bne.n	80072c8 <memcpy+0xc>
 80072c6:	4770      	bx	lr
 80072c8:	b510      	push	{r4, lr}
 80072ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072d2:	4291      	cmp	r1, r2
 80072d4:	d1f9      	bne.n	80072ca <memcpy+0xe>
 80072d6:	bd10      	pop	{r4, pc}

080072d8 <_init>:
 80072d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072da:	bf00      	nop
 80072dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072de:	bc08      	pop	{r3}
 80072e0:	469e      	mov	lr, r3
 80072e2:	4770      	bx	lr

080072e4 <_fini>:
 80072e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072e6:	bf00      	nop
 80072e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ea:	bc08      	pop	{r3}
 80072ec:	469e      	mov	lr, r3
 80072ee:	4770      	bx	lr
