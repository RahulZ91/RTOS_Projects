
FreeRTOS_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b20  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08007cf0  08007cf0  00008cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e74  08007e74  00009068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007e74  08007e74  00008e74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e7c  08007e7c  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e7c  08007e7c  00008e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007e80  08007e80  00008e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007e84  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000145dc  20000068  08007eec  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20014644  08007eec  00009644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001474f  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000331c  00000000  00000000  0001d7e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  00020b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f31  00000000  00000000  00021ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024936  00000000  00000000  00022e01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019224  00000000  00000000  00047737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd6f5  00000000  00000000  0006095b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013e050  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057a8  00000000  00000000  0013e094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a7  00000000  00000000  0014383c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007cd8 	.word	0x08007cd8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08007cd8 	.word	0x08007cd8

08000210 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000210:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000212:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000216:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002a0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800021a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800021e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000222:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000224:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000226:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000228:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800022a:	d332      	bcc.n	8000292 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800022c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800022e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000230:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000232:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000234:	d314      	bcc.n	8000260 <_CheckCase2>

08000236 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000236:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000238:	19d0      	adds	r0, r2, r7
 800023a:	bf00      	nop

0800023c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000240:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000244:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000246:	d005      	beq.n	8000254 <_CSDone>
        LDRB     R3,[R1], #+1
 8000248:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800024c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000250:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000252:	d1f3      	bne.n	800023c <_LoopCopyStraight>

08000254 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000254:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000258:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800025a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800025e:	4770      	bx	lr

08000260 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000260:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000262:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000264:	d319      	bcc.n	800029a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000266:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000268:	1b12      	subs	r2, r2, r4

0800026a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800026a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800026e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000272:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000274:	d1f9      	bne.n	800026a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000276:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000278:	d005      	beq.n	8000286 <_No2ChunkNeeded>

0800027a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800027e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000282:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyAfterWrapAround>

08000286 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000286:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800028a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800028c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800028e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000290:	4770      	bx	lr

08000292 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000292:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000294:	3801      	subs	r0, #1
        CMP      R0,R2
 8000296:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000298:	d2cd      	bcs.n	8000236 <_Case4>

0800029a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800029a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800029c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800029e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002a0:	20012f24 	.word	0x20012f24
	...

080002b0 <memchr>:
 80002b0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002b4:	2a10      	cmp	r2, #16
 80002b6:	db2b      	blt.n	8000310 <memchr+0x60>
 80002b8:	f010 0f07 	tst.w	r0, #7
 80002bc:	d008      	beq.n	80002d0 <memchr+0x20>
 80002be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c2:	3a01      	subs	r2, #1
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d02d      	beq.n	8000324 <memchr+0x74>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	b342      	cbz	r2, 8000320 <memchr+0x70>
 80002ce:	d1f6      	bne.n	80002be <memchr+0xe>
 80002d0:	b4f0      	push	{r4, r5, r6, r7}
 80002d2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002d6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002da:	f022 0407 	bic.w	r4, r2, #7
 80002de:	f07f 0700 	mvns.w	r7, #0
 80002e2:	2300      	movs	r3, #0
 80002e4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002e8:	3c08      	subs	r4, #8
 80002ea:	ea85 0501 	eor.w	r5, r5, r1
 80002ee:	ea86 0601 	eor.w	r6, r6, r1
 80002f2:	fa85 f547 	uadd8	r5, r5, r7
 80002f6:	faa3 f587 	sel	r5, r3, r7
 80002fa:	fa86 f647 	uadd8	r6, r6, r7
 80002fe:	faa5 f687 	sel	r6, r5, r7
 8000302:	b98e      	cbnz	r6, 8000328 <memchr+0x78>
 8000304:	d1ee      	bne.n	80002e4 <memchr+0x34>
 8000306:	bcf0      	pop	{r4, r5, r6, r7}
 8000308:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800030c:	f002 0207 	and.w	r2, r2, #7
 8000310:	b132      	cbz	r2, 8000320 <memchr+0x70>
 8000312:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000316:	3a01      	subs	r2, #1
 8000318:	ea83 0301 	eor.w	r3, r3, r1
 800031c:	b113      	cbz	r3, 8000324 <memchr+0x74>
 800031e:	d1f8      	bne.n	8000312 <memchr+0x62>
 8000320:	2000      	movs	r0, #0
 8000322:	4770      	bx	lr
 8000324:	3801      	subs	r0, #1
 8000326:	4770      	bx	lr
 8000328:	2d00      	cmp	r5, #0
 800032a:	bf06      	itte	eq
 800032c:	4635      	moveq	r5, r6
 800032e:	3803      	subeq	r0, #3
 8000330:	3807      	subne	r0, #7
 8000332:	f015 0f01 	tst.w	r5, #1
 8000336:	d107      	bne.n	8000348 <memchr+0x98>
 8000338:	3001      	adds	r0, #1
 800033a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800033e:	bf02      	ittt	eq
 8000340:	3001      	addeq	r0, #1
 8000342:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000346:	3001      	addeq	r0, #1
 8000348:	bcf0      	pop	{r4, r5, r6, r7}
 800034a:	3801      	subs	r0, #1
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop

08000350 <__aeabi_uldivmod>:
 8000350:	b953      	cbnz	r3, 8000368 <__aeabi_uldivmod+0x18>
 8000352:	b94a      	cbnz	r2, 8000368 <__aeabi_uldivmod+0x18>
 8000354:	2900      	cmp	r1, #0
 8000356:	bf08      	it	eq
 8000358:	2800      	cmpeq	r0, #0
 800035a:	bf1c      	itt	ne
 800035c:	f04f 31ff 	movne.w	r1, #4294967295
 8000360:	f04f 30ff 	movne.w	r0, #4294967295
 8000364:	f000 b988 	b.w	8000678 <__aeabi_idiv0>
 8000368:	f1ad 0c08 	sub.w	ip, sp, #8
 800036c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000370:	f000 f806 	bl	8000380 <__udivmoddi4>
 8000374:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000378:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800037c:	b004      	add	sp, #16
 800037e:	4770      	bx	lr

08000380 <__udivmoddi4>:
 8000380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000384:	9d08      	ldr	r5, [sp, #32]
 8000386:	468e      	mov	lr, r1
 8000388:	4604      	mov	r4, r0
 800038a:	4688      	mov	r8, r1
 800038c:	2b00      	cmp	r3, #0
 800038e:	d14a      	bne.n	8000426 <__udivmoddi4+0xa6>
 8000390:	428a      	cmp	r2, r1
 8000392:	4617      	mov	r7, r2
 8000394:	d962      	bls.n	800045c <__udivmoddi4+0xdc>
 8000396:	fab2 f682 	clz	r6, r2
 800039a:	b14e      	cbz	r6, 80003b0 <__udivmoddi4+0x30>
 800039c:	f1c6 0320 	rsb	r3, r6, #32
 80003a0:	fa01 f806 	lsl.w	r8, r1, r6
 80003a4:	fa20 f303 	lsr.w	r3, r0, r3
 80003a8:	40b7      	lsls	r7, r6
 80003aa:	ea43 0808 	orr.w	r8, r3, r8
 80003ae:	40b4      	lsls	r4, r6
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	fa1f fc87 	uxth.w	ip, r7
 80003b8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003bc:	0c23      	lsrs	r3, r4, #16
 80003be:	fb0e 8811 	mls	r8, lr, r1, r8
 80003c2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003c6:	fb01 f20c 	mul.w	r2, r1, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0x62>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f101 30ff 	add.w	r0, r1, #4294967295
 80003d4:	f080 80ea 	bcs.w	80005ac <__udivmoddi4+0x22c>
 80003d8:	429a      	cmp	r2, r3
 80003da:	f240 80e7 	bls.w	80005ac <__udivmoddi4+0x22c>
 80003de:	3902      	subs	r1, #2
 80003e0:	443b      	add	r3, r7
 80003e2:	1a9a      	subs	r2, r3, r2
 80003e4:	b2a3      	uxth	r3, r4
 80003e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f2:	fb00 fc0c 	mul.w	ip, r0, ip
 80003f6:	459c      	cmp	ip, r3
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x8e>
 80003fa:	18fb      	adds	r3, r7, r3
 80003fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000400:	f080 80d6 	bcs.w	80005b0 <__udivmoddi4+0x230>
 8000404:	459c      	cmp	ip, r3
 8000406:	f240 80d3 	bls.w	80005b0 <__udivmoddi4+0x230>
 800040a:	443b      	add	r3, r7
 800040c:	3802      	subs	r0, #2
 800040e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000412:	eba3 030c 	sub.w	r3, r3, ip
 8000416:	2100      	movs	r1, #0
 8000418:	b11d      	cbz	r5, 8000422 <__udivmoddi4+0xa2>
 800041a:	40f3      	lsrs	r3, r6
 800041c:	2200      	movs	r2, #0
 800041e:	e9c5 3200 	strd	r3, r2, [r5]
 8000422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000426:	428b      	cmp	r3, r1
 8000428:	d905      	bls.n	8000436 <__udivmoddi4+0xb6>
 800042a:	b10d      	cbz	r5, 8000430 <__udivmoddi4+0xb0>
 800042c:	e9c5 0100 	strd	r0, r1, [r5]
 8000430:	2100      	movs	r1, #0
 8000432:	4608      	mov	r0, r1
 8000434:	e7f5      	b.n	8000422 <__udivmoddi4+0xa2>
 8000436:	fab3 f183 	clz	r1, r3
 800043a:	2900      	cmp	r1, #0
 800043c:	d146      	bne.n	80004cc <__udivmoddi4+0x14c>
 800043e:	4573      	cmp	r3, lr
 8000440:	d302      	bcc.n	8000448 <__udivmoddi4+0xc8>
 8000442:	4282      	cmp	r2, r0
 8000444:	f200 8105 	bhi.w	8000652 <__udivmoddi4+0x2d2>
 8000448:	1a84      	subs	r4, r0, r2
 800044a:	eb6e 0203 	sbc.w	r2, lr, r3
 800044e:	2001      	movs	r0, #1
 8000450:	4690      	mov	r8, r2
 8000452:	2d00      	cmp	r5, #0
 8000454:	d0e5      	beq.n	8000422 <__udivmoddi4+0xa2>
 8000456:	e9c5 4800 	strd	r4, r8, [r5]
 800045a:	e7e2      	b.n	8000422 <__udivmoddi4+0xa2>
 800045c:	2a00      	cmp	r2, #0
 800045e:	f000 8090 	beq.w	8000582 <__udivmoddi4+0x202>
 8000462:	fab2 f682 	clz	r6, r2
 8000466:	2e00      	cmp	r6, #0
 8000468:	f040 80a4 	bne.w	80005b4 <__udivmoddi4+0x234>
 800046c:	1a8a      	subs	r2, r1, r2
 800046e:	0c03      	lsrs	r3, r0, #16
 8000470:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000474:	b280      	uxth	r0, r0
 8000476:	b2bc      	uxth	r4, r7
 8000478:	2101      	movs	r1, #1
 800047a:	fbb2 fcfe 	udiv	ip, r2, lr
 800047e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000482:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000486:	fb04 f20c 	mul.w	r2, r4, ip
 800048a:	429a      	cmp	r2, r3
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x11e>
 800048e:	18fb      	adds	r3, r7, r3
 8000490:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000494:	d202      	bcs.n	800049c <__udivmoddi4+0x11c>
 8000496:	429a      	cmp	r2, r3
 8000498:	f200 80e0 	bhi.w	800065c <__udivmoddi4+0x2dc>
 800049c:	46c4      	mov	ip, r8
 800049e:	1a9b      	subs	r3, r3, r2
 80004a0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004a4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004a8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004ac:	fb02 f404 	mul.w	r4, r2, r4
 80004b0:	429c      	cmp	r4, r3
 80004b2:	d907      	bls.n	80004c4 <__udivmoddi4+0x144>
 80004b4:	18fb      	adds	r3, r7, r3
 80004b6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ba:	d202      	bcs.n	80004c2 <__udivmoddi4+0x142>
 80004bc:	429c      	cmp	r4, r3
 80004be:	f200 80ca 	bhi.w	8000656 <__udivmoddi4+0x2d6>
 80004c2:	4602      	mov	r2, r0
 80004c4:	1b1b      	subs	r3, r3, r4
 80004c6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004ca:	e7a5      	b.n	8000418 <__udivmoddi4+0x98>
 80004cc:	f1c1 0620 	rsb	r6, r1, #32
 80004d0:	408b      	lsls	r3, r1
 80004d2:	fa22 f706 	lsr.w	r7, r2, r6
 80004d6:	431f      	orrs	r7, r3
 80004d8:	fa0e f401 	lsl.w	r4, lr, r1
 80004dc:	fa20 f306 	lsr.w	r3, r0, r6
 80004e0:	fa2e fe06 	lsr.w	lr, lr, r6
 80004e4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80004e8:	4323      	orrs	r3, r4
 80004ea:	fa00 f801 	lsl.w	r8, r0, r1
 80004ee:	fa1f fc87 	uxth.w	ip, r7
 80004f2:	fbbe f0f9 	udiv	r0, lr, r9
 80004f6:	0c1c      	lsrs	r4, r3, #16
 80004f8:	fb09 ee10 	mls	lr, r9, r0, lr
 80004fc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000500:	fb00 fe0c 	mul.w	lr, r0, ip
 8000504:	45a6      	cmp	lr, r4
 8000506:	fa02 f201 	lsl.w	r2, r2, r1
 800050a:	d909      	bls.n	8000520 <__udivmoddi4+0x1a0>
 800050c:	193c      	adds	r4, r7, r4
 800050e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000512:	f080 809c 	bcs.w	800064e <__udivmoddi4+0x2ce>
 8000516:	45a6      	cmp	lr, r4
 8000518:	f240 8099 	bls.w	800064e <__udivmoddi4+0x2ce>
 800051c:	3802      	subs	r0, #2
 800051e:	443c      	add	r4, r7
 8000520:	eba4 040e 	sub.w	r4, r4, lr
 8000524:	fa1f fe83 	uxth.w	lr, r3
 8000528:	fbb4 f3f9 	udiv	r3, r4, r9
 800052c:	fb09 4413 	mls	r4, r9, r3, r4
 8000530:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000534:	fb03 fc0c 	mul.w	ip, r3, ip
 8000538:	45a4      	cmp	ip, r4
 800053a:	d908      	bls.n	800054e <__udivmoddi4+0x1ce>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000542:	f080 8082 	bcs.w	800064a <__udivmoddi4+0x2ca>
 8000546:	45a4      	cmp	ip, r4
 8000548:	d97f      	bls.n	800064a <__udivmoddi4+0x2ca>
 800054a:	3b02      	subs	r3, #2
 800054c:	443c      	add	r4, r7
 800054e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000552:	eba4 040c 	sub.w	r4, r4, ip
 8000556:	fba0 ec02 	umull	lr, ip, r0, r2
 800055a:	4564      	cmp	r4, ip
 800055c:	4673      	mov	r3, lr
 800055e:	46e1      	mov	r9, ip
 8000560:	d362      	bcc.n	8000628 <__udivmoddi4+0x2a8>
 8000562:	d05f      	beq.n	8000624 <__udivmoddi4+0x2a4>
 8000564:	b15d      	cbz	r5, 800057e <__udivmoddi4+0x1fe>
 8000566:	ebb8 0203 	subs.w	r2, r8, r3
 800056a:	eb64 0409 	sbc.w	r4, r4, r9
 800056e:	fa04 f606 	lsl.w	r6, r4, r6
 8000572:	fa22 f301 	lsr.w	r3, r2, r1
 8000576:	431e      	orrs	r6, r3
 8000578:	40cc      	lsrs	r4, r1
 800057a:	e9c5 6400 	strd	r6, r4, [r5]
 800057e:	2100      	movs	r1, #0
 8000580:	e74f      	b.n	8000422 <__udivmoddi4+0xa2>
 8000582:	fbb1 fcf2 	udiv	ip, r1, r2
 8000586:	0c01      	lsrs	r1, r0, #16
 8000588:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800058c:	b280      	uxth	r0, r0
 800058e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000592:	463b      	mov	r3, r7
 8000594:	4638      	mov	r0, r7
 8000596:	463c      	mov	r4, r7
 8000598:	46b8      	mov	r8, r7
 800059a:	46be      	mov	lr, r7
 800059c:	2620      	movs	r6, #32
 800059e:	fbb1 f1f7 	udiv	r1, r1, r7
 80005a2:	eba2 0208 	sub.w	r2, r2, r8
 80005a6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005aa:	e766      	b.n	800047a <__udivmoddi4+0xfa>
 80005ac:	4601      	mov	r1, r0
 80005ae:	e718      	b.n	80003e2 <__udivmoddi4+0x62>
 80005b0:	4610      	mov	r0, r2
 80005b2:	e72c      	b.n	800040e <__udivmoddi4+0x8e>
 80005b4:	f1c6 0220 	rsb	r2, r6, #32
 80005b8:	fa2e f302 	lsr.w	r3, lr, r2
 80005bc:	40b7      	lsls	r7, r6
 80005be:	40b1      	lsls	r1, r6
 80005c0:	fa20 f202 	lsr.w	r2, r0, r2
 80005c4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005c8:	430a      	orrs	r2, r1
 80005ca:	fbb3 f8fe 	udiv	r8, r3, lr
 80005ce:	b2bc      	uxth	r4, r7
 80005d0:	fb0e 3318 	mls	r3, lr, r8, r3
 80005d4:	0c11      	lsrs	r1, r2, #16
 80005d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005da:	fb08 f904 	mul.w	r9, r8, r4
 80005de:	40b0      	lsls	r0, r6
 80005e0:	4589      	cmp	r9, r1
 80005e2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80005e6:	b280      	uxth	r0, r0
 80005e8:	d93e      	bls.n	8000668 <__udivmoddi4+0x2e8>
 80005ea:	1879      	adds	r1, r7, r1
 80005ec:	f108 3cff 	add.w	ip, r8, #4294967295
 80005f0:	d201      	bcs.n	80005f6 <__udivmoddi4+0x276>
 80005f2:	4589      	cmp	r9, r1
 80005f4:	d81f      	bhi.n	8000636 <__udivmoddi4+0x2b6>
 80005f6:	eba1 0109 	sub.w	r1, r1, r9
 80005fa:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fe:	fb09 f804 	mul.w	r8, r9, r4
 8000602:	fb0e 1119 	mls	r1, lr, r9, r1
 8000606:	b292      	uxth	r2, r2
 8000608:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800060c:	4542      	cmp	r2, r8
 800060e:	d229      	bcs.n	8000664 <__udivmoddi4+0x2e4>
 8000610:	18ba      	adds	r2, r7, r2
 8000612:	f109 31ff 	add.w	r1, r9, #4294967295
 8000616:	d2c4      	bcs.n	80005a2 <__udivmoddi4+0x222>
 8000618:	4542      	cmp	r2, r8
 800061a:	d2c2      	bcs.n	80005a2 <__udivmoddi4+0x222>
 800061c:	f1a9 0102 	sub.w	r1, r9, #2
 8000620:	443a      	add	r2, r7
 8000622:	e7be      	b.n	80005a2 <__udivmoddi4+0x222>
 8000624:	45f0      	cmp	r8, lr
 8000626:	d29d      	bcs.n	8000564 <__udivmoddi4+0x1e4>
 8000628:	ebbe 0302 	subs.w	r3, lr, r2
 800062c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000630:	3801      	subs	r0, #1
 8000632:	46e1      	mov	r9, ip
 8000634:	e796      	b.n	8000564 <__udivmoddi4+0x1e4>
 8000636:	eba7 0909 	sub.w	r9, r7, r9
 800063a:	4449      	add	r1, r9
 800063c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000640:	fbb1 f9fe 	udiv	r9, r1, lr
 8000644:	fb09 f804 	mul.w	r8, r9, r4
 8000648:	e7db      	b.n	8000602 <__udivmoddi4+0x282>
 800064a:	4673      	mov	r3, lr
 800064c:	e77f      	b.n	800054e <__udivmoddi4+0x1ce>
 800064e:	4650      	mov	r0, sl
 8000650:	e766      	b.n	8000520 <__udivmoddi4+0x1a0>
 8000652:	4608      	mov	r0, r1
 8000654:	e6fd      	b.n	8000452 <__udivmoddi4+0xd2>
 8000656:	443b      	add	r3, r7
 8000658:	3a02      	subs	r2, #2
 800065a:	e733      	b.n	80004c4 <__udivmoddi4+0x144>
 800065c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000660:	443b      	add	r3, r7
 8000662:	e71c      	b.n	800049e <__udivmoddi4+0x11e>
 8000664:	4649      	mov	r1, r9
 8000666:	e79c      	b.n	80005a2 <__udivmoddi4+0x222>
 8000668:	eba1 0109 	sub.w	r1, r1, r9
 800066c:	46c4      	mov	ip, r8
 800066e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000672:	fb09 f804 	mul.w	r8, r9, r4
 8000676:	e7c4      	b.n	8000602 <__udivmoddi4+0x282>

08000678 <__aeabi_idiv0>:
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000682:	f000 fa91 	bl	8000ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000686:	f000 f857 	bl	8000738 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  // Set the 0th bit to 1
  DWT_CTRL |=(1<<0);
 800068a:	4b24      	ldr	r3, [pc, #144]	@ (800071c <main+0xa0>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a23      	ldr	r2, [pc, #140]	@ (800071c <main+0xa0>)
 8000690:	f043 0301 	orr.w	r3, r3, #1
 8000694:	6013      	str	r3, [r2, #0]

  SEGGER_UART_init(500000);
 8000696:	4822      	ldr	r0, [pc, #136]	@ (8000720 <main+0xa4>)
 8000698:	f004 fc18 	bl	8004ecc <SEGGER_UART_init>

    SEGGER_SYSVIEW_Conf();
 800069c:	f004 fa40 	bl	8004b20 <SEGGER_SYSVIEW_Conf>

   SEGGER_SYSVIEW_Start();
 80006a0:	f006 f83e 	bl	8006720 <SEGGER_SYSVIEW_Start>

    status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 80006a4:	f107 0308 	add.w	r3, r7, #8
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	2302      	movs	r3, #2
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000724 <main+0xa8>)
 80006b0:	22c8      	movs	r2, #200	@ 0xc8
 80006b2:	491d      	ldr	r1, [pc, #116]	@ (8000728 <main+0xac>)
 80006b4:	481d      	ldr	r0, [pc, #116]	@ (800072c <main+0xb0>)
 80006b6:	f002 fc17 	bl	8002ee8 <xTaskCreate>
 80006ba:	6178      	str	r0, [r7, #20]

    configASSERT(status == pdPASS);
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d00b      	beq.n	80006da <main+0x5e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80006c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006c6:	f383 8811 	msr	BASEPRI, r3
 80006ca:	f3bf 8f6f 	isb	sy
 80006ce:	f3bf 8f4f 	dsb	sy
 80006d2:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006d4:	bf00      	nop
 80006d6:	bf00      	nop
 80006d8:	e7fd      	b.n	80006d6 <main+0x5a>

    status = xTaskCreate(led_blink, "LED Blink", 200, NULL, 2, &task2_handle);
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	9301      	str	r3, [sp, #4]
 80006de:	2302      	movs	r3, #2
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	2300      	movs	r3, #0
 80006e4:	22c8      	movs	r2, #200	@ 0xc8
 80006e6:	4912      	ldr	r1, [pc, #72]	@ (8000730 <main+0xb4>)
 80006e8:	4812      	ldr	r0, [pc, #72]	@ (8000734 <main+0xb8>)
 80006ea:	f002 fbfd 	bl	8002ee8 <xTaskCreate>
 80006ee:	6178      	str	r0, [r7, #20]

    configASSERT(status == pdPASS);
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d00b      	beq.n	800070e <main+0x92>
        __asm volatile
 80006f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006fa:	f383 8811 	msr	BASEPRI, r3
 80006fe:	f3bf 8f6f 	isb	sy
 8000702:	f3bf 8f4f 	dsb	sy
 8000706:	60fb      	str	r3, [r7, #12]
    }
 8000708:	bf00      	nop
 800070a:	bf00      	nop
 800070c:	e7fd      	b.n	800070a <main+0x8e>

    //start the freeRTOS scheduler
    vTaskStartScheduler();
 800070e:	f002 fd41 	bl	8003194 <vTaskStartScheduler>
    //if the control comes here, then the launch of the scheduler has failed due to
    //insufficient memory in heap
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000712:	f000 f87d 	bl	8000810 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000716:	bf00      	nop
 8000718:	e7fd      	b.n	8000716 <main+0x9a>
 800071a:	bf00      	nop
 800071c:	e0001000 	.word	0xe0001000
 8000720:	0007a120 	.word	0x0007a120
 8000724:	08007cf0 	.word	0x08007cf0
 8000728:	08007d08 	.word	0x08007d08
 800072c:	0800090d 	.word	0x0800090d
 8000730:	08007d10 	.word	0x08007d10
 8000734:	08000949 	.word	0x08000949

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b094      	sub	sp, #80	@ 0x50
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 031c 	add.w	r3, r7, #28
 8000742:	2234      	movs	r2, #52	@ 0x34
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f006 fe40 	bl	80073cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	605a      	str	r2, [r3, #4]
 8000756:	609a      	str	r2, [r3, #8]
 8000758:	60da      	str	r2, [r3, #12]
 800075a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	4b29      	ldr	r3, [pc, #164]	@ (8000808 <SystemClock_Config+0xd0>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000764:	4a28      	ldr	r2, [pc, #160]	@ (8000808 <SystemClock_Config+0xd0>)
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800076a:	6413      	str	r3, [r2, #64]	@ 0x40
 800076c:	4b26      	ldr	r3, [pc, #152]	@ (8000808 <SystemClock_Config+0xd0>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000778:	2300      	movs	r3, #0
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	4b23      	ldr	r3, [pc, #140]	@ (800080c <SystemClock_Config+0xd4>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a22      	ldr	r2, [pc, #136]	@ (800080c <SystemClock_Config+0xd4>)
 8000782:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	4b20      	ldr	r3, [pc, #128]	@ (800080c <SystemClock_Config+0xd4>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000794:	2302      	movs	r3, #2
 8000796:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000798:	2301      	movs	r3, #1
 800079a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800079c:	2310      	movs	r3, #16
 800079e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a0:	2302      	movs	r3, #2
 80007a2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a4:	2300      	movs	r3, #0
 80007a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007a8:	2308      	movs	r3, #8
 80007aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007ac:	23a8      	movs	r3, #168	@ 0xa8
 80007ae:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007b8:	2302      	movs	r3, #2
 80007ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007bc:	f107 031c 	add.w	r3, r7, #28
 80007c0:	4618      	mov	r0, r3
 80007c2:	f001 f869 	bl	8001898 <HAL_RCC_OscConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007cc:	f000 f8e0 	bl	8000990 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d0:	230f      	movs	r3, #15
 80007d2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d4:	2302      	movs	r3, #2
 80007d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007dc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007e8:	f107 0308 	add.w	r3, r7, #8
 80007ec:	2105      	movs	r1, #5
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 fcea 	bl	80011c8 <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007fa:	f000 f8c9 	bl	8000990 <Error_Handler>
  }
}
 80007fe:	bf00      	nop
 8000800:	3750      	adds	r7, #80	@ 0x50
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800
 800080c:	40007000 	.word	0x40007000

08000810 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b08a      	sub	sp, #40	@ 0x28
 8000814:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000816:	f107 0314 	add.w	r3, r7, #20
 800081a:	2200      	movs	r2, #0
 800081c:	601a      	str	r2, [r3, #0]
 800081e:	605a      	str	r2, [r3, #4]
 8000820:	609a      	str	r2, [r3, #8]
 8000822:	60da      	str	r2, [r3, #12]
 8000824:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	4b35      	ldr	r3, [pc, #212]	@ (8000900 <MX_GPIO_Init+0xf0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a34      	ldr	r2, [pc, #208]	@ (8000900 <MX_GPIO_Init+0xf0>)
 8000830:	f043 0304 	orr.w	r3, r3, #4
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b32      	ldr	r3, [pc, #200]	@ (8000900 <MX_GPIO_Init+0xf0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0304 	and.w	r3, r3, #4
 800083e:	613b      	str	r3, [r7, #16]
 8000840:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	4b2e      	ldr	r3, [pc, #184]	@ (8000900 <MX_GPIO_Init+0xf0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a2d      	ldr	r2, [pc, #180]	@ (8000900 <MX_GPIO_Init+0xf0>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b2b      	ldr	r3, [pc, #172]	@ (8000900 <MX_GPIO_Init+0xf0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800085a:	60fb      	str	r3, [r7, #12]
 800085c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
 8000862:	4b27      	ldr	r3, [pc, #156]	@ (8000900 <MX_GPIO_Init+0xf0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a26      	ldr	r2, [pc, #152]	@ (8000900 <MX_GPIO_Init+0xf0>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b24      	ldr	r3, [pc, #144]	@ (8000900 <MX_GPIO_Init+0xf0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	4b20      	ldr	r3, [pc, #128]	@ (8000900 <MX_GPIO_Init+0xf0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000882:	4a1f      	ldr	r2, [pc, #124]	@ (8000900 <MX_GPIO_Init+0xf0>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	@ 0x30
 800088a:	4b1d      	ldr	r3, [pc, #116]	@ (8000900 <MX_GPIO_Init+0xf0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000896:	2200      	movs	r2, #0
 8000898:	2120      	movs	r1, #32
 800089a:	481a      	ldr	r0, [pc, #104]	@ (8000904 <MX_GPIO_Init+0xf4>)
 800089c:	f000 fc60 	bl	8001160 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	4814      	ldr	r0, [pc, #80]	@ (8000908 <MX_GPIO_Init+0xf8>)
 80008b8:	f000 fabe 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008bc:	230c      	movs	r3, #12
 80008be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	2302      	movs	r3, #2
 80008c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c8:	2303      	movs	r3, #3
 80008ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008cc:	2307      	movs	r3, #7
 80008ce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4619      	mov	r1, r3
 80008d6:	480b      	ldr	r0, [pc, #44]	@ (8000904 <MX_GPIO_Init+0xf4>)
 80008d8:	f000 faae 	bl	8000e38 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008dc:	2320      	movs	r3, #32
 80008de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e0:	2301      	movs	r3, #1
 80008e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e8:	2300      	movs	r3, #0
 80008ea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	4804      	ldr	r0, [pc, #16]	@ (8000904 <MX_GPIO_Init+0xf4>)
 80008f4:	f000 faa0 	bl	8000e38 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008f8:	bf00      	nop
 80008fa:	3728      	adds	r7, #40	@ 0x28
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40023800 	.word	0x40023800
 8000904:	40020000 	.word	0x40020000
 8000908:	40020800 	.word	0x40020800

0800090c <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* parameters)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b09c      	sub	sp, #112	@ 0x70
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]

	char msg[100];

	while(1)
	{
		snprintf(msg,100,"%s\n", (char*)parameters);
 8000914:	f107 000c 	add.w	r0, r7, #12
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4a09      	ldr	r2, [pc, #36]	@ (8000940 <task1_handler+0x34>)
 800091c:	2164      	movs	r1, #100	@ 0x64
 800091e:	f006 fd0f 	bl	8007340 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 8000922:	f107 030c 	add.w	r3, r7, #12
 8000926:	4618      	mov	r0, r3
 8000928:	f006 fc6c 	bl	8007204 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 800092c:	4b05      	ldr	r3, [pc, #20]	@ (8000944 <task1_handler+0x38>)
 800092e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000932:	601a      	str	r2, [r3, #0]
 8000934:	f3bf 8f4f 	dsb	sy
 8000938:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,"%s\n", (char*)parameters);
 800093c:	bf00      	nop
 800093e:	e7e9      	b.n	8000914 <task1_handler+0x8>
 8000940:	08007d1c 	.word	0x08007d1c
 8000944:	e000ed04 	.word	0xe000ed04

08000948 <led_blink>:

}


static void led_blink(void* parameters)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOA,LD2_Pin);
 8000950:	2120      	movs	r1, #32
 8000952:	4805      	ldr	r0, [pc, #20]	@ (8000968 <led_blink+0x20>)
 8000954:	f000 fc1d 	bl	8001192 <HAL_GPIO_TogglePin>
	HAL_Delay(1500);
 8000958:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 800095c:	f000 f966 	bl	8000c2c <HAL_Delay>
}
 8000960:	bf00      	nop
 8000962:	3708      	adds	r7, #8
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40020000 	.word	0x40020000

0800096c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a04      	ldr	r2, [pc, #16]	@ (800098c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d101      	bne.n	8000982 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800097e:	f000 f935 	bl	8000bec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000982:	bf00      	nop
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40001000 	.word	0x40001000

08000990 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000994:	b672      	cpsid	i
}
 8000996:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <Error_Handler+0x8>

0800099c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	4b10      	ldr	r3, [pc, #64]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009aa:	4a0f      	ldr	r2, [pc, #60]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009b2:	4b0d      	ldr	r3, [pc, #52]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	4b09      	ldr	r3, [pc, #36]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c6:	4a08      	ldr	r2, [pc, #32]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80009ce:	4b06      	ldr	r3, [pc, #24]	@ (80009e8 <HAL_MspInit+0x4c>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d6:	603b      	str	r3, [r7, #0]
 80009d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009da:	bf00      	nop
 80009dc:	370c      	adds	r7, #12
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop
 80009e8:	40023800 	.word	0x40023800

080009ec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08e      	sub	sp, #56	@ 0x38
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009f4:	2300      	movs	r3, #0
 80009f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009f8:	2300      	movs	r3, #0
 80009fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	4b33      	ldr	r3, [pc, #204]	@ (8000ad0 <HAL_InitTick+0xe4>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a04:	4a32      	ldr	r2, [pc, #200]	@ (8000ad0 <HAL_InitTick+0xe4>)
 8000a06:	f043 0310 	orr.w	r3, r3, #16
 8000a0a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a0c:	4b30      	ldr	r3, [pc, #192]	@ (8000ad0 <HAL_InitTick+0xe4>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a10:	f003 0310 	and.w	r3, r3, #16
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a18:	f107 0210 	add.w	r2, r7, #16
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4611      	mov	r1, r2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 fcd6 	bl	80013d4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a28:	6a3b      	ldr	r3, [r7, #32]
 8000a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d103      	bne.n	8000a3a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a32:	f000 fcbb 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 8000a36:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a38:	e004      	b.n	8000a44 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a3a:	f000 fcb7 	bl	80013ac <HAL_RCC_GetPCLK1Freq>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a46:	4a23      	ldr	r2, [pc, #140]	@ (8000ad4 <HAL_InitTick+0xe8>)
 8000a48:	fba2 2303 	umull	r2, r3, r2, r3
 8000a4c:	0c9b      	lsrs	r3, r3, #18
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a52:	4b21      	ldr	r3, [pc, #132]	@ (8000ad8 <HAL_InitTick+0xec>)
 8000a54:	4a21      	ldr	r2, [pc, #132]	@ (8000adc <HAL_InitTick+0xf0>)
 8000a56:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a58:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad8 <HAL_InitTick+0xec>)
 8000a5a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a5e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a60:	4a1d      	ldr	r2, [pc, #116]	@ (8000ad8 <HAL_InitTick+0xec>)
 8000a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a64:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a66:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <HAL_InitTick+0xec>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <HAL_InitTick+0xec>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a72:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <HAL_InitTick+0xec>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a78:	4817      	ldr	r0, [pc, #92]	@ (8000ad8 <HAL_InitTick+0xec>)
 8000a7a:	f001 f9ab 	bl	8001dd4 <HAL_TIM_Base_Init>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a84:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d11b      	bne.n	8000ac4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a8c:	4812      	ldr	r0, [pc, #72]	@ (8000ad8 <HAL_InitTick+0xec>)
 8000a8e:	f001 f9fb 	bl	8001e88 <HAL_TIM_Base_Start_IT>
 8000a92:	4603      	mov	r3, r0
 8000a94:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a98:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d111      	bne.n	8000ac4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000aa0:	2036      	movs	r0, #54	@ 0x36
 8000aa2:	f000 f9bb 	bl	8000e1c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b0f      	cmp	r3, #15
 8000aaa:	d808      	bhi.n	8000abe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000aac:	2200      	movs	r2, #0
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	2036      	movs	r0, #54	@ 0x36
 8000ab2:	f000 f997 	bl	8000de4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ae0 <HAL_InitTick+0xf4>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6013      	str	r3, [r2, #0]
 8000abc:	e002      	b.n	8000ac4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ac4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3738      	adds	r7, #56	@ 0x38
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	431bde83 	.word	0x431bde83
 8000ad8:	20000084 	.word	0x20000084
 8000adc:	40001000 	.word	0x40001000
 8000ae0:	20000004 	.word	0x20000004

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ae8:	bf00      	nop
 8000aea:	e7fd      	b.n	8000ae8 <NMI_Handler+0x4>

08000aec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000af0:	bf00      	nop
 8000af2:	e7fd      	b.n	8000af0 <HardFault_Handler+0x4>

08000af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af8:	bf00      	nop
 8000afa:	e7fd      	b.n	8000af8 <MemManage_Handler+0x4>

08000afc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b00:	bf00      	nop
 8000b02:	e7fd      	b.n	8000b00 <BusFault_Handler+0x4>

08000b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b08:	bf00      	nop
 8000b0a:	e7fd      	b.n	8000b08 <UsageFault_Handler+0x4>

08000b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
	...

08000b1c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b20:	4802      	ldr	r0, [pc, #8]	@ (8000b2c <TIM6_DAC_IRQHandler+0x10>)
 8000b22:	f001 fa21 	bl	8001f68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b26:	bf00      	nop
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	20000084 	.word	0x20000084

08000b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b34:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <SystemInit+0x20>)
 8000b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b3a:	4a05      	ldr	r2, [pc, #20]	@ (8000b50 <SystemInit+0x20>)
 8000b3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b8c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b58:	f7ff ffea 	bl	8000b30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b5c:	480c      	ldr	r0, [pc, #48]	@ (8000b90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b5e:	490d      	ldr	r1, [pc, #52]	@ (8000b94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b60:	4a0d      	ldr	r2, [pc, #52]	@ (8000b98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b64:	e002      	b.n	8000b6c <LoopCopyDataInit>

08000b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6a:	3304      	adds	r3, #4

08000b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b70:	d3f9      	bcc.n	8000b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b72:	4a0a      	ldr	r2, [pc, #40]	@ (8000b9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ba0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b78:	e001      	b.n	8000b7e <LoopFillZerobss>

08000b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b7c:	3204      	adds	r2, #4

08000b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b80:	d3fb      	bcc.n	8000b7a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000b82:	f006 fc2b 	bl	80073dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b86:	f7ff fd79 	bl	800067c <main>
  bx  lr    
 8000b8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b94:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b98:	08007e84 	.word	0x08007e84
  ldr r2, =_sbss
 8000b9c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ba0:	20014644 	.word	0x20014644

08000ba4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba4:	e7fe      	b.n	8000ba4 <ADC_IRQHandler>
	...

08000ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bac:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <HAL_Init+0x40>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000be8 <HAL_Init+0x40>)
 8000bb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <HAL_Init+0x40>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000be8 <HAL_Init+0x40>)
 8000bbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc4:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <HAL_Init+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a07      	ldr	r2, [pc, #28]	@ (8000be8 <HAL_Init+0x40>)
 8000bca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd0:	2003      	movs	r0, #3
 8000bd2:	f000 f8fc 	bl	8000dce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f7ff ff08 	bl	80009ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bdc:	f7ff fede 	bl	800099c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023c00 	.word	0x40023c00

08000bec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	@ (8000c0c <HAL_IncTick+0x20>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	461a      	mov	r2, r3
 8000bf6:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <HAL_IncTick+0x24>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	4a04      	ldr	r2, [pc, #16]	@ (8000c10 <HAL_IncTick+0x24>)
 8000bfe:	6013      	str	r3, [r2, #0]
}
 8000c00:	bf00      	nop
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000008 	.word	0x20000008
 8000c10:	200000cc 	.word	0x200000cc

08000c14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return uwTick;
 8000c18:	4b03      	ldr	r3, [pc, #12]	@ (8000c28 <HAL_GetTick+0x14>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	200000cc 	.word	0x200000cc

08000c2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c34:	f7ff ffee 	bl	8000c14 <HAL_GetTick>
 8000c38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c44:	d005      	beq.n	8000c52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c46:	4b0a      	ldr	r3, [pc, #40]	@ (8000c70 <HAL_Delay+0x44>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	4413      	add	r3, r2
 8000c50:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c52:	bf00      	nop
 8000c54:	f7ff ffde 	bl	8000c14 <HAL_GetTick>
 8000c58:	4602      	mov	r2, r0
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	1ad3      	subs	r3, r2, r3
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	d8f7      	bhi.n	8000c54 <HAL_Delay+0x28>
  {
  }
}
 8000c64:	bf00      	nop
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000008 	.word	0x20000008

08000c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c84:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c90:	4013      	ands	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c9c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca6:	4a04      	ldr	r2, [pc, #16]	@ (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	60d3      	str	r3, [r2, #12]
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc0:	4b04      	ldr	r3, [pc, #16]	@ (8000cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	f003 0307 	and.w	r3, r3, #7
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db0b      	blt.n	8000d02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	f003 021f 	and.w	r2, r3, #31
 8000cf0:	4907      	ldr	r1, [pc, #28]	@ (8000d10 <__NVIC_EnableIRQ+0x38>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	095b      	lsrs	r3, r3, #5
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000e100 	.word	0xe000e100

08000d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	db0a      	blt.n	8000d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	490c      	ldr	r1, [pc, #48]	@ (8000d60 <__NVIC_SetPriority+0x4c>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	0112      	lsls	r2, r2, #4
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	440b      	add	r3, r1
 8000d38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d3c:	e00a      	b.n	8000d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4908      	ldr	r1, [pc, #32]	@ (8000d64 <__NVIC_SetPriority+0x50>)
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	3b04      	subs	r3, #4
 8000d4c:	0112      	lsls	r2, r2, #4
 8000d4e:	b2d2      	uxtb	r2, r2
 8000d50:	440b      	add	r3, r1
 8000d52:	761a      	strb	r2, [r3, #24]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000e100 	.word	0xe000e100
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b089      	sub	sp, #36	@ 0x24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f1c3 0307 	rsb	r3, r3, #7
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	bf28      	it	cs
 8000d86:	2304      	movcs	r3, #4
 8000d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	2b06      	cmp	r3, #6
 8000d90:	d902      	bls.n	8000d98 <NVIC_EncodePriority+0x30>
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3b03      	subs	r3, #3
 8000d96:	e000      	b.n	8000d9a <NVIC_EncodePriority+0x32>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43da      	mvns	r2, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	401a      	ands	r2, r3
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db0:	f04f 31ff 	mov.w	r1, #4294967295
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43d9      	mvns	r1, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	4313      	orrs	r3, r2
         );
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3724      	adds	r7, #36	@ 0x24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ff4c 	bl	8000c74 <__NVIC_SetPriorityGrouping>
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
 8000df0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df6:	f7ff ff61 	bl	8000cbc <__NVIC_GetPriorityGrouping>
 8000dfa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	68b9      	ldr	r1, [r7, #8]
 8000e00:	6978      	ldr	r0, [r7, #20]
 8000e02:	f7ff ffb1 	bl	8000d68 <NVIC_EncodePriority>
 8000e06:	4602      	mov	r2, r0
 8000e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0c:	4611      	mov	r1, r2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ff80 	bl	8000d14 <__NVIC_SetPriority>
}
 8000e14:	bf00      	nop
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ff54 	bl	8000cd8 <__NVIC_EnableIRQ>
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	@ 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e46:	2300      	movs	r3, #0
 8000e48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
 8000e52:	e165      	b.n	8001120 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e54:	2201      	movs	r2, #1
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	697a      	ldr	r2, [r7, #20]
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	f040 8154 	bne.w	800111a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f003 0303 	and.w	r3, r3, #3
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d005      	beq.n	8000e8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e86:	2b02      	cmp	r3, #2
 8000e88:	d130      	bne.n	8000eec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	2203      	movs	r2, #3
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43db      	mvns	r3, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4013      	ands	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	68da      	ldr	r2, [r3, #12]
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	69ba      	ldr	r2, [r7, #24]
 8000eb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	091b      	lsrs	r3, r3, #4
 8000ed6:	f003 0201 	and.w	r2, r3, #1
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f003 0303 	and.w	r3, r3, #3
 8000ef4:	2b03      	cmp	r3, #3
 8000ef6:	d017      	beq.n	8000f28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	2203      	movs	r2, #3
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	689a      	ldr	r2, [r3, #8]
 8000f14:	69fb      	ldr	r3, [r7, #28]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1c:	69ba      	ldr	r2, [r7, #24]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	f003 0303 	and.w	r3, r3, #3
 8000f30:	2b02      	cmp	r3, #2
 8000f32:	d123      	bne.n	8000f7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	08da      	lsrs	r2, r3, #3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3208      	adds	r2, #8
 8000f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	f003 0307 	and.w	r3, r3, #7
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	220f      	movs	r2, #15
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	69ba      	ldr	r2, [r7, #24]
 8000f54:	4013      	ands	r3, r2
 8000f56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	691a      	ldr	r2, [r3, #16]
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	08da      	lsrs	r2, r3, #3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3208      	adds	r2, #8
 8000f76:	69b9      	ldr	r1, [r7, #24]
 8000f78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	2203      	movs	r2, #3
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0203 	and.w	r2, r3, #3
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f000 80ae 	beq.w	800111a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b5d      	ldr	r3, [pc, #372]	@ (8001138 <HAL_GPIO_Init+0x300>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc6:	4a5c      	ldr	r2, [pc, #368]	@ (8001138 <HAL_GPIO_Init+0x300>)
 8000fc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fce:	4b5a      	ldr	r3, [pc, #360]	@ (8001138 <HAL_GPIO_Init+0x300>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fda:	4a58      	ldr	r2, [pc, #352]	@ (800113c <HAL_GPIO_Init+0x304>)
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	089b      	lsrs	r3, r3, #2
 8000fe0:	3302      	adds	r3, #2
 8000fe2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	220f      	movs	r2, #15
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4f      	ldr	r2, [pc, #316]	@ (8001140 <HAL_GPIO_Init+0x308>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d025      	beq.n	8001052 <HAL_GPIO_Init+0x21a>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a4e      	ldr	r2, [pc, #312]	@ (8001144 <HAL_GPIO_Init+0x30c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d01f      	beq.n	800104e <HAL_GPIO_Init+0x216>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4a4d      	ldr	r2, [pc, #308]	@ (8001148 <HAL_GPIO_Init+0x310>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d019      	beq.n	800104a <HAL_GPIO_Init+0x212>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4a4c      	ldr	r2, [pc, #304]	@ (800114c <HAL_GPIO_Init+0x314>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d013      	beq.n	8001046 <HAL_GPIO_Init+0x20e>
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	4a4b      	ldr	r2, [pc, #300]	@ (8001150 <HAL_GPIO_Init+0x318>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d00d      	beq.n	8001042 <HAL_GPIO_Init+0x20a>
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a4a      	ldr	r2, [pc, #296]	@ (8001154 <HAL_GPIO_Init+0x31c>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d007      	beq.n	800103e <HAL_GPIO_Init+0x206>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4a49      	ldr	r2, [pc, #292]	@ (8001158 <HAL_GPIO_Init+0x320>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d101      	bne.n	800103a <HAL_GPIO_Init+0x202>
 8001036:	2306      	movs	r3, #6
 8001038:	e00c      	b.n	8001054 <HAL_GPIO_Init+0x21c>
 800103a:	2307      	movs	r3, #7
 800103c:	e00a      	b.n	8001054 <HAL_GPIO_Init+0x21c>
 800103e:	2305      	movs	r3, #5
 8001040:	e008      	b.n	8001054 <HAL_GPIO_Init+0x21c>
 8001042:	2304      	movs	r3, #4
 8001044:	e006      	b.n	8001054 <HAL_GPIO_Init+0x21c>
 8001046:	2303      	movs	r3, #3
 8001048:	e004      	b.n	8001054 <HAL_GPIO_Init+0x21c>
 800104a:	2302      	movs	r3, #2
 800104c:	e002      	b.n	8001054 <HAL_GPIO_Init+0x21c>
 800104e:	2301      	movs	r3, #1
 8001050:	e000      	b.n	8001054 <HAL_GPIO_Init+0x21c>
 8001052:	2300      	movs	r3, #0
 8001054:	69fa      	ldr	r2, [r7, #28]
 8001056:	f002 0203 	and.w	r2, r2, #3
 800105a:	0092      	lsls	r2, r2, #2
 800105c:	4093      	lsls	r3, r2
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4313      	orrs	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001064:	4935      	ldr	r1, [pc, #212]	@ (800113c <HAL_GPIO_Init+0x304>)
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	089b      	lsrs	r3, r3, #2
 800106a:	3302      	adds	r3, #2
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001072:	4b3a      	ldr	r3, [pc, #232]	@ (800115c <HAL_GPIO_Init+0x324>)
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	43db      	mvns	r3, r3
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4013      	ands	r3, r2
 8001080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001096:	4a31      	ldr	r2, [pc, #196]	@ (800115c <HAL_GPIO_Init+0x324>)
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800109c:	4b2f      	ldr	r3, [pc, #188]	@ (800115c <HAL_GPIO_Init+0x324>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	4013      	ands	r3, r2
 80010aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010c0:	4a26      	ldr	r2, [pc, #152]	@ (800115c <HAL_GPIO_Init+0x324>)
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010c6:	4b25      	ldr	r3, [pc, #148]	@ (800115c <HAL_GPIO_Init+0x324>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ea:	4a1c      	ldr	r2, [pc, #112]	@ (800115c <HAL_GPIO_Init+0x324>)
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010f0:	4b1a      	ldr	r3, [pc, #104]	@ (800115c <HAL_GPIO_Init+0x324>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	69ba      	ldr	r2, [r7, #24]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001114:	4a11      	ldr	r2, [pc, #68]	@ (800115c <HAL_GPIO_Init+0x324>)
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	3301      	adds	r3, #1
 800111e:	61fb      	str	r3, [r7, #28]
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	2b0f      	cmp	r3, #15
 8001124:	f67f ae96 	bls.w	8000e54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3724      	adds	r7, #36	@ 0x24
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800
 800113c:	40013800 	.word	0x40013800
 8001140:	40020000 	.word	0x40020000
 8001144:	40020400 	.word	0x40020400
 8001148:	40020800 	.word	0x40020800
 800114c:	40020c00 	.word	0x40020c00
 8001150:	40021000 	.word	0x40021000
 8001154:	40021400 	.word	0x40021400
 8001158:	40021800 	.word	0x40021800
 800115c:	40013c00 	.word	0x40013c00

08001160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	807b      	strh	r3, [r7, #2]
 800116c:	4613      	mov	r3, r2
 800116e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001170:	787b      	ldrb	r3, [r7, #1]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001176:	887a      	ldrh	r2, [r7, #2]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800117c:	e003      	b.n	8001186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800117e:	887b      	ldrh	r3, [r7, #2]
 8001180:	041a      	lsls	r2, r3, #16
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	619a      	str	r2, [r3, #24]
}
 8001186:	bf00      	nop
 8001188:	370c      	adds	r7, #12
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr

08001192 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001192:	b480      	push	{r7}
 8001194:	b085      	sub	sp, #20
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
 800119a:	460b      	mov	r3, r1
 800119c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	695b      	ldr	r3, [r3, #20]
 80011a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011a4:	887a      	ldrh	r2, [r7, #2]
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4013      	ands	r3, r2
 80011aa:	041a      	lsls	r2, r3, #16
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	887b      	ldrh	r3, [r7, #2]
 80011b2:	400b      	ands	r3, r1
 80011b4:	431a      	orrs	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	619a      	str	r2, [r3, #24]
}
 80011ba:	bf00      	nop
 80011bc:	3714      	adds	r7, #20
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
	...

080011c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d101      	bne.n	80011dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011d8:	2301      	movs	r3, #1
 80011da:	e0cc      	b.n	8001376 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011dc:	4b68      	ldr	r3, [pc, #416]	@ (8001380 <HAL_RCC_ClockConfig+0x1b8>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 030f 	and.w	r3, r3, #15
 80011e4:	683a      	ldr	r2, [r7, #0]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d90c      	bls.n	8001204 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ea:	4b65      	ldr	r3, [pc, #404]	@ (8001380 <HAL_RCC_ClockConfig+0x1b8>)
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011f2:	4b63      	ldr	r3, [pc, #396]	@ (8001380 <HAL_RCC_ClockConfig+0x1b8>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	683a      	ldr	r2, [r7, #0]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d001      	beq.n	8001204 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	e0b8      	b.n	8001376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f003 0302 	and.w	r3, r3, #2
 800120c:	2b00      	cmp	r3, #0
 800120e:	d020      	beq.n	8001252 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	2b00      	cmp	r3, #0
 800121a:	d005      	beq.n	8001228 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800121c:	4b59      	ldr	r3, [pc, #356]	@ (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	4a58      	ldr	r2, [pc, #352]	@ (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 8001222:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001226:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0308 	and.w	r3, r3, #8
 8001230:	2b00      	cmp	r3, #0
 8001232:	d005      	beq.n	8001240 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001234:	4b53      	ldr	r3, [pc, #332]	@ (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	4a52      	ldr	r2, [pc, #328]	@ (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 800123a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800123e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001240:	4b50      	ldr	r3, [pc, #320]	@ (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	494d      	ldr	r1, [pc, #308]	@ (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 800124e:	4313      	orrs	r3, r2
 8001250:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	2b00      	cmp	r3, #0
 800125c:	d044      	beq.n	80012e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b01      	cmp	r3, #1
 8001264:	d107      	bne.n	8001276 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001266:	4b47      	ldr	r3, [pc, #284]	@ (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d119      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e07f      	b.n	8001376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	2b02      	cmp	r3, #2
 800127c:	d003      	beq.n	8001286 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001282:	2b03      	cmp	r3, #3
 8001284:	d107      	bne.n	8001296 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001286:	4b3f      	ldr	r3, [pc, #252]	@ (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d109      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e06f      	b.n	8001376 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001296:	4b3b      	ldr	r3, [pc, #236]	@ (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e067      	b.n	8001376 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012a6:	4b37      	ldr	r3, [pc, #220]	@ (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f023 0203 	bic.w	r2, r3, #3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	4934      	ldr	r1, [pc, #208]	@ (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 80012b4:	4313      	orrs	r3, r2
 80012b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012b8:	f7ff fcac 	bl	8000c14 <HAL_GetTick>
 80012bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012be:	e00a      	b.n	80012d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012c0:	f7ff fca8 	bl	8000c14 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e04f      	b.n	8001376 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012d6:	4b2b      	ldr	r3, [pc, #172]	@ (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 020c 	and.w	r2, r3, #12
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d1eb      	bne.n	80012c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012e8:	4b25      	ldr	r3, [pc, #148]	@ (8001380 <HAL_RCC_ClockConfig+0x1b8>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 030f 	and.w	r3, r3, #15
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	429a      	cmp	r2, r3
 80012f4:	d20c      	bcs.n	8001310 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012f6:	4b22      	ldr	r3, [pc, #136]	@ (8001380 <HAL_RCC_ClockConfig+0x1b8>)
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012fe:	4b20      	ldr	r3, [pc, #128]	@ (8001380 <HAL_RCC_ClockConfig+0x1b8>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	683a      	ldr	r2, [r7, #0]
 8001308:	429a      	cmp	r2, r3
 800130a:	d001      	beq.n	8001310 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800130c:	2301      	movs	r3, #1
 800130e:	e032      	b.n	8001376 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0304 	and.w	r3, r3, #4
 8001318:	2b00      	cmp	r3, #0
 800131a:	d008      	beq.n	800132e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800131c:	4b19      	ldr	r3, [pc, #100]	@ (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	4916      	ldr	r1, [pc, #88]	@ (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 800132a:	4313      	orrs	r3, r2
 800132c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	2b00      	cmp	r3, #0
 8001338:	d009      	beq.n	800134e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800133a:	4b12      	ldr	r3, [pc, #72]	@ (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	490e      	ldr	r1, [pc, #56]	@ (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 800134a:	4313      	orrs	r3, r2
 800134c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800134e:	f000 f873 	bl	8001438 <HAL_RCC_GetSysClockFreq>
 8001352:	4602      	mov	r2, r0
 8001354:	4b0b      	ldr	r3, [pc, #44]	@ (8001384 <HAL_RCC_ClockConfig+0x1bc>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	091b      	lsrs	r3, r3, #4
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	490a      	ldr	r1, [pc, #40]	@ (8001388 <HAL_RCC_ClockConfig+0x1c0>)
 8001360:	5ccb      	ldrb	r3, [r1, r3]
 8001362:	fa22 f303 	lsr.w	r3, r2, r3
 8001366:	4a09      	ldr	r2, [pc, #36]	@ (800138c <HAL_RCC_ClockConfig+0x1c4>)
 8001368:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800136a:	4b09      	ldr	r3, [pc, #36]	@ (8001390 <HAL_RCC_ClockConfig+0x1c8>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff fb3c 	bl	80009ec <HAL_InitTick>

  return HAL_OK;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40023c00 	.word	0x40023c00
 8001384:	40023800 	.word	0x40023800
 8001388:	08007de8 	.word	0x08007de8
 800138c:	20000000 	.word	0x20000000
 8001390:	20000004 	.word	0x20000004

08001394 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001398:	4b03      	ldr	r3, [pc, #12]	@ (80013a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	4618      	mov	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000000 	.word	0x20000000

080013ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013b0:	f7ff fff0 	bl	8001394 <HAL_RCC_GetHCLKFreq>
 80013b4:	4602      	mov	r2, r0
 80013b6:	4b05      	ldr	r3, [pc, #20]	@ (80013cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	0a9b      	lsrs	r3, r3, #10
 80013bc:	f003 0307 	and.w	r3, r3, #7
 80013c0:	4903      	ldr	r1, [pc, #12]	@ (80013d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013c2:	5ccb      	ldrb	r3, [r1, r3]
 80013c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	40023800 	.word	0x40023800
 80013d0:	08007df8 	.word	0x08007df8

080013d4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	220f      	movs	r2, #15
 80013e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013e4:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <HAL_RCC_GetClockConfig+0x5c>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 0203 	and.w	r2, r3, #3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <HAL_RCC_GetClockConfig+0x5c>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <HAL_RCC_GetClockConfig+0x5c>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001408:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <HAL_RCC_GetClockConfig+0x5c>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	08db      	lsrs	r3, r3, #3
 800140e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001416:	4b07      	ldr	r3, [pc, #28]	@ (8001434 <HAL_RCC_GetClockConfig+0x60>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 020f 	and.w	r2, r3, #15
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	601a      	str	r2, [r3, #0]
}
 8001422:	bf00      	nop
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800
 8001434:	40023c00 	.word	0x40023c00

08001438 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800143c:	b0ae      	sub	sp, #184	@ 0xb8
 800143e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001440:	2300      	movs	r3, #0
 8001442:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001446:	2300      	movs	r3, #0
 8001448:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800144c:	2300      	movs	r3, #0
 800144e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001452:	2300      	movs	r3, #0
 8001454:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001458:	2300      	movs	r3, #0
 800145a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800145e:	4bcb      	ldr	r3, [pc, #812]	@ (800178c <HAL_RCC_GetSysClockFreq+0x354>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b0c      	cmp	r3, #12
 8001468:	f200 8206 	bhi.w	8001878 <HAL_RCC_GetSysClockFreq+0x440>
 800146c:	a201      	add	r2, pc, #4	@ (adr r2, 8001474 <HAL_RCC_GetSysClockFreq+0x3c>)
 800146e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001472:	bf00      	nop
 8001474:	080014a9 	.word	0x080014a9
 8001478:	08001879 	.word	0x08001879
 800147c:	08001879 	.word	0x08001879
 8001480:	08001879 	.word	0x08001879
 8001484:	080014b1 	.word	0x080014b1
 8001488:	08001879 	.word	0x08001879
 800148c:	08001879 	.word	0x08001879
 8001490:	08001879 	.word	0x08001879
 8001494:	080014b9 	.word	0x080014b9
 8001498:	08001879 	.word	0x08001879
 800149c:	08001879 	.word	0x08001879
 80014a0:	08001879 	.word	0x08001879
 80014a4:	080016a9 	.word	0x080016a9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014a8:	4bb9      	ldr	r3, [pc, #740]	@ (8001790 <HAL_RCC_GetSysClockFreq+0x358>)
 80014aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80014ae:	e1e7      	b.n	8001880 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014b0:	4bb8      	ldr	r3, [pc, #736]	@ (8001794 <HAL_RCC_GetSysClockFreq+0x35c>)
 80014b2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80014b6:	e1e3      	b.n	8001880 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014b8:	4bb4      	ldr	r3, [pc, #720]	@ (800178c <HAL_RCC_GetSysClockFreq+0x354>)
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014c4:	4bb1      	ldr	r3, [pc, #708]	@ (800178c <HAL_RCC_GetSysClockFreq+0x354>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d071      	beq.n	80015b4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014d0:	4bae      	ldr	r3, [pc, #696]	@ (800178c <HAL_RCC_GetSysClockFreq+0x354>)
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	099b      	lsrs	r3, r3, #6
 80014d6:	2200      	movs	r2, #0
 80014d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80014dc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80014e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80014e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80014ec:	2300      	movs	r3, #0
 80014ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80014f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80014f6:	4622      	mov	r2, r4
 80014f8:	462b      	mov	r3, r5
 80014fa:	f04f 0000 	mov.w	r0, #0
 80014fe:	f04f 0100 	mov.w	r1, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001508:	0150      	lsls	r0, r2, #5
 800150a:	4602      	mov	r2, r0
 800150c:	460b      	mov	r3, r1
 800150e:	4621      	mov	r1, r4
 8001510:	1a51      	subs	r1, r2, r1
 8001512:	6439      	str	r1, [r7, #64]	@ 0x40
 8001514:	4629      	mov	r1, r5
 8001516:	eb63 0301 	sbc.w	r3, r3, r1
 800151a:	647b      	str	r3, [r7, #68]	@ 0x44
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	f04f 0300 	mov.w	r3, #0
 8001524:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001528:	4649      	mov	r1, r9
 800152a:	018b      	lsls	r3, r1, #6
 800152c:	4641      	mov	r1, r8
 800152e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001532:	4641      	mov	r1, r8
 8001534:	018a      	lsls	r2, r1, #6
 8001536:	4641      	mov	r1, r8
 8001538:	1a51      	subs	r1, r2, r1
 800153a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800153c:	4649      	mov	r1, r9
 800153e:	eb63 0301 	sbc.w	r3, r3, r1
 8001542:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	f04f 0300 	mov.w	r3, #0
 800154c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001550:	4649      	mov	r1, r9
 8001552:	00cb      	lsls	r3, r1, #3
 8001554:	4641      	mov	r1, r8
 8001556:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800155a:	4641      	mov	r1, r8
 800155c:	00ca      	lsls	r2, r1, #3
 800155e:	4610      	mov	r0, r2
 8001560:	4619      	mov	r1, r3
 8001562:	4603      	mov	r3, r0
 8001564:	4622      	mov	r2, r4
 8001566:	189b      	adds	r3, r3, r2
 8001568:	633b      	str	r3, [r7, #48]	@ 0x30
 800156a:	462b      	mov	r3, r5
 800156c:	460a      	mov	r2, r1
 800156e:	eb42 0303 	adc.w	r3, r2, r3
 8001572:	637b      	str	r3, [r7, #52]	@ 0x34
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	f04f 0300 	mov.w	r3, #0
 800157c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001580:	4629      	mov	r1, r5
 8001582:	024b      	lsls	r3, r1, #9
 8001584:	4621      	mov	r1, r4
 8001586:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800158a:	4621      	mov	r1, r4
 800158c:	024a      	lsls	r2, r1, #9
 800158e:	4610      	mov	r0, r2
 8001590:	4619      	mov	r1, r3
 8001592:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001596:	2200      	movs	r2, #0
 8001598:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800159c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80015a0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80015a4:	f7fe fed4 	bl	8000350 <__aeabi_uldivmod>
 80015a8:	4602      	mov	r2, r0
 80015aa:	460b      	mov	r3, r1
 80015ac:	4613      	mov	r3, r2
 80015ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80015b2:	e067      	b.n	8001684 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015b4:	4b75      	ldr	r3, [pc, #468]	@ (800178c <HAL_RCC_GetSysClockFreq+0x354>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	099b      	lsrs	r3, r3, #6
 80015ba:	2200      	movs	r2, #0
 80015bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80015c0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80015c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80015c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015cc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80015ce:	2300      	movs	r3, #0
 80015d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80015d2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80015d6:	4622      	mov	r2, r4
 80015d8:	462b      	mov	r3, r5
 80015da:	f04f 0000 	mov.w	r0, #0
 80015de:	f04f 0100 	mov.w	r1, #0
 80015e2:	0159      	lsls	r1, r3, #5
 80015e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015e8:	0150      	lsls	r0, r2, #5
 80015ea:	4602      	mov	r2, r0
 80015ec:	460b      	mov	r3, r1
 80015ee:	4621      	mov	r1, r4
 80015f0:	1a51      	subs	r1, r2, r1
 80015f2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80015f4:	4629      	mov	r1, r5
 80015f6:	eb63 0301 	sbc.w	r3, r3, r1
 80015fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80015fc:	f04f 0200 	mov.w	r2, #0
 8001600:	f04f 0300 	mov.w	r3, #0
 8001604:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001608:	4649      	mov	r1, r9
 800160a:	018b      	lsls	r3, r1, #6
 800160c:	4641      	mov	r1, r8
 800160e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001612:	4641      	mov	r1, r8
 8001614:	018a      	lsls	r2, r1, #6
 8001616:	4641      	mov	r1, r8
 8001618:	ebb2 0a01 	subs.w	sl, r2, r1
 800161c:	4649      	mov	r1, r9
 800161e:	eb63 0b01 	sbc.w	fp, r3, r1
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	f04f 0300 	mov.w	r3, #0
 800162a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800162e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001632:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001636:	4692      	mov	sl, r2
 8001638:	469b      	mov	fp, r3
 800163a:	4623      	mov	r3, r4
 800163c:	eb1a 0303 	adds.w	r3, sl, r3
 8001640:	623b      	str	r3, [r7, #32]
 8001642:	462b      	mov	r3, r5
 8001644:	eb4b 0303 	adc.w	r3, fp, r3
 8001648:	627b      	str	r3, [r7, #36]	@ 0x24
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	f04f 0300 	mov.w	r3, #0
 8001652:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001656:	4629      	mov	r1, r5
 8001658:	028b      	lsls	r3, r1, #10
 800165a:	4621      	mov	r1, r4
 800165c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001660:	4621      	mov	r1, r4
 8001662:	028a      	lsls	r2, r1, #10
 8001664:	4610      	mov	r0, r2
 8001666:	4619      	mov	r1, r3
 8001668:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800166c:	2200      	movs	r2, #0
 800166e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001670:	677a      	str	r2, [r7, #116]	@ 0x74
 8001672:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001676:	f7fe fe6b 	bl	8000350 <__aeabi_uldivmod>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4613      	mov	r3, r2
 8001680:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001684:	4b41      	ldr	r3, [pc, #260]	@ (800178c <HAL_RCC_GetSysClockFreq+0x354>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	0c1b      	lsrs	r3, r3, #16
 800168a:	f003 0303 	and.w	r3, r3, #3
 800168e:	3301      	adds	r3, #1
 8001690:	005b      	lsls	r3, r3, #1
 8001692:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001696:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800169a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800169e:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80016a6:	e0eb      	b.n	8001880 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016a8:	4b38      	ldr	r3, [pc, #224]	@ (800178c <HAL_RCC_GetSysClockFreq+0x354>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80016b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016b4:	4b35      	ldr	r3, [pc, #212]	@ (800178c <HAL_RCC_GetSysClockFreq+0x354>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d06b      	beq.n	8001798 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016c0:	4b32      	ldr	r3, [pc, #200]	@ (800178c <HAL_RCC_GetSysClockFreq+0x354>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	099b      	lsrs	r3, r3, #6
 80016c6:	2200      	movs	r2, #0
 80016c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80016ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80016cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80016ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016d2:	663b      	str	r3, [r7, #96]	@ 0x60
 80016d4:	2300      	movs	r3, #0
 80016d6:	667b      	str	r3, [r7, #100]	@ 0x64
 80016d8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80016dc:	4622      	mov	r2, r4
 80016de:	462b      	mov	r3, r5
 80016e0:	f04f 0000 	mov.w	r0, #0
 80016e4:	f04f 0100 	mov.w	r1, #0
 80016e8:	0159      	lsls	r1, r3, #5
 80016ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016ee:	0150      	lsls	r0, r2, #5
 80016f0:	4602      	mov	r2, r0
 80016f2:	460b      	mov	r3, r1
 80016f4:	4621      	mov	r1, r4
 80016f6:	1a51      	subs	r1, r2, r1
 80016f8:	61b9      	str	r1, [r7, #24]
 80016fa:	4629      	mov	r1, r5
 80016fc:	eb63 0301 	sbc.w	r3, r3, r1
 8001700:	61fb      	str	r3, [r7, #28]
 8001702:	f04f 0200 	mov.w	r2, #0
 8001706:	f04f 0300 	mov.w	r3, #0
 800170a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800170e:	4659      	mov	r1, fp
 8001710:	018b      	lsls	r3, r1, #6
 8001712:	4651      	mov	r1, sl
 8001714:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001718:	4651      	mov	r1, sl
 800171a:	018a      	lsls	r2, r1, #6
 800171c:	4651      	mov	r1, sl
 800171e:	ebb2 0801 	subs.w	r8, r2, r1
 8001722:	4659      	mov	r1, fp
 8001724:	eb63 0901 	sbc.w	r9, r3, r1
 8001728:	f04f 0200 	mov.w	r2, #0
 800172c:	f04f 0300 	mov.w	r3, #0
 8001730:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001734:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001738:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800173c:	4690      	mov	r8, r2
 800173e:	4699      	mov	r9, r3
 8001740:	4623      	mov	r3, r4
 8001742:	eb18 0303 	adds.w	r3, r8, r3
 8001746:	613b      	str	r3, [r7, #16]
 8001748:	462b      	mov	r3, r5
 800174a:	eb49 0303 	adc.w	r3, r9, r3
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	f04f 0200 	mov.w	r2, #0
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800175c:	4629      	mov	r1, r5
 800175e:	024b      	lsls	r3, r1, #9
 8001760:	4621      	mov	r1, r4
 8001762:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001766:	4621      	mov	r1, r4
 8001768:	024a      	lsls	r2, r1, #9
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001772:	2200      	movs	r2, #0
 8001774:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001776:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001778:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800177c:	f7fe fde8 	bl	8000350 <__aeabi_uldivmod>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4613      	mov	r3, r2
 8001786:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800178a:	e065      	b.n	8001858 <HAL_RCC_GetSysClockFreq+0x420>
 800178c:	40023800 	.word	0x40023800
 8001790:	00f42400 	.word	0x00f42400
 8001794:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001798:	4b3d      	ldr	r3, [pc, #244]	@ (8001890 <HAL_RCC_GetSysClockFreq+0x458>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	099b      	lsrs	r3, r3, #6
 800179e:	2200      	movs	r2, #0
 80017a0:	4618      	mov	r0, r3
 80017a2:	4611      	mov	r1, r2
 80017a4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80017a8:	653b      	str	r3, [r7, #80]	@ 0x50
 80017aa:	2300      	movs	r3, #0
 80017ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80017ae:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80017b2:	4642      	mov	r2, r8
 80017b4:	464b      	mov	r3, r9
 80017b6:	f04f 0000 	mov.w	r0, #0
 80017ba:	f04f 0100 	mov.w	r1, #0
 80017be:	0159      	lsls	r1, r3, #5
 80017c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017c4:	0150      	lsls	r0, r2, #5
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4641      	mov	r1, r8
 80017cc:	1a51      	subs	r1, r2, r1
 80017ce:	60b9      	str	r1, [r7, #8]
 80017d0:	4649      	mov	r1, r9
 80017d2:	eb63 0301 	sbc.w	r3, r3, r1
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80017e4:	4659      	mov	r1, fp
 80017e6:	018b      	lsls	r3, r1, #6
 80017e8:	4651      	mov	r1, sl
 80017ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ee:	4651      	mov	r1, sl
 80017f0:	018a      	lsls	r2, r1, #6
 80017f2:	4651      	mov	r1, sl
 80017f4:	1a54      	subs	r4, r2, r1
 80017f6:	4659      	mov	r1, fp
 80017f8:	eb63 0501 	sbc.w	r5, r3, r1
 80017fc:	f04f 0200 	mov.w	r2, #0
 8001800:	f04f 0300 	mov.w	r3, #0
 8001804:	00eb      	lsls	r3, r5, #3
 8001806:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800180a:	00e2      	lsls	r2, r4, #3
 800180c:	4614      	mov	r4, r2
 800180e:	461d      	mov	r5, r3
 8001810:	4643      	mov	r3, r8
 8001812:	18e3      	adds	r3, r4, r3
 8001814:	603b      	str	r3, [r7, #0]
 8001816:	464b      	mov	r3, r9
 8001818:	eb45 0303 	adc.w	r3, r5, r3
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	e9d7 4500 	ldrd	r4, r5, [r7]
 800182a:	4629      	mov	r1, r5
 800182c:	028b      	lsls	r3, r1, #10
 800182e:	4621      	mov	r1, r4
 8001830:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001834:	4621      	mov	r1, r4
 8001836:	028a      	lsls	r2, r1, #10
 8001838:	4610      	mov	r0, r2
 800183a:	4619      	mov	r1, r3
 800183c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001840:	2200      	movs	r2, #0
 8001842:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001844:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001846:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800184a:	f7fe fd81 	bl	8000350 <__aeabi_uldivmod>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	4613      	mov	r3, r2
 8001854:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001858:	4b0d      	ldr	r3, [pc, #52]	@ (8001890 <HAL_RCC_GetSysClockFreq+0x458>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	0f1b      	lsrs	r3, r3, #28
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001866:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800186a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800186e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001872:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001876:	e003      	b.n	8001880 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001878:	4b06      	ldr	r3, [pc, #24]	@ (8001894 <HAL_RCC_GetSysClockFreq+0x45c>)
 800187a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800187e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001880:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001884:	4618      	mov	r0, r3
 8001886:	37b8      	adds	r7, #184	@ 0xb8
 8001888:	46bd      	mov	sp, r7
 800188a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800188e:	bf00      	nop
 8001890:	40023800 	.word	0x40023800
 8001894:	00f42400 	.word	0x00f42400

08001898 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e28d      	b.n	8001dc6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 8083 	beq.w	80019be <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80018b8:	4b94      	ldr	r3, [pc, #592]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f003 030c 	and.w	r3, r3, #12
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d019      	beq.n	80018f8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80018c4:	4b91      	ldr	r3, [pc, #580]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 030c 	and.w	r3, r3, #12
        || \
 80018cc:	2b08      	cmp	r3, #8
 80018ce:	d106      	bne.n	80018de <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80018d0:	4b8e      	ldr	r3, [pc, #568]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018d8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018dc:	d00c      	beq.n	80018f8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018de:	4b8b      	ldr	r3, [pc, #556]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80018e6:	2b0c      	cmp	r3, #12
 80018e8:	d112      	bne.n	8001910 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ea:	4b88      	ldr	r3, [pc, #544]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80018f6:	d10b      	bne.n	8001910 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f8:	4b84      	ldr	r3, [pc, #528]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d05b      	beq.n	80019bc <HAL_RCC_OscConfig+0x124>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d157      	bne.n	80019bc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e25a      	b.n	8001dc6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001918:	d106      	bne.n	8001928 <HAL_RCC_OscConfig+0x90>
 800191a:	4b7c      	ldr	r3, [pc, #496]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a7b      	ldr	r2, [pc, #492]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 8001920:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001924:	6013      	str	r3, [r2, #0]
 8001926:	e01d      	b.n	8001964 <HAL_RCC_OscConfig+0xcc>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001930:	d10c      	bne.n	800194c <HAL_RCC_OscConfig+0xb4>
 8001932:	4b76      	ldr	r3, [pc, #472]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a75      	ldr	r2, [pc, #468]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 8001938:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800193c:	6013      	str	r3, [r2, #0]
 800193e:	4b73      	ldr	r3, [pc, #460]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a72      	ldr	r2, [pc, #456]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 8001944:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001948:	6013      	str	r3, [r2, #0]
 800194a:	e00b      	b.n	8001964 <HAL_RCC_OscConfig+0xcc>
 800194c:	4b6f      	ldr	r3, [pc, #444]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a6e      	ldr	r2, [pc, #440]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 8001952:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001956:	6013      	str	r3, [r2, #0]
 8001958:	4b6c      	ldr	r3, [pc, #432]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a6b      	ldr	r2, [pc, #428]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 800195e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001962:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d013      	beq.n	8001994 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196c:	f7ff f952 	bl	8000c14 <HAL_GetTick>
 8001970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001972:	e008      	b.n	8001986 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001974:	f7ff f94e 	bl	8000c14 <HAL_GetTick>
 8001978:	4602      	mov	r2, r0
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b64      	cmp	r3, #100	@ 0x64
 8001980:	d901      	bls.n	8001986 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e21f      	b.n	8001dc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001986:	4b61      	ldr	r3, [pc, #388]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0f0      	beq.n	8001974 <HAL_RCC_OscConfig+0xdc>
 8001992:	e014      	b.n	80019be <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001994:	f7ff f93e 	bl	8000c14 <HAL_GetTick>
 8001998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800199c:	f7ff f93a 	bl	8000c14 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b64      	cmp	r3, #100	@ 0x64
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e20b      	b.n	8001dc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019ae:	4b57      	ldr	r3, [pc, #348]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1f0      	bne.n	800199c <HAL_RCC_OscConfig+0x104>
 80019ba:	e000      	b.n	80019be <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d06f      	beq.n	8001aaa <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80019ca:	4b50      	ldr	r3, [pc, #320]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 030c 	and.w	r3, r3, #12
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d017      	beq.n	8001a06 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019d6:	4b4d      	ldr	r3, [pc, #308]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 80019d8:	689b      	ldr	r3, [r3, #8]
 80019da:	f003 030c 	and.w	r3, r3, #12
        || \
 80019de:	2b08      	cmp	r3, #8
 80019e0:	d105      	bne.n	80019ee <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019e2:	4b4a      	ldr	r3, [pc, #296]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00b      	beq.n	8001a06 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019ee:	4b47      	ldr	r3, [pc, #284]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80019f6:	2b0c      	cmp	r3, #12
 80019f8:	d11c      	bne.n	8001a34 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019fa:	4b44      	ldr	r3, [pc, #272]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d116      	bne.n	8001a34 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a06:	4b41      	ldr	r3, [pc, #260]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d005      	beq.n	8001a1e <HAL_RCC_OscConfig+0x186>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d001      	beq.n	8001a1e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e1d3      	b.n	8001dc6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	4937      	ldr	r1, [pc, #220]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a32:	e03a      	b.n	8001aaa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d020      	beq.n	8001a7e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a3c:	4b34      	ldr	r3, [pc, #208]	@ (8001b10 <HAL_RCC_OscConfig+0x278>)
 8001a3e:	2201      	movs	r2, #1
 8001a40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a42:	f7ff f8e7 	bl	8000c14 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a4a:	f7ff f8e3 	bl	8000c14 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e1b4      	b.n	8001dc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f0      	beq.n	8001a4a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a68:	4b28      	ldr	r3, [pc, #160]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	691b      	ldr	r3, [r3, #16]
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	4925      	ldr	r1, [pc, #148]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	600b      	str	r3, [r1, #0]
 8001a7c:	e015      	b.n	8001aaa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a7e:	4b24      	ldr	r3, [pc, #144]	@ (8001b10 <HAL_RCC_OscConfig+0x278>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a84:	f7ff f8c6 	bl	8000c14 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a8c:	f7ff f8c2 	bl	8000c14 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b02      	cmp	r3, #2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e193      	b.n	8001dc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0302 	and.w	r3, r3, #2
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f0      	bne.n	8001a8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d036      	beq.n	8001b24 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	695b      	ldr	r3, [r3, #20]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d016      	beq.n	8001aec <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001abe:	4b15      	ldr	r3, [pc, #84]	@ (8001b14 <HAL_RCC_OscConfig+0x27c>)
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac4:	f7ff f8a6 	bl	8000c14 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001acc:	f7ff f8a2 	bl	8000c14 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e173      	b.n	8001dc6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ade:	4b0b      	ldr	r3, [pc, #44]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 8001ae0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d0f0      	beq.n	8001acc <HAL_RCC_OscConfig+0x234>
 8001aea:	e01b      	b.n	8001b24 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aec:	4b09      	ldr	r3, [pc, #36]	@ (8001b14 <HAL_RCC_OscConfig+0x27c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af2:	f7ff f88f 	bl	8000c14 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af8:	e00e      	b.n	8001b18 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001afa:	f7ff f88b 	bl	8000c14 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d907      	bls.n	8001b18 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e15c      	b.n	8001dc6 <HAL_RCC_OscConfig+0x52e>
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	42470000 	.word	0x42470000
 8001b14:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b18:	4b8a      	ldr	r3, [pc, #552]	@ (8001d44 <HAL_RCC_OscConfig+0x4ac>)
 8001b1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1ea      	bne.n	8001afa <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 8097 	beq.w	8001c60 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b32:	2300      	movs	r3, #0
 8001b34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b36:	4b83      	ldr	r3, [pc, #524]	@ (8001d44 <HAL_RCC_OscConfig+0x4ac>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10f      	bne.n	8001b62 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	4b7f      	ldr	r3, [pc, #508]	@ (8001d44 <HAL_RCC_OscConfig+0x4ac>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4a:	4a7e      	ldr	r2, [pc, #504]	@ (8001d44 <HAL_RCC_OscConfig+0x4ac>)
 8001b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b52:	4b7c      	ldr	r3, [pc, #496]	@ (8001d44 <HAL_RCC_OscConfig+0x4ac>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b62:	4b79      	ldr	r3, [pc, #484]	@ (8001d48 <HAL_RCC_OscConfig+0x4b0>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d118      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b6e:	4b76      	ldr	r3, [pc, #472]	@ (8001d48 <HAL_RCC_OscConfig+0x4b0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a75      	ldr	r2, [pc, #468]	@ (8001d48 <HAL_RCC_OscConfig+0x4b0>)
 8001b74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b7a:	f7ff f84b 	bl	8000c14 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b82:	f7ff f847 	bl	8000c14 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e118      	b.n	8001dc6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b94:	4b6c      	ldr	r3, [pc, #432]	@ (8001d48 <HAL_RCC_OscConfig+0x4b0>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f0      	beq.n	8001b82 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d106      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x31e>
 8001ba8:	4b66      	ldr	r3, [pc, #408]	@ (8001d44 <HAL_RCC_OscConfig+0x4ac>)
 8001baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bac:	4a65      	ldr	r2, [pc, #404]	@ (8001d44 <HAL_RCC_OscConfig+0x4ac>)
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bb4:	e01c      	b.n	8001bf0 <HAL_RCC_OscConfig+0x358>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2b05      	cmp	r3, #5
 8001bbc:	d10c      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x340>
 8001bbe:	4b61      	ldr	r3, [pc, #388]	@ (8001d44 <HAL_RCC_OscConfig+0x4ac>)
 8001bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bc2:	4a60      	ldr	r2, [pc, #384]	@ (8001d44 <HAL_RCC_OscConfig+0x4ac>)
 8001bc4:	f043 0304 	orr.w	r3, r3, #4
 8001bc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bca:	4b5e      	ldr	r3, [pc, #376]	@ (8001d44 <HAL_RCC_OscConfig+0x4ac>)
 8001bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bce:	4a5d      	ldr	r2, [pc, #372]	@ (8001d44 <HAL_RCC_OscConfig+0x4ac>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bd6:	e00b      	b.n	8001bf0 <HAL_RCC_OscConfig+0x358>
 8001bd8:	4b5a      	ldr	r3, [pc, #360]	@ (8001d44 <HAL_RCC_OscConfig+0x4ac>)
 8001bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bdc:	4a59      	ldr	r2, [pc, #356]	@ (8001d44 <HAL_RCC_OscConfig+0x4ac>)
 8001bde:	f023 0301 	bic.w	r3, r3, #1
 8001be2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001be4:	4b57      	ldr	r3, [pc, #348]	@ (8001d44 <HAL_RCC_OscConfig+0x4ac>)
 8001be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001be8:	4a56      	ldr	r2, [pc, #344]	@ (8001d44 <HAL_RCC_OscConfig+0x4ac>)
 8001bea:	f023 0304 	bic.w	r3, r3, #4
 8001bee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d015      	beq.n	8001c24 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf8:	f7ff f80c 	bl	8000c14 <HAL_GetTick>
 8001bfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bfe:	e00a      	b.n	8001c16 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c00:	f7ff f808 	bl	8000c14 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	693b      	ldr	r3, [r7, #16]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e0d7      	b.n	8001dc6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c16:	4b4b      	ldr	r3, [pc, #300]	@ (8001d44 <HAL_RCC_OscConfig+0x4ac>)
 8001c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0ee      	beq.n	8001c00 <HAL_RCC_OscConfig+0x368>
 8001c22:	e014      	b.n	8001c4e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c24:	f7fe fff6 	bl	8000c14 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c2a:	e00a      	b.n	8001c42 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2c:	f7fe fff2 	bl	8000c14 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e0c1      	b.n	8001dc6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c42:	4b40      	ldr	r3, [pc, #256]	@ (8001d44 <HAL_RCC_OscConfig+0x4ac>)
 8001c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1ee      	bne.n	8001c2c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c4e:	7dfb      	ldrb	r3, [r7, #23]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d105      	bne.n	8001c60 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c54:	4b3b      	ldr	r3, [pc, #236]	@ (8001d44 <HAL_RCC_OscConfig+0x4ac>)
 8001c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c58:	4a3a      	ldr	r2, [pc, #232]	@ (8001d44 <HAL_RCC_OscConfig+0x4ac>)
 8001c5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	f000 80ad 	beq.w	8001dc4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c6a:	4b36      	ldr	r3, [pc, #216]	@ (8001d44 <HAL_RCC_OscConfig+0x4ac>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 030c 	and.w	r3, r3, #12
 8001c72:	2b08      	cmp	r3, #8
 8001c74:	d060      	beq.n	8001d38 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d145      	bne.n	8001d0a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c7e:	4b33      	ldr	r3, [pc, #204]	@ (8001d4c <HAL_RCC_OscConfig+0x4b4>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c84:	f7fe ffc6 	bl	8000c14 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7fe ffc2 	bl	8000c14 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e093      	b.n	8001dc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c9e:	4b29      	ldr	r3, [pc, #164]	@ (8001d44 <HAL_RCC_OscConfig+0x4ac>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1f0      	bne.n	8001c8c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69da      	ldr	r2, [r3, #28]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb8:	019b      	lsls	r3, r3, #6
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc0:	085b      	lsrs	r3, r3, #1
 8001cc2:	3b01      	subs	r3, #1
 8001cc4:	041b      	lsls	r3, r3, #16
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ccc:	061b      	lsls	r3, r3, #24
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cd4:	071b      	lsls	r3, r3, #28
 8001cd6:	491b      	ldr	r1, [pc, #108]	@ (8001d44 <HAL_RCC_OscConfig+0x4ac>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d4c <HAL_RCC_OscConfig+0x4b4>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce2:	f7fe ff97 	bl	8000c14 <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cea:	f7fe ff93 	bl	8000c14 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e064      	b.n	8001dc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfc:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <HAL_RCC_OscConfig+0x4ac>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d0f0      	beq.n	8001cea <HAL_RCC_OscConfig+0x452>
 8001d08:	e05c      	b.n	8001dc4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d0a:	4b10      	ldr	r3, [pc, #64]	@ (8001d4c <HAL_RCC_OscConfig+0x4b4>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d10:	f7fe ff80 	bl	8000c14 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d16:	e008      	b.n	8001d2a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d18:	f7fe ff7c 	bl	8000c14 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e04d      	b.n	8001dc6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d2a:	4b06      	ldr	r3, [pc, #24]	@ (8001d44 <HAL_RCC_OscConfig+0x4ac>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1f0      	bne.n	8001d18 <HAL_RCC_OscConfig+0x480>
 8001d36:	e045      	b.n	8001dc4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	699b      	ldr	r3, [r3, #24]
 8001d3c:	2b01      	cmp	r3, #1
 8001d3e:	d107      	bne.n	8001d50 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e040      	b.n	8001dc6 <HAL_RCC_OscConfig+0x52e>
 8001d44:	40023800 	.word	0x40023800
 8001d48:	40007000 	.word	0x40007000
 8001d4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d50:	4b1f      	ldr	r3, [pc, #124]	@ (8001dd0 <HAL_RCC_OscConfig+0x538>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	699b      	ldr	r3, [r3, #24]
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d030      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d129      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d122      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d7a:	68fa      	ldr	r2, [r7, #12]
 8001d7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d80:	4013      	ands	r3, r2
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d119      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d96:	085b      	lsrs	r3, r3, #1
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d10f      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001daa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d107      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dba:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e000      	b.n	8001dc6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3718      	adds	r7, #24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40023800 	.word	0x40023800

08001dd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d101      	bne.n	8001de6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e041      	b.n	8001e6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d106      	bne.n	8001e00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f839 	bl	8001e72 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2202      	movs	r2, #2
 8001e04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3304      	adds	r3, #4
 8001e10:	4619      	mov	r1, r3
 8001e12:	4610      	mov	r0, r2
 8001e14:	f000 f9c0 	bl	8002198 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e68:	2300      	movs	r3, #0
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001e72:	b480      	push	{r7}
 8001e74:	b083      	sub	sp, #12
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e7a:	bf00      	nop
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d001      	beq.n	8001ea0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e04e      	b.n	8001f3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2202      	movs	r2, #2
 8001ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f042 0201 	orr.w	r2, r2, #1
 8001eb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a23      	ldr	r2, [pc, #140]	@ (8001f4c <HAL_TIM_Base_Start_IT+0xc4>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d022      	beq.n	8001f08 <HAL_TIM_Base_Start_IT+0x80>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001eca:	d01d      	beq.n	8001f08 <HAL_TIM_Base_Start_IT+0x80>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f50 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d018      	beq.n	8001f08 <HAL_TIM_Base_Start_IT+0x80>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a1e      	ldr	r2, [pc, #120]	@ (8001f54 <HAL_TIM_Base_Start_IT+0xcc>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d013      	beq.n	8001f08 <HAL_TIM_Base_Start_IT+0x80>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a1c      	ldr	r2, [pc, #112]	@ (8001f58 <HAL_TIM_Base_Start_IT+0xd0>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d00e      	beq.n	8001f08 <HAL_TIM_Base_Start_IT+0x80>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4a1b      	ldr	r2, [pc, #108]	@ (8001f5c <HAL_TIM_Base_Start_IT+0xd4>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d009      	beq.n	8001f08 <HAL_TIM_Base_Start_IT+0x80>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a19      	ldr	r2, [pc, #100]	@ (8001f60 <HAL_TIM_Base_Start_IT+0xd8>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d004      	beq.n	8001f08 <HAL_TIM_Base_Start_IT+0x80>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a18      	ldr	r2, [pc, #96]	@ (8001f64 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d111      	bne.n	8001f2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2b06      	cmp	r3, #6
 8001f18:	d010      	beq.n	8001f3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f042 0201 	orr.w	r2, r2, #1
 8001f28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f2a:	e007      	b.n	8001f3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f042 0201 	orr.w	r2, r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3714      	adds	r7, #20
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40010000 	.word	0x40010000
 8001f50:	40000400 	.word	0x40000400
 8001f54:	40000800 	.word	0x40000800
 8001f58:	40000c00 	.word	0x40000c00
 8001f5c:	40010400 	.word	0x40010400
 8001f60:	40014000 	.word	0x40014000
 8001f64:	40001800 	.word	0x40001800

08001f68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d020      	beq.n	8001fcc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f003 0302 	and.w	r3, r3, #2
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d01b      	beq.n	8001fcc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f06f 0202 	mvn.w	r2, #2
 8001f9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f000 f8d2 	bl	800215c <HAL_TIM_IC_CaptureCallback>
 8001fb8:	e005      	b.n	8001fc6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 f8c4 	bl	8002148 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f000 f8d5 	bl	8002170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	f003 0304 	and.w	r3, r3, #4
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d020      	beq.n	8002018 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d01b      	beq.n	8002018 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0204 	mvn.w	r2, #4
 8001fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2202      	movs	r2, #2
 8001fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f8ac 	bl	800215c <HAL_TIM_IC_CaptureCallback>
 8002004:	e005      	b.n	8002012 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f89e 	bl	8002148 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f000 f8af 	bl	8002170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b00      	cmp	r3, #0
 8002020:	d020      	beq.n	8002064 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	f003 0308 	and.w	r3, r3, #8
 8002028:	2b00      	cmp	r3, #0
 800202a:	d01b      	beq.n	8002064 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0208 	mvn.w	r2, #8
 8002034:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2204      	movs	r2, #4
 800203a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	69db      	ldr	r3, [r3, #28]
 8002042:	f003 0303 	and.w	r3, r3, #3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f886 	bl	800215c <HAL_TIM_IC_CaptureCallback>
 8002050:	e005      	b.n	800205e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 f878 	bl	8002148 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f889 	bl	8002170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	f003 0310 	and.w	r3, r3, #16
 800206a:	2b00      	cmp	r3, #0
 800206c:	d020      	beq.n	80020b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f003 0310 	and.w	r3, r3, #16
 8002074:	2b00      	cmp	r3, #0
 8002076:	d01b      	beq.n	80020b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f06f 0210 	mvn.w	r2, #16
 8002080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2208      	movs	r2, #8
 8002086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002092:	2b00      	cmp	r3, #0
 8002094:	d003      	beq.n	800209e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f860 	bl	800215c <HAL_TIM_IC_CaptureCallback>
 800209c:	e005      	b.n	80020aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f852 	bl	8002148 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f863 	bl	8002170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00c      	beq.n	80020d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d007      	beq.n	80020d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0201 	mvn.w	r2, #1
 80020cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7fe fc4c 	bl	800096c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00c      	beq.n	80020f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d007      	beq.n	80020f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80020f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f900 	bl	80022f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d00c      	beq.n	800211c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002108:	2b00      	cmp	r3, #0
 800210a:	d007      	beq.n	800211c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	f000 f834 	bl	8002184 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	f003 0320 	and.w	r3, r3, #32
 8002122:	2b00      	cmp	r3, #0
 8002124:	d00c      	beq.n	8002140 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f003 0320 	and.w	r3, r3, #32
 800212c:	2b00      	cmp	r3, #0
 800212e:	d007      	beq.n	8002140 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f06f 0220 	mvn.w	r2, #32
 8002138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f000 f8d2 	bl	80022e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002140:	bf00      	nop
 8002142:	3710      	adds	r7, #16
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}

08002148 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002150:	bf00      	nop
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800215c:	b480      	push	{r7}
 800215e:	b083      	sub	sp, #12
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002198:	b480      	push	{r7}
 800219a:	b085      	sub	sp, #20
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a43      	ldr	r2, [pc, #268]	@ (80022b8 <TIM_Base_SetConfig+0x120>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d013      	beq.n	80021d8 <TIM_Base_SetConfig+0x40>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021b6:	d00f      	beq.n	80021d8 <TIM_Base_SetConfig+0x40>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a40      	ldr	r2, [pc, #256]	@ (80022bc <TIM_Base_SetConfig+0x124>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d00b      	beq.n	80021d8 <TIM_Base_SetConfig+0x40>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a3f      	ldr	r2, [pc, #252]	@ (80022c0 <TIM_Base_SetConfig+0x128>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d007      	beq.n	80021d8 <TIM_Base_SetConfig+0x40>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a3e      	ldr	r2, [pc, #248]	@ (80022c4 <TIM_Base_SetConfig+0x12c>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d003      	beq.n	80021d8 <TIM_Base_SetConfig+0x40>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a3d      	ldr	r2, [pc, #244]	@ (80022c8 <TIM_Base_SetConfig+0x130>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d108      	bne.n	80021ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a32      	ldr	r2, [pc, #200]	@ (80022b8 <TIM_Base_SetConfig+0x120>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d02b      	beq.n	800224a <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021f8:	d027      	beq.n	800224a <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a2f      	ldr	r2, [pc, #188]	@ (80022bc <TIM_Base_SetConfig+0x124>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d023      	beq.n	800224a <TIM_Base_SetConfig+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a2e      	ldr	r2, [pc, #184]	@ (80022c0 <TIM_Base_SetConfig+0x128>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d01f      	beq.n	800224a <TIM_Base_SetConfig+0xb2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a2d      	ldr	r2, [pc, #180]	@ (80022c4 <TIM_Base_SetConfig+0x12c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d01b      	beq.n	800224a <TIM_Base_SetConfig+0xb2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a2c      	ldr	r2, [pc, #176]	@ (80022c8 <TIM_Base_SetConfig+0x130>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d017      	beq.n	800224a <TIM_Base_SetConfig+0xb2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a2b      	ldr	r2, [pc, #172]	@ (80022cc <TIM_Base_SetConfig+0x134>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d013      	beq.n	800224a <TIM_Base_SetConfig+0xb2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a2a      	ldr	r2, [pc, #168]	@ (80022d0 <TIM_Base_SetConfig+0x138>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d00f      	beq.n	800224a <TIM_Base_SetConfig+0xb2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a29      	ldr	r2, [pc, #164]	@ (80022d4 <TIM_Base_SetConfig+0x13c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d00b      	beq.n	800224a <TIM_Base_SetConfig+0xb2>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a28      	ldr	r2, [pc, #160]	@ (80022d8 <TIM_Base_SetConfig+0x140>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d007      	beq.n	800224a <TIM_Base_SetConfig+0xb2>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a27      	ldr	r2, [pc, #156]	@ (80022dc <TIM_Base_SetConfig+0x144>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d003      	beq.n	800224a <TIM_Base_SetConfig+0xb2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a26      	ldr	r2, [pc, #152]	@ (80022e0 <TIM_Base_SetConfig+0x148>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d108      	bne.n	800225c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002250:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4313      	orrs	r3, r2
 800225a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	4313      	orrs	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	4a0e      	ldr	r2, [pc, #56]	@ (80022b8 <TIM_Base_SetConfig+0x120>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d003      	beq.n	800228a <TIM_Base_SetConfig+0xf2>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a10      	ldr	r2, [pc, #64]	@ (80022c8 <TIM_Base_SetConfig+0x130>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d103      	bne.n	8002292 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	691a      	ldr	r2, [r3, #16]
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f043 0204 	orr.w	r2, r3, #4
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2201      	movs	r2, #1
 80022a2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	601a      	str	r2, [r3, #0]
}
 80022aa:	bf00      	nop
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	40010000 	.word	0x40010000
 80022bc:	40000400 	.word	0x40000400
 80022c0:	40000800 	.word	0x40000800
 80022c4:	40000c00 	.word	0x40000c00
 80022c8:	40010400 	.word	0x40010400
 80022cc:	40014000 	.word	0x40014000
 80022d0:	40014400 	.word	0x40014400
 80022d4:	40014800 	.word	0x40014800
 80022d8:	40001800 	.word	0x40001800
 80022dc:	40001c00 	.word	0x40001c00
 80022e0:	40002000 	.word	0x40002000

080022e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f103 0208 	add.w	r2, r3, #8
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f04f 32ff 	mov.w	r2, #4294967295
 8002324:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f103 0208 	add.w	r2, r3, #8
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f103 0208 	add.w	r2, r3, #8
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2200      	movs	r2, #0
 8002358:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002366:	b480      	push	{r7}
 8002368:	b085      	sub	sp, #20
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
 800236e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	68fa      	ldr	r2, [r7, #12]
 800237a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	601a      	str	r2, [r3, #0]
}
 80023a2:	bf00      	nop
 80023a4:	3714      	adds	r7, #20
 80023a6:	46bd      	mov	sp, r7
 80023a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ac:	4770      	bx	lr

080023ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80023ae:	b480      	push	{r7}
 80023b0:	b085      	sub	sp, #20
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
 80023b6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c4:	d103      	bne.n	80023ce <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	e00c      	b.n	80023e8 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3308      	adds	r3, #8
 80023d2:	60fb      	str	r3, [r7, #12]
 80023d4:	e002      	b.n	80023dc <vListInsert+0x2e>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	60fb      	str	r3, [r7, #12]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d2f6      	bcs.n	80023d6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	683a      	ldr	r2, [r7, #0]
 8002402:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	1c5a      	adds	r2, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	601a      	str	r2, [r3, #0]
}
 8002414:	bf00      	nop
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	691b      	ldr	r3, [r3, #16]
 800242c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	6892      	ldr	r2, [r2, #8]
 8002436:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6852      	ldr	r2, [r2, #4]
 8002440:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	429a      	cmp	r2, r3
 800244a:	d103      	bne.n	8002454 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	1e5a      	subs	r2, r3, #1
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b084      	sub	sp, #16
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10b      	bne.n	80024a0 <xQueueGenericReset+0x2c>
        __asm volatile
 8002488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800248c:	f383 8811 	msr	BASEPRI, r3
 8002490:	f3bf 8f6f 	isb	sy
 8002494:	f3bf 8f4f 	dsb	sy
 8002498:	60bb      	str	r3, [r7, #8]
    }
 800249a:	bf00      	nop
 800249c:	bf00      	nop
 800249e:	e7fd      	b.n	800249c <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 80024a0:	f001 fffc 	bl	800449c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024ac:	68f9      	ldr	r1, [r7, #12]
 80024ae:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80024b0:	fb01 f303 	mul.w	r3, r1, r3
 80024b4:	441a      	add	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681a      	ldr	r2, [r3, #0]
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024d0:	3b01      	subs	r3, #1
 80024d2:	68f9      	ldr	r1, [r7, #12]
 80024d4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80024d6:	fb01 f303 	mul.w	r3, r1, r3
 80024da:	441a      	add	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	22ff      	movs	r2, #255	@ 0xff
 80024e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	22ff      	movs	r2, #255	@ 0xff
 80024ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d109      	bne.n	800250a <xQueueGenericReset+0x96>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d00f      	beq.n	800251e <xQueueGenericReset+0xaa>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	3310      	adds	r3, #16
 8002502:	4618      	mov	r0, r3
 8002504:	f001 f8c6 	bl	8003694 <xTaskRemoveFromEventList>
 8002508:	e009      	b.n	800251e <xQueueGenericReset+0xaa>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	3310      	adds	r3, #16
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fefc 	bl	800230c <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	3324      	adds	r3, #36	@ 0x24
 8002518:	4618      	mov	r0, r3
 800251a:	f7ff fef7 	bl	800230c <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 800251e:	f001 ffef 	bl	8004500 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002522:	2301      	movs	r3, #1
}
 8002524:	4618      	mov	r0, r3
 8002526:	3710      	adds	r7, #16
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800252c:	b580      	push	{r7, lr}
 800252e:	b08c      	sub	sp, #48	@ 0x30
 8002530:	af02      	add	r7, sp, #8
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	4613      	mov	r3, r2
 8002538:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d10b      	bne.n	8002558 <xQueueGenericCreate+0x2c>
        __asm volatile
 8002540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002544:	f383 8811 	msr	BASEPRI, r3
 8002548:	f3bf 8f6f 	isb	sy
 800254c:	f3bf 8f4f 	dsb	sy
 8002550:	61bb      	str	r3, [r7, #24]
    }
 8002552:	bf00      	nop
 8002554:	bf00      	nop
 8002556:	e7fd      	b.n	8002554 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	fb02 f303 	mul.w	r3, r2, r3
 8002560:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d006      	beq.n	8002576 <xQueueGenericCreate+0x4a>
 8002568:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002570:	68fa      	ldr	r2, [r7, #12]
 8002572:	429a      	cmp	r2, r3
 8002574:	d101      	bne.n	800257a <xQueueGenericCreate+0x4e>
 8002576:	2301      	movs	r3, #1
 8002578:	e000      	b.n	800257c <xQueueGenericCreate+0x50>
 800257a:	2300      	movs	r3, #0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10b      	bne.n	8002598 <xQueueGenericCreate+0x6c>
        __asm volatile
 8002580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002584:	f383 8811 	msr	BASEPRI, r3
 8002588:	f3bf 8f6f 	isb	sy
 800258c:	f3bf 8f4f 	dsb	sy
 8002590:	617b      	str	r3, [r7, #20]
    }
 8002592:	bf00      	nop
 8002594:	bf00      	nop
 8002596:	e7fd      	b.n	8002594 <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800259e:	d90b      	bls.n	80025b8 <xQueueGenericCreate+0x8c>
        __asm volatile
 80025a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025a4:	f383 8811 	msr	BASEPRI, r3
 80025a8:	f3bf 8f6f 	isb	sy
 80025ac:	f3bf 8f4f 	dsb	sy
 80025b0:	613b      	str	r3, [r7, #16]
    }
 80025b2:	bf00      	nop
 80025b4:	bf00      	nop
 80025b6:	e7fd      	b.n	80025b4 <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80025b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ba:	3350      	adds	r3, #80	@ 0x50
 80025bc:	4618      	mov	r0, r3
 80025be:	f002 f89f 	bl	8004700 <pvPortMalloc>
 80025c2:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00d      	beq.n	80025e6 <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80025ca:	6a3b      	ldr	r3, [r7, #32]
 80025cc:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025ce:	69fb      	ldr	r3, [r7, #28]
 80025d0:	3350      	adds	r3, #80	@ 0x50
 80025d2:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80025d4:	79fa      	ldrb	r2, [r7, #7]
 80025d6:	6a3b      	ldr	r3, [r7, #32]
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	4613      	mov	r3, r2
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	68b9      	ldr	r1, [r7, #8]
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 f805 	bl	80025f0 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80025e6:	6a3b      	ldr	r3, [r7, #32]
    }
 80025e8:	4618      	mov	r0, r3
 80025ea:	3728      	adds	r7, #40	@ 0x28
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
 80025fc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80025fe:	68bb      	ldr	r3, [r7, #8]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d103      	bne.n	800260c <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	e002      	b.n	8002612 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800261e:	2101      	movs	r1, #1
 8002620:	69b8      	ldr	r0, [r7, #24]
 8002622:	f7ff ff27 	bl	8002474 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	78fa      	ldrb	r2, [r7, #3]
 800262a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        {
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800262e:	78fb      	ldrb	r3, [r7, #3]
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	68f9      	ldr	r1, [r7, #12]
 8002634:	2073      	movs	r0, #115	@ 0x73
 8002636:	f003 ff6b 	bl	8006510 <SEGGER_SYSVIEW_RecordU32x3>
}
 800263a:	bf00      	nop
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
	...

08002644 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b090      	sub	sp, #64	@ 0x40
 8002648:	af02      	add	r7, sp, #8
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	607a      	str	r2, [r7, #4]
 8002650:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002652:	2300      	movs	r3, #0
 8002654:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 800265a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800265c:	2b00      	cmp	r3, #0
 800265e:	d10b      	bne.n	8002678 <xQueueGenericSend+0x34>
        __asm volatile
 8002660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002664:	f383 8811 	msr	BASEPRI, r3
 8002668:	f3bf 8f6f 	isb	sy
 800266c:	f3bf 8f4f 	dsb	sy
 8002670:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8002672:	bf00      	nop
 8002674:	bf00      	nop
 8002676:	e7fd      	b.n	8002674 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d103      	bne.n	8002686 <xQueueGenericSend+0x42>
 800267e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <xQueueGenericSend+0x46>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <xQueueGenericSend+0x48>
 800268a:	2300      	movs	r3, #0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10b      	bne.n	80026a8 <xQueueGenericSend+0x64>
        __asm volatile
 8002690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002694:	f383 8811 	msr	BASEPRI, r3
 8002698:	f3bf 8f6f 	isb	sy
 800269c:	f3bf 8f4f 	dsb	sy
 80026a0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80026a2:	bf00      	nop
 80026a4:	bf00      	nop
 80026a6:	e7fd      	b.n	80026a4 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d103      	bne.n	80026b6 <xQueueGenericSend+0x72>
 80026ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d101      	bne.n	80026ba <xQueueGenericSend+0x76>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <xQueueGenericSend+0x78>
 80026ba:	2300      	movs	r3, #0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10b      	bne.n	80026d8 <xQueueGenericSend+0x94>
        __asm volatile
 80026c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026c4:	f383 8811 	msr	BASEPRI, r3
 80026c8:	f3bf 8f6f 	isb	sy
 80026cc:	f3bf 8f4f 	dsb	sy
 80026d0:	623b      	str	r3, [r7, #32]
    }
 80026d2:	bf00      	nop
 80026d4:	bf00      	nop
 80026d6:	e7fd      	b.n	80026d4 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026d8:	f001 f97a 	bl	80039d0 <xTaskGetSchedulerState>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d102      	bne.n	80026e8 <xQueueGenericSend+0xa4>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d101      	bne.n	80026ec <xQueueGenericSend+0xa8>
 80026e8:	2301      	movs	r3, #1
 80026ea:	e000      	b.n	80026ee <xQueueGenericSend+0xaa>
 80026ec:	2300      	movs	r3, #0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d10b      	bne.n	800270a <xQueueGenericSend+0xc6>
        __asm volatile
 80026f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026f6:	f383 8811 	msr	BASEPRI, r3
 80026fa:	f3bf 8f6f 	isb	sy
 80026fe:	f3bf 8f4f 	dsb	sy
 8002702:	61fb      	str	r3, [r7, #28]
    }
 8002704:	bf00      	nop
 8002706:	bf00      	nop
 8002708:	e7fd      	b.n	8002706 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800270a:	f001 fec7 	bl	800449c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800270e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002710:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002714:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002716:	429a      	cmp	r2, r3
 8002718:	d302      	bcc.n	8002720 <xQueueGenericSend+0xdc>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	2b02      	cmp	r3, #2
 800271e:	d11f      	bne.n	8002760 <xQueueGenericSend+0x11c>
            {
                traceQUEUE_SEND( pxQueue );
 8002720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002722:	4618      	mov	r0, r3
 8002724:	f004 fc82 	bl	800702c <SEGGER_SYSVIEW_ShrinkId>
 8002728:	68ba      	ldr	r2, [r7, #8]
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	9300      	str	r3, [sp, #0]
 8002730:	460b      	mov	r3, r1
 8002732:	4601      	mov	r1, r0
 8002734:	205a      	movs	r0, #90	@ 0x5a
 8002736:	f003 ff61 	bl	80065fc <SEGGER_SYSVIEW_RecordU32x4>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	68b9      	ldr	r1, [r7, #8]
 800273e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002740:	f000 fa5c 	bl	8002bfc <prvCopyDataToQueue>
 8002744:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274a:	2b00      	cmp	r3, #0
 800274c:	d004      	beq.n	8002758 <xQueueGenericSend+0x114>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800274e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002750:	3324      	adds	r3, #36	@ 0x24
 8002752:	4618      	mov	r0, r3
 8002754:	f000 ff9e 	bl	8003694 <xTaskRemoveFromEventList>
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002758:	f001 fed2 	bl	8004500 <vPortExitCritical>
                return pdPASS;
 800275c:	2301      	movs	r3, #1
 800275e:	e07d      	b.n	800285c <xQueueGenericSend+0x218>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d110      	bne.n	8002788 <xQueueGenericSend+0x144>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002766:	f001 fecb 	bl	8004500 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
 800276a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800276c:	4618      	mov	r0, r3
 800276e:	f004 fc5d 	bl	800702c <SEGGER_SYSVIEW_ShrinkId>
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	460b      	mov	r3, r1
 800277c:	4601      	mov	r1, r0
 800277e:	205a      	movs	r0, #90	@ 0x5a
 8002780:	f003 ff3c 	bl	80065fc <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_FULL;
 8002784:	2300      	movs	r3, #0
 8002786:	e069      	b.n	800285c <xQueueGenericSend+0x218>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800278a:	2b00      	cmp	r3, #0
 800278c:	d106      	bne.n	800279c <xQueueGenericSend+0x158>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800278e:	f107 0314 	add.w	r3, r7, #20
 8002792:	4618      	mov	r0, r3
 8002794:	f000 ffe6 	bl	8003764 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002798:	2301      	movs	r3, #1
 800279a:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800279c:	f001 feb0 	bl	8004500 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80027a0:	f000 fd5a 	bl	8003258 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80027a4:	f001 fe7a 	bl	800449c <vPortEnterCritical>
 80027a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027ae:	b25b      	sxtb	r3, r3
 80027b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b4:	d103      	bne.n	80027be <xQueueGenericSend+0x17a>
 80027b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027c4:	b25b      	sxtb	r3, r3
 80027c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ca:	d103      	bne.n	80027d4 <xQueueGenericSend+0x190>
 80027cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80027d4:	f001 fe94 	bl	8004500 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027d8:	1d3a      	adds	r2, r7, #4
 80027da:	f107 0314 	add.w	r3, r7, #20
 80027de:	4611      	mov	r1, r2
 80027e0:	4618      	mov	r0, r3
 80027e2:	f000 ffd5 	bl	8003790 <xTaskCheckForTimeOut>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d124      	bne.n	8002836 <xQueueGenericSend+0x1f2>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80027ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80027ee:	f000 fafd 	bl	8002dec <prvIsQueueFull>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d018      	beq.n	800282a <xQueueGenericSend+0x1e6>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80027f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027fa:	3310      	adds	r3, #16
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	4611      	mov	r1, r2
 8002800:	4618      	mov	r0, r3
 8002802:	f000 fef1 	bl	80035e8 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002806:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002808:	f000 fa88 	bl	8002d1c <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 800280c:	f000 fd32 	bl	8003274 <xTaskResumeAll>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	f47f af79 	bne.w	800270a <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 8002818:	4b12      	ldr	r3, [pc, #72]	@ (8002864 <xQueueGenericSend+0x220>)
 800281a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	f3bf 8f4f 	dsb	sy
 8002824:	f3bf 8f6f 	isb	sy
 8002828:	e76f      	b.n	800270a <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 800282a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800282c:	f000 fa76 	bl	8002d1c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002830:	f000 fd20 	bl	8003274 <xTaskResumeAll>
 8002834:	e769      	b.n	800270a <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002836:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002838:	f000 fa70 	bl	8002d1c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800283c:	f000 fd1a 	bl	8003274 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
 8002840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002842:	4618      	mov	r0, r3
 8002844:	f004 fbf2 	bl	800702c <SEGGER_SYSVIEW_ShrinkId>
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	460b      	mov	r3, r1
 8002852:	4601      	mov	r1, r0
 8002854:	205a      	movs	r0, #90	@ 0x5a
 8002856:	f003 fed1 	bl	80065fc <SEGGER_SYSVIEW_RecordU32x4>
            return errQUEUE_FULL;
 800285a:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800285c:	4618      	mov	r0, r3
 800285e:	3738      	adds	r7, #56	@ 0x38
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	e000ed04 	.word	0xe000ed04

08002868 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b090      	sub	sp, #64	@ 0x40
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
 8002874:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 800287a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10b      	bne.n	8002898 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 8002880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002884:	f383 8811 	msr	BASEPRI, r3
 8002888:	f3bf 8f6f 	isb	sy
 800288c:	f3bf 8f4f 	dsb	sy
 8002890:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8002892:	bf00      	nop
 8002894:	bf00      	nop
 8002896:	e7fd      	b.n	8002894 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d103      	bne.n	80028a6 <xQueueGenericSendFromISR+0x3e>
 800289e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <xQueueGenericSendFromISR+0x42>
 80028a6:	2301      	movs	r3, #1
 80028a8:	e000      	b.n	80028ac <xQueueGenericSendFromISR+0x44>
 80028aa:	2300      	movs	r3, #0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10b      	bne.n	80028c8 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 80028b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028b4:	f383 8811 	msr	BASEPRI, r3
 80028b8:	f3bf 8f6f 	isb	sy
 80028bc:	f3bf 8f4f 	dsb	sy
 80028c0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 80028c2:	bf00      	nop
 80028c4:	bf00      	nop
 80028c6:	e7fd      	b.n	80028c4 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d103      	bne.n	80028d6 <xQueueGenericSendFromISR+0x6e>
 80028ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <xQueueGenericSendFromISR+0x72>
 80028d6:	2301      	movs	r3, #1
 80028d8:	e000      	b.n	80028dc <xQueueGenericSendFromISR+0x74>
 80028da:	2300      	movs	r3, #0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10b      	bne.n	80028f8 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 80028e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028e4:	f383 8811 	msr	BASEPRI, r3
 80028e8:	f3bf 8f6f 	isb	sy
 80028ec:	f3bf 8f4f 	dsb	sy
 80028f0:	623b      	str	r3, [r7, #32]
    }
 80028f2:	bf00      	nop
 80028f4:	bf00      	nop
 80028f6:	e7fd      	b.n	80028f4 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80028f8:	f001 fec0 	bl	800467c <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80028fc:	f3ef 8211 	mrs	r2, BASEPRI
 8002900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002904:	f383 8811 	msr	BASEPRI, r3
 8002908:	f3bf 8f6f 	isb	sy
 800290c:	f3bf 8f4f 	dsb	sy
 8002910:	61fa      	str	r2, [r7, #28]
 8002912:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002914:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002916:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800291a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800291c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800291e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002920:	429a      	cmp	r2, r3
 8002922:	d302      	bcc.n	800292a <xQueueGenericSendFromISR+0xc2>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2b02      	cmp	r3, #2
 8002928:	d149      	bne.n	80029be <xQueueGenericSendFromISR+0x156>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 800292a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800292c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002930:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002938:	62fb      	str	r3, [r7, #44]	@ 0x2c

            traceQUEUE_SEND_FROM_ISR( pxQueue );
 800293a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800293c:	4618      	mov	r0, r3
 800293e:	f004 fb75 	bl	800702c <SEGGER_SYSVIEW_ShrinkId>
 8002942:	4601      	mov	r1, r0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	461a      	mov	r2, r3
 8002948:	2060      	movs	r0, #96	@ 0x60
 800294a:	f003 fd87 	bl	800645c <SEGGER_SYSVIEW_RecordU32x2>
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	68b9      	ldr	r1, [r7, #8]
 8002952:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002954:	f000 f952 	bl	8002bfc <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002958:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800295c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002960:	d112      	bne.n	8002988 <xQueueGenericSendFromISR+0x120>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002966:	2b00      	cmp	r3, #0
 8002968:	d026      	beq.n	80029b8 <xQueueGenericSendFromISR+0x150>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800296a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800296c:	3324      	adds	r3, #36	@ 0x24
 800296e:	4618      	mov	r0, r3
 8002970:	f000 fe90 	bl	8003694 <xTaskRemoveFromEventList>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d01e      	beq.n	80029b8 <xQueueGenericSendFromISR+0x150>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d01b      	beq.n	80029b8 <xQueueGenericSendFromISR+0x150>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2201      	movs	r2, #1
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	e017      	b.n	80029b8 <xQueueGenericSendFromISR+0x150>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002988:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800298c:	2b7f      	cmp	r3, #127	@ 0x7f
 800298e:	d10b      	bne.n	80029a8 <xQueueGenericSendFromISR+0x140>
        __asm volatile
 8002990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002994:	f383 8811 	msr	BASEPRI, r3
 8002998:	f3bf 8f6f 	isb	sy
 800299c:	f3bf 8f4f 	dsb	sy
 80029a0:	617b      	str	r3, [r7, #20]
    }
 80029a2:	bf00      	nop
 80029a4:	bf00      	nop
 80029a6:	e7fd      	b.n	80029a4 <xQueueGenericSendFromISR+0x13c>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80029a8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80029ac:	3301      	adds	r3, #1
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	b25a      	sxtb	r2, r3
 80029b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 80029b8:	2301      	movs	r3, #1
 80029ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 80029bc:	e00b      	b.n	80029d6 <xQueueGenericSendFromISR+0x16e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
 80029be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029c0:	4618      	mov	r0, r3
 80029c2:	f004 fb33 	bl	800702c <SEGGER_SYSVIEW_ShrinkId>
 80029c6:	4601      	mov	r1, r0
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	461a      	mov	r2, r3
 80029cc:	2060      	movs	r0, #96	@ 0x60
 80029ce:	f003 fd45 	bl	800645c <SEGGER_SYSVIEW_RecordU32x2>
            xReturn = errQUEUE_FULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029d8:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80029e0:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80029e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3740      	adds	r7, #64	@ 0x40
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80029ec:	b590      	push	{r4, r7, lr}
 80029ee:	b08f      	sub	sp, #60	@ 0x3c
 80029f0:	af02      	add	r7, sp, #8
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80029f8:	2300      	movs	r3, #0
 80029fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10b      	bne.n	8002a1e <xQueueReceive+0x32>
        __asm volatile
 8002a06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a0a:	f383 8811 	msr	BASEPRI, r3
 8002a0e:	f3bf 8f6f 	isb	sy
 8002a12:	f3bf 8f4f 	dsb	sy
 8002a16:	623b      	str	r3, [r7, #32]
    }
 8002a18:	bf00      	nop
 8002a1a:	bf00      	nop
 8002a1c:	e7fd      	b.n	8002a1a <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d103      	bne.n	8002a2c <xQueueReceive+0x40>
 8002a24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <xQueueReceive+0x44>
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e000      	b.n	8002a32 <xQueueReceive+0x46>
 8002a30:	2300      	movs	r3, #0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d10b      	bne.n	8002a4e <xQueueReceive+0x62>
        __asm volatile
 8002a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a3a:	f383 8811 	msr	BASEPRI, r3
 8002a3e:	f3bf 8f6f 	isb	sy
 8002a42:	f3bf 8f4f 	dsb	sy
 8002a46:	61fb      	str	r3, [r7, #28]
    }
 8002a48:	bf00      	nop
 8002a4a:	bf00      	nop
 8002a4c:	e7fd      	b.n	8002a4a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002a4e:	f000 ffbf 	bl	80039d0 <xTaskGetSchedulerState>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d102      	bne.n	8002a5e <xQueueReceive+0x72>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <xQueueReceive+0x76>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <xQueueReceive+0x78>
 8002a62:	2300      	movs	r3, #0
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10b      	bne.n	8002a80 <xQueueReceive+0x94>
        __asm volatile
 8002a68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a6c:	f383 8811 	msr	BASEPRI, r3
 8002a70:	f3bf 8f6f 	isb	sy
 8002a74:	f3bf 8f4f 	dsb	sy
 8002a78:	61bb      	str	r3, [r7, #24]
    }
 8002a7a:	bf00      	nop
 8002a7c:	bf00      	nop
 8002a7e:	e7fd      	b.n	8002a7c <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002a80:	f001 fd0c 	bl	800449c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a88:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d024      	beq.n	8002ada <xQueueReceive+0xee>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002a90:	68b9      	ldr	r1, [r7, #8]
 8002a92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a94:	f000 f91c 	bl	8002cd0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f004 fac6 	bl	800702c <SEGGER_SYSVIEW_ShrinkId>
 8002aa0:	4604      	mov	r4, r0
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	f004 fac2 	bl	800702c <SEGGER_SYSVIEW_ShrinkId>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2101      	movs	r1, #1
 8002aae:	9100      	str	r1, [sp, #0]
 8002ab0:	4621      	mov	r1, r4
 8002ab2:	205c      	movs	r0, #92	@ 0x5c
 8002ab4:	f003 fda2 	bl	80065fc <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aba:	1e5a      	subs	r2, r3, #1
 8002abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002abe:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d004      	beq.n	8002ad2 <xQueueReceive+0xe6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aca:	3310      	adds	r3, #16
 8002acc:	4618      	mov	r0, r3
 8002ace:	f000 fde1 	bl	8003694 <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002ad2:	f001 fd15 	bl	8004500 <vPortExitCritical>
                return pdPASS;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e08a      	b.n	8002bf0 <xQueueReceive+0x204>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d113      	bne.n	8002b08 <xQueueReceive+0x11c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002ae0:	f001 fd0e 	bl	8004500 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f004 faa0 	bl	800702c <SEGGER_SYSVIEW_ShrinkId>
 8002aec:	4604      	mov	r4, r0
 8002aee:	2000      	movs	r0, #0
 8002af0:	f004 fa9c 	bl	800702c <SEGGER_SYSVIEW_ShrinkId>
 8002af4:	4602      	mov	r2, r0
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2101      	movs	r1, #1
 8002afa:	9100      	str	r1, [sp, #0]
 8002afc:	4621      	mov	r1, r4
 8002afe:	205c      	movs	r0, #92	@ 0x5c
 8002b00:	f003 fd7c 	bl	80065fc <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002b04:	2300      	movs	r3, #0
 8002b06:	e073      	b.n	8002bf0 <xQueueReceive+0x204>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d106      	bne.n	8002b1c <xQueueReceive+0x130>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002b0e:	f107 0310 	add.w	r3, r7, #16
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fe26 	bl	8003764 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002b1c:	f001 fcf0 	bl	8004500 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002b20:	f000 fb9a 	bl	8003258 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002b24:	f001 fcba 	bl	800449c <vPortEnterCritical>
 8002b28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b2a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b2e:	b25b      	sxtb	r3, r3
 8002b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b34:	d103      	bne.n	8002b3e <xQueueReceive+0x152>
 8002b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b44:	b25b      	sxtb	r3, r3
 8002b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4a:	d103      	bne.n	8002b54 <xQueueReceive+0x168>
 8002b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b4e:	2200      	movs	r2, #0
 8002b50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b54:	f001 fcd4 	bl	8004500 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b58:	1d3a      	adds	r2, r7, #4
 8002b5a:	f107 0310 	add.w	r3, r7, #16
 8002b5e:	4611      	mov	r1, r2
 8002b60:	4618      	mov	r0, r3
 8002b62:	f000 fe15 	bl	8003790 <xTaskCheckForTimeOut>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d124      	bne.n	8002bb6 <xQueueReceive+0x1ca>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b6c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b6e:	f000 f927 	bl	8002dc0 <prvIsQueueEmpty>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d018      	beq.n	8002baa <xQueueReceive+0x1be>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b7a:	3324      	adds	r3, #36	@ 0x24
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	4611      	mov	r1, r2
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 fd31 	bl	80035e8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002b86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b88:	f000 f8c8 	bl	8002d1c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002b8c:	f000 fb72 	bl	8003274 <xTaskResumeAll>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	f47f af74 	bne.w	8002a80 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8002b98:	4b17      	ldr	r3, [pc, #92]	@ (8002bf8 <xQueueReceive+0x20c>)
 8002b9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b9e:	601a      	str	r2, [r3, #0]
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	f3bf 8f6f 	isb	sy
 8002ba8:	e76a      	b.n	8002a80 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002baa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bac:	f000 f8b6 	bl	8002d1c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002bb0:	f000 fb60 	bl	8003274 <xTaskResumeAll>
 8002bb4:	e764      	b.n	8002a80 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002bb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bb8:	f000 f8b0 	bl	8002d1c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002bbc:	f000 fb5a 	bl	8003274 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bc0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bc2:	f000 f8fd 	bl	8002dc0 <prvIsQueueEmpty>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f43f af59 	beq.w	8002a80 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f004 fa2b 	bl	800702c <SEGGER_SYSVIEW_ShrinkId>
 8002bd6:	4604      	mov	r4, r0
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f004 fa27 	bl	800702c <SEGGER_SYSVIEW_ShrinkId>
 8002bde:	4602      	mov	r2, r0
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2101      	movs	r1, #1
 8002be4:	9100      	str	r1, [sp, #0]
 8002be6:	4621      	mov	r1, r4
 8002be8:	205c      	movs	r0, #92	@ 0x5c
 8002bea:	f003 fd07 	bl	80065fc <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002bee:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3734      	adds	r7, #52	@ 0x34
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd90      	pop	{r4, r7, pc}
 8002bf8:	e000ed04 	.word	0xe000ed04

08002bfc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	60b9      	str	r1, [r7, #8]
 8002c06:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c10:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d10d      	bne.n	8002c36 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d14d      	bne.n	8002cbe <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f000 fef0 	bl	8003a0c <xTaskPriorityDisinherit>
 8002c2c:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2200      	movs	r2, #0
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	e043      	b.n	8002cbe <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d119      	bne.n	8002c70 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6858      	ldr	r0, [r3, #4]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c44:	461a      	mov	r2, r3
 8002c46:	68b9      	ldr	r1, [r7, #8]
 8002c48:	f004 fbee 	bl	8007428 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	685a      	ldr	r2, [r3, #4]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c54:	441a      	add	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	685a      	ldr	r2, [r3, #4]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d32b      	bcc.n	8002cbe <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	605a      	str	r2, [r3, #4]
 8002c6e:	e026      	b.n	8002cbe <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	68d8      	ldr	r0, [r3, #12]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c78:	461a      	mov	r2, r3
 8002c7a:	68b9      	ldr	r1, [r7, #8]
 8002c7c:	f004 fbd4 	bl	8007428 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c88:	425b      	negs	r3, r3
 8002c8a:	441a      	add	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d207      	bcs.n	8002cac <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca4:	425b      	negs	r3, r3
 8002ca6:	441a      	add	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d105      	bne.n	8002cbe <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d002      	beq.n	8002cbe <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1c5a      	adds	r2, r3, #1
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8002cc6:	697b      	ldr	r3, [r7, #20]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3718      	adds	r7, #24
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d018      	beq.n	8002d14 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68da      	ldr	r2, [r3, #12]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cea:	441a      	add	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68da      	ldr	r2, [r3, #12]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	d303      	bcc.n	8002d04 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	68d9      	ldr	r1, [r3, #12]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	6838      	ldr	r0, [r7, #0]
 8002d10:	f004 fb8a 	bl	8007428 <memcpy>
    }
}
 8002d14:	bf00      	nop
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002d24:	f001 fbba 	bl	800449c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d2e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d30:	e011      	b.n	8002d56 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d012      	beq.n	8002d60 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	3324      	adds	r3, #36	@ 0x24
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 fca8 	bl	8003694 <xTaskRemoveFromEventList>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8002d4a:	f000 fd89 	bl	8003860 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002d4e:	7bfb      	ldrb	r3, [r7, #15]
 8002d50:	3b01      	subs	r3, #1
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	dce9      	bgt.n	8002d32 <prvUnlockQueue+0x16>
 8002d5e:	e000      	b.n	8002d62 <prvUnlockQueue+0x46>
                        break;
 8002d60:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	22ff      	movs	r2, #255	@ 0xff
 8002d66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002d6a:	f001 fbc9 	bl	8004500 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002d6e:	f001 fb95 	bl	800449c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d78:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d7a:	e011      	b.n	8002da0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	691b      	ldr	r3, [r3, #16]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d012      	beq.n	8002daa <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3310      	adds	r3, #16
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 fc83 	bl	8003694 <xTaskRemoveFromEventList>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002d94:	f000 fd64 	bl	8003860 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002d98:	7bbb      	ldrb	r3, [r7, #14]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002da0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	dce9      	bgt.n	8002d7c <prvUnlockQueue+0x60>
 8002da8:	e000      	b.n	8002dac <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002daa:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	22ff      	movs	r2, #255	@ 0xff
 8002db0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002db4:	f001 fba4 	bl	8004500 <vPortExitCritical>
}
 8002db8:	bf00      	nop
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002dc8:	f001 fb68 	bl	800449c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d102      	bne.n	8002dda <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	60fb      	str	r3, [r7, #12]
 8002dd8:	e001      	b.n	8002dde <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002dde:	f001 fb8f 	bl	8004500 <vPortExitCritical>

    return xReturn;
 8002de2:	68fb      	ldr	r3, [r7, #12]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3710      	adds	r7, #16
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002df4:	f001 fb52 	bl	800449c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d102      	bne.n	8002e0a <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8002e04:	2301      	movs	r3, #1
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	e001      	b.n	8002e0e <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002e0e:	f001 fb77 	bl	8004500 <vPortExitCritical>

    return xReturn;
 8002e12:	68fb      	ldr	r3, [r7, #12]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e26:	2300      	movs	r3, #0
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	e01e      	b.n	8002e6a <vQueueAddToRegistry+0x4e>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002e2c:	4a13      	ldr	r2, [pc, #76]	@ (8002e7c <vQueueAddToRegistry+0x60>)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d115      	bne.n	8002e64 <vQueueAddToRegistry+0x48>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002e38:	4910      	ldr	r1, [pc, #64]	@ (8002e7c <vQueueAddToRegistry+0x60>)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 8002e42:	4a0e      	ldr	r2, [pc, #56]	@ (8002e7c <vQueueAddToRegistry+0x60>)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	4413      	add	r3, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f004 f8eb 	bl	800702c <SEGGER_SYSVIEW_ShrinkId>
 8002e56:	4601      	mov	r1, r0
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	2071      	movs	r0, #113	@ 0x71
 8002e5e:	f003 fafd 	bl	800645c <SEGGER_SYSVIEW_RecordU32x2>
                break;
 8002e62:	e006      	b.n	8002e72 <vQueueAddToRegistry+0x56>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	3301      	adds	r3, #1
 8002e68:	60fb      	str	r3, [r7, #12]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2b07      	cmp	r3, #7
 8002e6e:	d9dd      	bls.n	8002e2c <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002e70:	bf00      	nop
 8002e72:	bf00      	nop
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	200000d0 	.word	0x200000d0

08002e80 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b086      	sub	sp, #24
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	60f8      	str	r0, [r7, #12]
 8002e88:	60b9      	str	r1, [r7, #8]
 8002e8a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002e90:	f001 fb04 	bl	800449c <vPortEnterCritical>
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e9a:	b25b      	sxtb	r3, r3
 8002e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea0:	d103      	bne.n	8002eaa <vQueueWaitForMessageRestricted+0x2a>
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002eb0:	b25b      	sxtb	r3, r3
 8002eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb6:	d103      	bne.n	8002ec0 <vQueueWaitForMessageRestricted+0x40>
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ec0:	f001 fb1e 	bl	8004500 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d106      	bne.n	8002eda <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	3324      	adds	r3, #36	@ 0x24
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	68b9      	ldr	r1, [r7, #8]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fbad 	bl	8003634 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002eda:	6978      	ldr	r0, [r7, #20]
 8002edc:	f7ff ff1e 	bl	8002d1c <prvUnlockQueue>
    }
 8002ee0:	bf00      	nop
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b08c      	sub	sp, #48	@ 0x30
 8002eec:	af04      	add	r7, sp, #16
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	603b      	str	r3, [r7, #0]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ef8:	88fb      	ldrh	r3, [r7, #6]
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4618      	mov	r0, r3
 8002efe:	f001 fbff 	bl	8004700 <pvPortMalloc>
 8002f02:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00e      	beq.n	8002f28 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002f0a:	2058      	movs	r0, #88	@ 0x58
 8002f0c:	f001 fbf8 	bl	8004700 <pvPortMalloc>
 8002f10:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d003      	beq.n	8002f20 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f1e:	e005      	b.n	8002f2c <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8002f20:	6978      	ldr	r0, [r7, #20]
 8002f22:	f001 fccf 	bl	80048c4 <vPortFree>
 8002f26:	e001      	b.n	8002f2c <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d013      	beq.n	8002f5a <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f32:	88fa      	ldrh	r2, [r7, #6]
 8002f34:	2300      	movs	r3, #0
 8002f36:	9303      	str	r3, [sp, #12]
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	9302      	str	r3, [sp, #8]
 8002f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f3e:	9301      	str	r3, [sp, #4]
 8002f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	68b9      	ldr	r1, [r7, #8]
 8002f48:	68f8      	ldr	r0, [r7, #12]
 8002f4a:	f000 f80e 	bl	8002f6a <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002f4e:	69f8      	ldr	r0, [r7, #28]
 8002f50:	f000 f8a2 	bl	8003098 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002f54:	2301      	movs	r3, #1
 8002f56:	61bb      	str	r3, [r7, #24]
 8002f58:	e002      	b.n	8002f60 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f5e:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002f60:	69bb      	ldr	r3, [r7, #24]
    }
 8002f62:	4618      	mov	r0, r3
 8002f64:	3720      	adds	r7, #32
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b088      	sub	sp, #32
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
 8002f76:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002f78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f7a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	461a      	mov	r2, r3
 8002f82:	21a5      	movs	r1, #165	@ 0xa5
 8002f84:	f004 fa22 	bl	80073cc <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f92:	3b01      	subs	r3, #1
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	f023 0307 	bic.w	r3, r3, #7
 8002fa0:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00b      	beq.n	8002fc4 <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fb0:	f383 8811 	msr	BASEPRI, r3
 8002fb4:	f3bf 8f6f 	isb	sy
 8002fb8:	f3bf 8f4f 	dsb	sy
 8002fbc:	617b      	str	r3, [r7, #20]
    }
 8002fbe:	bf00      	nop
 8002fc0:	bf00      	nop
 8002fc2:	e7fd      	b.n	8002fc0 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d01f      	beq.n	800300a <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61fb      	str	r3, [r7, #28]
 8002fce:	e012      	b.n	8002ff6 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002fd0:	68ba      	ldr	r2, [r7, #8]
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	7819      	ldrb	r1, [r3, #0]
 8002fd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	4413      	add	r3, r2
 8002fde:	3334      	adds	r3, #52	@ 0x34
 8002fe0:	460a      	mov	r2, r1
 8002fe2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	4413      	add	r3, r2
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d006      	beq.n	8002ffe <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	61fb      	str	r3, [r7, #28]
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	2b09      	cmp	r3, #9
 8002ffa:	d9e9      	bls.n	8002fd0 <prvInitialiseNewTask+0x66>
 8002ffc:	e000      	b.n	8003000 <prvInitialiseNewTask+0x96>
            {
                break;
 8002ffe:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003002:	2200      	movs	r2, #0
 8003004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8003008:	e003      	b.n	8003012 <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800300a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800300c:	2200      	movs	r2, #0
 800300e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003014:	2b04      	cmp	r3, #4
 8003016:	d901      	bls.n	800301c <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003018:	2304      	movs	r3, #4
 800301a:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800301c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800301e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003020:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8003022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003024:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003026:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8003028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302a:	2200      	movs	r2, #0
 800302c:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800302e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003030:	3304      	adds	r3, #4
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff f98a 	bl	800234c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800303a:	3318      	adds	r3, #24
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff f985 	bl	800234c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003044:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003046:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800304a:	f1c3 0205 	rsb	r2, r3, #5
 800304e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003050:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003054:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003056:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003058:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800305a:	3350      	adds	r3, #80	@ 0x50
 800305c:	2204      	movs	r2, #4
 800305e:	2100      	movs	r1, #0
 8003060:	4618      	mov	r0, r3
 8003062:	f004 f9b3 	bl	80073cc <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003068:	3354      	adds	r3, #84	@ 0x54
 800306a:	2201      	movs	r2, #1
 800306c:	2100      	movs	r1, #0
 800306e:	4618      	mov	r0, r3
 8003070:	f004 f9ac 	bl	80073cc <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	68f9      	ldr	r1, [r7, #12]
 8003078:	69b8      	ldr	r0, [r7, #24]
 800307a:	f001 f8df 	bl	800423c <pxPortInitialiseStack>
 800307e:	4602      	mov	r2, r0
 8003080:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003082:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8003084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003086:	2b00      	cmp	r3, #0
 8003088:	d002      	beq.n	8003090 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800308a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800308c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800308e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003090:	bf00      	nop
 8003092:	3720      	adds	r7, #32
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003098:	b5b0      	push	{r4, r5, r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af02      	add	r7, sp, #8
 800309e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80030a0:	f001 f9fc 	bl	800449c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80030a4:	4b35      	ldr	r3, [pc, #212]	@ (800317c <prvAddNewTaskToReadyList+0xe4>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	3301      	adds	r3, #1
 80030aa:	4a34      	ldr	r2, [pc, #208]	@ (800317c <prvAddNewTaskToReadyList+0xe4>)
 80030ac:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80030ae:	4b34      	ldr	r3, [pc, #208]	@ (8003180 <prvAddNewTaskToReadyList+0xe8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d109      	bne.n	80030ca <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80030b6:	4a32      	ldr	r2, [pc, #200]	@ (8003180 <prvAddNewTaskToReadyList+0xe8>)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80030bc:	4b2f      	ldr	r3, [pc, #188]	@ (800317c <prvAddNewTaskToReadyList+0xe4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d110      	bne.n	80030e6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80030c4:	f000 fbea 	bl	800389c <prvInitialiseTaskLists>
 80030c8:	e00d      	b.n	80030e6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80030ca:	4b2e      	ldr	r3, [pc, #184]	@ (8003184 <prvAddNewTaskToReadyList+0xec>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d109      	bne.n	80030e6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80030d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003180 <prvAddNewTaskToReadyList+0xe8>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030dc:	429a      	cmp	r2, r3
 80030de:	d802      	bhi.n	80030e6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80030e0:	4a27      	ldr	r2, [pc, #156]	@ (8003180 <prvAddNewTaskToReadyList+0xe8>)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80030e6:	4b28      	ldr	r3, [pc, #160]	@ (8003188 <prvAddNewTaskToReadyList+0xf0>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	3301      	adds	r3, #1
 80030ec:	4a26      	ldr	r2, [pc, #152]	@ (8003188 <prvAddNewTaskToReadyList+0xf0>)
 80030ee:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80030f0:	4b25      	ldr	r3, [pc, #148]	@ (8003188 <prvAddNewTaskToReadyList+0xf0>)
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d016      	beq.n	800312c <prvAddNewTaskToReadyList+0x94>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4618      	mov	r0, r3
 8003102:	f003 fe6d 	bl	8006de0 <SEGGER_SYSVIEW_OnTaskCreate>
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003116:	461d      	mov	r5, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	461c      	mov	r4, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003122:	1ae3      	subs	r3, r4, r3
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	462b      	mov	r3, r5
 8003128:	f001 fd9c 	bl	8004c64 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4618      	mov	r0, r3
 8003130:	f003 feda 	bl	8006ee8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003138:	2201      	movs	r2, #1
 800313a:	409a      	lsls	r2, r3
 800313c:	4b13      	ldr	r3, [pc, #76]	@ (800318c <prvAddNewTaskToReadyList+0xf4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4313      	orrs	r3, r2
 8003142:	4a12      	ldr	r2, [pc, #72]	@ (800318c <prvAddNewTaskToReadyList+0xf4>)
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800314a:	4613      	mov	r3, r2
 800314c:	009b      	lsls	r3, r3, #2
 800314e:	4413      	add	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	4a0f      	ldr	r2, [pc, #60]	@ (8003190 <prvAddNewTaskToReadyList+0xf8>)
 8003154:	441a      	add	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	3304      	adds	r3, #4
 800315a:	4619      	mov	r1, r3
 800315c:	4610      	mov	r0, r2
 800315e:	f7ff f902 	bl	8002366 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8003162:	f001 f9cd 	bl	8004500 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8003166:	4b07      	ldr	r3, [pc, #28]	@ (8003184 <prvAddNewTaskToReadyList+0xec>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <prvAddNewTaskToReadyList+0xda>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800316e:	4b04      	ldr	r3, [pc, #16]	@ (8003180 <prvAddNewTaskToReadyList+0xe8>)
 8003170:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003172:	bf00      	nop
 8003174:	3708      	adds	r7, #8
 8003176:	46bd      	mov	sp, r7
 8003178:	bdb0      	pop	{r4, r5, r7, pc}
 800317a:	bf00      	nop
 800317c:	200001e8 	.word	0x200001e8
 8003180:	20000110 	.word	0x20000110
 8003184:	200001f4 	.word	0x200001f4
 8003188:	20000204 	.word	0x20000204
 800318c:	200001f0 	.word	0x200001f0
 8003190:	20000114 	.word	0x20000114

08003194 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800319a:	4b27      	ldr	r3, [pc, #156]	@ (8003238 <vTaskStartScheduler+0xa4>)
 800319c:	9301      	str	r3, [sp, #4]
 800319e:	2300      	movs	r3, #0
 80031a0:	9300      	str	r3, [sp, #0]
 80031a2:	2300      	movs	r3, #0
 80031a4:	2282      	movs	r2, #130	@ 0x82
 80031a6:	4925      	ldr	r1, [pc, #148]	@ (800323c <vTaskStartScheduler+0xa8>)
 80031a8:	4825      	ldr	r0, [pc, #148]	@ (8003240 <vTaskStartScheduler+0xac>)
 80031aa:	f7ff fe9d 	bl	8002ee8 <xTaskCreate>
 80031ae:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d102      	bne.n	80031bc <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 80031b6:	f000 fd23 	bl	8003c00 <xTimerCreateTimerTask>
 80031ba:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d124      	bne.n	800320c <vTaskStartScheduler+0x78>
        __asm volatile
 80031c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c6:	f383 8811 	msr	BASEPRI, r3
 80031ca:	f3bf 8f6f 	isb	sy
 80031ce:	f3bf 8f4f 	dsb	sy
 80031d2:	60bb      	str	r3, [r7, #8]
    }
 80031d4:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80031d6:	4b1b      	ldr	r3, [pc, #108]	@ (8003244 <vTaskStartScheduler+0xb0>)
 80031d8:	f04f 32ff 	mov.w	r2, #4294967295
 80031dc:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80031de:	4b1a      	ldr	r3, [pc, #104]	@ (8003248 <vTaskStartScheduler+0xb4>)
 80031e0:	2201      	movs	r2, #1
 80031e2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80031e4:	4b19      	ldr	r3, [pc, #100]	@ (800324c <vTaskStartScheduler+0xb8>)
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 80031ea:	4b19      	ldr	r3, [pc, #100]	@ (8003250 <vTaskStartScheduler+0xbc>)
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	4b12      	ldr	r3, [pc, #72]	@ (8003238 <vTaskStartScheduler+0xa4>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d102      	bne.n	80031fc <vTaskStartScheduler+0x68>
 80031f6:	f003 fdd7 	bl	8006da8 <SEGGER_SYSVIEW_OnIdle>
 80031fa:	e004      	b.n	8003206 <vTaskStartScheduler+0x72>
 80031fc:	4b14      	ldr	r3, [pc, #80]	@ (8003250 <vTaskStartScheduler+0xbc>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f003 fe2f 	bl	8006e64 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8003206:	f001 f8a5 	bl	8004354 <xPortStartScheduler>
 800320a:	e00f      	b.n	800322c <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003212:	d10b      	bne.n	800322c <vTaskStartScheduler+0x98>
        __asm volatile
 8003214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003218:	f383 8811 	msr	BASEPRI, r3
 800321c:	f3bf 8f6f 	isb	sy
 8003220:	f3bf 8f4f 	dsb	sy
 8003224:	607b      	str	r3, [r7, #4]
    }
 8003226:	bf00      	nop
 8003228:	bf00      	nop
 800322a:	e7fd      	b.n	8003228 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800322c:	4b09      	ldr	r3, [pc, #36]	@ (8003254 <vTaskStartScheduler+0xc0>)
 800322e:	681b      	ldr	r3, [r3, #0]
}
 8003230:	bf00      	nop
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	2000020c 	.word	0x2000020c
 800323c:	08007d20 	.word	0x08007d20
 8003240:	08003879 	.word	0x08003879
 8003244:	20000208 	.word	0x20000208
 8003248:	200001f4 	.word	0x200001f4
 800324c:	200001ec 	.word	0x200001ec
 8003250:	20000110 	.word	0x20000110
 8003254:	08007e00 	.word	0x08007e00

08003258 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003258:	b480      	push	{r7}
 800325a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800325c:	4b04      	ldr	r3, [pc, #16]	@ (8003270 <vTaskSuspendAll+0x18>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3301      	adds	r3, #1
 8003262:	4a03      	ldr	r2, [pc, #12]	@ (8003270 <vTaskSuspendAll+0x18>)
 8003264:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8003266:	bf00      	nop
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	20000210 	.word	0x20000210

08003274 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800327a:	2300      	movs	r3, #0
 800327c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 800327e:	2300      	movs	r3, #0
 8003280:	607b      	str	r3, [r7, #4]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003282:	4b3e      	ldr	r3, [pc, #248]	@ (800337c <xTaskResumeAll+0x108>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10b      	bne.n	80032a2 <xTaskResumeAll+0x2e>
        __asm volatile
 800328a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800328e:	f383 8811 	msr	BASEPRI, r3
 8003292:	f3bf 8f6f 	isb	sy
 8003296:	f3bf 8f4f 	dsb	sy
 800329a:	603b      	str	r3, [r7, #0]
    }
 800329c:	bf00      	nop
 800329e:	bf00      	nop
 80032a0:	e7fd      	b.n	800329e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80032a2:	f001 f8fb 	bl	800449c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80032a6:	4b35      	ldr	r3, [pc, #212]	@ (800337c <xTaskResumeAll+0x108>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	4a33      	ldr	r2, [pc, #204]	@ (800337c <xTaskResumeAll+0x108>)
 80032ae:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032b0:	4b32      	ldr	r3, [pc, #200]	@ (800337c <xTaskResumeAll+0x108>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d159      	bne.n	800336c <xTaskResumeAll+0xf8>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80032b8:	4b31      	ldr	r3, [pc, #196]	@ (8003380 <xTaskResumeAll+0x10c>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d055      	beq.n	800336c <xTaskResumeAll+0xf8>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80032c0:	e032      	b.n	8003328 <xTaskResumeAll+0xb4>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032c2:	4b30      	ldr	r3, [pc, #192]	@ (8003384 <xTaskResumeAll+0x110>)
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	3318      	adds	r3, #24
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff f8a6 	bl	8002420 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	3304      	adds	r3, #4
 80032d8:	4618      	mov	r0, r3
 80032da:	f7ff f8a1 	bl	8002420 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f003 fe01 	bl	8006ee8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ea:	2201      	movs	r2, #1
 80032ec:	409a      	lsls	r2, r3
 80032ee:	4b26      	ldr	r3, [pc, #152]	@ (8003388 <xTaskResumeAll+0x114>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	4a24      	ldr	r2, [pc, #144]	@ (8003388 <xTaskResumeAll+0x114>)
 80032f6:	6013      	str	r3, [r2, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032fc:	4613      	mov	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4413      	add	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4a21      	ldr	r2, [pc, #132]	@ (800338c <xTaskResumeAll+0x118>)
 8003306:	441a      	add	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	3304      	adds	r3, #4
 800330c:	4619      	mov	r1, r3
 800330e:	4610      	mov	r0, r2
 8003310:	f7ff f829 	bl	8002366 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003318:	4b1d      	ldr	r3, [pc, #116]	@ (8003390 <xTaskResumeAll+0x11c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800331e:	429a      	cmp	r2, r3
 8003320:	d302      	bcc.n	8003328 <xTaskResumeAll+0xb4>
                    {
                        xYieldPending = pdTRUE;
 8003322:	4b1c      	ldr	r3, [pc, #112]	@ (8003394 <xTaskResumeAll+0x120>)
 8003324:	2201      	movs	r2, #1
 8003326:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003328:	4b16      	ldr	r3, [pc, #88]	@ (8003384 <xTaskResumeAll+0x110>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1c8      	bne.n	80032c2 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <xTaskResumeAll+0xc6>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003336:	f000 fb2f 	bl	8003998 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800333a:	4b17      	ldr	r3, [pc, #92]	@ (8003398 <xTaskResumeAll+0x124>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	60bb      	str	r3, [r7, #8]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d010      	beq.n	8003368 <xTaskResumeAll+0xf4>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003346:	f000 f84b 	bl	80033e0 <xTaskIncrementTick>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <xTaskResumeAll+0xe2>
                            {
                                xYieldPending = pdTRUE;
 8003350:	4b10      	ldr	r3, [pc, #64]	@ (8003394 <xTaskResumeAll+0x120>)
 8003352:	2201      	movs	r2, #1
 8003354:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	3b01      	subs	r3, #1
 800335a:	60bb      	str	r3, [r7, #8]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f1      	bne.n	8003346 <xTaskResumeAll+0xd2>

                        xPendedTicks = 0;
 8003362:	4b0d      	ldr	r3, [pc, #52]	@ (8003398 <xTaskResumeAll+0x124>)
 8003364:	2200      	movs	r2, #0
 8003366:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003368:	4b0a      	ldr	r3, [pc, #40]	@ (8003394 <xTaskResumeAll+0x120>)
 800336a:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800336c:	f001 f8c8 	bl	8004500 <vPortExitCritical>

    return xAlreadyYielded;
 8003370:	687b      	ldr	r3, [r7, #4]
}
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	20000210 	.word	0x20000210
 8003380:	200001e8 	.word	0x200001e8
 8003384:	200001a8 	.word	0x200001a8
 8003388:	200001f0 	.word	0x200001f0
 800338c:	20000114 	.word	0x20000114
 8003390:	20000110 	.word	0x20000110
 8003394:	200001fc 	.word	0x200001fc
 8003398:	200001f8 	.word	0x200001f8

0800339c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80033a2:	4b05      	ldr	r3, [pc, #20]	@ (80033b8 <xTaskGetTickCount+0x1c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80033a8:	687b      	ldr	r3, [r7, #4]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	200001ec 	.word	0x200001ec

080033bc <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033c2:	f001 f95b 	bl	800467c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80033c6:	2300      	movs	r3, #0
 80033c8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80033ca:	4b04      	ldr	r3, [pc, #16]	@ (80033dc <xTaskGetTickCountFromISR+0x20>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80033d0:	683b      	ldr	r3, [r7, #0]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	200001ec 	.word	0x200001ec

080033e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b086      	sub	sp, #24
 80033e4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80033e6:	2300      	movs	r3, #0
 80033e8:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033ea:	4b41      	ldr	r3, [pc, #260]	@ (80034f0 <xTaskIncrementTick+0x110>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d174      	bne.n	80034dc <xTaskIncrementTick+0xfc>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80033f2:	4b40      	ldr	r3, [pc, #256]	@ (80034f4 <xTaskIncrementTick+0x114>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	3301      	adds	r3, #1
 80033f8:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80033fa:	4a3e      	ldr	r2, [pc, #248]	@ (80034f4 <xTaskIncrementTick+0x114>)
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d121      	bne.n	800344a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003406:	4b3c      	ldr	r3, [pc, #240]	@ (80034f8 <xTaskIncrementTick+0x118>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00b      	beq.n	8003428 <xTaskIncrementTick+0x48>
        __asm volatile
 8003410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003414:	f383 8811 	msr	BASEPRI, r3
 8003418:	f3bf 8f6f 	isb	sy
 800341c:	f3bf 8f4f 	dsb	sy
 8003420:	603b      	str	r3, [r7, #0]
    }
 8003422:	bf00      	nop
 8003424:	bf00      	nop
 8003426:	e7fd      	b.n	8003424 <xTaskIncrementTick+0x44>
 8003428:	4b33      	ldr	r3, [pc, #204]	@ (80034f8 <xTaskIncrementTick+0x118>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	4b33      	ldr	r3, [pc, #204]	@ (80034fc <xTaskIncrementTick+0x11c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a31      	ldr	r2, [pc, #196]	@ (80034f8 <xTaskIncrementTick+0x118>)
 8003434:	6013      	str	r3, [r2, #0]
 8003436:	4a31      	ldr	r2, [pc, #196]	@ (80034fc <xTaskIncrementTick+0x11c>)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6013      	str	r3, [r2, #0]
 800343c:	4b30      	ldr	r3, [pc, #192]	@ (8003500 <xTaskIncrementTick+0x120>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3301      	adds	r3, #1
 8003442:	4a2f      	ldr	r2, [pc, #188]	@ (8003500 <xTaskIncrementTick+0x120>)
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	f000 faa7 	bl	8003998 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800344a:	4b2e      	ldr	r3, [pc, #184]	@ (8003504 <xTaskIncrementTick+0x124>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	693a      	ldr	r2, [r7, #16]
 8003450:	429a      	cmp	r2, r3
 8003452:	d348      	bcc.n	80034e6 <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003454:	4b28      	ldr	r3, [pc, #160]	@ (80034f8 <xTaskIncrementTick+0x118>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d104      	bne.n	8003468 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800345e:	4b29      	ldr	r3, [pc, #164]	@ (8003504 <xTaskIncrementTick+0x124>)
 8003460:	f04f 32ff 	mov.w	r2, #4294967295
 8003464:	601a      	str	r2, [r3, #0]
                    break;
 8003466:	e03e      	b.n	80034e6 <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003468:	4b23      	ldr	r3, [pc, #140]	@ (80034f8 <xTaskIncrementTick+0x118>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	429a      	cmp	r2, r3
 800347e:	d203      	bcs.n	8003488 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003480:	4a20      	ldr	r2, [pc, #128]	@ (8003504 <xTaskIncrementTick+0x124>)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003486:	e02e      	b.n	80034e6 <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	3304      	adds	r3, #4
 800348c:	4618      	mov	r0, r3
 800348e:	f7fe ffc7 	bl	8002420 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003496:	2b00      	cmp	r3, #0
 8003498:	d004      	beq.n	80034a4 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	3318      	adds	r3, #24
 800349e:	4618      	mov	r0, r3
 80034a0:	f7fe ffbe 	bl	8002420 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	4618      	mov	r0, r3
 80034a8:	f003 fd1e 	bl	8006ee8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b0:	2201      	movs	r2, #1
 80034b2:	409a      	lsls	r2, r3
 80034b4:	4b14      	ldr	r3, [pc, #80]	@ (8003508 <xTaskIncrementTick+0x128>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	4a13      	ldr	r2, [pc, #76]	@ (8003508 <xTaskIncrementTick+0x128>)
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4a10      	ldr	r2, [pc, #64]	@ (800350c <xTaskIncrementTick+0x12c>)
 80034cc:	441a      	add	r2, r3
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	3304      	adds	r3, #4
 80034d2:	4619      	mov	r1, r3
 80034d4:	4610      	mov	r0, r2
 80034d6:	f7fe ff46 	bl	8002366 <vListInsertEnd>
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034da:	e7bb      	b.n	8003454 <xTaskIncrementTick+0x74>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80034dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003510 <xTaskIncrementTick+0x130>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	3301      	adds	r3, #1
 80034e2:	4a0b      	ldr	r2, [pc, #44]	@ (8003510 <xTaskIncrementTick+0x130>)
 80034e4:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80034e6:	697b      	ldr	r3, [r7, #20]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	20000210 	.word	0x20000210
 80034f4:	200001ec 	.word	0x200001ec
 80034f8:	200001a0 	.word	0x200001a0
 80034fc:	200001a4 	.word	0x200001a4
 8003500:	20000200 	.word	0x20000200
 8003504:	20000208 	.word	0x20000208
 8003508:	200001f0 	.word	0x200001f0
 800350c:	20000114 	.word	0x20000114
 8003510:	200001f8 	.word	0x200001f8

08003514 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b086      	sub	sp, #24
 8003518:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800351a:	4b2d      	ldr	r3, [pc, #180]	@ (80035d0 <vTaskSwitchContext+0xbc>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003522:	4b2c      	ldr	r3, [pc, #176]	@ (80035d4 <vTaskSwitchContext+0xc0>)
 8003524:	2201      	movs	r2, #1
 8003526:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8003528:	e04e      	b.n	80035c8 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 800352a:	4b2a      	ldr	r3, [pc, #168]	@ (80035d4 <vTaskSwitchContext+0xc0>)
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003530:	4b29      	ldr	r3, [pc, #164]	@ (80035d8 <vTaskSwitchContext+0xc4>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	fab3 f383 	clz	r3, r3
 800353c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800353e:	7afb      	ldrb	r3, [r7, #11]
 8003540:	f1c3 031f 	rsb	r3, r3, #31
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	4925      	ldr	r1, [pc, #148]	@ (80035dc <vTaskSwitchContext+0xc8>)
 8003548:	697a      	ldr	r2, [r7, #20]
 800354a:	4613      	mov	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d10b      	bne.n	8003572 <vTaskSwitchContext+0x5e>
        __asm volatile
 800355a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800355e:	f383 8811 	msr	BASEPRI, r3
 8003562:	f3bf 8f6f 	isb	sy
 8003566:	f3bf 8f4f 	dsb	sy
 800356a:	607b      	str	r3, [r7, #4]
    }
 800356c:	bf00      	nop
 800356e:	bf00      	nop
 8003570:	e7fd      	b.n	800356e <vTaskSwitchContext+0x5a>
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	4613      	mov	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4a17      	ldr	r2, [pc, #92]	@ (80035dc <vTaskSwitchContext+0xc8>)
 800357e:	4413      	add	r3, r2
 8003580:	613b      	str	r3, [r7, #16]
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	605a      	str	r2, [r3, #4]
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	3308      	adds	r3, #8
 8003594:	429a      	cmp	r2, r3
 8003596:	d104      	bne.n	80035a2 <vTaskSwitchContext+0x8e>
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	685a      	ldr	r2, [r3, #4]
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	605a      	str	r2, [r3, #4]
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	4a0d      	ldr	r2, [pc, #52]	@ (80035e0 <vTaskSwitchContext+0xcc>)
 80035aa:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80035ac:	4b0c      	ldr	r3, [pc, #48]	@ (80035e0 <vTaskSwitchContext+0xcc>)
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	4b0c      	ldr	r3, [pc, #48]	@ (80035e4 <vTaskSwitchContext+0xd0>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d102      	bne.n	80035be <vTaskSwitchContext+0xaa>
 80035b8:	f003 fbf6 	bl	8006da8 <SEGGER_SYSVIEW_OnIdle>
}
 80035bc:	e004      	b.n	80035c8 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 80035be:	4b08      	ldr	r3, [pc, #32]	@ (80035e0 <vTaskSwitchContext+0xcc>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f003 fc4e 	bl	8006e64 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80035c8:	bf00      	nop
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	20000210 	.word	0x20000210
 80035d4:	200001fc 	.word	0x200001fc
 80035d8:	200001f0 	.word	0x200001f0
 80035dc:	20000114 	.word	0x20000114
 80035e0:	20000110 	.word	0x20000110
 80035e4:	2000020c 	.word	0x2000020c

080035e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d10b      	bne.n	8003610 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80035f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035fc:	f383 8811 	msr	BASEPRI, r3
 8003600:	f3bf 8f6f 	isb	sy
 8003604:	f3bf 8f4f 	dsb	sy
 8003608:	60fb      	str	r3, [r7, #12]
    }
 800360a:	bf00      	nop
 800360c:	bf00      	nop
 800360e:	e7fd      	b.n	800360c <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003610:	4b07      	ldr	r3, [pc, #28]	@ (8003630 <vTaskPlaceOnEventList+0x48>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	3318      	adds	r3, #24
 8003616:	4619      	mov	r1, r3
 8003618:	6878      	ldr	r0, [r7, #4]
 800361a:	f7fe fec8 	bl	80023ae <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800361e:	2101      	movs	r1, #1
 8003620:	6838      	ldr	r0, [r7, #0]
 8003622:	f000 fa75 	bl	8003b10 <prvAddCurrentTaskToDelayedList>
}
 8003626:	bf00      	nop
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	20000110 	.word	0x20000110

08003634 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003634:	b580      	push	{r7, lr}
 8003636:	b086      	sub	sp, #24
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10b      	bne.n	800365e <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8003646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800364a:	f383 8811 	msr	BASEPRI, r3
 800364e:	f3bf 8f6f 	isb	sy
 8003652:	f3bf 8f4f 	dsb	sy
 8003656:	617b      	str	r3, [r7, #20]
    }
 8003658:	bf00      	nop
 800365a:	bf00      	nop
 800365c:	e7fd      	b.n	800365a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800365e:	4b0c      	ldr	r3, [pc, #48]	@ (8003690 <vTaskPlaceOnEventListRestricted+0x5c>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	3318      	adds	r3, #24
 8003664:	4619      	mov	r1, r3
 8003666:	68f8      	ldr	r0, [r7, #12]
 8003668:	f7fe fe7d 	bl	8002366 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d002      	beq.n	8003678 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 8003672:	f04f 33ff 	mov.w	r3, #4294967295
 8003676:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003678:	2024      	movs	r0, #36	@ 0x24
 800367a:	f002 fe95 	bl	80063a8 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800367e:	6879      	ldr	r1, [r7, #4]
 8003680:	68b8      	ldr	r0, [r7, #8]
 8003682:	f000 fa45 	bl	8003b10 <prvAddCurrentTaskToDelayedList>
    }
 8003686:	bf00      	nop
 8003688:	3718      	adds	r7, #24
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000110 	.word	0x20000110

08003694 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b086      	sub	sp, #24
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10b      	bne.n	80036c2 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 80036aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ae:	f383 8811 	msr	BASEPRI, r3
 80036b2:	f3bf 8f6f 	isb	sy
 80036b6:	f3bf 8f4f 	dsb	sy
 80036ba:	60fb      	str	r3, [r7, #12]
    }
 80036bc:	bf00      	nop
 80036be:	bf00      	nop
 80036c0:	e7fd      	b.n	80036be <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	3318      	adds	r3, #24
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7fe feaa 	bl	8002420 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036cc:	4b1f      	ldr	r3, [pc, #124]	@ (800374c <xTaskRemoveFromEventList+0xb8>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d120      	bne.n	8003716 <xTaskRemoveFromEventList+0x82>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	3304      	adds	r3, #4
 80036d8:	4618      	mov	r0, r3
 80036da:	f7fe fea1 	bl	8002420 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f003 fc01 	bl	8006ee8 <SEGGER_SYSVIEW_OnTaskStartReady>
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ea:	2201      	movs	r2, #1
 80036ec:	409a      	lsls	r2, r3
 80036ee:	4b18      	ldr	r3, [pc, #96]	@ (8003750 <xTaskRemoveFromEventList+0xbc>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	4a16      	ldr	r2, [pc, #88]	@ (8003750 <xTaskRemoveFromEventList+0xbc>)
 80036f6:	6013      	str	r3, [r2, #0]
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036fc:	4613      	mov	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4a13      	ldr	r2, [pc, #76]	@ (8003754 <xTaskRemoveFromEventList+0xc0>)
 8003706:	441a      	add	r2, r3
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	3304      	adds	r3, #4
 800370c:	4619      	mov	r1, r3
 800370e:	4610      	mov	r0, r2
 8003710:	f7fe fe29 	bl	8002366 <vListInsertEnd>
 8003714:	e005      	b.n	8003722 <xTaskRemoveFromEventList+0x8e>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	3318      	adds	r3, #24
 800371a:	4619      	mov	r1, r3
 800371c:	480e      	ldr	r0, [pc, #56]	@ (8003758 <xTaskRemoveFromEventList+0xc4>)
 800371e:	f7fe fe22 	bl	8002366 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003726:	4b0d      	ldr	r3, [pc, #52]	@ (800375c <xTaskRemoveFromEventList+0xc8>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372c:	429a      	cmp	r2, r3
 800372e:	d905      	bls.n	800373c <xTaskRemoveFromEventList+0xa8>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003730:	2301      	movs	r3, #1
 8003732:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003734:	4b0a      	ldr	r3, [pc, #40]	@ (8003760 <xTaskRemoveFromEventList+0xcc>)
 8003736:	2201      	movs	r2, #1
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	e001      	b.n	8003740 <xTaskRemoveFromEventList+0xac>
    }
    else
    {
        xReturn = pdFALSE;
 800373c:	2300      	movs	r3, #0
 800373e:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003740:	697b      	ldr	r3, [r7, #20]
}
 8003742:	4618      	mov	r0, r3
 8003744:	3718      	adds	r7, #24
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	20000210 	.word	0x20000210
 8003750:	200001f0 	.word	0x200001f0
 8003754:	20000114 	.word	0x20000114
 8003758:	200001a8 	.word	0x200001a8
 800375c:	20000110 	.word	0x20000110
 8003760:	200001fc 	.word	0x200001fc

08003764 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800376c:	4b06      	ldr	r3, [pc, #24]	@ (8003788 <vTaskInternalSetTimeOutState+0x24>)
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003774:	4b05      	ldr	r3, [pc, #20]	@ (800378c <vTaskInternalSetTimeOutState+0x28>)
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	605a      	str	r2, [r3, #4]
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr
 8003788:	20000200 	.word	0x20000200
 800378c:	200001ec 	.word	0x200001ec

08003790 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b088      	sub	sp, #32
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10b      	bne.n	80037b8 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 80037a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a4:	f383 8811 	msr	BASEPRI, r3
 80037a8:	f3bf 8f6f 	isb	sy
 80037ac:	f3bf 8f4f 	dsb	sy
 80037b0:	613b      	str	r3, [r7, #16]
    }
 80037b2:	bf00      	nop
 80037b4:	bf00      	nop
 80037b6:	e7fd      	b.n	80037b4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d10b      	bne.n	80037d6 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80037be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c2:	f383 8811 	msr	BASEPRI, r3
 80037c6:	f3bf 8f6f 	isb	sy
 80037ca:	f3bf 8f4f 	dsb	sy
 80037ce:	60fb      	str	r3, [r7, #12]
    }
 80037d0:	bf00      	nop
 80037d2:	bf00      	nop
 80037d4:	e7fd      	b.n	80037d2 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80037d6:	f000 fe61 	bl	800449c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80037da:	4b1f      	ldr	r3, [pc, #124]	@ (8003858 <xTaskCheckForTimeOut+0xc8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037f2:	d102      	bne.n	80037fa <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80037f4:	2300      	movs	r3, #0
 80037f6:	61fb      	str	r3, [r7, #28]
 80037f8:	e026      	b.n	8003848 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	4b17      	ldr	r3, [pc, #92]	@ (800385c <xTaskCheckForTimeOut+0xcc>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	429a      	cmp	r2, r3
 8003804:	d00a      	beq.n	800381c <xTaskCheckForTimeOut+0x8c>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	69ba      	ldr	r2, [r7, #24]
 800380c:	429a      	cmp	r2, r3
 800380e:	d305      	bcc.n	800381c <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003810:	2301      	movs	r3, #1
 8003812:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	2200      	movs	r2, #0
 8003818:	601a      	str	r2, [r3, #0]
 800381a:	e015      	b.n	8003848 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	429a      	cmp	r2, r3
 8003824:	d20b      	bcs.n	800383e <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	1ad2      	subs	r2, r2, r3
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7ff ff96 	bl	8003764 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003838:	2300      	movs	r3, #0
 800383a:	61fb      	str	r3, [r7, #28]
 800383c:	e004      	b.n	8003848 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003844:	2301      	movs	r3, #1
 8003846:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003848:	f000 fe5a 	bl	8004500 <vPortExitCritical>

    return xReturn;
 800384c:	69fb      	ldr	r3, [r7, #28]
}
 800384e:	4618      	mov	r0, r3
 8003850:	3720      	adds	r7, #32
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	200001ec 	.word	0x200001ec
 800385c:	20000200 	.word	0x20000200

08003860 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003864:	4b03      	ldr	r3, [pc, #12]	@ (8003874 <vTaskMissedYield+0x14>)
 8003866:	2201      	movs	r2, #1
 8003868:	601a      	str	r2, [r3, #0]
}
 800386a:	bf00      	nop
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	200001fc 	.word	0x200001fc

08003878 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003880:	f000 f84c 	bl	800391c <prvCheckTasksWaitingTermination>
            {
                /* If we are not using preemption we keep forcing a task switch to
                 * see if any other task has become available.  If we are using
                 * preemption we don't need to do this as any task becoming available
                 * will automatically get the processor anyway. */
                taskYIELD();
 8003884:	4b04      	ldr	r3, [pc, #16]	@ (8003898 <prvIdleTask+0x20>)
 8003886:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	f3bf 8f4f 	dsb	sy
 8003890:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003894:	bf00      	nop
 8003896:	e7f3      	b.n	8003880 <prvIdleTask+0x8>
 8003898:	e000ed04 	.word	0xe000ed04

0800389c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038a2:	2300      	movs	r3, #0
 80038a4:	607b      	str	r3, [r7, #4]
 80038a6:	e00c      	b.n	80038c2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	4613      	mov	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4413      	add	r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	4a12      	ldr	r2, [pc, #72]	@ (80038fc <prvInitialiseTaskLists+0x60>)
 80038b4:	4413      	add	r3, r2
 80038b6:	4618      	mov	r0, r3
 80038b8:	f7fe fd28 	bl	800230c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3301      	adds	r3, #1
 80038c0:	607b      	str	r3, [r7, #4]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d9ef      	bls.n	80038a8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80038c8:	480d      	ldr	r0, [pc, #52]	@ (8003900 <prvInitialiseTaskLists+0x64>)
 80038ca:	f7fe fd1f 	bl	800230c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80038ce:	480d      	ldr	r0, [pc, #52]	@ (8003904 <prvInitialiseTaskLists+0x68>)
 80038d0:	f7fe fd1c 	bl	800230c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80038d4:	480c      	ldr	r0, [pc, #48]	@ (8003908 <prvInitialiseTaskLists+0x6c>)
 80038d6:	f7fe fd19 	bl	800230c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 80038da:	480c      	ldr	r0, [pc, #48]	@ (800390c <prvInitialiseTaskLists+0x70>)
 80038dc:	f7fe fd16 	bl	800230c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 80038e0:	480b      	ldr	r0, [pc, #44]	@ (8003910 <prvInitialiseTaskLists+0x74>)
 80038e2:	f7fe fd13 	bl	800230c <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80038e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003914 <prvInitialiseTaskLists+0x78>)
 80038e8:	4a05      	ldr	r2, [pc, #20]	@ (8003900 <prvInitialiseTaskLists+0x64>)
 80038ea:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80038ec:	4b0a      	ldr	r3, [pc, #40]	@ (8003918 <prvInitialiseTaskLists+0x7c>)
 80038ee:	4a05      	ldr	r2, [pc, #20]	@ (8003904 <prvInitialiseTaskLists+0x68>)
 80038f0:	601a      	str	r2, [r3, #0]
}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	20000114 	.word	0x20000114
 8003900:	20000178 	.word	0x20000178
 8003904:	2000018c 	.word	0x2000018c
 8003908:	200001a8 	.word	0x200001a8
 800390c:	200001bc 	.word	0x200001bc
 8003910:	200001d4 	.word	0x200001d4
 8003914:	200001a0 	.word	0x200001a0
 8003918:	200001a4 	.word	0x200001a4

0800391c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800391c:	b580      	push	{r7, lr}
 800391e:	b082      	sub	sp, #8
 8003920:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003922:	e019      	b.n	8003958 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003924:	f000 fdba 	bl	800449c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003928:	4b10      	ldr	r3, [pc, #64]	@ (800396c <prvCheckTasksWaitingTermination+0x50>)
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	3304      	adds	r3, #4
 8003934:	4618      	mov	r0, r3
 8003936:	f7fe fd73 	bl	8002420 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 800393a:	4b0d      	ldr	r3, [pc, #52]	@ (8003970 <prvCheckTasksWaitingTermination+0x54>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	3b01      	subs	r3, #1
 8003940:	4a0b      	ldr	r2, [pc, #44]	@ (8003970 <prvCheckTasksWaitingTermination+0x54>)
 8003942:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003944:	4b0b      	ldr	r3, [pc, #44]	@ (8003974 <prvCheckTasksWaitingTermination+0x58>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	3b01      	subs	r3, #1
 800394a:	4a0a      	ldr	r2, [pc, #40]	@ (8003974 <prvCheckTasksWaitingTermination+0x58>)
 800394c:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 800394e:	f000 fdd7 	bl	8004500 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f810 	bl	8003978 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003958:	4b06      	ldr	r3, [pc, #24]	@ (8003974 <prvCheckTasksWaitingTermination+0x58>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1e1      	bne.n	8003924 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003960:	bf00      	nop
 8003962:	bf00      	nop
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	200001bc 	.word	0x200001bc
 8003970:	200001e8 	.word	0x200001e8
 8003974:	200001d0 	.word	0x200001d0

08003978 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003984:	4618      	mov	r0, r3
 8003986:	f000 ff9d 	bl	80048c4 <vPortFree>
                vPortFree( pxTCB );
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 ff9a 	bl	80048c4 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003990:	bf00      	nop
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800399c:	4b0a      	ldr	r3, [pc, #40]	@ (80039c8 <prvResetNextTaskUnblockTime+0x30>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d104      	bne.n	80039b0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80039a6:	4b09      	ldr	r3, [pc, #36]	@ (80039cc <prvResetNextTaskUnblockTime+0x34>)
 80039a8:	f04f 32ff 	mov.w	r2, #4294967295
 80039ac:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80039ae:	e005      	b.n	80039bc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80039b0:	4b05      	ldr	r3, [pc, #20]	@ (80039c8 <prvResetNextTaskUnblockTime+0x30>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a04      	ldr	r2, [pc, #16]	@ (80039cc <prvResetNextTaskUnblockTime+0x34>)
 80039ba:	6013      	str	r3, [r2, #0]
}
 80039bc:	bf00      	nop
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	200001a0 	.word	0x200001a0
 80039cc:	20000208 	.word	0x20000208

080039d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80039d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003a04 <xTaskGetSchedulerState+0x34>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d102      	bne.n	80039e4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80039de:	2301      	movs	r3, #1
 80039e0:	607b      	str	r3, [r7, #4]
 80039e2:	e008      	b.n	80039f6 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039e4:	4b08      	ldr	r3, [pc, #32]	@ (8003a08 <xTaskGetSchedulerState+0x38>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d102      	bne.n	80039f2 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80039ec:	2302      	movs	r3, #2
 80039ee:	607b      	str	r3, [r7, #4]
 80039f0:	e001      	b.n	80039f6 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80039f2:	2300      	movs	r3, #0
 80039f4:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80039f6:	687b      	ldr	r3, [r7, #4]
    }
 80039f8:	4618      	mov	r0, r3
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	200001f4 	.word	0x200001f4
 8003a08:	20000210 	.word	0x20000210

08003a0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b086      	sub	sp, #24
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d06a      	beq.n	8003af8 <xTaskPriorityDisinherit+0xec>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003a22:	4b38      	ldr	r3, [pc, #224]	@ (8003b04 <xTaskPriorityDisinherit+0xf8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d00b      	beq.n	8003a44 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 8003a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a30:	f383 8811 	msr	BASEPRI, r3
 8003a34:	f3bf 8f6f 	isb	sy
 8003a38:	f3bf 8f4f 	dsb	sy
 8003a3c:	60fb      	str	r3, [r7, #12]
    }
 8003a3e:	bf00      	nop
 8003a40:	bf00      	nop
 8003a42:	e7fd      	b.n	8003a40 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10b      	bne.n	8003a64 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 8003a4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a50:	f383 8811 	msr	BASEPRI, r3
 8003a54:	f3bf 8f6f 	isb	sy
 8003a58:	f3bf 8f4f 	dsb	sy
 8003a5c:	60bb      	str	r3, [r7, #8]
    }
 8003a5e:	bf00      	nop
 8003a60:	bf00      	nop
 8003a62:	e7fd      	b.n	8003a60 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a68:	1e5a      	subs	r2, r3, #1
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d03e      	beq.n	8003af8 <xTaskPriorityDisinherit+0xec>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d13a      	bne.n	8003af8 <xTaskPriorityDisinherit+0xec>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	3304      	adds	r3, #4
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7fe fcca 	bl	8002420 <uxListRemove>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d10a      	bne.n	8003aa8 <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a96:	2201      	movs	r2, #1
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	43da      	mvns	r2, r3
 8003a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8003b08 <xTaskPriorityDisinherit+0xfc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	4a18      	ldr	r2, [pc, #96]	@ (8003b08 <xTaskPriorityDisinherit+0xfc>)
 8003aa6:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	4619      	mov	r1, r3
 8003aac:	204a      	movs	r0, #74	@ 0x4a
 8003aae:	f002 fc99 	bl	80063e4 <SEGGER_SYSVIEW_RecordU32>
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003abe:	f1c3 0205 	rsb	r2, r3, #5
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aca:	2201      	movs	r2, #1
 8003acc:	409a      	lsls	r2, r3
 8003ace:	4b0e      	ldr	r3, [pc, #56]	@ (8003b08 <xTaskPriorityDisinherit+0xfc>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	4a0c      	ldr	r2, [pc, #48]	@ (8003b08 <xTaskPriorityDisinherit+0xfc>)
 8003ad6:	6013      	str	r3, [r2, #0]
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003adc:	4613      	mov	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	4413      	add	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4a09      	ldr	r2, [pc, #36]	@ (8003b0c <xTaskPriorityDisinherit+0x100>)
 8003ae6:	441a      	add	r2, r3
 8003ae8:	693b      	ldr	r3, [r7, #16]
 8003aea:	3304      	adds	r3, #4
 8003aec:	4619      	mov	r1, r3
 8003aee:	4610      	mov	r0, r2
 8003af0:	f7fe fc39 	bl	8002366 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003af4:	2301      	movs	r3, #1
 8003af6:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003af8:	697b      	ldr	r3, [r7, #20]
    }
 8003afa:	4618      	mov	r0, r3
 8003afc:	3718      	adds	r7, #24
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	20000110 	.word	0x20000110
 8003b08:	200001f0 	.word	0x200001f0
 8003b0c:	20000114 	.word	0x20000114

08003b10 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003b1a:	4b32      	ldr	r3, [pc, #200]	@ (8003be4 <prvAddCurrentTaskToDelayedList+0xd4>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b20:	4b31      	ldr	r3, [pc, #196]	@ (8003be8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3304      	adds	r3, #4
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fe fc7a 	bl	8002420 <uxListRemove>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d10b      	bne.n	8003b4a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003b32:	4b2d      	ldr	r3, [pc, #180]	@ (8003be8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b38:	2201      	movs	r2, #1
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	43da      	mvns	r2, r3
 8003b40:	4b2a      	ldr	r3, [pc, #168]	@ (8003bec <prvAddCurrentTaskToDelayedList+0xdc>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4013      	ands	r3, r2
 8003b46:	4a29      	ldr	r2, [pc, #164]	@ (8003bec <prvAddCurrentTaskToDelayedList+0xdc>)
 8003b48:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d110      	bne.n	8003b74 <prvAddCurrentTaskToDelayedList+0x64>
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00d      	beq.n	8003b74 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8003b58:	4b23      	ldr	r3, [pc, #140]	@ (8003be8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	211b      	movs	r1, #27
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f003 fa04 	bl	8006f6c <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b64:	4b20      	ldr	r3, [pc, #128]	@ (8003be8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3304      	adds	r3, #4
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	4820      	ldr	r0, [pc, #128]	@ (8003bf0 <prvAddCurrentTaskToDelayedList+0xe0>)
 8003b6e:	f7fe fbfa 	bl	8002366 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003b72:	e032      	b.n	8003bda <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4413      	add	r3, r2
 8003b7a:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8003be8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68ba      	ldr	r2, [r7, #8]
 8003b82:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d20f      	bcs.n	8003bac <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 8003b8c:	4b16      	ldr	r3, [pc, #88]	@ (8003be8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2104      	movs	r1, #4
 8003b92:	4618      	mov	r0, r3
 8003b94:	f003 f9ea 	bl	8006f6c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003b98:	4b16      	ldr	r3, [pc, #88]	@ (8003bf4 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	4b12      	ldr	r3, [pc, #72]	@ (8003be8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3304      	adds	r3, #4
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	f7fe fc02 	bl	80023ae <vListInsert>
}
 8003baa:	e016      	b.n	8003bda <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 8003bac:	4b0e      	ldr	r3, [pc, #56]	@ (8003be8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2104      	movs	r1, #4
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f003 f9da 	bl	8006f6c <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bb8:	4b0f      	ldr	r3, [pc, #60]	@ (8003bf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	4b0a      	ldr	r3, [pc, #40]	@ (8003be8 <prvAddCurrentTaskToDelayedList+0xd8>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	3304      	adds	r3, #4
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	4610      	mov	r0, r2
 8003bc6:	f7fe fbf2 	bl	80023ae <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003bca:	4b0c      	ldr	r3, [pc, #48]	@ (8003bfc <prvAddCurrentTaskToDelayedList+0xec>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68ba      	ldr	r2, [r7, #8]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d202      	bcs.n	8003bda <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 8003bd4:	4a09      	ldr	r2, [pc, #36]	@ (8003bfc <prvAddCurrentTaskToDelayedList+0xec>)
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	6013      	str	r3, [r2, #0]
}
 8003bda:	bf00      	nop
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	200001ec 	.word	0x200001ec
 8003be8:	20000110 	.word	0x20000110
 8003bec:	200001f0 	.word	0x200001f0
 8003bf0:	200001d4 	.word	0x200001d4
 8003bf4:	200001a4 	.word	0x200001a4
 8003bf8:	200001a0 	.word	0x200001a0
 8003bfc:	20000208 	.word	0x20000208

08003c00 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003c0a:	f000 fae1 	bl	80041d0 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003c0e:	4b12      	ldr	r3, [pc, #72]	@ (8003c58 <xTimerCreateTimerTask+0x58>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00b      	beq.n	8003c2e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8003c16:	4b11      	ldr	r3, [pc, #68]	@ (8003c5c <xTimerCreateTimerTask+0x5c>)
 8003c18:	9301      	str	r3, [sp, #4]
 8003c1a:	2302      	movs	r3, #2
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003c24:	490e      	ldr	r1, [pc, #56]	@ (8003c60 <xTimerCreateTimerTask+0x60>)
 8003c26:	480f      	ldr	r0, [pc, #60]	@ (8003c64 <xTimerCreateTimerTask+0x64>)
 8003c28:	f7ff f95e 	bl	8002ee8 <xTaskCreate>
 8003c2c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10b      	bne.n	8003c4c <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8003c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c38:	f383 8811 	msr	BASEPRI, r3
 8003c3c:	f3bf 8f6f 	isb	sy
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	603b      	str	r3, [r7, #0]
    }
 8003c46:	bf00      	nop
 8003c48:	bf00      	nop
 8003c4a:	e7fd      	b.n	8003c48 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003c4c:	687b      	ldr	r3, [r7, #4]
    }
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3708      	adds	r7, #8
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	20000244 	.word	0x20000244
 8003c5c:	20000248 	.word	0x20000248
 8003c60:	08007d28 	.word	0x08007d28
 8003c64:	08003da1 	.word	0x08003da1

08003c68 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b08a      	sub	sp, #40	@ 0x28
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
 8003c74:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10b      	bne.n	8003c98 <xTimerGenericCommand+0x30>
        __asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	623b      	str	r3, [r7, #32]
    }
 8003c92:	bf00      	nop
 8003c94:	bf00      	nop
 8003c96:	e7fd      	b.n	8003c94 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8003c98:	4b19      	ldr	r3, [pc, #100]	@ (8003d00 <xTimerGenericCommand+0x98>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d02a      	beq.n	8003cf6 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2b05      	cmp	r3, #5
 8003cb0:	dc18      	bgt.n	8003ce4 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003cb2:	f7ff fe8d 	bl	80039d0 <xTaskGetSchedulerState>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d109      	bne.n	8003cd0 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003cbc:	4b10      	ldr	r3, [pc, #64]	@ (8003d00 <xTimerGenericCommand+0x98>)
 8003cbe:	6818      	ldr	r0, [r3, #0]
 8003cc0:	f107 0114 	add.w	r1, r7, #20
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cc8:	f7fe fcbc 	bl	8002644 <xQueueGenericSend>
 8003ccc:	6278      	str	r0, [r7, #36]	@ 0x24
 8003cce:	e012      	b.n	8003cf6 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003d00 <xTimerGenericCommand+0x98>)
 8003cd2:	6818      	ldr	r0, [r3, #0]
 8003cd4:	f107 0114 	add.w	r1, r7, #20
 8003cd8:	2300      	movs	r3, #0
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f7fe fcb2 	bl	8002644 <xQueueGenericSend>
 8003ce0:	6278      	str	r0, [r7, #36]	@ 0x24
 8003ce2:	e008      	b.n	8003cf6 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003ce4:	4b06      	ldr	r3, [pc, #24]	@ (8003d00 <xTimerGenericCommand+0x98>)
 8003ce6:	6818      	ldr	r0, [r3, #0]
 8003ce8:	f107 0114 	add.w	r1, r7, #20
 8003cec:	2300      	movs	r3, #0
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	f7fe fdba 	bl	8002868 <xQueueGenericSendFromISR>
 8003cf4:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3728      	adds	r7, #40	@ 0x28
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	20000244 	.word	0x20000244

08003d04 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af02      	add	r7, sp, #8
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d0e:	4b23      	ldr	r3, [pc, #140]	@ (8003d9c <prvProcessExpiredTimer+0x98>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	68db      	ldr	r3, [r3, #12]
 8003d16:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f7fe fb7f 	bl	8002420 <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d28:	f003 0304 	and.w	r3, r3, #4
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d023      	beq.n	8003d78 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	699a      	ldr	r2, [r3, #24]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	18d1      	adds	r1, r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	6978      	ldr	r0, [r7, #20]
 8003d3e:	f000 f8d5 	bl	8003eec <prvInsertTimerInActiveList>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d020      	beq.n	8003d8a <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003d48:	2300      	movs	r3, #0
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	2100      	movs	r1, #0
 8003d52:	6978      	ldr	r0, [r7, #20]
 8003d54:	f7ff ff88 	bl	8003c68 <xTimerGenericCommand>
 8003d58:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d114      	bne.n	8003d8a <prvProcessExpiredTimer+0x86>
        __asm volatile
 8003d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d64:	f383 8811 	msr	BASEPRI, r3
 8003d68:	f3bf 8f6f 	isb	sy
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	60fb      	str	r3, [r7, #12]
    }
 8003d72:	bf00      	nop
 8003d74:	bf00      	nop
 8003d76:	e7fd      	b.n	8003d74 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003d7e:	f023 0301 	bic.w	r3, r3, #1
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	6a1b      	ldr	r3, [r3, #32]
 8003d8e:	6978      	ldr	r0, [r7, #20]
 8003d90:	4798      	blx	r3
    }
 8003d92:	bf00      	nop
 8003d94:	3718      	adds	r7, #24
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	2000023c 	.word	0x2000023c

08003da0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003da8:	f107 0308 	add.w	r3, r7, #8
 8003dac:	4618      	mov	r0, r3
 8003dae:	f000 f859 	bl	8003e64 <prvGetNextExpireTime>
 8003db2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	4619      	mov	r1, r3
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f000 f805 	bl	8003dc8 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003dbe:	f000 f8d7 	bl	8003f70 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003dc2:	bf00      	nop
 8003dc4:	e7f0      	b.n	8003da8 <prvTimerTask+0x8>
	...

08003dc8 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
 8003dd0:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003dd2:	f7ff fa41 	bl	8003258 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003dd6:	f107 0308 	add.w	r3, r7, #8
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 f866 	bl	8003eac <prvSampleTimeNow>
 8003de0:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d130      	bne.n	8003e4a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d10a      	bne.n	8003e04 <prvProcessTimerOrBlockTask+0x3c>
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d806      	bhi.n	8003e04 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003df6:	f7ff fa3d 	bl	8003274 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003dfa:	68f9      	ldr	r1, [r7, #12]
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f7ff ff81 	bl	8003d04 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003e02:	e024      	b.n	8003e4e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d008      	beq.n	8003e1c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003e0a:	4b13      	ldr	r3, [pc, #76]	@ (8003e58 <prvProcessTimerOrBlockTask+0x90>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <prvProcessTimerOrBlockTask+0x50>
 8003e14:	2301      	movs	r3, #1
 8003e16:	e000      	b.n	8003e1a <prvProcessTimerOrBlockTask+0x52>
 8003e18:	2300      	movs	r3, #0
 8003e1a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003e1c:	4b0f      	ldr	r3, [pc, #60]	@ (8003e5c <prvProcessTimerOrBlockTask+0x94>)
 8003e1e:	6818      	ldr	r0, [r3, #0]
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	4619      	mov	r1, r3
 8003e2a:	f7ff f829 	bl	8002e80 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003e2e:	f7ff fa21 	bl	8003274 <xTaskResumeAll>
 8003e32:	4603      	mov	r3, r0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10a      	bne.n	8003e4e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003e38:	4b09      	ldr	r3, [pc, #36]	@ (8003e60 <prvProcessTimerOrBlockTask+0x98>)
 8003e3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	f3bf 8f4f 	dsb	sy
 8003e44:	f3bf 8f6f 	isb	sy
    }
 8003e48:	e001      	b.n	8003e4e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003e4a:	f7ff fa13 	bl	8003274 <xTaskResumeAll>
    }
 8003e4e:	bf00      	nop
 8003e50:	3710      	adds	r7, #16
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	20000240 	.word	0x20000240
 8003e5c:	20000244 	.word	0x20000244
 8003e60:	e000ed04 	.word	0xe000ed04

08003e64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003e6c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ea8 <prvGetNextExpireTime+0x44>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <prvGetNextExpireTime+0x16>
 8003e76:	2201      	movs	r2, #1
 8003e78:	e000      	b.n	8003e7c <prvGetNextExpireTime+0x18>
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d105      	bne.n	8003e94 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003e88:	4b07      	ldr	r3, [pc, #28]	@ (8003ea8 <prvGetNextExpireTime+0x44>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	e001      	b.n	8003e98 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003e94:	2300      	movs	r3, #0
 8003e96:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003e98:	68fb      	ldr	r3, [r7, #12]
    }
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3714      	adds	r7, #20
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	2000023c 	.word	0x2000023c

08003eac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003eb4:	f7ff fa72 	bl	800339c <xTaskGetTickCount>
 8003eb8:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003eba:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee8 <prvSampleTimeNow+0x3c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	68fa      	ldr	r2, [r7, #12]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d205      	bcs.n	8003ed0 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003ec4:	f000 f91e 	bl	8004104 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	e002      	b.n	8003ed6 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003ed6:	4a04      	ldr	r2, [pc, #16]	@ (8003ee8 <prvSampleTimeNow+0x3c>)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003edc:	68fb      	ldr	r3, [r7, #12]
    }
 8003ede:	4618      	mov	r0, r3
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	2000024c 	.word	0x2000024c

08003eec <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003efa:	2300      	movs	r3, #0
 8003efc:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d812      	bhi.n	8003f38 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f12:	687a      	ldr	r2, [r7, #4]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	1ad2      	subs	r2, r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	429a      	cmp	r2, r3
 8003f1e:	d302      	bcc.n	8003f26 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003f20:	2301      	movs	r3, #1
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	e01b      	b.n	8003f5e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003f26:	4b10      	ldr	r3, [pc, #64]	@ (8003f68 <prvInsertTimerInActiveList+0x7c>)
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	3304      	adds	r3, #4
 8003f2e:	4619      	mov	r1, r3
 8003f30:	4610      	mov	r0, r2
 8003f32:	f7fe fa3c 	bl	80023ae <vListInsert>
 8003f36:	e012      	b.n	8003f5e <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d206      	bcs.n	8003f4e <prvInsertTimerInActiveList+0x62>
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d302      	bcc.n	8003f4e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	617b      	str	r3, [r7, #20]
 8003f4c:	e007      	b.n	8003f5e <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003f4e:	4b07      	ldr	r3, [pc, #28]	@ (8003f6c <prvInsertTimerInActiveList+0x80>)
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	3304      	adds	r3, #4
 8003f56:	4619      	mov	r1, r3
 8003f58:	4610      	mov	r0, r2
 8003f5a:	f7fe fa28 	bl	80023ae <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003f5e:	697b      	ldr	r3, [r7, #20]
    }
 8003f60:	4618      	mov	r0, r3
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	20000240 	.word	0x20000240
 8003f6c:	2000023c 	.word	0x2000023c

08003f70 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b08c      	sub	sp, #48	@ 0x30
 8003f74:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003f76:	e0b2      	b.n	80040de <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	f2c0 80af 	blt.w	80040de <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f86:	695b      	ldr	r3, [r3, #20]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d004      	beq.n	8003f96 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8e:	3304      	adds	r3, #4
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7fe fa45 	bl	8002420 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f96:	1d3b      	adds	r3, r7, #4
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f7ff ff87 	bl	8003eac <prvSampleTimeNow>
 8003f9e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	2b09      	cmp	r3, #9
 8003fa4:	f200 8098 	bhi.w	80040d8 <prvProcessReceivedCommands+0x168>
 8003fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb0 <prvProcessReceivedCommands+0x40>)
 8003faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fae:	bf00      	nop
 8003fb0:	08003fd9 	.word	0x08003fd9
 8003fb4:	08003fd9 	.word	0x08003fd9
 8003fb8:	08003fd9 	.word	0x08003fd9
 8003fbc:	0800404f 	.word	0x0800404f
 8003fc0:	08004063 	.word	0x08004063
 8003fc4:	080040af 	.word	0x080040af
 8003fc8:	08003fd9 	.word	0x08003fd9
 8003fcc:	08003fd9 	.word	0x08003fd9
 8003fd0:	0800404f 	.word	0x0800404f
 8003fd4:	08004063 	.word	0x08004063
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fde:	f043 0301 	orr.w	r3, r3, #1
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fee:	699b      	ldr	r3, [r3, #24]
 8003ff0:	18d1      	adds	r1, r2, r3
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a3a      	ldr	r2, [r7, #32]
 8003ff6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003ff8:	f7ff ff78 	bl	8003eec <prvInsertTimerInActiveList>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d06c      	beq.n	80040dc <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004008:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800400a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	d061      	beq.n	80040dc <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004018:	68fa      	ldr	r2, [r7, #12]
 800401a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	441a      	add	r2, r3
 8004020:	2300      	movs	r3, #0
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	2300      	movs	r3, #0
 8004026:	2100      	movs	r1, #0
 8004028:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800402a:	f7ff fe1d 	bl	8003c68 <xTimerGenericCommand>
 800402e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d152      	bne.n	80040dc <prvProcessReceivedCommands+0x16c>
        __asm volatile
 8004036:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800403a:	f383 8811 	msr	BASEPRI, r3
 800403e:	f3bf 8f6f 	isb	sy
 8004042:	f3bf 8f4f 	dsb	sy
 8004046:	61bb      	str	r3, [r7, #24]
    }
 8004048:	bf00      	nop
 800404a:	bf00      	nop
 800404c:	e7fd      	b.n	800404a <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800404e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004050:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004054:	f023 0301 	bic.w	r3, r3, #1
 8004058:	b2da      	uxtb	r2, r3
 800405a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004060:	e03d      	b.n	80040de <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004064:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004068:	f043 0301 	orr.w	r3, r3, #1
 800406c:	b2da      	uxtb	r2, r3
 800406e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004070:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004074:	68fa      	ldr	r2, [r7, #12]
 8004076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004078:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800407a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10b      	bne.n	800409a <prvProcessReceivedCommands+0x12a>
        __asm volatile
 8004082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004086:	f383 8811 	msr	BASEPRI, r3
 800408a:	f3bf 8f6f 	isb	sy
 800408e:	f3bf 8f4f 	dsb	sy
 8004092:	617b      	str	r3, [r7, #20]
    }
 8004094:	bf00      	nop
 8004096:	bf00      	nop
 8004098:	e7fd      	b.n	8004096 <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800409a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800409c:	699a      	ldr	r2, [r3, #24]
 800409e:	6a3b      	ldr	r3, [r7, #32]
 80040a0:	18d1      	adds	r1, r2, r3
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	6a3a      	ldr	r2, [r7, #32]
 80040a6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80040a8:	f7ff ff20 	bl	8003eec <prvInsertTimerInActiveList>
                        break;
 80040ac:	e017      	b.n	80040de <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80040ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040b4:	f003 0302 	and.w	r3, r3, #2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d103      	bne.n	80040c4 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 80040bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80040be:	f000 fc01 	bl	80048c4 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80040c2:	e00c      	b.n	80040de <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80040c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80040ca:	f023 0301 	bic.w	r3, r3, #1
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80040d6:	e002      	b.n	80040de <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 80040d8:	bf00      	nop
 80040da:	e000      	b.n	80040de <prvProcessReceivedCommands+0x16e>
                        break;
 80040dc:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040de:	4b08      	ldr	r3, [pc, #32]	@ (8004100 <prvProcessReceivedCommands+0x190>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f107 0108 	add.w	r1, r7, #8
 80040e6:	2200      	movs	r2, #0
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fe fc7f 	bl	80029ec <xQueueReceive>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f47f af41 	bne.w	8003f78 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80040f6:	bf00      	nop
 80040f8:	bf00      	nop
 80040fa:	3728      	adds	r7, #40	@ 0x28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	20000244 	.word	0x20000244

08004104 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004104:	b580      	push	{r7, lr}
 8004106:	b088      	sub	sp, #32
 8004108:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800410a:	e049      	b.n	80041a0 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800410c:	4b2e      	ldr	r3, [pc, #184]	@ (80041c8 <prvSwitchTimerLists+0xc4>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004116:	4b2c      	ldr	r3, [pc, #176]	@ (80041c8 <prvSwitchTimerLists+0xc4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	3304      	adds	r3, #4
 8004124:	4618      	mov	r0, r3
 8004126:	f7fe f97b 	bl	8002420 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6a1b      	ldr	r3, [r3, #32]
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004138:	f003 0304 	and.w	r3, r3, #4
 800413c:	2b00      	cmp	r3, #0
 800413e:	d02f      	beq.n	80041a0 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4413      	add	r3, r2
 8004148:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	429a      	cmp	r2, r3
 8004150:	d90e      	bls.n	8004170 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800415e:	4b1a      	ldr	r3, [pc, #104]	@ (80041c8 <prvSwitchTimerLists+0xc4>)
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	3304      	adds	r3, #4
 8004166:	4619      	mov	r1, r3
 8004168:	4610      	mov	r0, r2
 800416a:	f7fe f920 	bl	80023ae <vListInsert>
 800416e:	e017      	b.n	80041a0 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004170:	2300      	movs	r3, #0
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	2300      	movs	r3, #0
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	2100      	movs	r1, #0
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f7ff fd74 	bl	8003c68 <xTimerGenericCommand>
 8004180:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10b      	bne.n	80041a0 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8004188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800418c:	f383 8811 	msr	BASEPRI, r3
 8004190:	f3bf 8f6f 	isb	sy
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	603b      	str	r3, [r7, #0]
    }
 800419a:	bf00      	nop
 800419c:	bf00      	nop
 800419e:	e7fd      	b.n	800419c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80041a0:	4b09      	ldr	r3, [pc, #36]	@ (80041c8 <prvSwitchTimerLists+0xc4>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1b0      	bne.n	800410c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 80041aa:	4b07      	ldr	r3, [pc, #28]	@ (80041c8 <prvSwitchTimerLists+0xc4>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 80041b0:	4b06      	ldr	r3, [pc, #24]	@ (80041cc <prvSwitchTimerLists+0xc8>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a04      	ldr	r2, [pc, #16]	@ (80041c8 <prvSwitchTimerLists+0xc4>)
 80041b6:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80041b8:	4a04      	ldr	r2, [pc, #16]	@ (80041cc <prvSwitchTimerLists+0xc8>)
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	6013      	str	r3, [r2, #0]
    }
 80041be:	bf00      	nop
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	2000023c 	.word	0x2000023c
 80041cc:	20000240 	.word	0x20000240

080041d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80041d4:	f000 f962 	bl	800449c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80041d8:	4b12      	ldr	r3, [pc, #72]	@ (8004224 <prvCheckForValidListAndQueue+0x54>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d11d      	bne.n	800421c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80041e0:	4811      	ldr	r0, [pc, #68]	@ (8004228 <prvCheckForValidListAndQueue+0x58>)
 80041e2:	f7fe f893 	bl	800230c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80041e6:	4811      	ldr	r0, [pc, #68]	@ (800422c <prvCheckForValidListAndQueue+0x5c>)
 80041e8:	f7fe f890 	bl	800230c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80041ec:	4b10      	ldr	r3, [pc, #64]	@ (8004230 <prvCheckForValidListAndQueue+0x60>)
 80041ee:	4a0e      	ldr	r2, [pc, #56]	@ (8004228 <prvCheckForValidListAndQueue+0x58>)
 80041f0:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80041f2:	4b10      	ldr	r3, [pc, #64]	@ (8004234 <prvCheckForValidListAndQueue+0x64>)
 80041f4:	4a0d      	ldr	r2, [pc, #52]	@ (800422c <prvCheckForValidListAndQueue+0x5c>)
 80041f6:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80041f8:	2200      	movs	r2, #0
 80041fa:	210c      	movs	r1, #12
 80041fc:	200a      	movs	r0, #10
 80041fe:	f7fe f995 	bl	800252c <xQueueGenericCreate>
 8004202:	4603      	mov	r3, r0
 8004204:	4a07      	ldr	r2, [pc, #28]	@ (8004224 <prvCheckForValidListAndQueue+0x54>)
 8004206:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8004208:	4b06      	ldr	r3, [pc, #24]	@ (8004224 <prvCheckForValidListAndQueue+0x54>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d005      	beq.n	800421c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004210:	4b04      	ldr	r3, [pc, #16]	@ (8004224 <prvCheckForValidListAndQueue+0x54>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4908      	ldr	r1, [pc, #32]	@ (8004238 <prvCheckForValidListAndQueue+0x68>)
 8004216:	4618      	mov	r0, r3
 8004218:	f7fe fe00 	bl	8002e1c <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800421c:	f000 f970 	bl	8004500 <vPortExitCritical>
    }
 8004220:	bf00      	nop
 8004222:	bd80      	pop	{r7, pc}
 8004224:	20000244 	.word	0x20000244
 8004228:	20000214 	.word	0x20000214
 800422c:	20000228 	.word	0x20000228
 8004230:	2000023c 	.word	0x2000023c
 8004234:	20000240 	.word	0x20000240
 8004238:	08007d30 	.word	0x08007d30

0800423c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800423c:	b480      	push	{r7}
 800423e:	b085      	sub	sp, #20
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	3b04      	subs	r3, #4
 800424c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004254:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	3b04      	subs	r3, #4
 800425a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f023 0201 	bic.w	r2, r3, #1
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	3b04      	subs	r3, #4
 800426a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800426c:	4a0c      	ldr	r2, [pc, #48]	@ (80042a0 <pxPortInitialiseStack+0x64>)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	3b14      	subs	r3, #20
 8004276:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	3b04      	subs	r3, #4
 8004282:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f06f 0202 	mvn.w	r2, #2
 800428a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	3b20      	subs	r3, #32
 8004290:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8004292:	68fb      	ldr	r3, [r7, #12]
}
 8004294:	4618      	mov	r0, r3
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	080042a5 	.word	0x080042a5

080042a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80042aa:	2300      	movs	r3, #0
 80042ac:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80042ae:	4b13      	ldr	r3, [pc, #76]	@ (80042fc <prvTaskExitError+0x58>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b6:	d00b      	beq.n	80042d0 <prvTaskExitError+0x2c>
        __asm volatile
 80042b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042bc:	f383 8811 	msr	BASEPRI, r3
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	60fb      	str	r3, [r7, #12]
    }
 80042ca:	bf00      	nop
 80042cc:	bf00      	nop
 80042ce:	e7fd      	b.n	80042cc <prvTaskExitError+0x28>
        __asm volatile
 80042d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	60bb      	str	r3, [r7, #8]
    }
 80042e2:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80042e4:	bf00      	nop
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d0fc      	beq.n	80042e6 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80042ec:	bf00      	nop
 80042ee:	bf00      	nop
 80042f0:	3714      	adds	r7, #20
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	2000000c 	.word	0x2000000c

08004300 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004300:	4b07      	ldr	r3, [pc, #28]	@ (8004320 <pxCurrentTCBConst2>)
 8004302:	6819      	ldr	r1, [r3, #0]
 8004304:	6808      	ldr	r0, [r1, #0]
 8004306:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800430a:	f380 8809 	msr	PSP, r0
 800430e:	f3bf 8f6f 	isb	sy
 8004312:	f04f 0000 	mov.w	r0, #0
 8004316:	f380 8811 	msr	BASEPRI, r0
 800431a:	4770      	bx	lr
 800431c:	f3af 8000 	nop.w

08004320 <pxCurrentTCBConst2>:
 8004320:	20000110 	.word	0x20000110
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004324:	bf00      	nop
 8004326:	bf00      	nop

08004328 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004328:	4808      	ldr	r0, [pc, #32]	@ (800434c <prvPortStartFirstTask+0x24>)
 800432a:	6800      	ldr	r0, [r0, #0]
 800432c:	6800      	ldr	r0, [r0, #0]
 800432e:	f380 8808 	msr	MSP, r0
 8004332:	f04f 0000 	mov.w	r0, #0
 8004336:	f380 8814 	msr	CONTROL, r0
 800433a:	b662      	cpsie	i
 800433c:	b661      	cpsie	f
 800433e:	f3bf 8f4f 	dsb	sy
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	df00      	svc	0
 8004348:	bf00      	nop
 800434a:	0000      	.short	0x0000
 800434c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004350:	bf00      	nop
 8004352:	bf00      	nop

08004354 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800435a:	4b47      	ldr	r3, [pc, #284]	@ (8004478 <xPortStartScheduler+0x124>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a47      	ldr	r2, [pc, #284]	@ (800447c <xPortStartScheduler+0x128>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d10b      	bne.n	800437c <xPortStartScheduler+0x28>
        __asm volatile
 8004364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004368:	f383 8811 	msr	BASEPRI, r3
 800436c:	f3bf 8f6f 	isb	sy
 8004370:	f3bf 8f4f 	dsb	sy
 8004374:	60fb      	str	r3, [r7, #12]
    }
 8004376:	bf00      	nop
 8004378:	bf00      	nop
 800437a:	e7fd      	b.n	8004378 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800437c:	4b3e      	ldr	r3, [pc, #248]	@ (8004478 <xPortStartScheduler+0x124>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a3f      	ldr	r2, [pc, #252]	@ (8004480 <xPortStartScheduler+0x12c>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d10b      	bne.n	800439e <xPortStartScheduler+0x4a>
        __asm volatile
 8004386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	613b      	str	r3, [r7, #16]
    }
 8004398:	bf00      	nop
 800439a:	bf00      	nop
 800439c:	e7fd      	b.n	800439a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800439e:	4b39      	ldr	r3, [pc, #228]	@ (8004484 <xPortStartScheduler+0x130>)
 80043a0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	22ff      	movs	r2, #255	@ 0xff
 80043ae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80043b8:	78fb      	ldrb	r3, [r7, #3]
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	4b31      	ldr	r3, [pc, #196]	@ (8004488 <xPortStartScheduler+0x134>)
 80043c4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80043c6:	4b31      	ldr	r3, [pc, #196]	@ (800448c <xPortStartScheduler+0x138>)
 80043c8:	2207      	movs	r2, #7
 80043ca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043cc:	e009      	b.n	80043e2 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80043ce:	4b2f      	ldr	r3, [pc, #188]	@ (800448c <xPortStartScheduler+0x138>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	3b01      	subs	r3, #1
 80043d4:	4a2d      	ldr	r2, [pc, #180]	@ (800448c <xPortStartScheduler+0x138>)
 80043d6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80043d8:	78fb      	ldrb	r3, [r7, #3]
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80043e2:	78fb      	ldrb	r3, [r7, #3]
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ea:	2b80      	cmp	r3, #128	@ 0x80
 80043ec:	d0ef      	beq.n	80043ce <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80043ee:	4b27      	ldr	r3, [pc, #156]	@ (800448c <xPortStartScheduler+0x138>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f1c3 0307 	rsb	r3, r3, #7
 80043f6:	2b04      	cmp	r3, #4
 80043f8:	d00b      	beq.n	8004412 <xPortStartScheduler+0xbe>
        __asm volatile
 80043fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043fe:	f383 8811 	msr	BASEPRI, r3
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	f3bf 8f4f 	dsb	sy
 800440a:	60bb      	str	r3, [r7, #8]
    }
 800440c:	bf00      	nop
 800440e:	bf00      	nop
 8004410:	e7fd      	b.n	800440e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004412:	4b1e      	ldr	r3, [pc, #120]	@ (800448c <xPortStartScheduler+0x138>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	021b      	lsls	r3, r3, #8
 8004418:	4a1c      	ldr	r2, [pc, #112]	@ (800448c <xPortStartScheduler+0x138>)
 800441a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800441c:	4b1b      	ldr	r3, [pc, #108]	@ (800448c <xPortStartScheduler+0x138>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004424:	4a19      	ldr	r2, [pc, #100]	@ (800448c <xPortStartScheduler+0x138>)
 8004426:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	b2da      	uxtb	r2, r3
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004430:	4b17      	ldr	r3, [pc, #92]	@ (8004490 <xPortStartScheduler+0x13c>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a16      	ldr	r2, [pc, #88]	@ (8004490 <xPortStartScheduler+0x13c>)
 8004436:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800443a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800443c:	4b14      	ldr	r3, [pc, #80]	@ (8004490 <xPortStartScheduler+0x13c>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a13      	ldr	r2, [pc, #76]	@ (8004490 <xPortStartScheduler+0x13c>)
 8004442:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004446:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004448:	f000 f8e8 	bl	800461c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800444c:	4b11      	ldr	r3, [pc, #68]	@ (8004494 <xPortStartScheduler+0x140>)
 800444e:	2200      	movs	r2, #0
 8004450:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004452:	f000 f907 	bl	8004664 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004456:	4b10      	ldr	r3, [pc, #64]	@ (8004498 <xPortStartScheduler+0x144>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a0f      	ldr	r2, [pc, #60]	@ (8004498 <xPortStartScheduler+0x144>)
 800445c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004460:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004462:	f7ff ff61 	bl	8004328 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004466:	f7ff f855 	bl	8003514 <vTaskSwitchContext>
    prvTaskExitError();
 800446a:	f7ff ff1b 	bl	80042a4 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800446e:	2300      	movs	r3, #0
}
 8004470:	4618      	mov	r0, r3
 8004472:	3718      	adds	r7, #24
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	e000ed00 	.word	0xe000ed00
 800447c:	410fc271 	.word	0x410fc271
 8004480:	410fc270 	.word	0x410fc270
 8004484:	e000e400 	.word	0xe000e400
 8004488:	20000250 	.word	0x20000250
 800448c:	20000254 	.word	0x20000254
 8004490:	e000ed20 	.word	0xe000ed20
 8004494:	2000000c 	.word	0x2000000c
 8004498:	e000ef34 	.word	0xe000ef34

0800449c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
        __asm volatile
 80044a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a6:	f383 8811 	msr	BASEPRI, r3
 80044aa:	f3bf 8f6f 	isb	sy
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	607b      	str	r3, [r7, #4]
    }
 80044b4:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80044b6:	4b10      	ldr	r3, [pc, #64]	@ (80044f8 <vPortEnterCritical+0x5c>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3301      	adds	r3, #1
 80044bc:	4a0e      	ldr	r2, [pc, #56]	@ (80044f8 <vPortEnterCritical+0x5c>)
 80044be:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80044c0:	4b0d      	ldr	r3, [pc, #52]	@ (80044f8 <vPortEnterCritical+0x5c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d110      	bne.n	80044ea <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80044c8:	4b0c      	ldr	r3, [pc, #48]	@ (80044fc <vPortEnterCritical+0x60>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d00b      	beq.n	80044ea <vPortEnterCritical+0x4e>
        __asm volatile
 80044d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	603b      	str	r3, [r7, #0]
    }
 80044e4:	bf00      	nop
 80044e6:	bf00      	nop
 80044e8:	e7fd      	b.n	80044e6 <vPortEnterCritical+0x4a>
    }
}
 80044ea:	bf00      	nop
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	2000000c 	.word	0x2000000c
 80044fc:	e000ed04 	.word	0xe000ed04

08004500 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004506:	4b12      	ldr	r3, [pc, #72]	@ (8004550 <vPortExitCritical+0x50>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d10b      	bne.n	8004526 <vPortExitCritical+0x26>
        __asm volatile
 800450e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004512:	f383 8811 	msr	BASEPRI, r3
 8004516:	f3bf 8f6f 	isb	sy
 800451a:	f3bf 8f4f 	dsb	sy
 800451e:	607b      	str	r3, [r7, #4]
    }
 8004520:	bf00      	nop
 8004522:	bf00      	nop
 8004524:	e7fd      	b.n	8004522 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004526:	4b0a      	ldr	r3, [pc, #40]	@ (8004550 <vPortExitCritical+0x50>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3b01      	subs	r3, #1
 800452c:	4a08      	ldr	r2, [pc, #32]	@ (8004550 <vPortExitCritical+0x50>)
 800452e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004530:	4b07      	ldr	r3, [pc, #28]	@ (8004550 <vPortExitCritical+0x50>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d105      	bne.n	8004544 <vPortExitCritical+0x44>
 8004538:	2300      	movs	r3, #0
 800453a:	603b      	str	r3, [r7, #0]
        __asm volatile
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	f383 8811 	msr	BASEPRI, r3
    }
 8004542:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	2000000c 	.word	0x2000000c
	...

08004560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004560:	f3ef 8009 	mrs	r0, PSP
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	4b15      	ldr	r3, [pc, #84]	@ (80045c0 <pxCurrentTCBConst>)
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	f01e 0f10 	tst.w	lr, #16
 8004570:	bf08      	it	eq
 8004572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800457a:	6010      	str	r0, [r2, #0]
 800457c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004580:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004584:	f380 8811 	msr	BASEPRI, r0
 8004588:	f3bf 8f4f 	dsb	sy
 800458c:	f3bf 8f6f 	isb	sy
 8004590:	f7fe ffc0 	bl	8003514 <vTaskSwitchContext>
 8004594:	f04f 0000 	mov.w	r0, #0
 8004598:	f380 8811 	msr	BASEPRI, r0
 800459c:	bc09      	pop	{r0, r3}
 800459e:	6819      	ldr	r1, [r3, #0]
 80045a0:	6808      	ldr	r0, [r1, #0]
 80045a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045a6:	f01e 0f10 	tst.w	lr, #16
 80045aa:	bf08      	it	eq
 80045ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80045b0:	f380 8809 	msr	PSP, r0
 80045b4:	f3bf 8f6f 	isb	sy
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	f3af 8000 	nop.w

080045c0 <pxCurrentTCBConst>:
 80045c0:	20000110 	.word	0x20000110
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80045c4:	bf00      	nop
 80045c6:	bf00      	nop

080045c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
        __asm volatile
 80045ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d2:	f383 8811 	msr	BASEPRI, r3
 80045d6:	f3bf 8f6f 	isb	sy
 80045da:	f3bf 8f4f 	dsb	sy
 80045de:	607b      	str	r3, [r7, #4]
    }
 80045e0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80045e2:	f002 fb67 	bl	8006cb4 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80045e6:	f7fe fefb 	bl	80033e0 <xTaskIncrementTick>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d006      	beq.n	80045fe <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80045f0:	f002 fbbe 	bl	8006d70 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80045f4:	4b08      	ldr	r3, [pc, #32]	@ (8004618 <SysTick_Handler+0x50>)
 80045f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045fa:	601a      	str	r2, [r3, #0]
 80045fc:	e001      	b.n	8004602 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80045fe:	f002 fb9b 	bl	8006d38 <SEGGER_SYSVIEW_RecordExitISR>
 8004602:	2300      	movs	r3, #0
 8004604:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	f383 8811 	msr	BASEPRI, r3
    }
 800460c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800460e:	bf00      	nop
 8004610:	3708      	adds	r7, #8
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}
 8004616:	bf00      	nop
 8004618:	e000ed04 	.word	0xe000ed04

0800461c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004620:	4b0b      	ldr	r3, [pc, #44]	@ (8004650 <vPortSetupTimerInterrupt+0x34>)
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004626:	4b0b      	ldr	r3, [pc, #44]	@ (8004654 <vPortSetupTimerInterrupt+0x38>)
 8004628:	2200      	movs	r2, #0
 800462a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800462c:	4b0a      	ldr	r3, [pc, #40]	@ (8004658 <vPortSetupTimerInterrupt+0x3c>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a0a      	ldr	r2, [pc, #40]	@ (800465c <vPortSetupTimerInterrupt+0x40>)
 8004632:	fba2 2303 	umull	r2, r3, r2, r3
 8004636:	099b      	lsrs	r3, r3, #6
 8004638:	4a09      	ldr	r2, [pc, #36]	@ (8004660 <vPortSetupTimerInterrupt+0x44>)
 800463a:	3b01      	subs	r3, #1
 800463c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800463e:	4b04      	ldr	r3, [pc, #16]	@ (8004650 <vPortSetupTimerInterrupt+0x34>)
 8004640:	2207      	movs	r2, #7
 8004642:	601a      	str	r2, [r3, #0]
}
 8004644:	bf00      	nop
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	e000e010 	.word	0xe000e010
 8004654:	e000e018 	.word	0xe000e018
 8004658:	20000000 	.word	0x20000000
 800465c:	10624dd3 	.word	0x10624dd3
 8004660:	e000e014 	.word	0xe000e014

08004664 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004664:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004674 <vPortEnableVFP+0x10>
 8004668:	6801      	ldr	r1, [r0, #0]
 800466a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800466e:	6001      	str	r1, [r0, #0]
 8004670:	4770      	bx	lr
 8004672:	0000      	.short	0x0000
 8004674:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004678:	bf00      	nop
 800467a:	bf00      	nop

0800467c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800467c:	b480      	push	{r7}
 800467e:	b085      	sub	sp, #20
 8004680:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004682:	f3ef 8305 	mrs	r3, IPSR
 8004686:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2b0f      	cmp	r3, #15
 800468c:	d915      	bls.n	80046ba <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800468e:	4a18      	ldr	r2, [pc, #96]	@ (80046f0 <vPortValidateInterruptPriority+0x74>)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4413      	add	r3, r2
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004698:	4b16      	ldr	r3, [pc, #88]	@ (80046f4 <vPortValidateInterruptPriority+0x78>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	7afa      	ldrb	r2, [r7, #11]
 800469e:	429a      	cmp	r2, r3
 80046a0:	d20b      	bcs.n	80046ba <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 80046a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	607b      	str	r3, [r7, #4]
    }
 80046b4:	bf00      	nop
 80046b6:	bf00      	nop
 80046b8:	e7fd      	b.n	80046b6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80046ba:	4b0f      	ldr	r3, [pc, #60]	@ (80046f8 <vPortValidateInterruptPriority+0x7c>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80046c2:	4b0e      	ldr	r3, [pc, #56]	@ (80046fc <vPortValidateInterruptPriority+0x80>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d90b      	bls.n	80046e2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 80046ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ce:	f383 8811 	msr	BASEPRI, r3
 80046d2:	f3bf 8f6f 	isb	sy
 80046d6:	f3bf 8f4f 	dsb	sy
 80046da:	603b      	str	r3, [r7, #0]
    }
 80046dc:	bf00      	nop
 80046de:	bf00      	nop
 80046e0:	e7fd      	b.n	80046de <vPortValidateInterruptPriority+0x62>
    }
 80046e2:	bf00      	nop
 80046e4:	3714      	adds	r7, #20
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	e000e3f0 	.word	0xe000e3f0
 80046f4:	20000250 	.word	0x20000250
 80046f8:	e000ed0c 	.word	0xe000ed0c
 80046fc:	20000254 	.word	0x20000254

08004700 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b08a      	sub	sp, #40	@ 0x28
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8004708:	2300      	movs	r3, #0
 800470a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800470c:	f7fe fda4 	bl	8003258 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004710:	4b66      	ldr	r3, [pc, #408]	@ (80048ac <pvPortMalloc+0x1ac>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004718:	f000 f938 	bl	800498c <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800471c:	4b64      	ldr	r3, [pc, #400]	@ (80048b0 <pvPortMalloc+0x1b0>)
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4013      	ands	r3, r2
 8004724:	2b00      	cmp	r3, #0
 8004726:	f040 80a9 	bne.w	800487c <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d02e      	beq.n	800478e <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8004730:	2208      	movs	r2, #8
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	429a      	cmp	r2, r3
 800473a:	d228      	bcs.n	800478e <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 800473c:	2208      	movs	r2, #8
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4413      	add	r3, r2
 8004742:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f003 0307 	and.w	r3, r3, #7
 800474a:	2b00      	cmp	r3, #0
 800474c:	d022      	beq.n	8004794 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f023 0307 	bic.w	r3, r3, #7
 8004754:	3308      	adds	r3, #8
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	429a      	cmp	r2, r3
 800475a:	d215      	bcs.n	8004788 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f023 0307 	bic.w	r3, r3, #7
 8004762:	3308      	adds	r3, #8
 8004764:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	2b00      	cmp	r3, #0
 800476e:	d011      	beq.n	8004794 <pvPortMalloc+0x94>
        __asm volatile
 8004770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004774:	f383 8811 	msr	BASEPRI, r3
 8004778:	f3bf 8f6f 	isb	sy
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	617b      	str	r3, [r7, #20]
    }
 8004782:	bf00      	nop
 8004784:	bf00      	nop
 8004786:	e7fd      	b.n	8004784 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004788:	2300      	movs	r3, #0
 800478a:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800478c:	e002      	b.n	8004794 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 800478e:	2300      	movs	r3, #0
 8004790:	607b      	str	r3, [r7, #4]
 8004792:	e000      	b.n	8004796 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004794:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d06f      	beq.n	800487c <pvPortMalloc+0x17c>
 800479c:	4b45      	ldr	r3, [pc, #276]	@ (80048b4 <pvPortMalloc+0x1b4>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d86a      	bhi.n	800487c <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80047a6:	4b44      	ldr	r3, [pc, #272]	@ (80048b8 <pvPortMalloc+0x1b8>)
 80047a8:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80047aa:	4b43      	ldr	r3, [pc, #268]	@ (80048b8 <pvPortMalloc+0x1b8>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047b0:	e004      	b.n	80047bc <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 80047b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b4:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80047b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80047bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d903      	bls.n	80047ce <pvPortMalloc+0xce>
 80047c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1f1      	bne.n	80047b2 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80047ce:	4b37      	ldr	r3, [pc, #220]	@ (80048ac <pvPortMalloc+0x1ac>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d051      	beq.n	800487c <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2208      	movs	r2, #8
 80047de:	4413      	add	r3, r2
 80047e0:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80047e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80047ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	1ad2      	subs	r2, r2, r3
 80047f2:	2308      	movs	r3, #8
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d920      	bls.n	800483c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80047fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4413      	add	r3, r2
 8004800:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	f003 0307 	and.w	r3, r3, #7
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00b      	beq.n	8004824 <pvPortMalloc+0x124>
        __asm volatile
 800480c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004810:	f383 8811 	msr	BASEPRI, r3
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	613b      	str	r3, [r7, #16]
    }
 800481e:	bf00      	nop
 8004820:	bf00      	nop
 8004822:	e7fd      	b.n	8004820 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	1ad2      	subs	r2, r2, r3
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004836:	69b8      	ldr	r0, [r7, #24]
 8004838:	f000 f90a 	bl	8004a50 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800483c:	4b1d      	ldr	r3, [pc, #116]	@ (80048b4 <pvPortMalloc+0x1b4>)
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	4a1b      	ldr	r2, [pc, #108]	@ (80048b4 <pvPortMalloc+0x1b4>)
 8004848:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800484a:	4b1a      	ldr	r3, [pc, #104]	@ (80048b4 <pvPortMalloc+0x1b4>)
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	4b1b      	ldr	r3, [pc, #108]	@ (80048bc <pvPortMalloc+0x1bc>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	429a      	cmp	r2, r3
 8004854:	d203      	bcs.n	800485e <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004856:	4b17      	ldr	r3, [pc, #92]	@ (80048b4 <pvPortMalloc+0x1b4>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a18      	ldr	r2, [pc, #96]	@ (80048bc <pvPortMalloc+0x1bc>)
 800485c:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800485e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	4b13      	ldr	r3, [pc, #76]	@ (80048b0 <pvPortMalloc+0x1b0>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	431a      	orrs	r2, r3
 8004868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800486c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800486e:	2200      	movs	r2, #0
 8004870:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004872:	4b13      	ldr	r3, [pc, #76]	@ (80048c0 <pvPortMalloc+0x1c0>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	3301      	adds	r3, #1
 8004878:	4a11      	ldr	r2, [pc, #68]	@ (80048c0 <pvPortMalloc+0x1c0>)
 800487a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800487c:	f7fe fcfa 	bl	8003274 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00b      	beq.n	80048a2 <pvPortMalloc+0x1a2>
        __asm volatile
 800488a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	60fb      	str	r3, [r7, #12]
    }
 800489c:	bf00      	nop
 800489e:	bf00      	nop
 80048a0:	e7fd      	b.n	800489e <pvPortMalloc+0x19e>
    return pvReturn;
 80048a2:	69fb      	ldr	r3, [r7, #28]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3728      	adds	r7, #40	@ 0x28
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	20012e60 	.word	0x20012e60
 80048b0:	20012e74 	.word	0x20012e74
 80048b4:	20012e64 	.word	0x20012e64
 80048b8:	20012e58 	.word	0x20012e58
 80048bc:	20012e68 	.word	0x20012e68
 80048c0:	20012e6c 	.word	0x20012e6c

080048c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d04f      	beq.n	8004976 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80048d6:	2308      	movs	r3, #8
 80048d8:	425b      	negs	r3, r3
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	4413      	add	r3, r2
 80048de:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	685a      	ldr	r2, [r3, #4]
 80048e8:	4b25      	ldr	r3, [pc, #148]	@ (8004980 <vPortFree+0xbc>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4013      	ands	r3, r2
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d10b      	bne.n	800490a <vPortFree+0x46>
        __asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	60fb      	str	r3, [r7, #12]
    }
 8004904:	bf00      	nop
 8004906:	bf00      	nop
 8004908:	e7fd      	b.n	8004906 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00b      	beq.n	800492a <vPortFree+0x66>
        __asm volatile
 8004912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004916:	f383 8811 	msr	BASEPRI, r3
 800491a:	f3bf 8f6f 	isb	sy
 800491e:	f3bf 8f4f 	dsb	sy
 8004922:	60bb      	str	r3, [r7, #8]
    }
 8004924:	bf00      	nop
 8004926:	bf00      	nop
 8004928:	e7fd      	b.n	8004926 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	4b14      	ldr	r3, [pc, #80]	@ (8004980 <vPortFree+0xbc>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4013      	ands	r3, r2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d01e      	beq.n	8004976 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d11a      	bne.n	8004976 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	4b0e      	ldr	r3, [pc, #56]	@ (8004980 <vPortFree+0xbc>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	43db      	mvns	r3, r3
 800494a:	401a      	ands	r2, r3
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004950:	f7fe fc82 	bl	8003258 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	4b0a      	ldr	r3, [pc, #40]	@ (8004984 <vPortFree+0xc0>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4413      	add	r3, r2
 800495e:	4a09      	ldr	r2, [pc, #36]	@ (8004984 <vPortFree+0xc0>)
 8004960:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004962:	6938      	ldr	r0, [r7, #16]
 8004964:	f000 f874 	bl	8004a50 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004968:	4b07      	ldr	r3, [pc, #28]	@ (8004988 <vPortFree+0xc4>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3301      	adds	r3, #1
 800496e:	4a06      	ldr	r2, [pc, #24]	@ (8004988 <vPortFree+0xc4>)
 8004970:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004972:	f7fe fc7f 	bl	8003274 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004976:	bf00      	nop
 8004978:	3718      	adds	r7, #24
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
 800497e:	bf00      	nop
 8004980:	20012e74 	.word	0x20012e74
 8004984:	20012e64 	.word	0x20012e64
 8004988:	20012e70 	.word	0x20012e70

0800498c <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004992:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8004996:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8004998:	4b27      	ldr	r3, [pc, #156]	@ (8004a38 <prvHeapInit+0xac>)
 800499a:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00c      	beq.n	80049c0 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	3307      	adds	r3, #7
 80049aa:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f023 0307 	bic.w	r3, r3, #7
 80049b2:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	4a1f      	ldr	r2, [pc, #124]	@ (8004a38 <prvHeapInit+0xac>)
 80049bc:	4413      	add	r3, r2
 80049be:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80049c4:	4a1d      	ldr	r2, [pc, #116]	@ (8004a3c <prvHeapInit+0xb0>)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80049ca:	4b1c      	ldr	r3, [pc, #112]	@ (8004a3c <prvHeapInit+0xb0>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68ba      	ldr	r2, [r7, #8]
 80049d4:	4413      	add	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80049d8:	2208      	movs	r2, #8
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	1a9b      	subs	r3, r3, r2
 80049de:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f023 0307 	bic.w	r3, r3, #7
 80049e6:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4a15      	ldr	r2, [pc, #84]	@ (8004a40 <prvHeapInit+0xb4>)
 80049ec:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80049ee:	4b14      	ldr	r3, [pc, #80]	@ (8004a40 <prvHeapInit+0xb4>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2200      	movs	r2, #0
 80049f4:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80049f6:	4b12      	ldr	r3, [pc, #72]	@ (8004a40 <prvHeapInit+0xb4>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2200      	movs	r2, #0
 80049fc:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	1ad2      	subs	r2, r2, r3
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004a0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a40 <prvHeapInit+0xb4>)
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	4a0a      	ldr	r2, [pc, #40]	@ (8004a44 <prvHeapInit+0xb8>)
 8004a1a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	4a09      	ldr	r2, [pc, #36]	@ (8004a48 <prvHeapInit+0xbc>)
 8004a22:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004a24:	4b09      	ldr	r3, [pc, #36]	@ (8004a4c <prvHeapInit+0xc0>)
 8004a26:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004a2a:	601a      	str	r2, [r3, #0]
}
 8004a2c:	bf00      	nop
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	20000258 	.word	0x20000258
 8004a3c:	20012e58 	.word	0x20012e58
 8004a40:	20012e60 	.word	0x20012e60
 8004a44:	20012e68 	.word	0x20012e68
 8004a48:	20012e64 	.word	0x20012e64
 8004a4c:	20012e74 	.word	0x20012e74

08004a50 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004a58:	4b28      	ldr	r3, [pc, #160]	@ (8004afc <prvInsertBlockIntoFreeList+0xac>)
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	e002      	b.n	8004a64 <prvInsertBlockIntoFreeList+0x14>
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	60fb      	str	r3, [r7, #12]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	687a      	ldr	r2, [r7, #4]
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d8f7      	bhi.n	8004a5e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	4413      	add	r3, r2
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d108      	bne.n	8004a92 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	685a      	ldr	r2, [r3, #4]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	441a      	add	r2, r3
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	441a      	add	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d118      	bne.n	8004ad8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	4b15      	ldr	r3, [pc, #84]	@ (8004b00 <prvInsertBlockIntoFreeList+0xb0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d00d      	beq.n	8004ace <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	685a      	ldr	r2, [r3, #4]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	441a      	add	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681a      	ldr	r2, [r3, #0]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	601a      	str	r2, [r3, #0]
 8004acc:	e008      	b.n	8004ae0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004ace:	4b0c      	ldr	r3, [pc, #48]	@ (8004b00 <prvInsertBlockIntoFreeList+0xb0>)
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	e003      	b.n	8004ae0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681a      	ldr	r2, [r3, #0]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004ae0:	68fa      	ldr	r2, [r7, #12]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d002      	beq.n	8004aee <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004aee:	bf00      	nop
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	20012e58 	.word	0x20012e58
 8004b00:	20012e60 	.word	0x20012e60

08004b04 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004b08:	4803      	ldr	r0, [pc, #12]	@ (8004b18 <_cbSendSystemDesc+0x14>)
 8004b0a:	f002 f87d 	bl	8006c08 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004b0e:	4803      	ldr	r0, [pc, #12]	@ (8004b1c <_cbSendSystemDesc+0x18>)
 8004b10:	f002 f87a 	bl	8006c08 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004b14:	bf00      	nop
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	08007d38 	.word	0x08007d38
 8004b1c:	08007d6c 	.word	0x08007d6c

08004b20 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004b20:	b580      	push	{r7, lr}
 8004b22:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004b24:	4b06      	ldr	r3, [pc, #24]	@ (8004b40 <SEGGER_SYSVIEW_Conf+0x20>)
 8004b26:	6818      	ldr	r0, [r3, #0]
 8004b28:	4b05      	ldr	r3, [pc, #20]	@ (8004b40 <SEGGER_SYSVIEW_Conf+0x20>)
 8004b2a:	6819      	ldr	r1, [r3, #0]
 8004b2c:	4b05      	ldr	r3, [pc, #20]	@ (8004b44 <SEGGER_SYSVIEW_Conf+0x24>)
 8004b2e:	4a06      	ldr	r2, [pc, #24]	@ (8004b48 <SEGGER_SYSVIEW_Conf+0x28>)
 8004b30:	f001 fbe6 	bl	8006300 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004b34:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004b38:	f001 fc26 	bl	8006388 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004b3c:	bf00      	nop
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	20000000 	.word	0x20000000
 8004b44:	08004b05 	.word	0x08004b05
 8004b48:	08007e04 	.word	0x08007e04

08004b4c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004b4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004b52:	2300      	movs	r3, #0
 8004b54:	607b      	str	r3, [r7, #4]
 8004b56:	e033      	b.n	8004bc0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004b58:	491e      	ldr	r1, [pc, #120]	@ (8004bd4 <_cbSendTaskList+0x88>)
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	440b      	add	r3, r1
 8004b66:	6818      	ldr	r0, [r3, #0]
 8004b68:	491a      	ldr	r1, [pc, #104]	@ (8004bd4 <_cbSendTaskList+0x88>)
 8004b6a:	687a      	ldr	r2, [r7, #4]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	3304      	adds	r3, #4
 8004b78:	6819      	ldr	r1, [r3, #0]
 8004b7a:	4c16      	ldr	r4, [pc, #88]	@ (8004bd4 <_cbSendTaskList+0x88>)
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	4413      	add	r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	4423      	add	r3, r4
 8004b88:	3308      	adds	r3, #8
 8004b8a:	681c      	ldr	r4, [r3, #0]
 8004b8c:	4d11      	ldr	r5, [pc, #68]	@ (8004bd4 <_cbSendTaskList+0x88>)
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	4613      	mov	r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	442b      	add	r3, r5
 8004b9a:	330c      	adds	r3, #12
 8004b9c:	681d      	ldr	r5, [r3, #0]
 8004b9e:	4e0d      	ldr	r6, [pc, #52]	@ (8004bd4 <_cbSendTaskList+0x88>)
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	4413      	add	r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	4433      	add	r3, r6
 8004bac:	3310      	adds	r3, #16
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	9300      	str	r3, [sp, #0]
 8004bb2:	462b      	mov	r3, r5
 8004bb4:	4622      	mov	r2, r4
 8004bb6:	f000 f8bd 	bl	8004d34 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	607b      	str	r3, [r7, #4]
 8004bc0:	4b05      	ldr	r3, [pc, #20]	@ (8004bd8 <_cbSendTaskList+0x8c>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d3c6      	bcc.n	8004b58 <_cbSendTaskList+0xc>
  }
}
 8004bca:	bf00      	nop
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bd4:	20012e78 	.word	0x20012e78
 8004bd8:	20012f18 	.word	0x20012f18

08004bdc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004be0:	b082      	sub	sp, #8
 8004be2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004be4:	f7fe fbea 	bl	80033bc <xTaskGetTickCountFromISR>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2200      	movs	r2, #0
 8004bec:	469a      	mov	sl, r3
 8004bee:	4693      	mov	fp, r2
 8004bf0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004bf4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	f04f 0a00 	mov.w	sl, #0
 8004c00:	f04f 0b00 	mov.w	fp, #0
 8004c04:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004c08:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004c0c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004c10:	4652      	mov	r2, sl
 8004c12:	465b      	mov	r3, fp
 8004c14:	1a14      	subs	r4, r2, r0
 8004c16:	eb63 0501 	sbc.w	r5, r3, r1
 8004c1a:	f04f 0200 	mov.w	r2, #0
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	00ab      	lsls	r3, r5, #2
 8004c24:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004c28:	00a2      	lsls	r2, r4, #2
 8004c2a:	4614      	mov	r4, r2
 8004c2c:	461d      	mov	r5, r3
 8004c2e:	eb14 0800 	adds.w	r8, r4, r0
 8004c32:	eb45 0901 	adc.w	r9, r5, r1
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	f04f 0300 	mov.w	r3, #0
 8004c3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c4a:	4690      	mov	r8, r2
 8004c4c:	4699      	mov	r9, r3
 8004c4e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004c52:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004c56:	4610      	mov	r0, r2
 8004c58:	4619      	mov	r1, r3
 8004c5a:	3708      	adds	r7, #8
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004c64 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
 8004c70:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004c72:	2205      	movs	r2, #5
 8004c74:	492b      	ldr	r1, [pc, #172]	@ (8004d24 <SYSVIEW_AddTask+0xc0>)
 8004c76:	68b8      	ldr	r0, [r7, #8]
 8004c78:	f002 fb98 	bl	80073ac <memcmp>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d04b      	beq.n	8004d1a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004c82:	4b29      	ldr	r3, [pc, #164]	@ (8004d28 <SYSVIEW_AddTask+0xc4>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b07      	cmp	r3, #7
 8004c88:	d903      	bls.n	8004c92 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004c8a:	4828      	ldr	r0, [pc, #160]	@ (8004d2c <SYSVIEW_AddTask+0xc8>)
 8004c8c:	f002 face 	bl	800722c <SEGGER_SYSVIEW_Warn>
    return;
 8004c90:	e044      	b.n	8004d1c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004c92:	4b25      	ldr	r3, [pc, #148]	@ (8004d28 <SYSVIEW_AddTask+0xc4>)
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	4926      	ldr	r1, [pc, #152]	@ (8004d30 <SYSVIEW_AddTask+0xcc>)
 8004c98:	4613      	mov	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	440b      	add	r3, r1
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004ca6:	4b20      	ldr	r3, [pc, #128]	@ (8004d28 <SYSVIEW_AddTask+0xc4>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	4921      	ldr	r1, [pc, #132]	@ (8004d30 <SYSVIEW_AddTask+0xcc>)
 8004cac:	4613      	mov	r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	4413      	add	r3, r2
 8004cb2:	009b      	lsls	r3, r3, #2
 8004cb4:	440b      	add	r3, r1
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	68ba      	ldr	r2, [r7, #8]
 8004cba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004cbc:	4b1a      	ldr	r3, [pc, #104]	@ (8004d28 <SYSVIEW_AddTask+0xc4>)
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	491b      	ldr	r1, [pc, #108]	@ (8004d30 <SYSVIEW_AddTask+0xcc>)
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	440b      	add	r3, r1
 8004ccc:	3308      	adds	r3, #8
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004cd2:	4b15      	ldr	r3, [pc, #84]	@ (8004d28 <SYSVIEW_AddTask+0xc4>)
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	4916      	ldr	r1, [pc, #88]	@ (8004d30 <SYSVIEW_AddTask+0xcc>)
 8004cd8:	4613      	mov	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	009b      	lsls	r3, r3, #2
 8004ce0:	440b      	add	r3, r1
 8004ce2:	330c      	adds	r3, #12
 8004ce4:	683a      	ldr	r2, [r7, #0]
 8004ce6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004ce8:	4b0f      	ldr	r3, [pc, #60]	@ (8004d28 <SYSVIEW_AddTask+0xc4>)
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	4910      	ldr	r1, [pc, #64]	@ (8004d30 <SYSVIEW_AddTask+0xcc>)
 8004cee:	4613      	mov	r3, r2
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	440b      	add	r3, r1
 8004cf8:	3310      	adds	r3, #16
 8004cfa:	69ba      	ldr	r2, [r7, #24]
 8004cfc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8004d28 <SYSVIEW_AddTask+0xc4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	3301      	adds	r3, #1
 8004d04:	4a08      	ldr	r2, [pc, #32]	@ (8004d28 <SYSVIEW_AddTask+0xc4>)
 8004d06:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	68b9      	ldr	r1, [r7, #8]
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 f80e 	bl	8004d34 <SYSVIEW_SendTaskInfo>
 8004d18:	e000      	b.n	8004d1c <SYSVIEW_AddTask+0xb8>
    return;
 8004d1a:	bf00      	nop

}
 8004d1c:	3710      	adds	r7, #16
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	08007d7c 	.word	0x08007d7c
 8004d28:	20012f18 	.word	0x20012f18
 8004d2c:	08007d84 	.word	0x08007d84
 8004d30:	20012e78 	.word	0x20012e78

08004d34 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b08a      	sub	sp, #40	@ 0x28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
 8004d40:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004d42:	f107 0314 	add.w	r3, r7, #20
 8004d46:	2214      	movs	r2, #20
 8004d48:	2100      	movs	r1, #0
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f002 fb3e 	bl	80073cc <memset>
  TaskInfo.TaskID     = TaskID;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d62:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004d64:	f107 0314 	add.w	r3, r7, #20
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f001 fe55 	bl	8006a18 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004d6e:	bf00      	nop
 8004d70:	3728      	adds	r7, #40	@ 0x28
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <__NVIC_EnableIRQ>:
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	4603      	mov	r3, r0
 8004d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	db0b      	blt.n	8004da2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d8a:	79fb      	ldrb	r3, [r7, #7]
 8004d8c:	f003 021f 	and.w	r2, r3, #31
 8004d90:	4907      	ldr	r1, [pc, #28]	@ (8004db0 <__NVIC_EnableIRQ+0x38>)
 8004d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d96:	095b      	lsrs	r3, r3, #5
 8004d98:	2001      	movs	r0, #1
 8004d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8004d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	e000e100 	.word	0xe000e100

08004db4 <__NVIC_SetPriority>:
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	4603      	mov	r3, r0
 8004dbc:	6039      	str	r1, [r7, #0]
 8004dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	db0a      	blt.n	8004dde <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	490c      	ldr	r1, [pc, #48]	@ (8004e00 <__NVIC_SetPriority+0x4c>)
 8004dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd2:	0112      	lsls	r2, r2, #4
 8004dd4:	b2d2      	uxtb	r2, r2
 8004dd6:	440b      	add	r3, r1
 8004dd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004ddc:	e00a      	b.n	8004df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	4908      	ldr	r1, [pc, #32]	@ (8004e04 <__NVIC_SetPriority+0x50>)
 8004de4:	79fb      	ldrb	r3, [r7, #7]
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	3b04      	subs	r3, #4
 8004dec:	0112      	lsls	r2, r2, #4
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	440b      	add	r3, r1
 8004df2:	761a      	strb	r2, [r3, #24]
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	e000e100 	.word	0xe000e100
 8004e04:	e000ed00 	.word	0xe000ed00

08004e08 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004e0e:	f002 fa69 	bl	80072e4 <SEGGER_SYSVIEW_IsStarted>
 8004e12:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d101      	bne.n	8004e1e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004e1a:	f001 fc81 	bl	8006720 <SEGGER_SYSVIEW_Start>
  }
}
 8004e1e:	bf00      	nop
 8004e20:	3708      	adds	r7, #8
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
	...

08004e28 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b082      	sub	sp, #8
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	4603      	mov	r3, r0
 8004e30:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 8004e32:	4b0c      	ldr	r3, [pc, #48]	@ (8004e64 <_cbOnUARTRx+0x3c>)
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	2b03      	cmp	r3, #3
 8004e38:	d806      	bhi.n	8004e48 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e64 <_cbOnUARTRx+0x3c>)
 8004e3c:	781b      	ldrb	r3, [r3, #0]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	b2da      	uxtb	r2, r3
 8004e42:	4b08      	ldr	r3, [pc, #32]	@ (8004e64 <_cbOnUARTRx+0x3c>)
 8004e44:	701a      	strb	r2, [r3, #0]
    goto Done;
 8004e46:	e009      	b.n	8004e5c <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004e48:	f7ff ffde 	bl	8004e08 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004e4c:	4b05      	ldr	r3, [pc, #20]	@ (8004e64 <_cbOnUARTRx+0x3c>)
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	4618      	mov	r0, r3
 8004e52:	1dfb      	adds	r3, r7, #7
 8004e54:	2201      	movs	r2, #1
 8004e56:	4619      	mov	r1, r3
 8004e58:	f000 fb9a 	bl	8005590 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004e5c:	bf00      	nop
}
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	20000010 	.word	0x20000010

08004e68 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8004e70:	4b14      	ldr	r3, [pc, #80]	@ (8004ec4 <_cbOnUARTTx+0x5c>)
 8004e72:	785b      	ldrb	r3, [r3, #1]
 8004e74:	2b03      	cmp	r3, #3
 8004e76:	d80f      	bhi.n	8004e98 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8004e78:	4b12      	ldr	r3, [pc, #72]	@ (8004ec4 <_cbOnUARTTx+0x5c>)
 8004e7a:	785b      	ldrb	r3, [r3, #1]
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	4b12      	ldr	r3, [pc, #72]	@ (8004ec8 <_cbOnUARTTx+0x60>)
 8004e80:	5c9a      	ldrb	r2, [r3, r2]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8004e86:	4b0f      	ldr	r3, [pc, #60]	@ (8004ec4 <_cbOnUARTTx+0x5c>)
 8004e88:	785b      	ldrb	r3, [r3, #1]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8004ec4 <_cbOnUARTTx+0x5c>)
 8004e90:	705a      	strb	r2, [r3, #1]
    r = 1;
 8004e92:	2301      	movs	r3, #1
 8004e94:	60fb      	str	r3, [r7, #12]
    goto Done;
 8004e96:	e00f      	b.n	8004eb8 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8004e98:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec4 <_cbOnUARTTx+0x5c>)
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	6879      	ldr	r1, [r7, #4]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 fa19 	bl	80052d8 <SEGGER_RTT_ReadUpBufferNoLock>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	da02      	bge.n	8004eb6 <_cbOnUARTTx+0x4e>
    r = 0;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	e000      	b.n	8004eb8 <_cbOnUARTTx+0x50>
  }
Done:
 8004eb6:	bf00      	nop
  return r;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3710      	adds	r7, #16
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20000010 	.word	0x20000010
 8004ec8:	08007e0c 	.word	0x08007e0c

08004ecc <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b082      	sub	sp, #8
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8004ed4:	4a04      	ldr	r2, [pc, #16]	@ (8004ee8 <SEGGER_UART_init+0x1c>)
 8004ed6:	4905      	ldr	r1, [pc, #20]	@ (8004eec <SEGGER_UART_init+0x20>)
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 f863 	bl	8004fa4 <HIF_UART_Init>
}
 8004ede:	bf00      	nop
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	08004e29 	.word	0x08004e29
 8004eec:	08004e69 	.word	0x08004e69

08004ef0 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004ef6:	4b1e      	ldr	r3, [pc, #120]	@ (8004f70 <USART2_IRQHandler+0x80>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f003 0320 	and.w	r3, r3, #32
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d011      	beq.n	8004f2a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004f06:	4b1b      	ldr	r3, [pc, #108]	@ (8004f74 <USART2_IRQHandler+0x84>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f003 030b 	and.w	r3, r3, #11
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d108      	bne.n	8004f2a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004f18:	4b17      	ldr	r3, [pc, #92]	@ (8004f78 <USART2_IRQHandler+0x88>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d004      	beq.n	8004f2a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004f20:	4b15      	ldr	r3, [pc, #84]	@ (8004f78 <USART2_IRQHandler+0x88>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	79fa      	ldrb	r2, [r7, #7]
 8004f26:	4610      	mov	r0, r2
 8004f28:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d01a      	beq.n	8004f6a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004f34:	4b11      	ldr	r3, [pc, #68]	@ (8004f7c <USART2_IRQHandler+0x8c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d015      	beq.n	8004f68 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f7c <USART2_IRQHandler+0x8c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	1dfa      	adds	r2, r7, #7
 8004f42:	4610      	mov	r0, r2
 8004f44:	4798      	blx	r3
 8004f46:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d106      	bne.n	8004f5c <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f80 <USART2_IRQHandler+0x90>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a0b      	ldr	r2, [pc, #44]	@ (8004f80 <USART2_IRQHandler+0x90>)
 8004f54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f58:	6013      	str	r3, [r2, #0]
 8004f5a:	e006      	b.n	8004f6a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004f5c:	4b04      	ldr	r3, [pc, #16]	@ (8004f70 <USART2_IRQHandler+0x80>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004f60:	79fa      	ldrb	r2, [r7, #7]
 8004f62:	4b04      	ldr	r3, [pc, #16]	@ (8004f74 <USART2_IRQHandler+0x84>)
 8004f64:	601a      	str	r2, [r3, #0]
 8004f66:	e000      	b.n	8004f6a <USART2_IRQHandler+0x7a>
      return;
 8004f68:	bf00      	nop
    }
  }
}
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40004400 	.word	0x40004400
 8004f74:	40004404 	.word	0x40004404
 8004f78:	20012f1c 	.word	0x20012f1c
 8004f7c:	20012f20 	.word	0x20012f20
 8004f80:	4000440c 	.word	0x4000440c

08004f84 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004f84:	b480      	push	{r7}
 8004f86:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004f88:	4b05      	ldr	r3, [pc, #20]	@ (8004fa0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a04      	ldr	r2, [pc, #16]	@ (8004fa0 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004f8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f92:	6013      	str	r3, [r2, #0]
}
 8004f94:	bf00      	nop
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
 8004f9e:	bf00      	nop
 8004fa0:	4000440c 	.word	0x4000440c

08004fa4 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8004fb0:	4b2e      	ldr	r3, [pc, #184]	@ (800506c <HIF_UART_Init+0xc8>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a2d      	ldr	r2, [pc, #180]	@ (800506c <HIF_UART_Init+0xc8>)
 8004fb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004fba:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8004fbc:	4b2c      	ldr	r3, [pc, #176]	@ (8005070 <HIF_UART_Init+0xcc>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a2b      	ldr	r2, [pc, #172]	@ (8005070 <HIF_UART_Init+0xcc>)
 8004fc2:	f043 0301 	orr.w	r3, r3, #1
 8004fc6:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8004fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8005074 <HIF_UART_Init+0xd0>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004fd4:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8004fdc:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8004fde:	4a25      	ldr	r2, [pc, #148]	@ (8005074 <HIF_UART_Init+0xd0>)
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8004fe4:	4b24      	ldr	r3, [pc, #144]	@ (8005078 <HIF_UART_Init+0xd4>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004fea:	693b      	ldr	r3, [r7, #16]
 8004fec:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ff0:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8004ff8:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004ffa:	4a1f      	ldr	r2, [pc, #124]	@ (8005078 <HIF_UART_Init+0xd4>)
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005000:	4b1e      	ldr	r3, [pc, #120]	@ (800507c <HIF_UART_Init+0xd8>)
 8005002:	f24a 022c 	movw	r2, #41004	@ 0xa02c
 8005006:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8005008:	4b1d      	ldr	r3, [pc, #116]	@ (8005080 <HIF_UART_Init+0xdc>)
 800500a:	2200      	movs	r2, #0
 800500c:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800500e:	4b1d      	ldr	r3, [pc, #116]	@ (8005084 <HIF_UART_Init+0xe0>)
 8005010:	2280      	movs	r2, #128	@ 0x80
 8005012:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	00db      	lsls	r3, r3, #3
 8005018:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800501a:	4a1b      	ldr	r2, [pc, #108]	@ (8005088 <HIF_UART_Init+0xe4>)
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005022:	3301      	adds	r3, #1
 8005024:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8005026:	697b      	ldr	r3, [r7, #20]
 8005028:	085b      	lsrs	r3, r3, #1
 800502a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005032:	d302      	bcc.n	800503a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005034:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8005038:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d004      	beq.n	800504a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	4a11      	ldr	r2, [pc, #68]	@ (800508c <HIF_UART_Init+0xe8>)
 8005046:	b29b      	uxth	r3, r3
 8005048:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800504a:	4a11      	ldr	r2, [pc, #68]	@ (8005090 <HIF_UART_Init+0xec>)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8005050:	4a10      	ldr	r2, [pc, #64]	@ (8005094 <HIF_UART_Init+0xf0>)
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 8005056:	2106      	movs	r1, #6
 8005058:	2026      	movs	r0, #38	@ 0x26
 800505a:	f7ff feab 	bl	8004db4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 800505e:	2026      	movs	r0, #38	@ 0x26
 8005060:	f7ff fe8a 	bl	8004d78 <__NVIC_EnableIRQ>
}
 8005064:	bf00      	nop
 8005066:	3718      	adds	r7, #24
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}
 800506c:	40023840 	.word	0x40023840
 8005070:	40023830 	.word	0x40023830
 8005074:	40020020 	.word	0x40020020
 8005078:	40020000 	.word	0x40020000
 800507c:	4000440c 	.word	0x4000440c
 8005080:	40004410 	.word	0x40004410
 8005084:	40004414 	.word	0x40004414
 8005088:	0501bd00 	.word	0x0501bd00
 800508c:	40004408 	.word	0x40004408
 8005090:	20012f1c 	.word	0x20012f1c
 8005094:	20012f20 	.word	0x20012f20

08005098 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005098:	b480      	push	{r7}
 800509a:	b083      	sub	sp, #12
 800509c:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800509e:	4b25      	ldr	r3, [pc, #148]	@ (8005134 <_DoInit+0x9c>)
 80050a0:	603b      	str	r3, [r7, #0]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2203      	movs	r2, #3
 80050a6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	2203      	movs	r2, #3
 80050ac:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	4a21      	ldr	r2, [pc, #132]	@ (8005138 <_DoInit+0xa0>)
 80050b2:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	4a21      	ldr	r2, [pc, #132]	@ (800513c <_DoInit+0xa4>)
 80050b8:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80050c0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2200      	movs	r2, #0
 80050c6:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	2200      	movs	r2, #0
 80050cc:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	2200      	movs	r2, #0
 80050d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	4a18      	ldr	r2, [pc, #96]	@ (8005138 <_DoInit+0xa0>)
 80050d8:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	4a18      	ldr	r2, [pc, #96]	@ (8005140 <_DoInit+0xa8>)
 80050de:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	2210      	movs	r2, #16
 80050e4:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2200      	movs	r2, #0
 80050ea:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	2200      	movs	r2, #0
 80050f0:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2200      	movs	r2, #0
 80050f6:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 80050f8:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80050fc:	2300      	movs	r3, #0
 80050fe:	607b      	str	r3, [r7, #4]
 8005100:	e00c      	b.n	800511c <_DoInit+0x84>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	f1c3 030f 	rsb	r3, r3, #15
 8005108:	4a0e      	ldr	r2, [pc, #56]	@ (8005144 <_DoInit+0xac>)
 800510a:	5cd1      	ldrb	r1, [r2, r3]
 800510c:	683a      	ldr	r2, [r7, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4413      	add	r3, r2
 8005112:	460a      	mov	r2, r1
 8005114:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	3301      	adds	r3, #1
 800511a:	607b      	str	r3, [r7, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b0f      	cmp	r3, #15
 8005120:	d9ef      	bls.n	8005102 <_DoInit+0x6a>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8005122:	f3bf 8f5f 	dmb	sy
}
 8005126:	bf00      	nop
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	20012f24 	.word	0x20012f24
 8005138:	08007dd4 	.word	0x08007dd4
 800513c:	20012fcc 	.word	0x20012fcc
 8005140:	200133cc 	.word	0x200133cc
 8005144:	08007e10 	.word	0x08007e10

08005148 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005148:	b580      	push	{r7, lr}
 800514a:	b08a      	sub	sp, #40	@ 0x28
 800514c:	af00      	add	r7, sp, #0
 800514e:	60f8      	str	r0, [r7, #12]
 8005150:	60b9      	str	r1, [r7, #8]
 8005152:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8005154:	2300      	movs	r3, #0
 8005156:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	429a      	cmp	r2, r3
 800516a:	d905      	bls.n	8005178 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	69fb      	ldr	r3, [r7, #28]
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	3b01      	subs	r3, #1
 8005174:	627b      	str	r3, [r7, #36]	@ 0x24
 8005176:	e007      	b.n	8005188 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	69b9      	ldr	r1, [r7, #24]
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	1acb      	subs	r3, r1, r3
 8005182:	4413      	add	r3, r2
 8005184:	3b01      	subs	r3, #1
 8005186:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	689a      	ldr	r2, [r3, #8]
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005192:	4293      	cmp	r3, r2
 8005194:	bf28      	it	cs
 8005196:	4613      	movcs	r3, r2
 8005198:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800519a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4293      	cmp	r3, r2
 80051a0:	bf28      	it	cs
 80051a2:	4613      	movcs	r3, r2
 80051a4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	4413      	add	r3, r2
 80051ae:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 80051b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051b2:	68b9      	ldr	r1, [r7, #8]
 80051b4:	6978      	ldr	r0, [r7, #20]
 80051b6:	f002 f937 	bl	8007428 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 80051ba:	6a3a      	ldr	r2, [r7, #32]
 80051bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051be:	4413      	add	r3, r2
 80051c0:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 80051c2:	68ba      	ldr	r2, [r7, #8]
 80051c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c6:	4413      	add	r3, r2
 80051c8:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051ce:	1ad3      	subs	r3, r2, r3
 80051d0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 80051d2:	69fa      	ldr	r2, [r7, #28]
 80051d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d6:	4413      	add	r3, r2
 80051d8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	69fa      	ldr	r2, [r7, #28]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d101      	bne.n	80051e8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 80051e4:	2300      	movs	r3, #0
 80051e6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80051e8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	69fa      	ldr	r2, [r7, #28]
 80051f0:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d1b2      	bne.n	800515e <_WriteBlocking+0x16>
  return NumBytesWritten;
 80051f8:	6a3b      	ldr	r3, [r7, #32]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3728      	adds	r7, #40	@ 0x28
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}

08005202 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005202:	b580      	push	{r7, lr}
 8005204:	b088      	sub	sp, #32
 8005206:	af00      	add	r7, sp, #0
 8005208:	60f8      	str	r0, [r7, #12]
 800520a:	60b9      	str	r1, [r7, #8]
 800520c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800521e:	69ba      	ldr	r2, [r7, #24]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	429a      	cmp	r2, r3
 8005224:	d911      	bls.n	800524a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	685a      	ldr	r2, [r3, #4]
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	4413      	add	r3, r2
 800522e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	68b9      	ldr	r1, [r7, #8]
 8005234:	6938      	ldr	r0, [r7, #16]
 8005236:	f002 f8f7 	bl	8007428 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800523a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800523e:	69fa      	ldr	r2, [r7, #28]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	441a      	add	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005248:	e01f      	b.n	800528a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	4413      	add	r3, r2
 8005256:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	68b9      	ldr	r1, [r7, #8]
 800525c:	6938      	ldr	r0, [r7, #16]
 800525e:	f002 f8e3 	bl	8007428 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	4413      	add	r3, r2
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	4619      	mov	r1, r3
 800527a:	6938      	ldr	r0, [r7, #16]
 800527c:	f002 f8d4 	bl	8007428 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005280:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	60da      	str	r2, [r3, #12]
}
 800528a:	bf00      	nop
 800528c:	3720      	adds	r7, #32
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}

08005292 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005292:	b480      	push	{r7}
 8005294:	b087      	sub	sp, #28
 8005296:	af00      	add	r7, sp, #0
 8005298:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	691b      	ldr	r3, [r3, #16]
 800529e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d808      	bhi.n	80052c0 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	689a      	ldr	r2, [r3, #8]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	1ad2      	subs	r2, r2, r3
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	4413      	add	r3, r2
 80052ba:	3b01      	subs	r3, #1
 80052bc:	617b      	str	r3, [r7, #20]
 80052be:	e004      	b.n	80052ca <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 80052c0:	693a      	ldr	r2, [r7, #16]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	3b01      	subs	r3, #1
 80052c8:	617b      	str	r3, [r7, #20]
  }
  return r;
 80052ca:	697b      	ldr	r3, [r7, #20]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	371c      	adds	r7, #28
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80052d8:	b580      	push	{r7, lr}
 80052da:	b08c      	sub	sp, #48	@ 0x30
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 80052e4:	4b3e      	ldr	r3, [pc, #248]	@ (80053e0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 80052e6:	623b      	str	r3, [r7, #32]
 80052e8:	6a3b      	ldr	r3, [r7, #32]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 80052f2:	f7ff fed1 	bl	8005098 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	1c5a      	adds	r2, r3, #1
 80052fa:	4613      	mov	r3, r2
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	4413      	add	r3, r2
 8005300:	00db      	lsls	r3, r3, #3
 8005302:	4a37      	ldr	r2, [pc, #220]	@ (80053e0 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005304:	4413      	add	r3, r2
 8005306:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005318:	2300      	movs	r3, #0
 800531a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800531c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	429a      	cmp	r2, r3
 8005322:	d92b      	bls.n	800537c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	689a      	ldr	r2, [r3, #8]
 8005328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4293      	cmp	r3, r2
 8005334:	bf28      	it	cs
 8005336:	4613      	movcs	r3, r2
 8005338:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800533a:	69fb      	ldr	r3, [r7, #28]
 800533c:	685a      	ldr	r2, [r3, #4]
 800533e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005340:	4413      	add	r3, r2
 8005342:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005344:	697a      	ldr	r2, [r7, #20]
 8005346:	6939      	ldr	r1, [r7, #16]
 8005348:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800534a:	f002 f86d 	bl	8007428 <memcpy>
    NumBytesRead += NumBytesRem;
 800534e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	4413      	add	r3, r2
 8005354:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005356:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	4413      	add	r3, r2
 800535c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	697b      	ldr	r3, [r7, #20]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005366:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	4413      	add	r3, r2
 800536c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005374:	429a      	cmp	r2, r3
 8005376:	d101      	bne.n	800537c <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8005378:	2300      	movs	r3, #0
 800537a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800537c:	69ba      	ldr	r2, [r7, #24]
 800537e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005380:	1ad3      	subs	r3, r2, r3
 8005382:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005384:	697a      	ldr	r2, [r7, #20]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4293      	cmp	r3, r2
 800538a:	bf28      	it	cs
 800538c:	4613      	movcs	r3, r2
 800538e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d019      	beq.n	80053ca <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539c:	4413      	add	r3, r2
 800539e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	6939      	ldr	r1, [r7, #16]
 80053a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80053a6:	f002 f83f 	bl	8007428 <memcpy>
    NumBytesRead += NumBytesRem;
 80053aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	4413      	add	r3, r2
 80053b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80053b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	4413      	add	r3, r2
 80053b8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80053c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	4413      	add	r3, r2
 80053c8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 80053ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d002      	beq.n	80053d6 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 80053d0:	69fb      	ldr	r3, [r7, #28]
 80053d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053d4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80053d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3730      	adds	r7, #48	@ 0x30
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	20012f24 	.word	0x20012f24

080053e4 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08c      	sub	sp, #48	@ 0x30
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80053f0:	4b3e      	ldr	r3, [pc, #248]	@ (80054ec <SEGGER_RTT_ReadNoLock+0x108>)
 80053f2:	623b      	str	r3, [r7, #32]
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <SEGGER_RTT_ReadNoLock+0x1e>
 80053fe:	f7ff fe4b 	bl	8005098 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	4613      	mov	r3, r2
 8005406:	005b      	lsls	r3, r3, #1
 8005408:	4413      	add	r3, r2
 800540a:	00db      	lsls	r3, r3, #3
 800540c:	3360      	adds	r3, #96	@ 0x60
 800540e:	4a37      	ldr	r2, [pc, #220]	@ (80054ec <SEGGER_RTT_ReadNoLock+0x108>)
 8005410:	4413      	add	r3, r2
 8005412:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800541e:	69fb      	ldr	r3, [r7, #28]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005424:	2300      	movs	r3, #0
 8005426:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005428:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	429a      	cmp	r2, r3
 800542e:	d92b      	bls.n	8005488 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	689a      	ldr	r2, [r3, #8]
 8005434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4293      	cmp	r3, r2
 8005440:	bf28      	it	cs
 8005442:	4613      	movcs	r3, r2
 8005444:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544c:	4413      	add	r3, r2
 800544e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005450:	697a      	ldr	r2, [r7, #20]
 8005452:	6939      	ldr	r1, [r7, #16]
 8005454:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005456:	f001 ffe7 	bl	8007428 <memcpy>
    NumBytesRead += NumBytesRem;
 800545a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	4413      	add	r3, r2
 8005460:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005462:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	4413      	add	r3, r2
 8005468:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005472:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	4413      	add	r3, r2
 8005478:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800547a:	69fb      	ldr	r3, [r7, #28]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005480:	429a      	cmp	r2, r3
 8005482:	d101      	bne.n	8005488 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005484:	2300      	movs	r3, #0
 8005486:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548c:	1ad3      	subs	r3, r2, r3
 800548e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4293      	cmp	r3, r2
 8005496:	bf28      	it	cs
 8005498:	4613      	movcs	r3, r2
 800549a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d019      	beq.n	80054d6 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a8:	4413      	add	r3, r2
 80054aa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	6939      	ldr	r1, [r7, #16]
 80054b0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80054b2:	f001 ffb9 	bl	8007428 <memcpy>
    NumBytesRead += NumBytesRem;
 80054b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	4413      	add	r3, r2
 80054bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80054be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	4413      	add	r3, r2
 80054c4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80054ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	4413      	add	r3, r2
 80054d4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80054d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d002      	beq.n	80054e2 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054e0:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80054e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3730      	adds	r7, #48	@ 0x30
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	20012f24 	.word	0x20012f24

080054f0 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b088      	sub	sp, #32
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005500:	68fa      	ldr	r2, [r7, #12]
 8005502:	4613      	mov	r3, r2
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	4413      	add	r3, r2
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	3360      	adds	r3, #96	@ 0x60
 800550c:	4a1f      	ldr	r2, [pc, #124]	@ (800558c <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800550e:	4413      	add	r3, r2
 8005510:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	2b02      	cmp	r3, #2
 8005518:	d029      	beq.n	800556e <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800551a:	2b02      	cmp	r3, #2
 800551c:	d82e      	bhi.n	800557c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800551e:	2b00      	cmp	r3, #0
 8005520:	d002      	beq.n	8005528 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005522:	2b01      	cmp	r3, #1
 8005524:	d013      	beq.n	800554e <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005526:	e029      	b.n	800557c <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005528:	6978      	ldr	r0, [r7, #20]
 800552a:	f7ff feb2 	bl	8005292 <_GetAvailWriteSpace>
 800552e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005530:	693a      	ldr	r2, [r7, #16]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	429a      	cmp	r2, r3
 8005536:	d202      	bcs.n	800553e <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005538:	2300      	movs	r3, #0
 800553a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800553c:	e021      	b.n	8005582 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	69b9      	ldr	r1, [r7, #24]
 8005546:	6978      	ldr	r0, [r7, #20]
 8005548:	f7ff fe5b 	bl	8005202 <_WriteNoCheck>
    break;
 800554c:	e019      	b.n	8005582 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800554e:	6978      	ldr	r0, [r7, #20]
 8005550:	f7ff fe9f 	bl	8005292 <_GetAvailWriteSpace>
 8005554:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	4293      	cmp	r3, r2
 800555c:	bf28      	it	cs
 800555e:	4613      	movcs	r3, r2
 8005560:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8005562:	69fa      	ldr	r2, [r7, #28]
 8005564:	69b9      	ldr	r1, [r7, #24]
 8005566:	6978      	ldr	r0, [r7, #20]
 8005568:	f7ff fe4b 	bl	8005202 <_WriteNoCheck>
    break;
 800556c:	e009      	b.n	8005582 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	69b9      	ldr	r1, [r7, #24]
 8005572:	6978      	ldr	r0, [r7, #20]
 8005574:	f7ff fde8 	bl	8005148 <_WriteBlocking>
 8005578:	61f8      	str	r0, [r7, #28]
    break;
 800557a:	e002      	b.n	8005582 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 800557c:	2300      	movs	r3, #0
 800557e:	61fb      	str	r3, [r7, #28]
    break;
 8005580:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005582:	69fb      	ldr	r3, [r7, #28]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3720      	adds	r7, #32
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	20012f24 	.word	0x20012f24

08005590 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005590:	b580      	push	{r7, lr}
 8005592:	b088      	sub	sp, #32
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800559c:	4b0e      	ldr	r3, [pc, #56]	@ (80055d8 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800559e:	61fb      	str	r3, [r7, #28]
 80055a0:	69fb      	ldr	r3, [r7, #28]
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <SEGGER_RTT_WriteDownBuffer+0x1e>
 80055aa:	f7ff fd75 	bl	8005098 <_DoInit>
  SEGGER_RTT_LOCK();
 80055ae:	f3ef 8311 	mrs	r3, BASEPRI
 80055b2:	f04f 0120 	mov.w	r1, #32
 80055b6:	f381 8811 	msr	BASEPRI, r1
 80055ba:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	68b9      	ldr	r1, [r7, #8]
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f7ff ff95 	bl	80054f0 <SEGGER_RTT_WriteDownBufferNoLock>
 80055c6:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	f383 8811 	msr	BASEPRI, r3
  return Status;
 80055ce:	697b      	ldr	r3, [r7, #20]
}
 80055d0:	4618      	mov	r0, r3
 80055d2:	3720      	adds	r7, #32
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	20012f24 	.word	0x20012f24

080055dc <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80055dc:	b580      	push	{r7, lr}
 80055de:	b088      	sub	sp, #32
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
 80055e8:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80055ea:	4b3d      	ldr	r3, [pc, #244]	@ (80056e0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80055ec:	61bb      	str	r3, [r7, #24]
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	781b      	ldrb	r3, [r3, #0]
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <SEGGER_RTT_AllocUpBuffer+0x20>
 80055f8:	f7ff fd4e 	bl	8005098 <_DoInit>
  SEGGER_RTT_LOCK();
 80055fc:	f3ef 8311 	mrs	r3, BASEPRI
 8005600:	f04f 0120 	mov.w	r1, #32
 8005604:	f381 8811 	msr	BASEPRI, r1
 8005608:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800560a:	4b35      	ldr	r3, [pc, #212]	@ (80056e0 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800560c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800560e:	2300      	movs	r3, #0
 8005610:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005612:	6939      	ldr	r1, [r7, #16]
 8005614:	69fb      	ldr	r3, [r7, #28]
 8005616:	1c5a      	adds	r2, r3, #1
 8005618:	4613      	mov	r3, r2
 800561a:	005b      	lsls	r3, r3, #1
 800561c:	4413      	add	r3, r2
 800561e:	00db      	lsls	r3, r3, #3
 8005620:	440b      	add	r3, r1
 8005622:	3304      	adds	r3, #4
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d008      	beq.n	800563c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	3301      	adds	r3, #1
 800562e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	691b      	ldr	r3, [r3, #16]
 8005634:	69fa      	ldr	r2, [r7, #28]
 8005636:	429a      	cmp	r2, r3
 8005638:	dbeb      	blt.n	8005612 <SEGGER_RTT_AllocUpBuffer+0x36>
 800563a:	e000      	b.n	800563e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800563c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	69fa      	ldr	r2, [r7, #28]
 8005644:	429a      	cmp	r2, r3
 8005646:	da3f      	bge.n	80056c8 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005648:	6939      	ldr	r1, [r7, #16]
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	1c5a      	adds	r2, r3, #1
 800564e:	4613      	mov	r3, r2
 8005650:	005b      	lsls	r3, r3, #1
 8005652:	4413      	add	r3, r2
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	440b      	add	r3, r1
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800565c:	6939      	ldr	r1, [r7, #16]
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	1c5a      	adds	r2, r3, #1
 8005662:	4613      	mov	r3, r2
 8005664:	005b      	lsls	r3, r3, #1
 8005666:	4413      	add	r3, r2
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	440b      	add	r3, r1
 800566c:	3304      	adds	r3, #4
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005672:	6939      	ldr	r1, [r7, #16]
 8005674:	69fa      	ldr	r2, [r7, #28]
 8005676:	4613      	mov	r3, r2
 8005678:	005b      	lsls	r3, r3, #1
 800567a:	4413      	add	r3, r2
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	440b      	add	r3, r1
 8005680:	3320      	adds	r3, #32
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005686:	6939      	ldr	r1, [r7, #16]
 8005688:	69fa      	ldr	r2, [r7, #28]
 800568a:	4613      	mov	r3, r2
 800568c:	005b      	lsls	r3, r3, #1
 800568e:	4413      	add	r3, r2
 8005690:	00db      	lsls	r3, r3, #3
 8005692:	440b      	add	r3, r1
 8005694:	3328      	adds	r3, #40	@ 0x28
 8005696:	2200      	movs	r2, #0
 8005698:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800569a:	6939      	ldr	r1, [r7, #16]
 800569c:	69fa      	ldr	r2, [r7, #28]
 800569e:	4613      	mov	r3, r2
 80056a0:	005b      	lsls	r3, r3, #1
 80056a2:	4413      	add	r3, r2
 80056a4:	00db      	lsls	r3, r3, #3
 80056a6:	440b      	add	r3, r1
 80056a8:	3324      	adds	r3, #36	@ 0x24
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80056ae:	6939      	ldr	r1, [r7, #16]
 80056b0:	69fa      	ldr	r2, [r7, #28]
 80056b2:	4613      	mov	r3, r2
 80056b4:	005b      	lsls	r3, r3, #1
 80056b6:	4413      	add	r3, r2
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	440b      	add	r3, r1
 80056bc:	332c      	adds	r3, #44	@ 0x2c
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80056c2:	f3bf 8f5f 	dmb	sy
 80056c6:	e002      	b.n	80056ce <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80056c8:	f04f 33ff 	mov.w	r3, #4294967295
 80056cc:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80056d4:	69fb      	ldr	r3, [r7, #28]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3720      	adds	r7, #32
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	20012f24 	.word	0x20012f24

080056e4 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b08a      	sub	sp, #40	@ 0x28
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
 80056f0:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 80056f2:	4b21      	ldr	r3, [pc, #132]	@ (8005778 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 80056f4:	623b      	str	r3, [r7, #32]
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005700:	f7ff fcca 	bl	8005098 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005704:	4b1c      	ldr	r3, [pc, #112]	@ (8005778 <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8005706:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2b02      	cmp	r3, #2
 800570c:	d82c      	bhi.n	8005768 <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800570e:	f3ef 8311 	mrs	r3, BASEPRI
 8005712:	f04f 0120 	mov.w	r1, #32
 8005716:	f381 8811 	msr	BASEPRI, r1
 800571a:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4613      	mov	r3, r2
 8005720:	005b      	lsls	r3, r3, #1
 8005722:	4413      	add	r3, r2
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	3360      	adds	r3, #96	@ 0x60
 8005728:	69fa      	ldr	r2, [r7, #28]
 800572a:	4413      	add	r3, r2
 800572c:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00e      	beq.n	8005752 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	68ba      	ldr	r2, [r7, #8]
 8005738:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800573a:	697b      	ldr	r3, [r7, #20]
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	2200      	movs	r2, #0
 800574a:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	2200      	movs	r2, #0
 8005750:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005756:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005758:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800575c:	69bb      	ldr	r3, [r7, #24]
 800575e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005762:	2300      	movs	r3, #0
 8005764:	627b      	str	r3, [r7, #36]	@ 0x24
 8005766:	e002      	b.n	800576e <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8005768:	f04f 33ff 	mov.w	r3, #4294967295
 800576c:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 800576e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005770:	4618      	mov	r0, r3
 8005772:	3728      	adds	r7, #40	@ 0x28
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	20012f24 	.word	0x20012f24

0800577c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800577c:	b480      	push	{r7}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005788:	2300      	movs	r3, #0
 800578a:	613b      	str	r3, [r7, #16]
  if (pText != NULL) {
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00f      	beq.n	80057b2 <_EncodeStr+0x36>
    while(*(pText + Len) != 0) {
 8005792:	e002      	b.n	800579a <_EncodeStr+0x1e>
      Len++;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	3301      	adds	r3, #1
 8005798:	613b      	str	r3, [r7, #16]
    while(*(pText + Len) != 0) {
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	4413      	add	r3, r2
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1f6      	bne.n	8005794 <_EncodeStr+0x18>
    }
    if (Len > Limit) {
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d901      	bls.n	80057b2 <_EncodeStr+0x36>
      Len = Limit;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	613b      	str	r3, [r7, #16]
    }
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	2bfe      	cmp	r3, #254	@ 0xfe
 80057b6:	d806      	bhi.n	80057c6 <_EncodeStr+0x4a>
    *pPayload++ = Len; 
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	1c5a      	adds	r2, r3, #1
 80057bc:	60fa      	str	r2, [r7, #12]
 80057be:	693a      	ldr	r2, [r7, #16]
 80057c0:	b2d2      	uxtb	r2, r2
 80057c2:	701a      	strb	r2, [r3, #0]
 80057c4:	e011      	b.n	80057ea <_EncodeStr+0x6e>
  } else {
    *pPayload++ = 255;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	1c5a      	adds	r2, r3, #1
 80057ca:	60fa      	str	r2, [r7, #12]
 80057cc:	22ff      	movs	r2, #255	@ 0xff
 80057ce:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	60fa      	str	r2, [r7, #12]
 80057d6:	693a      	ldr	r2, [r7, #16]
 80057d8:	b2d2      	uxtb	r2, r2
 80057da:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	0a19      	lsrs	r1, r3, #8
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	1c5a      	adds	r2, r3, #1
 80057e4:	60fa      	str	r2, [r7, #12]
 80057e6:	b2ca      	uxtb	r2, r1
 80057e8:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80057ea:	2300      	movs	r3, #0
 80057ec:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80057ee:	e00a      	b.n	8005806 <_EncodeStr+0x8a>
    *pPayload++ = *pText++;
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	1c53      	adds	r3, r2, #1
 80057f4:	60bb      	str	r3, [r7, #8]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	1c59      	adds	r1, r3, #1
 80057fa:	60f9      	str	r1, [r7, #12]
 80057fc:	7812      	ldrb	r2, [r2, #0]
 80057fe:	701a      	strb	r2, [r3, #0]
    n++;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	3301      	adds	r3, #1
 8005804:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	429a      	cmp	r2, r3
 800580c:	d3f0      	bcc.n	80057f0 <_EncodeStr+0x74>
  }
  return pPayload;
 800580e:	68fb      	ldr	r3, [r7, #12]
}
 8005810:	4618      	mov	r0, r3
 8005812:	371c      	adds	r7, #28
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800581c:	b480      	push	{r7}
 800581e:	b083      	sub	sp, #12
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	3304      	adds	r3, #4
}
 8005828:	4618      	mov	r0, r3
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800583a:	4b35      	ldr	r3, [pc, #212]	@ (8005910 <_HandleIncomingPacket+0xdc>)
 800583c:	7e1b      	ldrb	r3, [r3, #24]
 800583e:	4618      	mov	r0, r3
 8005840:	1cfb      	adds	r3, r7, #3
 8005842:	2201      	movs	r2, #1
 8005844:	4619      	mov	r1, r3
 8005846:	f7ff fdcd 	bl	80053e4 <SEGGER_RTT_ReadNoLock>
 800584a:	4603      	mov	r3, r0
 800584c:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	dd59      	ble.n	8005908 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8005854:	78fb      	ldrb	r3, [r7, #3]
 8005856:	2b80      	cmp	r3, #128	@ 0x80
 8005858:	d032      	beq.n	80058c0 <_HandleIncomingPacket+0x8c>
 800585a:	2b80      	cmp	r3, #128	@ 0x80
 800585c:	dc42      	bgt.n	80058e4 <_HandleIncomingPacket+0xb0>
 800585e:	2b07      	cmp	r3, #7
 8005860:	dc16      	bgt.n	8005890 <_HandleIncomingPacket+0x5c>
 8005862:	2b00      	cmp	r3, #0
 8005864:	dd3e      	ble.n	80058e4 <_HandleIncomingPacket+0xb0>
 8005866:	3b01      	subs	r3, #1
 8005868:	2b06      	cmp	r3, #6
 800586a:	d83b      	bhi.n	80058e4 <_HandleIncomingPacket+0xb0>
 800586c:	a201      	add	r2, pc, #4	@ (adr r2, 8005874 <_HandleIncomingPacket+0x40>)
 800586e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005872:	bf00      	nop
 8005874:	08005897 	.word	0x08005897
 8005878:	0800589d 	.word	0x0800589d
 800587c:	080058a3 	.word	0x080058a3
 8005880:	080058a9 	.word	0x080058a9
 8005884:	080058af 	.word	0x080058af
 8005888:	080058b5 	.word	0x080058b5
 800588c:	080058bb 	.word	0x080058bb
 8005890:	2b7f      	cmp	r3, #127	@ 0x7f
 8005892:	d034      	beq.n	80058fe <_HandleIncomingPacket+0xca>
 8005894:	e026      	b.n	80058e4 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005896:	f000 ff43 	bl	8006720 <SEGGER_SYSVIEW_Start>
      break;
 800589a:	e035      	b.n	8005908 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800589c:	f000 fffc 	bl	8006898 <SEGGER_SYSVIEW_Stop>
      break;
 80058a0:	e032      	b.n	8005908 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80058a2:	f001 f9d5 	bl	8006c50 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80058a6:	e02f      	b.n	8005908 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80058a8:	f001 f99a 	bl	8006be0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80058ac:	e02c      	b.n	8005908 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80058ae:	f001 f819 	bl	80068e4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80058b2:	e029      	b.n	8005908 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80058b4:	f001 fc68 	bl	8007188 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80058b8:	e026      	b.n	8005908 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80058ba:	f001 fc47 	bl	800714c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80058be:	e023      	b.n	8005908 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80058c0:	4b13      	ldr	r3, [pc, #76]	@ (8005910 <_HandleIncomingPacket+0xdc>)
 80058c2:	7e1b      	ldrb	r3, [r3, #24]
 80058c4:	4618      	mov	r0, r3
 80058c6:	1cfb      	adds	r3, r7, #3
 80058c8:	2201      	movs	r2, #1
 80058ca:	4619      	mov	r1, r3
 80058cc:	f7ff fd8a 	bl	80053e4 <SEGGER_RTT_ReadNoLock>
 80058d0:	4603      	mov	r3, r0
 80058d2:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	dd13      	ble.n	8005902 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80058da:	78fb      	ldrb	r3, [r7, #3]
 80058dc:	4618      	mov	r0, r3
 80058de:	f001 fbb5 	bl	800704c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80058e2:	e00e      	b.n	8005902 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80058e4:	78fb      	ldrb	r3, [r7, #3]
 80058e6:	b25b      	sxtb	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	da0c      	bge.n	8005906 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80058ec:	4b08      	ldr	r3, [pc, #32]	@ (8005910 <_HandleIncomingPacket+0xdc>)
 80058ee:	7e1b      	ldrb	r3, [r3, #24]
 80058f0:	4618      	mov	r0, r3
 80058f2:	1cfb      	adds	r3, r7, #3
 80058f4:	2201      	movs	r2, #1
 80058f6:	4619      	mov	r1, r3
 80058f8:	f7ff fd74 	bl	80053e4 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80058fc:	e003      	b.n	8005906 <_HandleIncomingPacket+0xd2>
      break;
 80058fe:	bf00      	nop
 8005900:	e002      	b.n	8005908 <_HandleIncomingPacket+0xd4>
      break;
 8005902:	bf00      	nop
 8005904:	e000      	b.n	8005908 <_HandleIncomingPacket+0xd4>
      break;
 8005906:	bf00      	nop
    }
  }
}
 8005908:	bf00      	nop
 800590a:	3708      	adds	r7, #8
 800590c:	46bd      	mov	sp, r7
 800590e:	bd80      	pop	{r7, pc}
 8005910:	200143e4 	.word	0x200143e4

08005914 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005914:	b580      	push	{r7, lr}
 8005916:	b08c      	sub	sp, #48	@ 0x30
 8005918:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800591a:	2301      	movs	r3, #1
 800591c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800591e:	1d3b      	adds	r3, r7, #4
 8005920:	3301      	adds	r3, #1
 8005922:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005928:	4b32      	ldr	r3, [pc, #200]	@ (80059f4 <_TrySendOverflowPacket+0xe0>)
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800592e:	e00b      	b.n	8005948 <_TrySendOverflowPacket+0x34>
 8005930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005932:	b2da      	uxtb	r2, r3
 8005934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005936:	1c59      	adds	r1, r3, #1
 8005938:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800593a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800593e:	b2d2      	uxtb	r2, r2
 8005940:	701a      	strb	r2, [r3, #0]
 8005942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005944:	09db      	lsrs	r3, r3, #7
 8005946:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800594a:	2b7f      	cmp	r3, #127	@ 0x7f
 800594c:	d8f0      	bhi.n	8005930 <_TrySendOverflowPacket+0x1c>
 800594e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005950:	1c5a      	adds	r2, r3, #1
 8005952:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005954:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005956:	b2d2      	uxtb	r2, r2
 8005958:	701a      	strb	r2, [r3, #0]
 800595a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800595c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800595e:	4b26      	ldr	r3, [pc, #152]	@ (80059f8 <_TrySendOverflowPacket+0xe4>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005964:	4b23      	ldr	r3, [pc, #140]	@ (80059f4 <_TrySendOverflowPacket+0xe0>)
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	69ba      	ldr	r2, [r7, #24]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	627b      	str	r3, [r7, #36]	@ 0x24
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	623b      	str	r3, [r7, #32]
 8005976:	e00b      	b.n	8005990 <_TrySendOverflowPacket+0x7c>
 8005978:	6a3b      	ldr	r3, [r7, #32]
 800597a:	b2da      	uxtb	r2, r3
 800597c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597e:	1c59      	adds	r1, r3, #1
 8005980:	6279      	str	r1, [r7, #36]	@ 0x24
 8005982:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005986:	b2d2      	uxtb	r2, r2
 8005988:	701a      	strb	r2, [r3, #0]
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	09db      	lsrs	r3, r3, #7
 800598e:	623b      	str	r3, [r7, #32]
 8005990:	6a3b      	ldr	r3, [r7, #32]
 8005992:	2b7f      	cmp	r3, #127	@ 0x7f
 8005994:	d8f0      	bhi.n	8005978 <_TrySendOverflowPacket+0x64>
 8005996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005998:	1c5a      	adds	r2, r3, #1
 800599a:	627a      	str	r2, [r7, #36]	@ 0x24
 800599c:	6a3a      	ldr	r2, [r7, #32]
 800599e:	b2d2      	uxtb	r2, r2
 80059a0:	701a      	strb	r2, [r3, #0]
 80059a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059a4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80059a6:	4b13      	ldr	r3, [pc, #76]	@ (80059f4 <_TrySendOverflowPacket+0xe0>)
 80059a8:	785b      	ldrb	r3, [r3, #1]
 80059aa:	4618      	mov	r0, r3
 80059ac:	1d3b      	adds	r3, r7, #4
 80059ae:	69fa      	ldr	r2, [r7, #28]
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	461a      	mov	r2, r3
 80059b4:	1d3b      	adds	r3, r7, #4
 80059b6:	4619      	mov	r1, r3
 80059b8:	f7fa fc2a 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80059bc:	4603      	mov	r3, r0
 80059be:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80059c0:	f7ff fae0 	bl	8004f84 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d009      	beq.n	80059de <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80059ca:	4a0a      	ldr	r2, [pc, #40]	@ (80059f4 <_TrySendOverflowPacket+0xe0>)
 80059cc:	69bb      	ldr	r3, [r7, #24]
 80059ce:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80059d0:	4b08      	ldr	r3, [pc, #32]	@ (80059f4 <_TrySendOverflowPacket+0xe0>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	3b01      	subs	r3, #1
 80059d6:	b2da      	uxtb	r2, r3
 80059d8:	4b06      	ldr	r3, [pc, #24]	@ (80059f4 <_TrySendOverflowPacket+0xe0>)
 80059da:	701a      	strb	r2, [r3, #0]
 80059dc:	e004      	b.n	80059e8 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80059de:	4b05      	ldr	r3, [pc, #20]	@ (80059f4 <_TrySendOverflowPacket+0xe0>)
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	3301      	adds	r3, #1
 80059e4:	4a03      	ldr	r2, [pc, #12]	@ (80059f4 <_TrySendOverflowPacket+0xe0>)
 80059e6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80059e8:	693b      	ldr	r3, [r7, #16]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3730      	adds	r7, #48	@ 0x30
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	200143e4 	.word	0x200143e4
 80059f8:	e0001004 	.word	0xe0001004

080059fc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b08a      	sub	sp, #40	@ 0x28
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	60f8      	str	r0, [r7, #12]
 8005a04:	60b9      	str	r1, [r7, #8]
 8005a06:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005a08:	4b6d      	ldr	r3, [pc, #436]	@ (8005bc0 <_SendPacket+0x1c4>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d010      	beq.n	8005a32 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005a10:	4b6b      	ldr	r3, [pc, #428]	@ (8005bc0 <_SendPacket+0x1c4>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f000 80a5 	beq.w	8005b64 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005a1a:	4b69      	ldr	r3, [pc, #420]	@ (8005bc0 <_SendPacket+0x1c4>)
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d109      	bne.n	8005a36 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005a22:	f7ff ff77 	bl	8005914 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005a26:	4b66      	ldr	r3, [pc, #408]	@ (8005bc0 <_SendPacket+0x1c4>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	f040 809c 	bne.w	8005b68 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 8005a30:	e001      	b.n	8005a36 <_SendPacket+0x3a>
    goto Send;
 8005a32:	bf00      	nop
 8005a34:	e000      	b.n	8005a38 <_SendPacket+0x3c>
Send:
 8005a36:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b1f      	cmp	r3, #31
 8005a3c:	d809      	bhi.n	8005a52 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005a3e:	4b60      	ldr	r3, [pc, #384]	@ (8005bc0 <_SendPacket+0x1c4>)
 8005a40:	69da      	ldr	r2, [r3, #28]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	fa22 f303 	lsr.w	r3, r2, r3
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f040 808d 	bne.w	8005b6c <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2b17      	cmp	r3, #23
 8005a56:	d807      	bhi.n	8005a68 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	b2da      	uxtb	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	701a      	strb	r2, [r3, #0]
 8005a66:	e03d      	b.n	8005ae4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a74:	d912      	bls.n	8005a9c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005a76:	69fb      	ldr	r3, [r7, #28]
 8005a78:	09da      	lsrs	r2, r3, #7
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	60fb      	str	r3, [r7, #12]
 8005a80:	b2d2      	uxtb	r2, r2
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	3a01      	subs	r2, #1
 8005a8e:	60fa      	str	r2, [r7, #12]
 8005a90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	701a      	strb	r2, [r3, #0]
 8005a9a:	e006      	b.n	8005aaa <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	60fb      	str	r3, [r7, #12]
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2b7f      	cmp	r3, #127	@ 0x7f
 8005aae:	d912      	bls.n	8005ad6 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	09da      	lsrs	r2, r3, #7
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	3b01      	subs	r3, #1
 8005ab8:	60fb      	str	r3, [r7, #12]
 8005aba:	b2d2      	uxtb	r2, r2
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	3a01      	subs	r2, #1
 8005ac8:	60fa      	str	r2, [r7, #12]
 8005aca:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005ace:	b2da      	uxtb	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	701a      	strb	r2, [r3, #0]
 8005ad4:	e006      	b.n	8005ae4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	60fb      	str	r3, [r7, #12]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	b2da      	uxtb	r2, r3
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005ae4:	4b37      	ldr	r3, [pc, #220]	@ (8005bc4 <_SendPacket+0x1c8>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005aea:	4b35      	ldr	r3, [pc, #212]	@ (8005bc0 <_SendPacket+0x1c4>)
 8005aec:	68db      	ldr	r3, [r3, #12]
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	623b      	str	r3, [r7, #32]
 8005afc:	e00b      	b.n	8005b16 <_SendPacket+0x11a>
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b04:	1c59      	adds	r1, r3, #1
 8005b06:	6279      	str	r1, [r7, #36]	@ 0x24
 8005b08:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b0c:	b2d2      	uxtb	r2, r2
 8005b0e:	701a      	strb	r2, [r3, #0]
 8005b10:	6a3b      	ldr	r3, [r7, #32]
 8005b12:	09db      	lsrs	r3, r3, #7
 8005b14:	623b      	str	r3, [r7, #32]
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b1a:	d8f0      	bhi.n	8005afe <_SendPacket+0x102>
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1e:	1c5a      	adds	r2, r3, #1
 8005b20:	627a      	str	r2, [r7, #36]	@ 0x24
 8005b22:	6a3a      	ldr	r2, [r7, #32]
 8005b24:	b2d2      	uxtb	r2, r2
 8005b26:	701a      	strb	r2, [r3, #0]
 8005b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2a:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005b2c:	4b24      	ldr	r3, [pc, #144]	@ (8005bc0 <_SendPacket+0x1c4>)
 8005b2e:	785b      	ldrb	r3, [r3, #1]
 8005b30:	4618      	mov	r0, r3
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	1ad3      	subs	r3, r2, r3
 8005b38:	461a      	mov	r2, r3
 8005b3a:	68f9      	ldr	r1, [r7, #12]
 8005b3c:	f7fa fb68 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005b40:	4603      	mov	r3, r0
 8005b42:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005b44:	f7ff fa1e 	bl	8004f84 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d003      	beq.n	8005b56 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005b4e:	4a1c      	ldr	r2, [pc, #112]	@ (8005bc0 <_SendPacket+0x1c4>)
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	60d3      	str	r3, [r2, #12]
 8005b54:	e00b      	b.n	8005b6e <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005b56:	4b1a      	ldr	r3, [pc, #104]	@ (8005bc0 <_SendPacket+0x1c4>)
 8005b58:	781b      	ldrb	r3, [r3, #0]
 8005b5a:	3301      	adds	r3, #1
 8005b5c:	b2da      	uxtb	r2, r3
 8005b5e:	4b18      	ldr	r3, [pc, #96]	@ (8005bc0 <_SendPacket+0x1c4>)
 8005b60:	701a      	strb	r2, [r3, #0]
 8005b62:	e004      	b.n	8005b6e <_SendPacket+0x172>
    goto SendDone;
 8005b64:	bf00      	nop
 8005b66:	e002      	b.n	8005b6e <_SendPacket+0x172>
      goto SendDone;
 8005b68:	bf00      	nop
 8005b6a:	e000      	b.n	8005b6e <_SendPacket+0x172>
      goto SendDone;
 8005b6c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005b6e:	4b14      	ldr	r3, [pc, #80]	@ (8005bc0 <_SendPacket+0x1c4>)
 8005b70:	7e1b      	ldrb	r3, [r3, #24]
 8005b72:	4619      	mov	r1, r3
 8005b74:	4a14      	ldr	r2, [pc, #80]	@ (8005bc8 <_SendPacket+0x1cc>)
 8005b76:	460b      	mov	r3, r1
 8005b78:	005b      	lsls	r3, r3, #1
 8005b7a:	440b      	add	r3, r1
 8005b7c:	00db      	lsls	r3, r3, #3
 8005b7e:	4413      	add	r3, r2
 8005b80:	336c      	adds	r3, #108	@ 0x6c
 8005b82:	681a      	ldr	r2, [r3, #0]
 8005b84:	4b0e      	ldr	r3, [pc, #56]	@ (8005bc0 <_SendPacket+0x1c4>)
 8005b86:	7e1b      	ldrb	r3, [r3, #24]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	490f      	ldr	r1, [pc, #60]	@ (8005bc8 <_SendPacket+0x1cc>)
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	005b      	lsls	r3, r3, #1
 8005b90:	4403      	add	r3, r0
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	440b      	add	r3, r1
 8005b96:	3370      	adds	r3, #112	@ 0x70
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d00b      	beq.n	8005bb6 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005b9e:	4b08      	ldr	r3, [pc, #32]	@ (8005bc0 <_SendPacket+0x1c4>)
 8005ba0:	789b      	ldrb	r3, [r3, #2]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d107      	bne.n	8005bb6 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005ba6:	4b06      	ldr	r3, [pc, #24]	@ (8005bc0 <_SendPacket+0x1c4>)
 8005ba8:	2201      	movs	r2, #1
 8005baa:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005bac:	f7ff fe42 	bl	8005834 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005bb0:	4b03      	ldr	r3, [pc, #12]	@ (8005bc0 <_SendPacket+0x1c4>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005bb6:	bf00      	nop
 8005bb8:	3728      	adds	r7, #40	@ 0x28
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}
 8005bbe:	bf00      	nop
 8005bc0:	200143e4 	.word	0x200143e4
 8005bc4:	e0001004 	.word	0xe0001004
 8005bc8:	20012f24 	.word	0x20012f24

08005bcc <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b08a      	sub	sp, #40	@ 0x28
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	3301      	adds	r3, #1
 8005be2:	2b80      	cmp	r3, #128	@ 0x80
 8005be4:	d80a      	bhi.n	8005bfc <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	1c59      	adds	r1, r3, #1
 8005bec:	687a      	ldr	r2, [r7, #4]
 8005bee:	6051      	str	r1, [r2, #4]
 8005bf0:	78fa      	ldrb	r2, [r7, #3]
 8005bf2:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	1c5a      	adds	r2, r3, #1
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	2b80      	cmp	r3, #128	@ 0x80
 8005c02:	d15a      	bne.n	8005cba <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	691a      	ldr	r2, [r3, #16]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	b2d2      	uxtb	r2, r2
 8005c0e:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	68db      	ldr	r3, [r3, #12]
 8005c1a:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	623b      	str	r3, [r7, #32]
 8005c24:	e00b      	b.n	8005c3e <_StoreChar+0x72>
 8005c26:	6a3b      	ldr	r3, [r7, #32]
 8005c28:	b2da      	uxtb	r2, r3
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2c:	1c59      	adds	r1, r3, #1
 8005c2e:	6279      	str	r1, [r7, #36]	@ 0x24
 8005c30:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c34:	b2d2      	uxtb	r2, r2
 8005c36:	701a      	strb	r2, [r3, #0]
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	09db      	lsrs	r3, r3, #7
 8005c3c:	623b      	str	r3, [r7, #32]
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c42:	d8f0      	bhi.n	8005c26 <_StoreChar+0x5a>
 8005c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c46:	1c5a      	adds	r2, r3, #1
 8005c48:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c4a:	6a3a      	ldr	r2, [r7, #32]
 8005c4c:	b2d2      	uxtb	r2, r2
 8005c4e:	701a      	strb	r2, [r3, #0]
 8005c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c52:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	61fb      	str	r3, [r7, #28]
 8005c58:	2300      	movs	r3, #0
 8005c5a:	61bb      	str	r3, [r7, #24]
 8005c5c:	e00b      	b.n	8005c76 <_StoreChar+0xaa>
 8005c5e:	69bb      	ldr	r3, [r7, #24]
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	1c59      	adds	r1, r3, #1
 8005c66:	61f9      	str	r1, [r7, #28]
 8005c68:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c6c:	b2d2      	uxtb	r2, r2
 8005c6e:	701a      	strb	r2, [r3, #0]
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	09db      	lsrs	r3, r3, #7
 8005c74:	61bb      	str	r3, [r7, #24]
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c7a:	d8f0      	bhi.n	8005c5e <_StoreChar+0x92>
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	1c5a      	adds	r2, r3, #1
 8005c80:	61fa      	str	r2, [r7, #28]
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	b2d2      	uxtb	r2, r2
 8005c86:	701a      	strb	r2, [r3, #0]
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	221a      	movs	r2, #26
 8005c92:	6939      	ldr	r1, [r7, #16]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7ff feb1 	bl	80059fc <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7ff fdbc 	bl	800581c <_PreparePacket>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	1c5a      	adds	r2, r3, #1
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	611a      	str	r2, [r3, #16]
  }
}
 8005cba:	bf00      	nop
 8005cbc:	3728      	adds	r7, #40	@ 0x28
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
	...

08005cc4 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b08a      	sub	sp, #40	@ 0x28
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	60f8      	str	r0, [r7, #12]
 8005ccc:	60b9      	str	r1, [r7, #8]
 8005cce:	607a      	str	r2, [r7, #4]
 8005cd0:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005cde:	e007      	b.n	8005cf0 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005ce0:	6a3a      	ldr	r2, [r7, #32]
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce8:	623b      	str	r3, [r7, #32]
    Width++;
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	3301      	adds	r3, #1
 8005cee:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005cf0:	6a3a      	ldr	r2, [r7, #32]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d2f3      	bcs.n	8005ce0 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005cf8:	683a      	ldr	r2, [r7, #0]
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d901      	bls.n	8005d04 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d06:	f003 0301 	and.w	r3, r3, #1
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d000      	beq.n	8005d10 <_PrintUnsigned+0x4c>
 8005d0e:	e01f      	b.n	8005d50 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8005d10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d01c      	beq.n	8005d50 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d18:	f003 0302 	and.w	r3, r3, #2
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d005      	beq.n	8005d2c <_PrintUnsigned+0x68>
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d102      	bne.n	8005d2c <_PrintUnsigned+0x68>
        c = '0';
 8005d26:	2330      	movs	r3, #48	@ 0x30
 8005d28:	76fb      	strb	r3, [r7, #27]
 8005d2a:	e001      	b.n	8005d30 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8005d2c:	2320      	movs	r3, #32
 8005d2e:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005d30:	e007      	b.n	8005d42 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8005d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d34:	3b01      	subs	r3, #1
 8005d36:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8005d38:	7efb      	ldrb	r3, [r7, #27]
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f7ff ff45 	bl	8005bcc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d003      	beq.n	8005d50 <_PrintUnsigned+0x8c>
 8005d48:	69fa      	ldr	r2, [r7, #28]
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d3f0      	bcc.n	8005d32 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d903      	bls.n	8005d5e <_PrintUnsigned+0x9a>
      NumDigits--;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	3b01      	subs	r3, #1
 8005d5a:	603b      	str	r3, [r7, #0]
 8005d5c:	e009      	b.n	8005d72 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8005d5e:	68ba      	ldr	r2, [r7, #8]
 8005d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d66:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005d68:	697a      	ldr	r2, [r7, #20]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d200      	bcs.n	8005d72 <_PrintUnsigned+0xae>
        break;
 8005d70:	e005      	b.n	8005d7e <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8005d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	fb02 f303 	mul.w	r3, r2, r3
 8005d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005d7c:	e7e8      	b.n	8005d50 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d86:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d8c:	fb02 f303 	mul.w	r3, r2, r3
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	1ad3      	subs	r3, r2, r3
 8005d94:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005d96:	4a15      	ldr	r2, [pc, #84]	@ (8005dec <_PrintUnsigned+0x128>)
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	4619      	mov	r1, r3
 8005da0:	68f8      	ldr	r0, [r7, #12]
 8005da2:	f7ff ff13 	bl	8005bcc <_StoreChar>
    Digit /= Base;
 8005da6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dae:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8005db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1e3      	bne.n	8005d7e <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005db8:	f003 0301 	and.w	r3, r3, #1
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d011      	beq.n	8005de4 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8005dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d00e      	beq.n	8005de4 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005dc6:	e006      	b.n	8005dd6 <_PrintUnsigned+0x112>
        FieldWidth--;
 8005dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8005dce:	2120      	movs	r1, #32
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f7ff fefb 	bl	8005bcc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005dd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d003      	beq.n	8005de4 <_PrintUnsigned+0x120>
 8005ddc:	69fa      	ldr	r2, [r7, #28]
 8005dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d3f1      	bcc.n	8005dc8 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8005de4:	bf00      	nop
 8005de6:	3728      	adds	r7, #40	@ 0x28
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	08007e30 	.word	0x08007e30

08005df0 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b088      	sub	sp, #32
 8005df4:	af02      	add	r7, sp, #8
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	607a      	str	r2, [r7, #4]
 8005dfc:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	bfb8      	it	lt
 8005e04:	425b      	neglt	r3, r3
 8005e06:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005e0c:	e007      	b.n	8005e1e <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	693a      	ldr	r2, [r7, #16]
 8005e12:	fb92 f3f3 	sdiv	r3, r2, r3
 8005e16:	613b      	str	r3, [r7, #16]
    Width++;
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	daf3      	bge.n	8005e0e <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	d901      	bls.n	8005e32 <_PrintInt+0x42>
    Width = NumDigits;
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005e32:	6a3b      	ldr	r3, [r7, #32]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00a      	beq.n	8005e4e <_PrintInt+0x5e>
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	db04      	blt.n	8005e48 <_PrintInt+0x58>
 8005e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e40:	f003 0304 	and.w	r3, r3, #4
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d002      	beq.n	8005e4e <_PrintInt+0x5e>
    FieldWidth--;
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e50:	f003 0302 	and.w	r3, r3, #2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d002      	beq.n	8005e5e <_PrintInt+0x6e>
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d016      	beq.n	8005e8c <_PrintInt+0x9c>
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d111      	bne.n	8005e8c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00e      	beq.n	8005e8c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e6e:	e006      	b.n	8005e7e <_PrintInt+0x8e>
        FieldWidth--;
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005e76:	2120      	movs	r1, #32
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f7ff fea7 	bl	8005bcc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d003      	beq.n	8005e8c <_PrintInt+0x9c>
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	6a3b      	ldr	r3, [r7, #32]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d3f1      	bcc.n	8005e70 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	da07      	bge.n	8005ea2 <_PrintInt+0xb2>
    v = -v;
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	425b      	negs	r3, r3
 8005e96:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005e98:	212d      	movs	r1, #45	@ 0x2d
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f7ff fe96 	bl	8005bcc <_StoreChar>
 8005ea0:	e008      	b.n	8005eb4 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea4:	f003 0304 	and.w	r3, r3, #4
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d003      	beq.n	8005eb4 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005eac:	212b      	movs	r1, #43	@ 0x2b
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f7ff fe8c 	bl	8005bcc <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb6:	f003 0302 	and.w	r3, r3, #2
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d019      	beq.n	8005ef2 <_PrintInt+0x102>
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d114      	bne.n	8005ef2 <_PrintInt+0x102>
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d111      	bne.n	8005ef2 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00e      	beq.n	8005ef2 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ed4:	e006      	b.n	8005ee4 <_PrintInt+0xf4>
        FieldWidth--;
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005edc:	2130      	movs	r1, #48	@ 0x30
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f7ff fe74 	bl	8005bcc <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <_PrintInt+0x102>
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d3f1      	bcc.n	8005ed6 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005ef2:	68b9      	ldr	r1, [r7, #8]
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef6:	9301      	str	r3, [sp, #4]
 8005ef8:	6a3b      	ldr	r3, [r7, #32]
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f7ff fedf 	bl	8005cc4 <_PrintUnsigned>
}
 8005f06:	bf00      	nop
 8005f08:	3718      	adds	r7, #24
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}
	...

08005f10 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b098      	sub	sp, #96	@ 0x60
 8005f14:	af02      	add	r7, sp, #8
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f1c:	f3ef 8311 	mrs	r3, BASEPRI
 8005f20:	f04f 0120 	mov.w	r1, #32
 8005f24:	f381 8811 	msr	BASEPRI, r1
 8005f28:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f2a:	48b7      	ldr	r0, [pc, #732]	@ (8006208 <_VPrintTarget+0x2f8>)
 8005f2c:	f7ff fc76 	bl	800581c <_PreparePacket>
 8005f30:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005f32:	4bb5      	ldr	r3, [pc, #724]	@ (8006208 <_VPrintTarget+0x2f8>)
 8005f34:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005f36:	2300      	movs	r3, #0
 8005f38:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005f3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f3c:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	3301      	adds	r3, #1
 8005f42:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	3301      	adds	r3, #1
 8005f54:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005f56:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	f000 8183 	beq.w	8006266 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005f60:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005f64:	2b25      	cmp	r3, #37	@ 0x25
 8005f66:	f040 8170 	bne.w	800624a <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8005f7a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005f7e:	3b23      	subs	r3, #35	@ 0x23
 8005f80:	2b0d      	cmp	r3, #13
 8005f82:	d83f      	bhi.n	8006004 <_VPrintTarget+0xf4>
 8005f84:	a201      	add	r2, pc, #4	@ (adr r2, 8005f8c <_VPrintTarget+0x7c>)
 8005f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8a:	bf00      	nop
 8005f8c:	08005ff5 	.word	0x08005ff5
 8005f90:	08006005 	.word	0x08006005
 8005f94:	08006005 	.word	0x08006005
 8005f98:	08006005 	.word	0x08006005
 8005f9c:	08006005 	.word	0x08006005
 8005fa0:	08006005 	.word	0x08006005
 8005fa4:	08006005 	.word	0x08006005
 8005fa8:	08006005 	.word	0x08006005
 8005fac:	08005fe5 	.word	0x08005fe5
 8005fb0:	08006005 	.word	0x08006005
 8005fb4:	08005fc5 	.word	0x08005fc5
 8005fb8:	08006005 	.word	0x08006005
 8005fbc:	08006005 	.word	0x08006005
 8005fc0:	08005fd5 	.word	0x08005fd5
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005fc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fc6:	f043 0301 	orr.w	r3, r3, #1
 8005fca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	e01a      	b.n	800600a <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005fd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fd6:	f043 0302 	orr.w	r3, r3, #2
 8005fda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	3301      	adds	r3, #1
 8005fe0:	60fb      	str	r3, [r7, #12]
 8005fe2:	e012      	b.n	800600a <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005fe4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005fe6:	f043 0304 	orr.w	r3, r3, #4
 8005fea:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	e00a      	b.n	800600a <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005ff4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ff6:	f043 0308 	orr.w	r3, r3, #8
 8005ffa:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	3301      	adds	r3, #1
 8006000:	60fb      	str	r3, [r7, #12]
 8006002:	e002      	b.n	800600a <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006004:	2300      	movs	r3, #0
 8006006:	653b      	str	r3, [r7, #80]	@ 0x50
 8006008:	bf00      	nop
        }
      } while (v);
 800600a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1b0      	bne.n	8005f72 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8006010:	2300      	movs	r3, #0
 8006012:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 800601c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006020:	2b2f      	cmp	r3, #47	@ 0x2f
 8006022:	d912      	bls.n	800604a <_VPrintTarget+0x13a>
 8006024:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006028:	2b39      	cmp	r3, #57	@ 0x39
 800602a:	d80e      	bhi.n	800604a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	3301      	adds	r3, #1
 8006030:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8006032:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006034:	4613      	mov	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	461a      	mov	r2, r3
 800603e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006042:	4413      	add	r3, r2
 8006044:	3b30      	subs	r3, #48	@ 0x30
 8006046:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8006048:	e7e4      	b.n	8006014 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800604a:	2300      	movs	r3, #0
 800604c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8006056:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800605a:	2b2e      	cmp	r3, #46	@ 0x2e
 800605c:	d11d      	bne.n	800609a <_VPrintTarget+0x18a>
        sFormat++;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	3301      	adds	r3, #1
 8006062:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 800606c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006070:	2b2f      	cmp	r3, #47	@ 0x2f
 8006072:	d912      	bls.n	800609a <_VPrintTarget+0x18a>
 8006074:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006078:	2b39      	cmp	r3, #57	@ 0x39
 800607a:	d80e      	bhi.n	800609a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	3301      	adds	r3, #1
 8006080:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8006082:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006084:	4613      	mov	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	4413      	add	r3, r2
 800608a:	005b      	lsls	r3, r3, #1
 800608c:	461a      	mov	r2, r3
 800608e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006092:	4413      	add	r3, r2
 8006094:	3b30      	subs	r3, #48	@ 0x30
 8006096:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8006098:	e7e4      	b.n	8006064 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80060a2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80060a6:	2b6c      	cmp	r3, #108	@ 0x6c
 80060a8:	d003      	beq.n	80060b2 <_VPrintTarget+0x1a2>
 80060aa:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80060ae:	2b68      	cmp	r3, #104	@ 0x68
 80060b0:	d107      	bne.n	80060c2 <_VPrintTarget+0x1b2>
          c = *sFormat;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	781b      	ldrb	r3, [r3, #0]
 80060b6:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	3301      	adds	r3, #1
 80060be:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 80060c0:	e7ef      	b.n	80060a2 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 80060c2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80060c6:	2b25      	cmp	r3, #37	@ 0x25
 80060c8:	f000 80b3 	beq.w	8006232 <_VPrintTarget+0x322>
 80060cc:	2b25      	cmp	r3, #37	@ 0x25
 80060ce:	f2c0 80b7 	blt.w	8006240 <_VPrintTarget+0x330>
 80060d2:	2b78      	cmp	r3, #120	@ 0x78
 80060d4:	f300 80b4 	bgt.w	8006240 <_VPrintTarget+0x330>
 80060d8:	2b58      	cmp	r3, #88	@ 0x58
 80060da:	f2c0 80b1 	blt.w	8006240 <_VPrintTarget+0x330>
 80060de:	3b58      	subs	r3, #88	@ 0x58
 80060e0:	2b20      	cmp	r3, #32
 80060e2:	f200 80ad 	bhi.w	8006240 <_VPrintTarget+0x330>
 80060e6:	a201      	add	r2, pc, #4	@ (adr r2, 80060ec <_VPrintTarget+0x1dc>)
 80060e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ec:	080061e3 	.word	0x080061e3
 80060f0:	08006241 	.word	0x08006241
 80060f4:	08006241 	.word	0x08006241
 80060f8:	08006241 	.word	0x08006241
 80060fc:	08006241 	.word	0x08006241
 8006100:	08006241 	.word	0x08006241
 8006104:	08006241 	.word	0x08006241
 8006108:	08006241 	.word	0x08006241
 800610c:	08006241 	.word	0x08006241
 8006110:	08006241 	.word	0x08006241
 8006114:	08006241 	.word	0x08006241
 8006118:	08006171 	.word	0x08006171
 800611c:	08006197 	.word	0x08006197
 8006120:	08006241 	.word	0x08006241
 8006124:	08006241 	.word	0x08006241
 8006128:	08006241 	.word	0x08006241
 800612c:	08006241 	.word	0x08006241
 8006130:	08006241 	.word	0x08006241
 8006134:	08006241 	.word	0x08006241
 8006138:	08006241 	.word	0x08006241
 800613c:	08006241 	.word	0x08006241
 8006140:	08006241 	.word	0x08006241
 8006144:	08006241 	.word	0x08006241
 8006148:	08006241 	.word	0x08006241
 800614c:	0800620d 	.word	0x0800620d
 8006150:	08006241 	.word	0x08006241
 8006154:	08006241 	.word	0x08006241
 8006158:	08006241 	.word	0x08006241
 800615c:	08006241 	.word	0x08006241
 8006160:	080061bd 	.word	0x080061bd
 8006164:	08006241 	.word	0x08006241
 8006168:	08006241 	.word	0x08006241
 800616c:	080061e3 	.word	0x080061e3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	1d19      	adds	r1, r3, #4
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	6011      	str	r1, [r2, #0]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 800617e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006180:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 8006184:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8006188:	f107 0314 	add.w	r3, r7, #20
 800618c:	4611      	mov	r1, r2
 800618e:	4618      	mov	r0, r3
 8006190:	f7ff fd1c 	bl	8005bcc <_StoreChar>
        break;
 8006194:	e055      	b.n	8006242 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	1d19      	adds	r1, r3, #4
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	6011      	str	r1, [r2, #0]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 80061a4:	f107 0014 	add.w	r0, r7, #20
 80061a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061aa:	9301      	str	r3, [sp, #4]
 80061ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061b2:	220a      	movs	r2, #10
 80061b4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80061b6:	f7ff fe1b 	bl	8005df0 <_PrintInt>
        break;
 80061ba:	e042      	b.n	8006242 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	1d19      	adds	r1, r3, #4
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	6011      	str	r1, [r2, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 80061ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80061cc:	f107 0014 	add.w	r0, r7, #20
 80061d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061d2:	9301      	str	r3, [sp, #4]
 80061d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061da:	220a      	movs	r2, #10
 80061dc:	f7ff fd72 	bl	8005cc4 <_PrintUnsigned>
        break;
 80061e0:	e02f      	b.n	8006242 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	1d19      	adds	r1, r3, #4
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	6011      	str	r1, [r2, #0]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80061f0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80061f2:	f107 0014 	add.w	r0, r7, #20
 80061f6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80061f8:	9301      	str	r3, [sp, #4]
 80061fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006200:	2210      	movs	r2, #16
 8006202:	f7ff fd5f 	bl	8005cc4 <_PrintUnsigned>
        break;
 8006206:	e01c      	b.n	8006242 <_VPrintTarget+0x332>
 8006208:	20014414 	.word	0x20014414
      case 'p':
        v = va_arg(*pParamList, int);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	1d19      	adds	r1, r3, #4
 8006212:	687a      	ldr	r2, [r7, #4]
 8006214:	6011      	str	r1, [r2, #0]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 800621a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800621c:	f107 0014 	add.w	r0, r7, #20
 8006220:	2300      	movs	r3, #0
 8006222:	9301      	str	r3, [sp, #4]
 8006224:	2308      	movs	r3, #8
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	2308      	movs	r3, #8
 800622a:	2210      	movs	r2, #16
 800622c:	f7ff fd4a 	bl	8005cc4 <_PrintUnsigned>
        break;
 8006230:	e007      	b.n	8006242 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8006232:	f107 0314 	add.w	r3, r7, #20
 8006236:	2125      	movs	r1, #37	@ 0x25
 8006238:	4618      	mov	r0, r3
 800623a:	f7ff fcc7 	bl	8005bcc <_StoreChar>
        break;
 800623e:	e000      	b.n	8006242 <_VPrintTarget+0x332>
      default:
        break;
 8006240:	bf00      	nop
      }
      sFormat++;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	3301      	adds	r3, #1
 8006246:	60fb      	str	r3, [r7, #12]
 8006248:	e007      	b.n	800625a <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800624a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800624e:	f107 0314 	add.w	r3, r7, #20
 8006252:	4611      	mov	r1, r2
 8006254:	4618      	mov	r0, r3
 8006256:	f7ff fcb9 	bl	8005bcc <_StoreChar>
    }
  } while (*sFormat);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	f47f ae72 	bne.w	8005f48 <_VPrintTarget+0x38>
 8006264:	e000      	b.n	8006268 <_VPrintTarget+0x358>
      break;
 8006266:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626a:	2b00      	cmp	r3, #0
 800626c:	d041      	beq.n	80062f2 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800626e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	b2d2      	uxtb	r2, r2
 8006274:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	643b      	str	r3, [r7, #64]	@ 0x40
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800627e:	e00b      	b.n	8006298 <_VPrintTarget+0x388>
 8006280:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006282:	b2da      	uxtb	r2, r3
 8006284:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006286:	1c59      	adds	r1, r3, #1
 8006288:	6439      	str	r1, [r7, #64]	@ 0x40
 800628a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800628e:	b2d2      	uxtb	r2, r2
 8006290:	701a      	strb	r2, [r3, #0]
 8006292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006294:	09db      	lsrs	r3, r3, #7
 8006296:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006298:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800629a:	2b7f      	cmp	r3, #127	@ 0x7f
 800629c:	d8f0      	bhi.n	8006280 <_VPrintTarget+0x370>
 800629e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062a0:	1c5a      	adds	r2, r3, #1
 80062a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80062a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80062a6:	b2d2      	uxtb	r2, r2
 80062a8:	701a      	strb	r2, [r3, #0]
 80062aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062ac:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062b2:	2300      	movs	r3, #0
 80062b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80062b6:	e00b      	b.n	80062d0 <_VPrintTarget+0x3c0>
 80062b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ba:	b2da      	uxtb	r2, r3
 80062bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062be:	1c59      	adds	r1, r3, #1
 80062c0:	63b9      	str	r1, [r7, #56]	@ 0x38
 80062c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062c6:	b2d2      	uxtb	r2, r2
 80062c8:	701a      	strb	r2, [r3, #0]
 80062ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062cc:	09db      	lsrs	r3, r3, #7
 80062ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80062d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80062d4:	d8f0      	bhi.n	80062b8 <_VPrintTarget+0x3a8>
 80062d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d8:	1c5a      	adds	r2, r3, #1
 80062da:	63ba      	str	r2, [r7, #56]	@ 0x38
 80062dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062de:	b2d2      	uxtb	r2, r2
 80062e0:	701a      	strb	r2, [r3, #0]
 80062e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e4:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	69b9      	ldr	r1, [r7, #24]
 80062ea:	221a      	movs	r2, #26
 80062ec:	4618      	mov	r0, r3
 80062ee:	f7ff fb85 	bl	80059fc <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80062f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062f4:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80062f8:	bf00      	nop
 80062fa:	3758      	adds	r7, #88	@ 0x58
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af02      	add	r7, sp, #8
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
 800630c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800630e:	2300      	movs	r3, #0
 8006310:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006314:	4917      	ldr	r1, [pc, #92]	@ (8006374 <SEGGER_SYSVIEW_Init+0x74>)
 8006316:	4818      	ldr	r0, [pc, #96]	@ (8006378 <SEGGER_SYSVIEW_Init+0x78>)
 8006318:	f7ff f960 	bl	80055dc <SEGGER_RTT_AllocUpBuffer>
 800631c:	4603      	mov	r3, r0
 800631e:	b2da      	uxtb	r2, r3
 8006320:	4b16      	ldr	r3, [pc, #88]	@ (800637c <SEGGER_SYSVIEW_Init+0x7c>)
 8006322:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8006324:	4b15      	ldr	r3, [pc, #84]	@ (800637c <SEGGER_SYSVIEW_Init+0x7c>)
 8006326:	785a      	ldrb	r2, [r3, #1]
 8006328:	4b14      	ldr	r3, [pc, #80]	@ (800637c <SEGGER_SYSVIEW_Init+0x7c>)
 800632a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800632c:	4b13      	ldr	r3, [pc, #76]	@ (800637c <SEGGER_SYSVIEW_Init+0x7c>)
 800632e:	7e1b      	ldrb	r3, [r3, #24]
 8006330:	4618      	mov	r0, r3
 8006332:	2300      	movs	r3, #0
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	2308      	movs	r3, #8
 8006338:	4a11      	ldr	r2, [pc, #68]	@ (8006380 <SEGGER_SYSVIEW_Init+0x80>)
 800633a:	490f      	ldr	r1, [pc, #60]	@ (8006378 <SEGGER_SYSVIEW_Init+0x78>)
 800633c:	f7ff f9d2 	bl	80056e4 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8006340:	4b0e      	ldr	r3, [pc, #56]	@ (800637c <SEGGER_SYSVIEW_Init+0x7c>)
 8006342:	2200      	movs	r2, #0
 8006344:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006346:	4b0f      	ldr	r3, [pc, #60]	@ (8006384 <SEGGER_SYSVIEW_Init+0x84>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	4a0c      	ldr	r2, [pc, #48]	@ (800637c <SEGGER_SYSVIEW_Init+0x7c>)
 800634c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800634e:	4a0b      	ldr	r2, [pc, #44]	@ (800637c <SEGGER_SYSVIEW_Init+0x7c>)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006354:	4a09      	ldr	r2, [pc, #36]	@ (800637c <SEGGER_SYSVIEW_Init+0x7c>)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800635a:	4a08      	ldr	r2, [pc, #32]	@ (800637c <SEGGER_SYSVIEW_Init+0x7c>)
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006360:	4a06      	ldr	r2, [pc, #24]	@ (800637c <SEGGER_SYSVIEW_Init+0x7c>)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006366:	4b05      	ldr	r3, [pc, #20]	@ (800637c <SEGGER_SYSVIEW_Init+0x7c>)
 8006368:	2200      	movs	r2, #0
 800636a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800636c:	bf00      	nop
 800636e:	3710      	adds	r7, #16
 8006370:	46bd      	mov	sp, r7
 8006372:	bd80      	pop	{r7, pc}
 8006374:	200133dc 	.word	0x200133dc
 8006378:	08007de0 	.word	0x08007de0
 800637c:	200143e4 	.word	0x200143e4
 8006380:	200143dc 	.word	0x200143dc
 8006384:	e0001004 	.word	0xe0001004

08006388 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006390:	4a04      	ldr	r2, [pc, #16]	@ (80063a4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6113      	str	r3, [r2, #16]
}
 8006396:	bf00      	nop
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	200143e4 	.word	0x200143e4

080063a8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b084      	sub	sp, #16
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80063b0:	f3ef 8311 	mrs	r3, BASEPRI
 80063b4:	f04f 0120 	mov.w	r1, #32
 80063b8:	f381 8811 	msr	BASEPRI, r1
 80063bc:	60fb      	str	r3, [r7, #12]
 80063be:	4808      	ldr	r0, [pc, #32]	@ (80063e0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80063c0:	f7ff fa2c 	bl	800581c <_PreparePacket>
 80063c4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	68b9      	ldr	r1, [r7, #8]
 80063ca:	68b8      	ldr	r0, [r7, #8]
 80063cc:	f7ff fb16 	bl	80059fc <_SendPacket>
  RECORD_END();
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f383 8811 	msr	BASEPRI, r3
}
 80063d6:	bf00      	nop
 80063d8:	3710      	adds	r7, #16
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd80      	pop	{r7, pc}
 80063de:	bf00      	nop
 80063e0:	20014414 	.word	0x20014414

080063e4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b088      	sub	sp, #32
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80063ee:	f3ef 8311 	mrs	r3, BASEPRI
 80063f2:	f04f 0120 	mov.w	r1, #32
 80063f6:	f381 8811 	msr	BASEPRI, r1
 80063fa:	617b      	str	r3, [r7, #20]
 80063fc:	4816      	ldr	r0, [pc, #88]	@ (8006458 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80063fe:	f7ff fa0d 	bl	800581c <_PreparePacket>
 8006402:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	61fb      	str	r3, [r7, #28]
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	61bb      	str	r3, [r7, #24]
 8006410:	e00b      	b.n	800642a <SEGGER_SYSVIEW_RecordU32+0x46>
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	b2da      	uxtb	r2, r3
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	1c59      	adds	r1, r3, #1
 800641a:	61f9      	str	r1, [r7, #28]
 800641c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006420:	b2d2      	uxtb	r2, r2
 8006422:	701a      	strb	r2, [r3, #0]
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	09db      	lsrs	r3, r3, #7
 8006428:	61bb      	str	r3, [r7, #24]
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	2b7f      	cmp	r3, #127	@ 0x7f
 800642e:	d8f0      	bhi.n	8006412 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	1c5a      	adds	r2, r3, #1
 8006434:	61fa      	str	r2, [r7, #28]
 8006436:	69ba      	ldr	r2, [r7, #24]
 8006438:	b2d2      	uxtb	r2, r2
 800643a:	701a      	strb	r2, [r3, #0]
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	68f9      	ldr	r1, [r7, #12]
 8006444:	6938      	ldr	r0, [r7, #16]
 8006446:	f7ff fad9 	bl	80059fc <_SendPacket>
  RECORD_END();
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	f383 8811 	msr	BASEPRI, r3
}
 8006450:	bf00      	nop
 8006452:	3720      	adds	r7, #32
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}
 8006458:	20014414 	.word	0x20014414

0800645c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800645c:	b580      	push	{r7, lr}
 800645e:	b08c      	sub	sp, #48	@ 0x30
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006468:	f3ef 8311 	mrs	r3, BASEPRI
 800646c:	f04f 0120 	mov.w	r1, #32
 8006470:	f381 8811 	msr	BASEPRI, r1
 8006474:	61fb      	str	r3, [r7, #28]
 8006476:	4825      	ldr	r0, [pc, #148]	@ (800650c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006478:	f7ff f9d0 	bl	800581c <_PreparePacket>
 800647c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	62bb      	str	r3, [r7, #40]	@ 0x28
 800648a:	e00b      	b.n	80064a4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800648c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800648e:	b2da      	uxtb	r2, r3
 8006490:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006492:	1c59      	adds	r1, r3, #1
 8006494:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006496:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800649a:	b2d2      	uxtb	r2, r2
 800649c:	701a      	strb	r2, [r3, #0]
 800649e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a0:	09db      	lsrs	r3, r3, #7
 80064a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80064a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80064a8:	d8f0      	bhi.n	800648c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80064aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ac:	1c5a      	adds	r2, r3, #1
 80064ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80064b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80064b2:	b2d2      	uxtb	r2, r2
 80064b4:	701a      	strb	r2, [r3, #0]
 80064b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064b8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	623b      	str	r3, [r7, #32]
 80064c2:	e00b      	b.n	80064dc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 80064c4:	6a3b      	ldr	r3, [r7, #32]
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ca:	1c59      	adds	r1, r3, #1
 80064cc:	6279      	str	r1, [r7, #36]	@ 0x24
 80064ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064d2:	b2d2      	uxtb	r2, r2
 80064d4:	701a      	strb	r2, [r3, #0]
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	09db      	lsrs	r3, r3, #7
 80064da:	623b      	str	r3, [r7, #32]
 80064dc:	6a3b      	ldr	r3, [r7, #32]
 80064de:	2b7f      	cmp	r3, #127	@ 0x7f
 80064e0:	d8f0      	bhi.n	80064c4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80064e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e4:	1c5a      	adds	r2, r3, #1
 80064e6:	627a      	str	r2, [r7, #36]	@ 0x24
 80064e8:	6a3a      	ldr	r2, [r7, #32]
 80064ea:	b2d2      	uxtb	r2, r2
 80064ec:	701a      	strb	r2, [r3, #0]
 80064ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064f0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80064f2:	68fa      	ldr	r2, [r7, #12]
 80064f4:	6979      	ldr	r1, [r7, #20]
 80064f6:	69b8      	ldr	r0, [r7, #24]
 80064f8:	f7ff fa80 	bl	80059fc <_SendPacket>
  RECORD_END();
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	f383 8811 	msr	BASEPRI, r3
}
 8006502:	bf00      	nop
 8006504:	3730      	adds	r7, #48	@ 0x30
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	20014414 	.word	0x20014414

08006510 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006510:	b580      	push	{r7, lr}
 8006512:	b08e      	sub	sp, #56	@ 0x38
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
 800651c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800651e:	f3ef 8311 	mrs	r3, BASEPRI
 8006522:	f04f 0120 	mov.w	r1, #32
 8006526:	f381 8811 	msr	BASEPRI, r1
 800652a:	61fb      	str	r3, [r7, #28]
 800652c:	4832      	ldr	r0, [pc, #200]	@ (80065f8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800652e:	f7ff f975 	bl	800581c <_PreparePacket>
 8006532:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	637b      	str	r3, [r7, #52]	@ 0x34
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006540:	e00b      	b.n	800655a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8006542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006544:	b2da      	uxtb	r2, r3
 8006546:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006548:	1c59      	adds	r1, r3, #1
 800654a:	6379      	str	r1, [r7, #52]	@ 0x34
 800654c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006550:	b2d2      	uxtb	r2, r2
 8006552:	701a      	strb	r2, [r3, #0]
 8006554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006556:	09db      	lsrs	r3, r3, #7
 8006558:	633b      	str	r3, [r7, #48]	@ 0x30
 800655a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655c:	2b7f      	cmp	r3, #127	@ 0x7f
 800655e:	d8f0      	bhi.n	8006542 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006562:	1c5a      	adds	r2, r3, #1
 8006564:	637a      	str	r2, [r7, #52]	@ 0x34
 8006566:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006568:	b2d2      	uxtb	r2, r2
 800656a:	701a      	strb	r2, [r3, #0]
 800656c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800656e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006578:	e00b      	b.n	8006592 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800657a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800657c:	b2da      	uxtb	r2, r3
 800657e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006580:	1c59      	adds	r1, r3, #1
 8006582:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006584:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006588:	b2d2      	uxtb	r2, r2
 800658a:	701a      	strb	r2, [r3, #0]
 800658c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800658e:	09db      	lsrs	r3, r3, #7
 8006590:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006592:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006594:	2b7f      	cmp	r3, #127	@ 0x7f
 8006596:	d8f0      	bhi.n	800657a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800659a:	1c5a      	adds	r2, r3, #1
 800659c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800659e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065a0:	b2d2      	uxtb	r2, r2
 80065a2:	701a      	strb	r2, [r3, #0]
 80065a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065a6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	623b      	str	r3, [r7, #32]
 80065b0:	e00b      	b.n	80065ca <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80065b2:	6a3b      	ldr	r3, [r7, #32]
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b8:	1c59      	adds	r1, r3, #1
 80065ba:	6279      	str	r1, [r7, #36]	@ 0x24
 80065bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065c0:	b2d2      	uxtb	r2, r2
 80065c2:	701a      	strb	r2, [r3, #0]
 80065c4:	6a3b      	ldr	r3, [r7, #32]
 80065c6:	09db      	lsrs	r3, r3, #7
 80065c8:	623b      	str	r3, [r7, #32]
 80065ca:	6a3b      	ldr	r3, [r7, #32]
 80065cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80065ce:	d8f0      	bhi.n	80065b2 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 80065d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d2:	1c5a      	adds	r2, r3, #1
 80065d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80065d6:	6a3a      	ldr	r2, [r7, #32]
 80065d8:	b2d2      	uxtb	r2, r2
 80065da:	701a      	strb	r2, [r3, #0]
 80065dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065de:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80065e0:	68fa      	ldr	r2, [r7, #12]
 80065e2:	6979      	ldr	r1, [r7, #20]
 80065e4:	69b8      	ldr	r0, [r7, #24]
 80065e6:	f7ff fa09 	bl	80059fc <_SendPacket>
  RECORD_END();
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	f383 8811 	msr	BASEPRI, r3
}
 80065f0:	bf00      	nop
 80065f2:	3738      	adds	r7, #56	@ 0x38
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	20014414 	.word	0x20014414

080065fc <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b090      	sub	sp, #64	@ 0x40
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
 8006608:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800660a:	f3ef 8311 	mrs	r3, BASEPRI
 800660e:	f04f 0120 	mov.w	r1, #32
 8006612:	f381 8811 	msr	BASEPRI, r1
 8006616:	61fb      	str	r3, [r7, #28]
 8006618:	4840      	ldr	r0, [pc, #256]	@ (800671c <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 800661a:	f7ff f8ff 	bl	800581c <_PreparePacket>
 800661e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006620:	69bb      	ldr	r3, [r7, #24]
 8006622:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800662c:	e00b      	b.n	8006646 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800662e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006630:	b2da      	uxtb	r2, r3
 8006632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006634:	1c59      	adds	r1, r3, #1
 8006636:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006638:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800663c:	b2d2      	uxtb	r2, r2
 800663e:	701a      	strb	r2, [r3, #0]
 8006640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006642:	09db      	lsrs	r3, r3, #7
 8006644:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006648:	2b7f      	cmp	r3, #127	@ 0x7f
 800664a:	d8f0      	bhi.n	800662e <SEGGER_SYSVIEW_RecordU32x4+0x32>
 800664c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800664e:	1c5a      	adds	r2, r3, #1
 8006650:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006652:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006654:	b2d2      	uxtb	r2, r2
 8006656:	701a      	strb	r2, [r3, #0]
 8006658:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800665a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	633b      	str	r3, [r7, #48]	@ 0x30
 8006664:	e00b      	b.n	800667e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006668:	b2da      	uxtb	r2, r3
 800666a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800666c:	1c59      	adds	r1, r3, #1
 800666e:	6379      	str	r1, [r7, #52]	@ 0x34
 8006670:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006674:	b2d2      	uxtb	r2, r2
 8006676:	701a      	strb	r2, [r3, #0]
 8006678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800667a:	09db      	lsrs	r3, r3, #7
 800667c:	633b      	str	r3, [r7, #48]	@ 0x30
 800667e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006680:	2b7f      	cmp	r3, #127	@ 0x7f
 8006682:	d8f0      	bhi.n	8006666 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006686:	1c5a      	adds	r2, r3, #1
 8006688:	637a      	str	r2, [r7, #52]	@ 0x34
 800668a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800668c:	b2d2      	uxtb	r2, r2
 800668e:	701a      	strb	r2, [r3, #0]
 8006690:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006692:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800669c:	e00b      	b.n	80066b6 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800669e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066a4:	1c59      	adds	r1, r3, #1
 80066a6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80066a8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066ac:	b2d2      	uxtb	r2, r2
 80066ae:	701a      	strb	r2, [r3, #0]
 80066b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b2:	09db      	lsrs	r3, r3, #7
 80066b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80066ba:	d8f0      	bhi.n	800669e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80066bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066be:	1c5a      	adds	r2, r3, #1
 80066c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066c4:	b2d2      	uxtb	r2, r2
 80066c6:	701a      	strb	r2, [r3, #0]
 80066c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ca:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80066d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80066d2:	623b      	str	r3, [r7, #32]
 80066d4:	e00b      	b.n	80066ee <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 80066d6:	6a3b      	ldr	r3, [r7, #32]
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066dc:	1c59      	adds	r1, r3, #1
 80066de:	6279      	str	r1, [r7, #36]	@ 0x24
 80066e0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066e4:	b2d2      	uxtb	r2, r2
 80066e6:	701a      	strb	r2, [r3, #0]
 80066e8:	6a3b      	ldr	r3, [r7, #32]
 80066ea:	09db      	lsrs	r3, r3, #7
 80066ec:	623b      	str	r3, [r7, #32]
 80066ee:	6a3b      	ldr	r3, [r7, #32]
 80066f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80066f2:	d8f0      	bhi.n	80066d6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80066f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f6:	1c5a      	adds	r2, r3, #1
 80066f8:	627a      	str	r2, [r7, #36]	@ 0x24
 80066fa:	6a3a      	ldr	r2, [r7, #32]
 80066fc:	b2d2      	uxtb	r2, r2
 80066fe:	701a      	strb	r2, [r3, #0]
 8006700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006702:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006704:	68fa      	ldr	r2, [r7, #12]
 8006706:	6979      	ldr	r1, [r7, #20]
 8006708:	69b8      	ldr	r0, [r7, #24]
 800670a:	f7ff f977 	bl	80059fc <_SendPacket>
  RECORD_END();
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	f383 8811 	msr	BASEPRI, r3
}
 8006714:	bf00      	nop
 8006716:	3740      	adds	r7, #64	@ 0x40
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}
 800671c:	20014414 	.word	0x20014414

08006720 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006720:	b580      	push	{r7, lr}
 8006722:	b08c      	sub	sp, #48	@ 0x30
 8006724:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006726:	4b59      	ldr	r3, [pc, #356]	@ (800688c <SEGGER_SYSVIEW_Start+0x16c>)
 8006728:	2201      	movs	r2, #1
 800672a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800672c:	f3ef 8311 	mrs	r3, BASEPRI
 8006730:	f04f 0120 	mov.w	r1, #32
 8006734:	f381 8811 	msr	BASEPRI, r1
 8006738:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800673a:	4b54      	ldr	r3, [pc, #336]	@ (800688c <SEGGER_SYSVIEW_Start+0x16c>)
 800673c:	785b      	ldrb	r3, [r3, #1]
 800673e:	220a      	movs	r2, #10
 8006740:	4953      	ldr	r1, [pc, #332]	@ (8006890 <SEGGER_SYSVIEW_Start+0x170>)
 8006742:	4618      	mov	r0, r3
 8006744:	f7f9 fd64 	bl	8000210 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800674e:	f7fe fc19 	bl	8004f84 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006752:	200a      	movs	r0, #10
 8006754:	f7ff fe28 	bl	80063a8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006758:	f3ef 8311 	mrs	r3, BASEPRI
 800675c:	f04f 0120 	mov.w	r1, #32
 8006760:	f381 8811 	msr	BASEPRI, r1
 8006764:	60bb      	str	r3, [r7, #8]
 8006766:	484b      	ldr	r0, [pc, #300]	@ (8006894 <SEGGER_SYSVIEW_Start+0x174>)
 8006768:	f7ff f858 	bl	800581c <_PreparePacket>
 800676c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006776:	4b45      	ldr	r3, [pc, #276]	@ (800688c <SEGGER_SYSVIEW_Start+0x16c>)
 8006778:	685b      	ldr	r3, [r3, #4]
 800677a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800677c:	e00b      	b.n	8006796 <SEGGER_SYSVIEW_Start+0x76>
 800677e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006780:	b2da      	uxtb	r2, r3
 8006782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006784:	1c59      	adds	r1, r3, #1
 8006786:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006788:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800678c:	b2d2      	uxtb	r2, r2
 800678e:	701a      	strb	r2, [r3, #0]
 8006790:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006792:	09db      	lsrs	r3, r3, #7
 8006794:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006798:	2b7f      	cmp	r3, #127	@ 0x7f
 800679a:	d8f0      	bhi.n	800677e <SEGGER_SYSVIEW_Start+0x5e>
 800679c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800679e:	1c5a      	adds	r2, r3, #1
 80067a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067a4:	b2d2      	uxtb	r2, r2
 80067a6:	701a      	strb	r2, [r3, #0]
 80067a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067aa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80067b0:	4b36      	ldr	r3, [pc, #216]	@ (800688c <SEGGER_SYSVIEW_Start+0x16c>)
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	623b      	str	r3, [r7, #32]
 80067b6:	e00b      	b.n	80067d0 <SEGGER_SYSVIEW_Start+0xb0>
 80067b8:	6a3b      	ldr	r3, [r7, #32]
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067be:	1c59      	adds	r1, r3, #1
 80067c0:	6279      	str	r1, [r7, #36]	@ 0x24
 80067c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067c6:	b2d2      	uxtb	r2, r2
 80067c8:	701a      	strb	r2, [r3, #0]
 80067ca:	6a3b      	ldr	r3, [r7, #32]
 80067cc:	09db      	lsrs	r3, r3, #7
 80067ce:	623b      	str	r3, [r7, #32]
 80067d0:	6a3b      	ldr	r3, [r7, #32]
 80067d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80067d4:	d8f0      	bhi.n	80067b8 <SEGGER_SYSVIEW_Start+0x98>
 80067d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d8:	1c5a      	adds	r2, r3, #1
 80067da:	627a      	str	r2, [r7, #36]	@ 0x24
 80067dc:	6a3a      	ldr	r2, [r7, #32]
 80067de:	b2d2      	uxtb	r2, r2
 80067e0:	701a      	strb	r2, [r3, #0]
 80067e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	61fb      	str	r3, [r7, #28]
 80067ea:	4b28      	ldr	r3, [pc, #160]	@ (800688c <SEGGER_SYSVIEW_Start+0x16c>)
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	61bb      	str	r3, [r7, #24]
 80067f0:	e00b      	b.n	800680a <SEGGER_SYSVIEW_Start+0xea>
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	b2da      	uxtb	r2, r3
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	1c59      	adds	r1, r3, #1
 80067fa:	61f9      	str	r1, [r7, #28]
 80067fc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006800:	b2d2      	uxtb	r2, r2
 8006802:	701a      	strb	r2, [r3, #0]
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	09db      	lsrs	r3, r3, #7
 8006808:	61bb      	str	r3, [r7, #24]
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	2b7f      	cmp	r3, #127	@ 0x7f
 800680e:	d8f0      	bhi.n	80067f2 <SEGGER_SYSVIEW_Start+0xd2>
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	1c5a      	adds	r2, r3, #1
 8006814:	61fa      	str	r2, [r7, #28]
 8006816:	69ba      	ldr	r2, [r7, #24]
 8006818:	b2d2      	uxtb	r2, r2
 800681a:	701a      	strb	r2, [r3, #0]
 800681c:	69fb      	ldr	r3, [r7, #28]
 800681e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	617b      	str	r3, [r7, #20]
 8006824:	2300      	movs	r3, #0
 8006826:	613b      	str	r3, [r7, #16]
 8006828:	e00b      	b.n	8006842 <SEGGER_SYSVIEW_Start+0x122>
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	b2da      	uxtb	r2, r3
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	1c59      	adds	r1, r3, #1
 8006832:	6179      	str	r1, [r7, #20]
 8006834:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006838:	b2d2      	uxtb	r2, r2
 800683a:	701a      	strb	r2, [r3, #0]
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	09db      	lsrs	r3, r3, #7
 8006840:	613b      	str	r3, [r7, #16]
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	2b7f      	cmp	r3, #127	@ 0x7f
 8006846:	d8f0      	bhi.n	800682a <SEGGER_SYSVIEW_Start+0x10a>
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	1c5a      	adds	r2, r3, #1
 800684c:	617a      	str	r2, [r7, #20]
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	b2d2      	uxtb	r2, r2
 8006852:	701a      	strb	r2, [r3, #0]
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006858:	2218      	movs	r2, #24
 800685a:	6839      	ldr	r1, [r7, #0]
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f7ff f8cd 	bl	80059fc <_SendPacket>
      RECORD_END();
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006868:	4b08      	ldr	r3, [pc, #32]	@ (800688c <SEGGER_SYSVIEW_Start+0x16c>)
 800686a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686c:	2b00      	cmp	r3, #0
 800686e:	d002      	beq.n	8006876 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006870:	4b06      	ldr	r3, [pc, #24]	@ (800688c <SEGGER_SYSVIEW_Start+0x16c>)
 8006872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006874:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006876:	f000 f9eb 	bl	8006c50 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800687a:	f000 f9b1 	bl	8006be0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800687e:	f000 fc83 	bl	8007188 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006882:	bf00      	nop
 8006884:	3730      	adds	r7, #48	@ 0x30
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}
 800688a:	bf00      	nop
 800688c:	200143e4 	.word	0x200143e4
 8006890:	08007e24 	.word	0x08007e24
 8006894:	20014414 	.word	0x20014414

08006898 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800689e:	f3ef 8311 	mrs	r3, BASEPRI
 80068a2:	f04f 0120 	mov.w	r1, #32
 80068a6:	f381 8811 	msr	BASEPRI, r1
 80068aa:	607b      	str	r3, [r7, #4]
 80068ac:	480b      	ldr	r0, [pc, #44]	@ (80068dc <SEGGER_SYSVIEW_Stop+0x44>)
 80068ae:	f7fe ffb5 	bl	800581c <_PreparePacket>
 80068b2:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80068b4:	4b0a      	ldr	r3, [pc, #40]	@ (80068e0 <SEGGER_SYSVIEW_Stop+0x48>)
 80068b6:	781b      	ldrb	r3, [r3, #0]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d007      	beq.n	80068cc <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80068bc:	220b      	movs	r2, #11
 80068be:	6839      	ldr	r1, [r7, #0]
 80068c0:	6838      	ldr	r0, [r7, #0]
 80068c2:	f7ff f89b 	bl	80059fc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 80068c6:	4b06      	ldr	r3, [pc, #24]	@ (80068e0 <SEGGER_SYSVIEW_Stop+0x48>)
 80068c8:	2200      	movs	r2, #0
 80068ca:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f383 8811 	msr	BASEPRI, r3
}
 80068d2:	bf00      	nop
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	bf00      	nop
 80068dc:	20014414 	.word	0x20014414
 80068e0:	200143e4 	.word	0x200143e4

080068e4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b08c      	sub	sp, #48	@ 0x30
 80068e8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80068ea:	f3ef 8311 	mrs	r3, BASEPRI
 80068ee:	f04f 0120 	mov.w	r1, #32
 80068f2:	f381 8811 	msr	BASEPRI, r1
 80068f6:	60fb      	str	r3, [r7, #12]
 80068f8:	4845      	ldr	r0, [pc, #276]	@ (8006a10 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80068fa:	f7fe ff8f 	bl	800581c <_PreparePacket>
 80068fe:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006908:	4b42      	ldr	r3, [pc, #264]	@ (8006a14 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800690e:	e00b      	b.n	8006928 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006910:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006912:	b2da      	uxtb	r2, r3
 8006914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006916:	1c59      	adds	r1, r3, #1
 8006918:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800691a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800691e:	b2d2      	uxtb	r2, r2
 8006920:	701a      	strb	r2, [r3, #0]
 8006922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006924:	09db      	lsrs	r3, r3, #7
 8006926:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800692a:	2b7f      	cmp	r3, #127	@ 0x7f
 800692c:	d8f0      	bhi.n	8006910 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800692e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006930:	1c5a      	adds	r2, r3, #1
 8006932:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006934:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006936:	b2d2      	uxtb	r2, r2
 8006938:	701a      	strb	r2, [r3, #0]
 800693a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800693c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	627b      	str	r3, [r7, #36]	@ 0x24
 8006942:	4b34      	ldr	r3, [pc, #208]	@ (8006a14 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006944:	689b      	ldr	r3, [r3, #8]
 8006946:	623b      	str	r3, [r7, #32]
 8006948:	e00b      	b.n	8006962 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800694a:	6a3b      	ldr	r3, [r7, #32]
 800694c:	b2da      	uxtb	r2, r3
 800694e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006950:	1c59      	adds	r1, r3, #1
 8006952:	6279      	str	r1, [r7, #36]	@ 0x24
 8006954:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006958:	b2d2      	uxtb	r2, r2
 800695a:	701a      	strb	r2, [r3, #0]
 800695c:	6a3b      	ldr	r3, [r7, #32]
 800695e:	09db      	lsrs	r3, r3, #7
 8006960:	623b      	str	r3, [r7, #32]
 8006962:	6a3b      	ldr	r3, [r7, #32]
 8006964:	2b7f      	cmp	r3, #127	@ 0x7f
 8006966:	d8f0      	bhi.n	800694a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800696a:	1c5a      	adds	r2, r3, #1
 800696c:	627a      	str	r2, [r7, #36]	@ 0x24
 800696e:	6a3a      	ldr	r2, [r7, #32]
 8006970:	b2d2      	uxtb	r2, r2
 8006972:	701a      	strb	r2, [r3, #0]
 8006974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006976:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	61fb      	str	r3, [r7, #28]
 800697c:	4b25      	ldr	r3, [pc, #148]	@ (8006a14 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	61bb      	str	r3, [r7, #24]
 8006982:	e00b      	b.n	800699c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006984:	69bb      	ldr	r3, [r7, #24]
 8006986:	b2da      	uxtb	r2, r3
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	1c59      	adds	r1, r3, #1
 800698c:	61f9      	str	r1, [r7, #28]
 800698e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006992:	b2d2      	uxtb	r2, r2
 8006994:	701a      	strb	r2, [r3, #0]
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	09db      	lsrs	r3, r3, #7
 800699a:	61bb      	str	r3, [r7, #24]
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	2b7f      	cmp	r3, #127	@ 0x7f
 80069a0:	d8f0      	bhi.n	8006984 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	1c5a      	adds	r2, r3, #1
 80069a6:	61fa      	str	r2, [r7, #28]
 80069a8:	69ba      	ldr	r2, [r7, #24]
 80069aa:	b2d2      	uxtb	r2, r2
 80069ac:	701a      	strb	r2, [r3, #0]
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	617b      	str	r3, [r7, #20]
 80069b6:	2300      	movs	r3, #0
 80069b8:	613b      	str	r3, [r7, #16]
 80069ba:	e00b      	b.n	80069d4 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	b2da      	uxtb	r2, r3
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	1c59      	adds	r1, r3, #1
 80069c4:	6179      	str	r1, [r7, #20]
 80069c6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80069ca:	b2d2      	uxtb	r2, r2
 80069cc:	701a      	strb	r2, [r3, #0]
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	09db      	lsrs	r3, r3, #7
 80069d2:	613b      	str	r3, [r7, #16]
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80069d8:	d8f0      	bhi.n	80069bc <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	1c5a      	adds	r2, r3, #1
 80069de:	617a      	str	r2, [r7, #20]
 80069e0:	693a      	ldr	r2, [r7, #16]
 80069e2:	b2d2      	uxtb	r2, r2
 80069e4:	701a      	strb	r2, [r3, #0]
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80069ea:	2218      	movs	r2, #24
 80069ec:	6879      	ldr	r1, [r7, #4]
 80069ee:	68b8      	ldr	r0, [r7, #8]
 80069f0:	f7ff f804 	bl	80059fc <_SendPacket>
  RECORD_END();
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80069fa:	4b06      	ldr	r3, [pc, #24]	@ (8006a14 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80069fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d002      	beq.n	8006a08 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006a02:	4b04      	ldr	r3, [pc, #16]	@ (8006a14 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a06:	4798      	blx	r3
  }
}
 8006a08:	bf00      	nop
 8006a0a:	3730      	adds	r7, #48	@ 0x30
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	20014414 	.word	0x20014414
 8006a14:	200143e4 	.word	0x200143e4

08006a18 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b092      	sub	sp, #72	@ 0x48
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006a20:	f3ef 8311 	mrs	r3, BASEPRI
 8006a24:	f04f 0120 	mov.w	r1, #32
 8006a28:	f381 8811 	msr	BASEPRI, r1
 8006a2c:	617b      	str	r3, [r7, #20]
 8006a2e:	486a      	ldr	r0, [pc, #424]	@ (8006bd8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006a30:	f7fe fef4 	bl	800581c <_PreparePacket>
 8006a34:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	4b66      	ldr	r3, [pc, #408]	@ (8006bdc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a4a:	e00b      	b.n	8006a64 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006a4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a4e:	b2da      	uxtb	r2, r3
 8006a50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a52:	1c59      	adds	r1, r3, #1
 8006a54:	6479      	str	r1, [r7, #68]	@ 0x44
 8006a56:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a5a:	b2d2      	uxtb	r2, r2
 8006a5c:	701a      	strb	r2, [r3, #0]
 8006a5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a60:	09db      	lsrs	r3, r3, #7
 8006a62:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a66:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a68:	d8f0      	bhi.n	8006a4c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006a6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a6c:	1c5a      	adds	r2, r3, #1
 8006a6e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a70:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a72:	b2d2      	uxtb	r2, r2
 8006a74:	701a      	strb	r2, [r3, #0]
 8006a76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a78:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	689b      	ldr	r3, [r3, #8]
 8006a82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a84:	e00b      	b.n	8006a9e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006a86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a8c:	1c59      	adds	r1, r3, #1
 8006a8e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006a90:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a94:	b2d2      	uxtb	r2, r2
 8006a96:	701a      	strb	r2, [r3, #0]
 8006a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a9a:	09db      	lsrs	r3, r3, #7
 8006a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aa0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006aa2:	d8f0      	bhi.n	8006a86 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aa6:	1c5a      	adds	r2, r3, #1
 8006aa8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006aaa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006aac:	b2d2      	uxtb	r2, r2
 8006aae:	701a      	strb	r2, [r3, #0]
 8006ab0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ab2:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	4619      	mov	r1, r3
 8006abc:	68f8      	ldr	r0, [r7, #12]
 8006abe:	f7fe fe5d 	bl	800577c <_EncodeStr>
 8006ac2:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006ac4:	2209      	movs	r2, #9
 8006ac6:	68f9      	ldr	r1, [r7, #12]
 8006ac8:	6938      	ldr	r0, [r7, #16]
 8006aca:	f7fe ff97 	bl	80059fc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	4b40      	ldr	r3, [pc, #256]	@ (8006bdc <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	1ad3      	subs	r3, r2, r3
 8006ae0:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ae2:	e00b      	b.n	8006afc <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ae6:	b2da      	uxtb	r2, r3
 8006ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006aea:	1c59      	adds	r1, r3, #1
 8006aec:	6379      	str	r1, [r7, #52]	@ 0x34
 8006aee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006af2:	b2d2      	uxtb	r2, r2
 8006af4:	701a      	strb	r2, [r3, #0]
 8006af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006af8:	09db      	lsrs	r3, r3, #7
 8006afa:	633b      	str	r3, [r7, #48]	@ 0x30
 8006afc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006afe:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b00:	d8f0      	bhi.n	8006ae4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b04:	1c5a      	adds	r2, r3, #1
 8006b06:	637a      	str	r2, [r7, #52]	@ 0x34
 8006b08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b0a:	b2d2      	uxtb	r2, r2
 8006b0c:	701a      	strb	r2, [r3, #0]
 8006b0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b10:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	68db      	ldr	r3, [r3, #12]
 8006b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b1c:	e00b      	b.n	8006b36 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006b1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b24:	1c59      	adds	r1, r3, #1
 8006b26:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006b28:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b2c:	b2d2      	uxtb	r2, r2
 8006b2e:	701a      	strb	r2, [r3, #0]
 8006b30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b32:	09db      	lsrs	r3, r3, #7
 8006b34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b38:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b3a:	d8f0      	bhi.n	8006b1e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006b3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b3e:	1c5a      	adds	r2, r3, #1
 8006b40:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b44:	b2d2      	uxtb	r2, r2
 8006b46:	701a      	strb	r2, [r3, #0]
 8006b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b4a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	691b      	ldr	r3, [r3, #16]
 8006b54:	623b      	str	r3, [r7, #32]
 8006b56:	e00b      	b.n	8006b70 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006b58:	6a3b      	ldr	r3, [r7, #32]
 8006b5a:	b2da      	uxtb	r2, r3
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5e:	1c59      	adds	r1, r3, #1
 8006b60:	6279      	str	r1, [r7, #36]	@ 0x24
 8006b62:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b66:	b2d2      	uxtb	r2, r2
 8006b68:	701a      	strb	r2, [r3, #0]
 8006b6a:	6a3b      	ldr	r3, [r7, #32]
 8006b6c:	09db      	lsrs	r3, r3, #7
 8006b6e:	623b      	str	r3, [r7, #32]
 8006b70:	6a3b      	ldr	r3, [r7, #32]
 8006b72:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b74:	d8f0      	bhi.n	8006b58 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b78:	1c5a      	adds	r2, r3, #1
 8006b7a:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b7c:	6a3a      	ldr	r2, [r7, #32]
 8006b7e:	b2d2      	uxtb	r2, r2
 8006b80:	701a      	strb	r2, [r3, #0]
 8006b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b84:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	61fb      	str	r3, [r7, #28]
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	61bb      	str	r3, [r7, #24]
 8006b8e:	e00b      	b.n	8006ba8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	b2da      	uxtb	r2, r3
 8006b94:	69fb      	ldr	r3, [r7, #28]
 8006b96:	1c59      	adds	r1, r3, #1
 8006b98:	61f9      	str	r1, [r7, #28]
 8006b9a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b9e:	b2d2      	uxtb	r2, r2
 8006ba0:	701a      	strb	r2, [r3, #0]
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	09db      	lsrs	r3, r3, #7
 8006ba6:	61bb      	str	r3, [r7, #24]
 8006ba8:	69bb      	ldr	r3, [r7, #24]
 8006baa:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bac:	d8f0      	bhi.n	8006b90 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	1c5a      	adds	r2, r3, #1
 8006bb2:	61fa      	str	r2, [r7, #28]
 8006bb4:	69ba      	ldr	r2, [r7, #24]
 8006bb6:	b2d2      	uxtb	r2, r2
 8006bb8:	701a      	strb	r2, [r3, #0]
 8006bba:	69fb      	ldr	r3, [r7, #28]
 8006bbc:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006bbe:	2215      	movs	r2, #21
 8006bc0:	68f9      	ldr	r1, [r7, #12]
 8006bc2:	6938      	ldr	r0, [r7, #16]
 8006bc4:	f7fe ff1a 	bl	80059fc <_SendPacket>
  RECORD_END();
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f383 8811 	msr	BASEPRI, r3
}
 8006bce:	bf00      	nop
 8006bd0:	3748      	adds	r7, #72	@ 0x48
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	20014414 	.word	0x20014414
 8006bdc:	200143e4 	.word	0x200143e4

08006be0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006be0:	b580      	push	{r7, lr}
 8006be2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006be4:	4b07      	ldr	r3, [pc, #28]	@ (8006c04 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006be6:	6a1b      	ldr	r3, [r3, #32]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d008      	beq.n	8006bfe <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006bec:	4b05      	ldr	r3, [pc, #20]	@ (8006c04 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006bee:	6a1b      	ldr	r3, [r3, #32]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d003      	beq.n	8006bfe <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006bf6:	4b03      	ldr	r3, [pc, #12]	@ (8006c04 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006bf8:	6a1b      	ldr	r3, [r3, #32]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	4798      	blx	r3
  }
}
 8006bfe:	bf00      	nop
 8006c00:	bd80      	pop	{r7, pc}
 8006c02:	bf00      	nop
 8006c04:	200143e4 	.word	0x200143e4

08006c08 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c10:	f3ef 8311 	mrs	r3, BASEPRI
 8006c14:	f04f 0120 	mov.w	r1, #32
 8006c18:	f381 8811 	msr	BASEPRI, r1
 8006c1c:	617b      	str	r3, [r7, #20]
 8006c1e:	480b      	ldr	r0, [pc, #44]	@ (8006c4c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006c20:	f7fe fdfc 	bl	800581c <_PreparePacket>
 8006c24:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c26:	2280      	movs	r2, #128	@ 0x80
 8006c28:	6879      	ldr	r1, [r7, #4]
 8006c2a:	6938      	ldr	r0, [r7, #16]
 8006c2c:	f7fe fda6 	bl	800577c <_EncodeStr>
 8006c30:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006c32:	220e      	movs	r2, #14
 8006c34:	68f9      	ldr	r1, [r7, #12]
 8006c36:	6938      	ldr	r0, [r7, #16]
 8006c38:	f7fe fee0 	bl	80059fc <_SendPacket>
  RECORD_END();
 8006c3c:	697b      	ldr	r3, [r7, #20]
 8006c3e:	f383 8811 	msr	BASEPRI, r3
}
 8006c42:	bf00      	nop
 8006c44:	3718      	adds	r7, #24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	20014414 	.word	0x20014414

08006c50 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006c50:	b590      	push	{r4, r7, lr}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006c56:	4b15      	ldr	r3, [pc, #84]	@ (8006cac <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006c58:	6a1b      	ldr	r3, [r3, #32]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d01a      	beq.n	8006c94 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006c5e:	4b13      	ldr	r3, [pc, #76]	@ (8006cac <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d015      	beq.n	8006c94 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006c68:	4b10      	ldr	r3, [pc, #64]	@ (8006cac <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4798      	blx	r3
 8006c70:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006c74:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006c76:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006c7a:	f04f 0200 	mov.w	r2, #0
 8006c7e:	f04f 0300 	mov.w	r3, #0
 8006c82:	000a      	movs	r2, r1
 8006c84:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006c86:	4613      	mov	r3, r2
 8006c88:	461a      	mov	r2, r3
 8006c8a:	4621      	mov	r1, r4
 8006c8c:	200d      	movs	r0, #13
 8006c8e:	f7ff fbe5 	bl	800645c <SEGGER_SYSVIEW_RecordU32x2>
 8006c92:	e006      	b.n	8006ca2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006c94:	4b06      	ldr	r3, [pc, #24]	@ (8006cb0 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4619      	mov	r1, r3
 8006c9a:	200c      	movs	r0, #12
 8006c9c:	f7ff fba2 	bl	80063e4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006ca0:	bf00      	nop
 8006ca2:	bf00      	nop
 8006ca4:	370c      	adds	r7, #12
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd90      	pop	{r4, r7, pc}
 8006caa:	bf00      	nop
 8006cac:	200143e4 	.word	0x200143e4
 8006cb0:	e0001004 	.word	0xe0001004

08006cb4 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b086      	sub	sp, #24
 8006cb8:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006cba:	f3ef 8311 	mrs	r3, BASEPRI
 8006cbe:	f04f 0120 	mov.w	r1, #32
 8006cc2:	f381 8811 	msr	BASEPRI, r1
 8006cc6:	60fb      	str	r3, [r7, #12]
 8006cc8:	4819      	ldr	r0, [pc, #100]	@ (8006d30 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006cca:	f7fe fda7 	bl	800581c <_PreparePacket>
 8006cce:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006cd4:	4b17      	ldr	r3, [pc, #92]	@ (8006d34 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cdc:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	617b      	str	r3, [r7, #20]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	613b      	str	r3, [r7, #16]
 8006ce6:	e00b      	b.n	8006d00 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	b2da      	uxtb	r2, r3
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	1c59      	adds	r1, r3, #1
 8006cf0:	6179      	str	r1, [r7, #20]
 8006cf2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cf6:	b2d2      	uxtb	r2, r2
 8006cf8:	701a      	strb	r2, [r3, #0]
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	09db      	lsrs	r3, r3, #7
 8006cfe:	613b      	str	r3, [r7, #16]
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d04:	d8f0      	bhi.n	8006ce8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	1c5a      	adds	r2, r3, #1
 8006d0a:	617a      	str	r2, [r7, #20]
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	b2d2      	uxtb	r2, r2
 8006d10:	701a      	strb	r2, [r3, #0]
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006d16:	2202      	movs	r2, #2
 8006d18:	6879      	ldr	r1, [r7, #4]
 8006d1a:	68b8      	ldr	r0, [r7, #8]
 8006d1c:	f7fe fe6e 	bl	80059fc <_SendPacket>
  RECORD_END();
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f383 8811 	msr	BASEPRI, r3
}
 8006d26:	bf00      	nop
 8006d28:	3718      	adds	r7, #24
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	20014414 	.word	0x20014414
 8006d34:	e000ed04 	.word	0xe000ed04

08006d38 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006d3e:	f3ef 8311 	mrs	r3, BASEPRI
 8006d42:	f04f 0120 	mov.w	r1, #32
 8006d46:	f381 8811 	msr	BASEPRI, r1
 8006d4a:	607b      	str	r3, [r7, #4]
 8006d4c:	4807      	ldr	r0, [pc, #28]	@ (8006d6c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006d4e:	f7fe fd65 	bl	800581c <_PreparePacket>
 8006d52:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006d54:	2203      	movs	r2, #3
 8006d56:	6839      	ldr	r1, [r7, #0]
 8006d58:	6838      	ldr	r0, [r7, #0]
 8006d5a:	f7fe fe4f 	bl	80059fc <_SendPacket>
  RECORD_END();
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f383 8811 	msr	BASEPRI, r3
}
 8006d64:	bf00      	nop
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}
 8006d6c:	20014414 	.word	0x20014414

08006d70 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b082      	sub	sp, #8
 8006d74:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006d76:	f3ef 8311 	mrs	r3, BASEPRI
 8006d7a:	f04f 0120 	mov.w	r1, #32
 8006d7e:	f381 8811 	msr	BASEPRI, r1
 8006d82:	607b      	str	r3, [r7, #4]
 8006d84:	4807      	ldr	r0, [pc, #28]	@ (8006da4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006d86:	f7fe fd49 	bl	800581c <_PreparePacket>
 8006d8a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006d8c:	2212      	movs	r2, #18
 8006d8e:	6839      	ldr	r1, [r7, #0]
 8006d90:	6838      	ldr	r0, [r7, #0]
 8006d92:	f7fe fe33 	bl	80059fc <_SendPacket>
  RECORD_END();
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f383 8811 	msr	BASEPRI, r3
}
 8006d9c:	bf00      	nop
 8006d9e:	3708      	adds	r7, #8
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	20014414 	.word	0x20014414

08006da8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006dae:	f3ef 8311 	mrs	r3, BASEPRI
 8006db2:	f04f 0120 	mov.w	r1, #32
 8006db6:	f381 8811 	msr	BASEPRI, r1
 8006dba:	607b      	str	r3, [r7, #4]
 8006dbc:	4807      	ldr	r0, [pc, #28]	@ (8006ddc <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006dbe:	f7fe fd2d 	bl	800581c <_PreparePacket>
 8006dc2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006dc4:	2211      	movs	r2, #17
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	6838      	ldr	r0, [r7, #0]
 8006dca:	f7fe fe17 	bl	80059fc <_SendPacket>
  RECORD_END();
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f383 8811 	msr	BASEPRI, r3
}
 8006dd4:	bf00      	nop
 8006dd6:	3708      	adds	r7, #8
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	bd80      	pop	{r7, pc}
 8006ddc:	20014414 	.word	0x20014414

08006de0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b088      	sub	sp, #32
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006de8:	f3ef 8311 	mrs	r3, BASEPRI
 8006dec:	f04f 0120 	mov.w	r1, #32
 8006df0:	f381 8811 	msr	BASEPRI, r1
 8006df4:	617b      	str	r3, [r7, #20]
 8006df6:	4819      	ldr	r0, [pc, #100]	@ (8006e5c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006df8:	f7fe fd10 	bl	800581c <_PreparePacket>
 8006dfc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e02:	4b17      	ldr	r3, [pc, #92]	@ (8006e60 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	61fb      	str	r3, [r7, #28]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	61bb      	str	r3, [r7, #24]
 8006e14:	e00b      	b.n	8006e2e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	b2da      	uxtb	r2, r3
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	1c59      	adds	r1, r3, #1
 8006e1e:	61f9      	str	r1, [r7, #28]
 8006e20:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e24:	b2d2      	uxtb	r2, r2
 8006e26:	701a      	strb	r2, [r3, #0]
 8006e28:	69bb      	ldr	r3, [r7, #24]
 8006e2a:	09db      	lsrs	r3, r3, #7
 8006e2c:	61bb      	str	r3, [r7, #24]
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e32:	d8f0      	bhi.n	8006e16 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	1c5a      	adds	r2, r3, #1
 8006e38:	61fa      	str	r2, [r7, #28]
 8006e3a:	69ba      	ldr	r2, [r7, #24]
 8006e3c:	b2d2      	uxtb	r2, r2
 8006e3e:	701a      	strb	r2, [r3, #0]
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006e44:	2208      	movs	r2, #8
 8006e46:	68f9      	ldr	r1, [r7, #12]
 8006e48:	6938      	ldr	r0, [r7, #16]
 8006e4a:	f7fe fdd7 	bl	80059fc <_SendPacket>
  RECORD_END();
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f383 8811 	msr	BASEPRI, r3
}
 8006e54:	bf00      	nop
 8006e56:	3720      	adds	r7, #32
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	20014414 	.word	0x20014414
 8006e60:	200143e4 	.word	0x200143e4

08006e64 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b088      	sub	sp, #32
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006e6c:	f3ef 8311 	mrs	r3, BASEPRI
 8006e70:	f04f 0120 	mov.w	r1, #32
 8006e74:	f381 8811 	msr	BASEPRI, r1
 8006e78:	617b      	str	r3, [r7, #20]
 8006e7a:	4819      	ldr	r0, [pc, #100]	@ (8006ee0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006e7c:	f7fe fcce 	bl	800581c <_PreparePacket>
 8006e80:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006e86:	4b17      	ldr	r3, [pc, #92]	@ (8006ee4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	61fb      	str	r3, [r7, #28]
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	61bb      	str	r3, [r7, #24]
 8006e98:	e00b      	b.n	8006eb2 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006e9a:	69bb      	ldr	r3, [r7, #24]
 8006e9c:	b2da      	uxtb	r2, r3
 8006e9e:	69fb      	ldr	r3, [r7, #28]
 8006ea0:	1c59      	adds	r1, r3, #1
 8006ea2:	61f9      	str	r1, [r7, #28]
 8006ea4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ea8:	b2d2      	uxtb	r2, r2
 8006eaa:	701a      	strb	r2, [r3, #0]
 8006eac:	69bb      	ldr	r3, [r7, #24]
 8006eae:	09db      	lsrs	r3, r3, #7
 8006eb0:	61bb      	str	r3, [r7, #24]
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006eb6:	d8f0      	bhi.n	8006e9a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006eb8:	69fb      	ldr	r3, [r7, #28]
 8006eba:	1c5a      	adds	r2, r3, #1
 8006ebc:	61fa      	str	r2, [r7, #28]
 8006ebe:	69ba      	ldr	r2, [r7, #24]
 8006ec0:	b2d2      	uxtb	r2, r2
 8006ec2:	701a      	strb	r2, [r3, #0]
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006ec8:	2204      	movs	r2, #4
 8006eca:	68f9      	ldr	r1, [r7, #12]
 8006ecc:	6938      	ldr	r0, [r7, #16]
 8006ece:	f7fe fd95 	bl	80059fc <_SendPacket>
  RECORD_END();
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f383 8811 	msr	BASEPRI, r3
}
 8006ed8:	bf00      	nop
 8006eda:	3720      	adds	r7, #32
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	20014414 	.word	0x20014414
 8006ee4:	200143e4 	.word	0x200143e4

08006ee8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b088      	sub	sp, #32
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ef0:	f3ef 8311 	mrs	r3, BASEPRI
 8006ef4:	f04f 0120 	mov.w	r1, #32
 8006ef8:	f381 8811 	msr	BASEPRI, r1
 8006efc:	617b      	str	r3, [r7, #20]
 8006efe:	4819      	ldr	r0, [pc, #100]	@ (8006f64 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006f00:	f7fe fc8c 	bl	800581c <_PreparePacket>
 8006f04:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f0a:	4b17      	ldr	r3, [pc, #92]	@ (8006f68 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006f0c:	691b      	ldr	r3, [r3, #16]
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	1ad3      	subs	r3, r2, r3
 8006f12:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	61fb      	str	r3, [r7, #28]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	61bb      	str	r3, [r7, #24]
 8006f1c:	e00b      	b.n	8006f36 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006f1e:	69bb      	ldr	r3, [r7, #24]
 8006f20:	b2da      	uxtb	r2, r3
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	1c59      	adds	r1, r3, #1
 8006f26:	61f9      	str	r1, [r7, #28]
 8006f28:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f2c:	b2d2      	uxtb	r2, r2
 8006f2e:	701a      	strb	r2, [r3, #0]
 8006f30:	69bb      	ldr	r3, [r7, #24]
 8006f32:	09db      	lsrs	r3, r3, #7
 8006f34:	61bb      	str	r3, [r7, #24]
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f3a:	d8f0      	bhi.n	8006f1e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	1c5a      	adds	r2, r3, #1
 8006f40:	61fa      	str	r2, [r7, #28]
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	b2d2      	uxtb	r2, r2
 8006f46:	701a      	strb	r2, [r3, #0]
 8006f48:	69fb      	ldr	r3, [r7, #28]
 8006f4a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006f4c:	2206      	movs	r2, #6
 8006f4e:	68f9      	ldr	r1, [r7, #12]
 8006f50:	6938      	ldr	r0, [r7, #16]
 8006f52:	f7fe fd53 	bl	80059fc <_SendPacket>
  RECORD_END();
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	f383 8811 	msr	BASEPRI, r3
}
 8006f5c:	bf00      	nop
 8006f5e:	3720      	adds	r7, #32
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}
 8006f64:	20014414 	.word	0x20014414
 8006f68:	200143e4 	.word	0x200143e4

08006f6c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b08a      	sub	sp, #40	@ 0x28
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006f76:	f3ef 8311 	mrs	r3, BASEPRI
 8006f7a:	f04f 0120 	mov.w	r1, #32
 8006f7e:	f381 8811 	msr	BASEPRI, r1
 8006f82:	617b      	str	r3, [r7, #20]
 8006f84:	4827      	ldr	r0, [pc, #156]	@ (8007024 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8006f86:	f7fe fc49 	bl	800581c <_PreparePacket>
 8006f8a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006f90:	4b25      	ldr	r3, [pc, #148]	@ (8007028 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	687a      	ldr	r2, [r7, #4]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	623b      	str	r3, [r7, #32]
 8006fa2:	e00b      	b.n	8006fbc <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8006fa4:	6a3b      	ldr	r3, [r7, #32]
 8006fa6:	b2da      	uxtb	r2, r3
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006faa:	1c59      	adds	r1, r3, #1
 8006fac:	6279      	str	r1, [r7, #36]	@ 0x24
 8006fae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006fb2:	b2d2      	uxtb	r2, r2
 8006fb4:	701a      	strb	r2, [r3, #0]
 8006fb6:	6a3b      	ldr	r3, [r7, #32]
 8006fb8:	09db      	lsrs	r3, r3, #7
 8006fba:	623b      	str	r3, [r7, #32]
 8006fbc:	6a3b      	ldr	r3, [r7, #32]
 8006fbe:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fc0:	d8f0      	bhi.n	8006fa4 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8006fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc4:	1c5a      	adds	r2, r3, #1
 8006fc6:	627a      	str	r2, [r7, #36]	@ 0x24
 8006fc8:	6a3a      	ldr	r2, [r7, #32]
 8006fca:	b2d2      	uxtb	r2, r2
 8006fcc:	701a      	strb	r2, [r3, #0]
 8006fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	61fb      	str	r3, [r7, #28]
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	61bb      	str	r3, [r7, #24]
 8006fda:	e00b      	b.n	8006ff4 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8006fdc:	69bb      	ldr	r3, [r7, #24]
 8006fde:	b2da      	uxtb	r2, r3
 8006fe0:	69fb      	ldr	r3, [r7, #28]
 8006fe2:	1c59      	adds	r1, r3, #1
 8006fe4:	61f9      	str	r1, [r7, #28]
 8006fe6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006fea:	b2d2      	uxtb	r2, r2
 8006fec:	701a      	strb	r2, [r3, #0]
 8006fee:	69bb      	ldr	r3, [r7, #24]
 8006ff0:	09db      	lsrs	r3, r3, #7
 8006ff2:	61bb      	str	r3, [r7, #24]
 8006ff4:	69bb      	ldr	r3, [r7, #24]
 8006ff6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ff8:	d8f0      	bhi.n	8006fdc <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	1c5a      	adds	r2, r3, #1
 8006ffe:	61fa      	str	r2, [r7, #28]
 8007000:	69ba      	ldr	r2, [r7, #24]
 8007002:	b2d2      	uxtb	r2, r2
 8007004:	701a      	strb	r2, [r3, #0]
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800700a:	2207      	movs	r2, #7
 800700c:	68f9      	ldr	r1, [r7, #12]
 800700e:	6938      	ldr	r0, [r7, #16]
 8007010:	f7fe fcf4 	bl	80059fc <_SendPacket>
  RECORD_END();
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	f383 8811 	msr	BASEPRI, r3
}
 800701a:	bf00      	nop
 800701c:	3728      	adds	r7, #40	@ 0x28
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	20014414 	.word	0x20014414
 8007028:	200143e4 	.word	0x200143e4

0800702c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007034:	4b04      	ldr	r3, [pc, #16]	@ (8007048 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	1ad3      	subs	r3, r2, r3
}
 800703c:	4618      	mov	r0, r3
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr
 8007048:	200143e4 	.word	0x200143e4

0800704c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800704c:	b580      	push	{r7, lr}
 800704e:	b08c      	sub	sp, #48	@ 0x30
 8007050:	af00      	add	r7, sp, #0
 8007052:	4603      	mov	r3, r0
 8007054:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007056:	4b3b      	ldr	r3, [pc, #236]	@ (8007144 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d06d      	beq.n	800713a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800705e:	4b39      	ldr	r3, [pc, #228]	@ (8007144 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007064:	2300      	movs	r3, #0
 8007066:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007068:	e008      	b.n	800707c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800706a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800706c:	691b      	ldr	r3, [r3, #16]
 800706e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8007070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007072:	2b00      	cmp	r3, #0
 8007074:	d007      	beq.n	8007086 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007078:	3301      	adds	r3, #1
 800707a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800707c:	79fb      	ldrb	r3, [r7, #7]
 800707e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007080:	429a      	cmp	r2, r3
 8007082:	d3f2      	bcc.n	800706a <SEGGER_SYSVIEW_SendModule+0x1e>
 8007084:	e000      	b.n	8007088 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007086:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800708a:	2b00      	cmp	r3, #0
 800708c:	d055      	beq.n	800713a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800708e:	f3ef 8311 	mrs	r3, BASEPRI
 8007092:	f04f 0120 	mov.w	r1, #32
 8007096:	f381 8811 	msr	BASEPRI, r1
 800709a:	617b      	str	r3, [r7, #20]
 800709c:	482a      	ldr	r0, [pc, #168]	@ (8007148 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800709e:	f7fe fbbd 	bl	800581c <_PreparePacket>
 80070a2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80070a4:	693b      	ldr	r3, [r7, #16]
 80070a6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80070ac:	79fb      	ldrb	r3, [r7, #7]
 80070ae:	623b      	str	r3, [r7, #32]
 80070b0:	e00b      	b.n	80070ca <SEGGER_SYSVIEW_SendModule+0x7e>
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	b2da      	uxtb	r2, r3
 80070b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b8:	1c59      	adds	r1, r3, #1
 80070ba:	6279      	str	r1, [r7, #36]	@ 0x24
 80070bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070c0:	b2d2      	uxtb	r2, r2
 80070c2:	701a      	strb	r2, [r3, #0]
 80070c4:	6a3b      	ldr	r3, [r7, #32]
 80070c6:	09db      	lsrs	r3, r3, #7
 80070c8:	623b      	str	r3, [r7, #32]
 80070ca:	6a3b      	ldr	r3, [r7, #32]
 80070cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80070ce:	d8f0      	bhi.n	80070b2 <SEGGER_SYSVIEW_SendModule+0x66>
 80070d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d2:	1c5a      	adds	r2, r3, #1
 80070d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80070d6:	6a3a      	ldr	r2, [r7, #32]
 80070d8:	b2d2      	uxtb	r2, r2
 80070da:	701a      	strb	r2, [r3, #0]
 80070dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070de:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	61fb      	str	r3, [r7, #28]
 80070e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	61bb      	str	r3, [r7, #24]
 80070ea:	e00b      	b.n	8007104 <SEGGER_SYSVIEW_SendModule+0xb8>
 80070ec:	69bb      	ldr	r3, [r7, #24]
 80070ee:	b2da      	uxtb	r2, r3
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	1c59      	adds	r1, r3, #1
 80070f4:	61f9      	str	r1, [r7, #28]
 80070f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80070fa:	b2d2      	uxtb	r2, r2
 80070fc:	701a      	strb	r2, [r3, #0]
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	09db      	lsrs	r3, r3, #7
 8007102:	61bb      	str	r3, [r7, #24]
 8007104:	69bb      	ldr	r3, [r7, #24]
 8007106:	2b7f      	cmp	r3, #127	@ 0x7f
 8007108:	d8f0      	bhi.n	80070ec <SEGGER_SYSVIEW_SendModule+0xa0>
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	1c5a      	adds	r2, r3, #1
 800710e:	61fa      	str	r2, [r7, #28]
 8007110:	69ba      	ldr	r2, [r7, #24]
 8007112:	b2d2      	uxtb	r2, r2
 8007114:	701a      	strb	r2, [r3, #0]
 8007116:	69fb      	ldr	r3, [r7, #28]
 8007118:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800711a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2280      	movs	r2, #128	@ 0x80
 8007120:	4619      	mov	r1, r3
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f7fe fb2a 	bl	800577c <_EncodeStr>
 8007128:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800712a:	2216      	movs	r2, #22
 800712c:	68f9      	ldr	r1, [r7, #12]
 800712e:	6938      	ldr	r0, [r7, #16]
 8007130:	f7fe fc64 	bl	80059fc <_SendPacket>
      RECORD_END();
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800713a:	bf00      	nop
 800713c:	3730      	adds	r7, #48	@ 0x30
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	2001440c 	.word	0x2001440c
 8007148:	20014414 	.word	0x20014414

0800714c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007152:	4b0c      	ldr	r3, [pc, #48]	@ (8007184 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00f      	beq.n	800717a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800715a:	4b0a      	ldr	r3, [pc, #40]	@ (8007184 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	68db      	ldr	r3, [r3, #12]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d002      	beq.n	800716e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1f2      	bne.n	8007160 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800717a:	bf00      	nop
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	2001440c 	.word	0x2001440c

08007188 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007188:	b580      	push	{r7, lr}
 800718a:	b086      	sub	sp, #24
 800718c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800718e:	f3ef 8311 	mrs	r3, BASEPRI
 8007192:	f04f 0120 	mov.w	r1, #32
 8007196:	f381 8811 	msr	BASEPRI, r1
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	4817      	ldr	r0, [pc, #92]	@ (80071fc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800719e:	f7fe fb3d 	bl	800581c <_PreparePacket>
 80071a2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	617b      	str	r3, [r7, #20]
 80071ac:	4b14      	ldr	r3, [pc, #80]	@ (8007200 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	613b      	str	r3, [r7, #16]
 80071b2:	e00b      	b.n	80071cc <SEGGER_SYSVIEW_SendNumModules+0x44>
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	b2da      	uxtb	r2, r3
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	1c59      	adds	r1, r3, #1
 80071bc:	6179      	str	r1, [r7, #20]
 80071be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80071c2:	b2d2      	uxtb	r2, r2
 80071c4:	701a      	strb	r2, [r3, #0]
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	09db      	lsrs	r3, r3, #7
 80071ca:	613b      	str	r3, [r7, #16]
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80071d0:	d8f0      	bhi.n	80071b4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	1c5a      	adds	r2, r3, #1
 80071d6:	617a      	str	r2, [r7, #20]
 80071d8:	693a      	ldr	r2, [r7, #16]
 80071da:	b2d2      	uxtb	r2, r2
 80071dc:	701a      	strb	r2, [r3, #0]
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80071e2:	221b      	movs	r2, #27
 80071e4:	6879      	ldr	r1, [r7, #4]
 80071e6:	68b8      	ldr	r0, [r7, #8]
 80071e8:	f7fe fc08 	bl	80059fc <_SendPacket>
  RECORD_END();
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f383 8811 	msr	BASEPRI, r3
}
 80071f2:	bf00      	nop
 80071f4:	3718      	adds	r7, #24
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	20014414 	.word	0x20014414
 8007200:	20014410 	.word	0x20014410

08007204 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007204:	b40f      	push	{r0, r1, r2, r3}
 8007206:	b580      	push	{r7, lr}
 8007208:	b082      	sub	sp, #8
 800720a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 800720c:	f107 0314 	add.w	r3, r7, #20
 8007210:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007212:	1d3b      	adds	r3, r7, #4
 8007214:	461a      	mov	r2, r3
 8007216:	2100      	movs	r1, #0
 8007218:	6938      	ldr	r0, [r7, #16]
 800721a:	f7fe fe79 	bl	8005f10 <_VPrintTarget>
  va_end(ParamList);
}
 800721e:	bf00      	nop
 8007220:	3708      	adds	r7, #8
 8007222:	46bd      	mov	sp, r7
 8007224:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007228:	b004      	add	sp, #16
 800722a:	4770      	bx	lr

0800722c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800722c:	b580      	push	{r7, lr}
 800722e:	b08a      	sub	sp, #40	@ 0x28
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007234:	f3ef 8311 	mrs	r3, BASEPRI
 8007238:	f04f 0120 	mov.w	r1, #32
 800723c:	f381 8811 	msr	BASEPRI, r1
 8007240:	617b      	str	r3, [r7, #20]
 8007242:	4827      	ldr	r0, [pc, #156]	@ (80072e0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007244:	f7fe faea 	bl	800581c <_PreparePacket>
 8007248:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800724a:	2280      	movs	r2, #128	@ 0x80
 800724c:	6879      	ldr	r1, [r7, #4]
 800724e:	6938      	ldr	r0, [r7, #16]
 8007250:	f7fe fa94 	bl	800577c <_EncodeStr>
 8007254:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	627b      	str	r3, [r7, #36]	@ 0x24
 800725a:	2301      	movs	r3, #1
 800725c:	623b      	str	r3, [r7, #32]
 800725e:	e00b      	b.n	8007278 <SEGGER_SYSVIEW_Warn+0x4c>
 8007260:	6a3b      	ldr	r3, [r7, #32]
 8007262:	b2da      	uxtb	r2, r3
 8007264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007266:	1c59      	adds	r1, r3, #1
 8007268:	6279      	str	r1, [r7, #36]	@ 0x24
 800726a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800726e:	b2d2      	uxtb	r2, r2
 8007270:	701a      	strb	r2, [r3, #0]
 8007272:	6a3b      	ldr	r3, [r7, #32]
 8007274:	09db      	lsrs	r3, r3, #7
 8007276:	623b      	str	r3, [r7, #32]
 8007278:	6a3b      	ldr	r3, [r7, #32]
 800727a:	2b7f      	cmp	r3, #127	@ 0x7f
 800727c:	d8f0      	bhi.n	8007260 <SEGGER_SYSVIEW_Warn+0x34>
 800727e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007280:	1c5a      	adds	r2, r3, #1
 8007282:	627a      	str	r2, [r7, #36]	@ 0x24
 8007284:	6a3a      	ldr	r2, [r7, #32]
 8007286:	b2d2      	uxtb	r2, r2
 8007288:	701a      	strb	r2, [r3, #0]
 800728a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800728c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	61fb      	str	r3, [r7, #28]
 8007292:	2300      	movs	r3, #0
 8007294:	61bb      	str	r3, [r7, #24]
 8007296:	e00b      	b.n	80072b0 <SEGGER_SYSVIEW_Warn+0x84>
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	b2da      	uxtb	r2, r3
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	1c59      	adds	r1, r3, #1
 80072a0:	61f9      	str	r1, [r7, #28]
 80072a2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80072a6:	b2d2      	uxtb	r2, r2
 80072a8:	701a      	strb	r2, [r3, #0]
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	09db      	lsrs	r3, r3, #7
 80072ae:	61bb      	str	r3, [r7, #24]
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	2b7f      	cmp	r3, #127	@ 0x7f
 80072b4:	d8f0      	bhi.n	8007298 <SEGGER_SYSVIEW_Warn+0x6c>
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	1c5a      	adds	r2, r3, #1
 80072ba:	61fa      	str	r2, [r7, #28]
 80072bc:	69ba      	ldr	r2, [r7, #24]
 80072be:	b2d2      	uxtb	r2, r2
 80072c0:	701a      	strb	r2, [r3, #0]
 80072c2:	69fb      	ldr	r3, [r7, #28]
 80072c4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80072c6:	221a      	movs	r2, #26
 80072c8:	68f9      	ldr	r1, [r7, #12]
 80072ca:	6938      	ldr	r0, [r7, #16]
 80072cc:	f7fe fb96 	bl	80059fc <_SendPacket>
  RECORD_END();
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	f383 8811 	msr	BASEPRI, r3
}
 80072d6:	bf00      	nop
 80072d8:	3728      	adds	r7, #40	@ 0x28
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	20014414 	.word	0x20014414

080072e4 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80072e4:	b580      	push	{r7, lr}
 80072e6:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80072e8:	4b13      	ldr	r3, [pc, #76]	@ (8007338 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80072ea:	7e1b      	ldrb	r3, [r3, #24]
 80072ec:	4619      	mov	r1, r3
 80072ee:	4a13      	ldr	r2, [pc, #76]	@ (800733c <SEGGER_SYSVIEW_IsStarted+0x58>)
 80072f0:	460b      	mov	r3, r1
 80072f2:	005b      	lsls	r3, r3, #1
 80072f4:	440b      	add	r3, r1
 80072f6:	00db      	lsls	r3, r3, #3
 80072f8:	4413      	add	r3, r2
 80072fa:	336c      	adds	r3, #108	@ 0x6c
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	4b0e      	ldr	r3, [pc, #56]	@ (8007338 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007300:	7e1b      	ldrb	r3, [r3, #24]
 8007302:	4618      	mov	r0, r3
 8007304:	490d      	ldr	r1, [pc, #52]	@ (800733c <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007306:	4603      	mov	r3, r0
 8007308:	005b      	lsls	r3, r3, #1
 800730a:	4403      	add	r3, r0
 800730c:	00db      	lsls	r3, r3, #3
 800730e:	440b      	add	r3, r1
 8007310:	3370      	adds	r3, #112	@ 0x70
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	429a      	cmp	r2, r3
 8007316:	d00b      	beq.n	8007330 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8007318:	4b07      	ldr	r3, [pc, #28]	@ (8007338 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800731a:	789b      	ldrb	r3, [r3, #2]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d107      	bne.n	8007330 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007320:	4b05      	ldr	r3, [pc, #20]	@ (8007338 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007322:	2201      	movs	r2, #1
 8007324:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8007326:	f7fe fa85 	bl	8005834 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800732a:	4b03      	ldr	r3, [pc, #12]	@ (8007338 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800732c:	2200      	movs	r2, #0
 800732e:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007330:	4b01      	ldr	r3, [pc, #4]	@ (8007338 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007332:	781b      	ldrb	r3, [r3, #0]
}
 8007334:	4618      	mov	r0, r3
 8007336:	bd80      	pop	{r7, pc}
 8007338:	200143e4 	.word	0x200143e4
 800733c:	20012f24 	.word	0x20012f24

08007340 <sniprintf>:
 8007340:	b40c      	push	{r2, r3}
 8007342:	b530      	push	{r4, r5, lr}
 8007344:	4b18      	ldr	r3, [pc, #96]	@ (80073a8 <sniprintf+0x68>)
 8007346:	1e0c      	subs	r4, r1, #0
 8007348:	681d      	ldr	r5, [r3, #0]
 800734a:	b09d      	sub	sp, #116	@ 0x74
 800734c:	da08      	bge.n	8007360 <sniprintf+0x20>
 800734e:	238b      	movs	r3, #139	@ 0x8b
 8007350:	602b      	str	r3, [r5, #0]
 8007352:	f04f 30ff 	mov.w	r0, #4294967295
 8007356:	b01d      	add	sp, #116	@ 0x74
 8007358:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800735c:	b002      	add	sp, #8
 800735e:	4770      	bx	lr
 8007360:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007364:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007368:	f04f 0300 	mov.w	r3, #0
 800736c:	931b      	str	r3, [sp, #108]	@ 0x6c
 800736e:	bf14      	ite	ne
 8007370:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007374:	4623      	moveq	r3, r4
 8007376:	9304      	str	r3, [sp, #16]
 8007378:	9307      	str	r3, [sp, #28]
 800737a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800737e:	9002      	str	r0, [sp, #8]
 8007380:	9006      	str	r0, [sp, #24]
 8007382:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007386:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007388:	ab21      	add	r3, sp, #132	@ 0x84
 800738a:	a902      	add	r1, sp, #8
 800738c:	4628      	mov	r0, r5
 800738e:	9301      	str	r3, [sp, #4]
 8007390:	f000 f9ac 	bl	80076ec <_svfiprintf_r>
 8007394:	1c43      	adds	r3, r0, #1
 8007396:	bfbc      	itt	lt
 8007398:	238b      	movlt	r3, #139	@ 0x8b
 800739a:	602b      	strlt	r3, [r5, #0]
 800739c:	2c00      	cmp	r4, #0
 800739e:	d0da      	beq.n	8007356 <sniprintf+0x16>
 80073a0:	9b02      	ldr	r3, [sp, #8]
 80073a2:	2200      	movs	r2, #0
 80073a4:	701a      	strb	r2, [r3, #0]
 80073a6:	e7d6      	b.n	8007356 <sniprintf+0x16>
 80073a8:	20000018 	.word	0x20000018

080073ac <memcmp>:
 80073ac:	b510      	push	{r4, lr}
 80073ae:	3901      	subs	r1, #1
 80073b0:	4402      	add	r2, r0
 80073b2:	4290      	cmp	r0, r2
 80073b4:	d101      	bne.n	80073ba <memcmp+0xe>
 80073b6:	2000      	movs	r0, #0
 80073b8:	e005      	b.n	80073c6 <memcmp+0x1a>
 80073ba:	7803      	ldrb	r3, [r0, #0]
 80073bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80073c0:	42a3      	cmp	r3, r4
 80073c2:	d001      	beq.n	80073c8 <memcmp+0x1c>
 80073c4:	1b18      	subs	r0, r3, r4
 80073c6:	bd10      	pop	{r4, pc}
 80073c8:	3001      	adds	r0, #1
 80073ca:	e7f2      	b.n	80073b2 <memcmp+0x6>

080073cc <memset>:
 80073cc:	4402      	add	r2, r0
 80073ce:	4603      	mov	r3, r0
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d100      	bne.n	80073d6 <memset+0xa>
 80073d4:	4770      	bx	lr
 80073d6:	f803 1b01 	strb.w	r1, [r3], #1
 80073da:	e7f9      	b.n	80073d0 <memset+0x4>

080073dc <__libc_init_array>:
 80073dc:	b570      	push	{r4, r5, r6, lr}
 80073de:	4d0d      	ldr	r5, [pc, #52]	@ (8007414 <__libc_init_array+0x38>)
 80073e0:	4c0d      	ldr	r4, [pc, #52]	@ (8007418 <__libc_init_array+0x3c>)
 80073e2:	1b64      	subs	r4, r4, r5
 80073e4:	10a4      	asrs	r4, r4, #2
 80073e6:	2600      	movs	r6, #0
 80073e8:	42a6      	cmp	r6, r4
 80073ea:	d109      	bne.n	8007400 <__libc_init_array+0x24>
 80073ec:	4d0b      	ldr	r5, [pc, #44]	@ (800741c <__libc_init_array+0x40>)
 80073ee:	4c0c      	ldr	r4, [pc, #48]	@ (8007420 <__libc_init_array+0x44>)
 80073f0:	f000 fc72 	bl	8007cd8 <_init>
 80073f4:	1b64      	subs	r4, r4, r5
 80073f6:	10a4      	asrs	r4, r4, #2
 80073f8:	2600      	movs	r6, #0
 80073fa:	42a6      	cmp	r6, r4
 80073fc:	d105      	bne.n	800740a <__libc_init_array+0x2e>
 80073fe:	bd70      	pop	{r4, r5, r6, pc}
 8007400:	f855 3b04 	ldr.w	r3, [r5], #4
 8007404:	4798      	blx	r3
 8007406:	3601      	adds	r6, #1
 8007408:	e7ee      	b.n	80073e8 <__libc_init_array+0xc>
 800740a:	f855 3b04 	ldr.w	r3, [r5], #4
 800740e:	4798      	blx	r3
 8007410:	3601      	adds	r6, #1
 8007412:	e7f2      	b.n	80073fa <__libc_init_array+0x1e>
 8007414:	08007e7c 	.word	0x08007e7c
 8007418:	08007e7c 	.word	0x08007e7c
 800741c:	08007e7c 	.word	0x08007e7c
 8007420:	08007e80 	.word	0x08007e80

08007424 <__retarget_lock_acquire_recursive>:
 8007424:	4770      	bx	lr

08007426 <__retarget_lock_release_recursive>:
 8007426:	4770      	bx	lr

08007428 <memcpy>:
 8007428:	440a      	add	r2, r1
 800742a:	4291      	cmp	r1, r2
 800742c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007430:	d100      	bne.n	8007434 <memcpy+0xc>
 8007432:	4770      	bx	lr
 8007434:	b510      	push	{r4, lr}
 8007436:	f811 4b01 	ldrb.w	r4, [r1], #1
 800743a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800743e:	4291      	cmp	r1, r2
 8007440:	d1f9      	bne.n	8007436 <memcpy+0xe>
 8007442:	bd10      	pop	{r4, pc}

08007444 <_free_r>:
 8007444:	b538      	push	{r3, r4, r5, lr}
 8007446:	4605      	mov	r5, r0
 8007448:	2900      	cmp	r1, #0
 800744a:	d041      	beq.n	80074d0 <_free_r+0x8c>
 800744c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007450:	1f0c      	subs	r4, r1, #4
 8007452:	2b00      	cmp	r3, #0
 8007454:	bfb8      	it	lt
 8007456:	18e4      	addlt	r4, r4, r3
 8007458:	f000 f8e0 	bl	800761c <__malloc_lock>
 800745c:	4a1d      	ldr	r2, [pc, #116]	@ (80074d4 <_free_r+0x90>)
 800745e:	6813      	ldr	r3, [r2, #0]
 8007460:	b933      	cbnz	r3, 8007470 <_free_r+0x2c>
 8007462:	6063      	str	r3, [r4, #4]
 8007464:	6014      	str	r4, [r2, #0]
 8007466:	4628      	mov	r0, r5
 8007468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800746c:	f000 b8dc 	b.w	8007628 <__malloc_unlock>
 8007470:	42a3      	cmp	r3, r4
 8007472:	d908      	bls.n	8007486 <_free_r+0x42>
 8007474:	6820      	ldr	r0, [r4, #0]
 8007476:	1821      	adds	r1, r4, r0
 8007478:	428b      	cmp	r3, r1
 800747a:	bf01      	itttt	eq
 800747c:	6819      	ldreq	r1, [r3, #0]
 800747e:	685b      	ldreq	r3, [r3, #4]
 8007480:	1809      	addeq	r1, r1, r0
 8007482:	6021      	streq	r1, [r4, #0]
 8007484:	e7ed      	b.n	8007462 <_free_r+0x1e>
 8007486:	461a      	mov	r2, r3
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	b10b      	cbz	r3, 8007490 <_free_r+0x4c>
 800748c:	42a3      	cmp	r3, r4
 800748e:	d9fa      	bls.n	8007486 <_free_r+0x42>
 8007490:	6811      	ldr	r1, [r2, #0]
 8007492:	1850      	adds	r0, r2, r1
 8007494:	42a0      	cmp	r0, r4
 8007496:	d10b      	bne.n	80074b0 <_free_r+0x6c>
 8007498:	6820      	ldr	r0, [r4, #0]
 800749a:	4401      	add	r1, r0
 800749c:	1850      	adds	r0, r2, r1
 800749e:	4283      	cmp	r3, r0
 80074a0:	6011      	str	r1, [r2, #0]
 80074a2:	d1e0      	bne.n	8007466 <_free_r+0x22>
 80074a4:	6818      	ldr	r0, [r3, #0]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	6053      	str	r3, [r2, #4]
 80074aa:	4408      	add	r0, r1
 80074ac:	6010      	str	r0, [r2, #0]
 80074ae:	e7da      	b.n	8007466 <_free_r+0x22>
 80074b0:	d902      	bls.n	80074b8 <_free_r+0x74>
 80074b2:	230c      	movs	r3, #12
 80074b4:	602b      	str	r3, [r5, #0]
 80074b6:	e7d6      	b.n	8007466 <_free_r+0x22>
 80074b8:	6820      	ldr	r0, [r4, #0]
 80074ba:	1821      	adds	r1, r4, r0
 80074bc:	428b      	cmp	r3, r1
 80074be:	bf04      	itt	eq
 80074c0:	6819      	ldreq	r1, [r3, #0]
 80074c2:	685b      	ldreq	r3, [r3, #4]
 80074c4:	6063      	str	r3, [r4, #4]
 80074c6:	bf04      	itt	eq
 80074c8:	1809      	addeq	r1, r1, r0
 80074ca:	6021      	streq	r1, [r4, #0]
 80074cc:	6054      	str	r4, [r2, #4]
 80074ce:	e7ca      	b.n	8007466 <_free_r+0x22>
 80074d0:	bd38      	pop	{r3, r4, r5, pc}
 80074d2:	bf00      	nop
 80074d4:	2001463c 	.word	0x2001463c

080074d8 <sbrk_aligned>:
 80074d8:	b570      	push	{r4, r5, r6, lr}
 80074da:	4e0f      	ldr	r6, [pc, #60]	@ (8007518 <sbrk_aligned+0x40>)
 80074dc:	460c      	mov	r4, r1
 80074de:	6831      	ldr	r1, [r6, #0]
 80074e0:	4605      	mov	r5, r0
 80074e2:	b911      	cbnz	r1, 80074ea <sbrk_aligned+0x12>
 80074e4:	f000 fba4 	bl	8007c30 <_sbrk_r>
 80074e8:	6030      	str	r0, [r6, #0]
 80074ea:	4621      	mov	r1, r4
 80074ec:	4628      	mov	r0, r5
 80074ee:	f000 fb9f 	bl	8007c30 <_sbrk_r>
 80074f2:	1c43      	adds	r3, r0, #1
 80074f4:	d103      	bne.n	80074fe <sbrk_aligned+0x26>
 80074f6:	f04f 34ff 	mov.w	r4, #4294967295
 80074fa:	4620      	mov	r0, r4
 80074fc:	bd70      	pop	{r4, r5, r6, pc}
 80074fe:	1cc4      	adds	r4, r0, #3
 8007500:	f024 0403 	bic.w	r4, r4, #3
 8007504:	42a0      	cmp	r0, r4
 8007506:	d0f8      	beq.n	80074fa <sbrk_aligned+0x22>
 8007508:	1a21      	subs	r1, r4, r0
 800750a:	4628      	mov	r0, r5
 800750c:	f000 fb90 	bl	8007c30 <_sbrk_r>
 8007510:	3001      	adds	r0, #1
 8007512:	d1f2      	bne.n	80074fa <sbrk_aligned+0x22>
 8007514:	e7ef      	b.n	80074f6 <sbrk_aligned+0x1e>
 8007516:	bf00      	nop
 8007518:	20014638 	.word	0x20014638

0800751c <_malloc_r>:
 800751c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007520:	1ccd      	adds	r5, r1, #3
 8007522:	f025 0503 	bic.w	r5, r5, #3
 8007526:	3508      	adds	r5, #8
 8007528:	2d0c      	cmp	r5, #12
 800752a:	bf38      	it	cc
 800752c:	250c      	movcc	r5, #12
 800752e:	2d00      	cmp	r5, #0
 8007530:	4606      	mov	r6, r0
 8007532:	db01      	blt.n	8007538 <_malloc_r+0x1c>
 8007534:	42a9      	cmp	r1, r5
 8007536:	d904      	bls.n	8007542 <_malloc_r+0x26>
 8007538:	230c      	movs	r3, #12
 800753a:	6033      	str	r3, [r6, #0]
 800753c:	2000      	movs	r0, #0
 800753e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007542:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007618 <_malloc_r+0xfc>
 8007546:	f000 f869 	bl	800761c <__malloc_lock>
 800754a:	f8d8 3000 	ldr.w	r3, [r8]
 800754e:	461c      	mov	r4, r3
 8007550:	bb44      	cbnz	r4, 80075a4 <_malloc_r+0x88>
 8007552:	4629      	mov	r1, r5
 8007554:	4630      	mov	r0, r6
 8007556:	f7ff ffbf 	bl	80074d8 <sbrk_aligned>
 800755a:	1c43      	adds	r3, r0, #1
 800755c:	4604      	mov	r4, r0
 800755e:	d158      	bne.n	8007612 <_malloc_r+0xf6>
 8007560:	f8d8 4000 	ldr.w	r4, [r8]
 8007564:	4627      	mov	r7, r4
 8007566:	2f00      	cmp	r7, #0
 8007568:	d143      	bne.n	80075f2 <_malloc_r+0xd6>
 800756a:	2c00      	cmp	r4, #0
 800756c:	d04b      	beq.n	8007606 <_malloc_r+0xea>
 800756e:	6823      	ldr	r3, [r4, #0]
 8007570:	4639      	mov	r1, r7
 8007572:	4630      	mov	r0, r6
 8007574:	eb04 0903 	add.w	r9, r4, r3
 8007578:	f000 fb5a 	bl	8007c30 <_sbrk_r>
 800757c:	4581      	cmp	r9, r0
 800757e:	d142      	bne.n	8007606 <_malloc_r+0xea>
 8007580:	6821      	ldr	r1, [r4, #0]
 8007582:	1a6d      	subs	r5, r5, r1
 8007584:	4629      	mov	r1, r5
 8007586:	4630      	mov	r0, r6
 8007588:	f7ff ffa6 	bl	80074d8 <sbrk_aligned>
 800758c:	3001      	adds	r0, #1
 800758e:	d03a      	beq.n	8007606 <_malloc_r+0xea>
 8007590:	6823      	ldr	r3, [r4, #0]
 8007592:	442b      	add	r3, r5
 8007594:	6023      	str	r3, [r4, #0]
 8007596:	f8d8 3000 	ldr.w	r3, [r8]
 800759a:	685a      	ldr	r2, [r3, #4]
 800759c:	bb62      	cbnz	r2, 80075f8 <_malloc_r+0xdc>
 800759e:	f8c8 7000 	str.w	r7, [r8]
 80075a2:	e00f      	b.n	80075c4 <_malloc_r+0xa8>
 80075a4:	6822      	ldr	r2, [r4, #0]
 80075a6:	1b52      	subs	r2, r2, r5
 80075a8:	d420      	bmi.n	80075ec <_malloc_r+0xd0>
 80075aa:	2a0b      	cmp	r2, #11
 80075ac:	d917      	bls.n	80075de <_malloc_r+0xc2>
 80075ae:	1961      	adds	r1, r4, r5
 80075b0:	42a3      	cmp	r3, r4
 80075b2:	6025      	str	r5, [r4, #0]
 80075b4:	bf18      	it	ne
 80075b6:	6059      	strne	r1, [r3, #4]
 80075b8:	6863      	ldr	r3, [r4, #4]
 80075ba:	bf08      	it	eq
 80075bc:	f8c8 1000 	streq.w	r1, [r8]
 80075c0:	5162      	str	r2, [r4, r5]
 80075c2:	604b      	str	r3, [r1, #4]
 80075c4:	4630      	mov	r0, r6
 80075c6:	f000 f82f 	bl	8007628 <__malloc_unlock>
 80075ca:	f104 000b 	add.w	r0, r4, #11
 80075ce:	1d23      	adds	r3, r4, #4
 80075d0:	f020 0007 	bic.w	r0, r0, #7
 80075d4:	1ac2      	subs	r2, r0, r3
 80075d6:	bf1c      	itt	ne
 80075d8:	1a1b      	subne	r3, r3, r0
 80075da:	50a3      	strne	r3, [r4, r2]
 80075dc:	e7af      	b.n	800753e <_malloc_r+0x22>
 80075de:	6862      	ldr	r2, [r4, #4]
 80075e0:	42a3      	cmp	r3, r4
 80075e2:	bf0c      	ite	eq
 80075e4:	f8c8 2000 	streq.w	r2, [r8]
 80075e8:	605a      	strne	r2, [r3, #4]
 80075ea:	e7eb      	b.n	80075c4 <_malloc_r+0xa8>
 80075ec:	4623      	mov	r3, r4
 80075ee:	6864      	ldr	r4, [r4, #4]
 80075f0:	e7ae      	b.n	8007550 <_malloc_r+0x34>
 80075f2:	463c      	mov	r4, r7
 80075f4:	687f      	ldr	r7, [r7, #4]
 80075f6:	e7b6      	b.n	8007566 <_malloc_r+0x4a>
 80075f8:	461a      	mov	r2, r3
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	42a3      	cmp	r3, r4
 80075fe:	d1fb      	bne.n	80075f8 <_malloc_r+0xdc>
 8007600:	2300      	movs	r3, #0
 8007602:	6053      	str	r3, [r2, #4]
 8007604:	e7de      	b.n	80075c4 <_malloc_r+0xa8>
 8007606:	230c      	movs	r3, #12
 8007608:	6033      	str	r3, [r6, #0]
 800760a:	4630      	mov	r0, r6
 800760c:	f000 f80c 	bl	8007628 <__malloc_unlock>
 8007610:	e794      	b.n	800753c <_malloc_r+0x20>
 8007612:	6005      	str	r5, [r0, #0]
 8007614:	e7d6      	b.n	80075c4 <_malloc_r+0xa8>
 8007616:	bf00      	nop
 8007618:	2001463c 	.word	0x2001463c

0800761c <__malloc_lock>:
 800761c:	4801      	ldr	r0, [pc, #4]	@ (8007624 <__malloc_lock+0x8>)
 800761e:	f7ff bf01 	b.w	8007424 <__retarget_lock_acquire_recursive>
 8007622:	bf00      	nop
 8007624:	20014634 	.word	0x20014634

08007628 <__malloc_unlock>:
 8007628:	4801      	ldr	r0, [pc, #4]	@ (8007630 <__malloc_unlock+0x8>)
 800762a:	f7ff befc 	b.w	8007426 <__retarget_lock_release_recursive>
 800762e:	bf00      	nop
 8007630:	20014634 	.word	0x20014634

08007634 <__ssputs_r>:
 8007634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007638:	688e      	ldr	r6, [r1, #8]
 800763a:	461f      	mov	r7, r3
 800763c:	42be      	cmp	r6, r7
 800763e:	680b      	ldr	r3, [r1, #0]
 8007640:	4682      	mov	sl, r0
 8007642:	460c      	mov	r4, r1
 8007644:	4690      	mov	r8, r2
 8007646:	d82d      	bhi.n	80076a4 <__ssputs_r+0x70>
 8007648:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800764c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007650:	d026      	beq.n	80076a0 <__ssputs_r+0x6c>
 8007652:	6965      	ldr	r5, [r4, #20]
 8007654:	6909      	ldr	r1, [r1, #16]
 8007656:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800765a:	eba3 0901 	sub.w	r9, r3, r1
 800765e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007662:	1c7b      	adds	r3, r7, #1
 8007664:	444b      	add	r3, r9
 8007666:	106d      	asrs	r5, r5, #1
 8007668:	429d      	cmp	r5, r3
 800766a:	bf38      	it	cc
 800766c:	461d      	movcc	r5, r3
 800766e:	0553      	lsls	r3, r2, #21
 8007670:	d527      	bpl.n	80076c2 <__ssputs_r+0x8e>
 8007672:	4629      	mov	r1, r5
 8007674:	f7ff ff52 	bl	800751c <_malloc_r>
 8007678:	4606      	mov	r6, r0
 800767a:	b360      	cbz	r0, 80076d6 <__ssputs_r+0xa2>
 800767c:	6921      	ldr	r1, [r4, #16]
 800767e:	464a      	mov	r2, r9
 8007680:	f7ff fed2 	bl	8007428 <memcpy>
 8007684:	89a3      	ldrh	r3, [r4, #12]
 8007686:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800768a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800768e:	81a3      	strh	r3, [r4, #12]
 8007690:	6126      	str	r6, [r4, #16]
 8007692:	6165      	str	r5, [r4, #20]
 8007694:	444e      	add	r6, r9
 8007696:	eba5 0509 	sub.w	r5, r5, r9
 800769a:	6026      	str	r6, [r4, #0]
 800769c:	60a5      	str	r5, [r4, #8]
 800769e:	463e      	mov	r6, r7
 80076a0:	42be      	cmp	r6, r7
 80076a2:	d900      	bls.n	80076a6 <__ssputs_r+0x72>
 80076a4:	463e      	mov	r6, r7
 80076a6:	6820      	ldr	r0, [r4, #0]
 80076a8:	4632      	mov	r2, r6
 80076aa:	4641      	mov	r1, r8
 80076ac:	f000 faa6 	bl	8007bfc <memmove>
 80076b0:	68a3      	ldr	r3, [r4, #8]
 80076b2:	1b9b      	subs	r3, r3, r6
 80076b4:	60a3      	str	r3, [r4, #8]
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	4433      	add	r3, r6
 80076ba:	6023      	str	r3, [r4, #0]
 80076bc:	2000      	movs	r0, #0
 80076be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076c2:	462a      	mov	r2, r5
 80076c4:	f000 fac4 	bl	8007c50 <_realloc_r>
 80076c8:	4606      	mov	r6, r0
 80076ca:	2800      	cmp	r0, #0
 80076cc:	d1e0      	bne.n	8007690 <__ssputs_r+0x5c>
 80076ce:	6921      	ldr	r1, [r4, #16]
 80076d0:	4650      	mov	r0, sl
 80076d2:	f7ff feb7 	bl	8007444 <_free_r>
 80076d6:	230c      	movs	r3, #12
 80076d8:	f8ca 3000 	str.w	r3, [sl]
 80076dc:	89a3      	ldrh	r3, [r4, #12]
 80076de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076e2:	81a3      	strh	r3, [r4, #12]
 80076e4:	f04f 30ff 	mov.w	r0, #4294967295
 80076e8:	e7e9      	b.n	80076be <__ssputs_r+0x8a>
	...

080076ec <_svfiprintf_r>:
 80076ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f0:	4698      	mov	r8, r3
 80076f2:	898b      	ldrh	r3, [r1, #12]
 80076f4:	061b      	lsls	r3, r3, #24
 80076f6:	b09d      	sub	sp, #116	@ 0x74
 80076f8:	4607      	mov	r7, r0
 80076fa:	460d      	mov	r5, r1
 80076fc:	4614      	mov	r4, r2
 80076fe:	d510      	bpl.n	8007722 <_svfiprintf_r+0x36>
 8007700:	690b      	ldr	r3, [r1, #16]
 8007702:	b973      	cbnz	r3, 8007722 <_svfiprintf_r+0x36>
 8007704:	2140      	movs	r1, #64	@ 0x40
 8007706:	f7ff ff09 	bl	800751c <_malloc_r>
 800770a:	6028      	str	r0, [r5, #0]
 800770c:	6128      	str	r0, [r5, #16]
 800770e:	b930      	cbnz	r0, 800771e <_svfiprintf_r+0x32>
 8007710:	230c      	movs	r3, #12
 8007712:	603b      	str	r3, [r7, #0]
 8007714:	f04f 30ff 	mov.w	r0, #4294967295
 8007718:	b01d      	add	sp, #116	@ 0x74
 800771a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800771e:	2340      	movs	r3, #64	@ 0x40
 8007720:	616b      	str	r3, [r5, #20]
 8007722:	2300      	movs	r3, #0
 8007724:	9309      	str	r3, [sp, #36]	@ 0x24
 8007726:	2320      	movs	r3, #32
 8007728:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800772c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007730:	2330      	movs	r3, #48	@ 0x30
 8007732:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80078d0 <_svfiprintf_r+0x1e4>
 8007736:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800773a:	f04f 0901 	mov.w	r9, #1
 800773e:	4623      	mov	r3, r4
 8007740:	469a      	mov	sl, r3
 8007742:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007746:	b10a      	cbz	r2, 800774c <_svfiprintf_r+0x60>
 8007748:	2a25      	cmp	r2, #37	@ 0x25
 800774a:	d1f9      	bne.n	8007740 <_svfiprintf_r+0x54>
 800774c:	ebba 0b04 	subs.w	fp, sl, r4
 8007750:	d00b      	beq.n	800776a <_svfiprintf_r+0x7e>
 8007752:	465b      	mov	r3, fp
 8007754:	4622      	mov	r2, r4
 8007756:	4629      	mov	r1, r5
 8007758:	4638      	mov	r0, r7
 800775a:	f7ff ff6b 	bl	8007634 <__ssputs_r>
 800775e:	3001      	adds	r0, #1
 8007760:	f000 80a7 	beq.w	80078b2 <_svfiprintf_r+0x1c6>
 8007764:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007766:	445a      	add	r2, fp
 8007768:	9209      	str	r2, [sp, #36]	@ 0x24
 800776a:	f89a 3000 	ldrb.w	r3, [sl]
 800776e:	2b00      	cmp	r3, #0
 8007770:	f000 809f 	beq.w	80078b2 <_svfiprintf_r+0x1c6>
 8007774:	2300      	movs	r3, #0
 8007776:	f04f 32ff 	mov.w	r2, #4294967295
 800777a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800777e:	f10a 0a01 	add.w	sl, sl, #1
 8007782:	9304      	str	r3, [sp, #16]
 8007784:	9307      	str	r3, [sp, #28]
 8007786:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800778a:	931a      	str	r3, [sp, #104]	@ 0x68
 800778c:	4654      	mov	r4, sl
 800778e:	2205      	movs	r2, #5
 8007790:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007794:	484e      	ldr	r0, [pc, #312]	@ (80078d0 <_svfiprintf_r+0x1e4>)
 8007796:	f7f8 fd8b 	bl	80002b0 <memchr>
 800779a:	9a04      	ldr	r2, [sp, #16]
 800779c:	b9d8      	cbnz	r0, 80077d6 <_svfiprintf_r+0xea>
 800779e:	06d0      	lsls	r0, r2, #27
 80077a0:	bf44      	itt	mi
 80077a2:	2320      	movmi	r3, #32
 80077a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077a8:	0711      	lsls	r1, r2, #28
 80077aa:	bf44      	itt	mi
 80077ac:	232b      	movmi	r3, #43	@ 0x2b
 80077ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80077b2:	f89a 3000 	ldrb.w	r3, [sl]
 80077b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80077b8:	d015      	beq.n	80077e6 <_svfiprintf_r+0xfa>
 80077ba:	9a07      	ldr	r2, [sp, #28]
 80077bc:	4654      	mov	r4, sl
 80077be:	2000      	movs	r0, #0
 80077c0:	f04f 0c0a 	mov.w	ip, #10
 80077c4:	4621      	mov	r1, r4
 80077c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077ca:	3b30      	subs	r3, #48	@ 0x30
 80077cc:	2b09      	cmp	r3, #9
 80077ce:	d94b      	bls.n	8007868 <_svfiprintf_r+0x17c>
 80077d0:	b1b0      	cbz	r0, 8007800 <_svfiprintf_r+0x114>
 80077d2:	9207      	str	r2, [sp, #28]
 80077d4:	e014      	b.n	8007800 <_svfiprintf_r+0x114>
 80077d6:	eba0 0308 	sub.w	r3, r0, r8
 80077da:	fa09 f303 	lsl.w	r3, r9, r3
 80077de:	4313      	orrs	r3, r2
 80077e0:	9304      	str	r3, [sp, #16]
 80077e2:	46a2      	mov	sl, r4
 80077e4:	e7d2      	b.n	800778c <_svfiprintf_r+0xa0>
 80077e6:	9b03      	ldr	r3, [sp, #12]
 80077e8:	1d19      	adds	r1, r3, #4
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	9103      	str	r1, [sp, #12]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	bfbb      	ittet	lt
 80077f2:	425b      	neglt	r3, r3
 80077f4:	f042 0202 	orrlt.w	r2, r2, #2
 80077f8:	9307      	strge	r3, [sp, #28]
 80077fa:	9307      	strlt	r3, [sp, #28]
 80077fc:	bfb8      	it	lt
 80077fe:	9204      	strlt	r2, [sp, #16]
 8007800:	7823      	ldrb	r3, [r4, #0]
 8007802:	2b2e      	cmp	r3, #46	@ 0x2e
 8007804:	d10a      	bne.n	800781c <_svfiprintf_r+0x130>
 8007806:	7863      	ldrb	r3, [r4, #1]
 8007808:	2b2a      	cmp	r3, #42	@ 0x2a
 800780a:	d132      	bne.n	8007872 <_svfiprintf_r+0x186>
 800780c:	9b03      	ldr	r3, [sp, #12]
 800780e:	1d1a      	adds	r2, r3, #4
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	9203      	str	r2, [sp, #12]
 8007814:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007818:	3402      	adds	r4, #2
 800781a:	9305      	str	r3, [sp, #20]
 800781c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80078e0 <_svfiprintf_r+0x1f4>
 8007820:	7821      	ldrb	r1, [r4, #0]
 8007822:	2203      	movs	r2, #3
 8007824:	4650      	mov	r0, sl
 8007826:	f7f8 fd43 	bl	80002b0 <memchr>
 800782a:	b138      	cbz	r0, 800783c <_svfiprintf_r+0x150>
 800782c:	9b04      	ldr	r3, [sp, #16]
 800782e:	eba0 000a 	sub.w	r0, r0, sl
 8007832:	2240      	movs	r2, #64	@ 0x40
 8007834:	4082      	lsls	r2, r0
 8007836:	4313      	orrs	r3, r2
 8007838:	3401      	adds	r4, #1
 800783a:	9304      	str	r3, [sp, #16]
 800783c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007840:	4824      	ldr	r0, [pc, #144]	@ (80078d4 <_svfiprintf_r+0x1e8>)
 8007842:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007846:	2206      	movs	r2, #6
 8007848:	f7f8 fd32 	bl	80002b0 <memchr>
 800784c:	2800      	cmp	r0, #0
 800784e:	d036      	beq.n	80078be <_svfiprintf_r+0x1d2>
 8007850:	4b21      	ldr	r3, [pc, #132]	@ (80078d8 <_svfiprintf_r+0x1ec>)
 8007852:	bb1b      	cbnz	r3, 800789c <_svfiprintf_r+0x1b0>
 8007854:	9b03      	ldr	r3, [sp, #12]
 8007856:	3307      	adds	r3, #7
 8007858:	f023 0307 	bic.w	r3, r3, #7
 800785c:	3308      	adds	r3, #8
 800785e:	9303      	str	r3, [sp, #12]
 8007860:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007862:	4433      	add	r3, r6
 8007864:	9309      	str	r3, [sp, #36]	@ 0x24
 8007866:	e76a      	b.n	800773e <_svfiprintf_r+0x52>
 8007868:	fb0c 3202 	mla	r2, ip, r2, r3
 800786c:	460c      	mov	r4, r1
 800786e:	2001      	movs	r0, #1
 8007870:	e7a8      	b.n	80077c4 <_svfiprintf_r+0xd8>
 8007872:	2300      	movs	r3, #0
 8007874:	3401      	adds	r4, #1
 8007876:	9305      	str	r3, [sp, #20]
 8007878:	4619      	mov	r1, r3
 800787a:	f04f 0c0a 	mov.w	ip, #10
 800787e:	4620      	mov	r0, r4
 8007880:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007884:	3a30      	subs	r2, #48	@ 0x30
 8007886:	2a09      	cmp	r2, #9
 8007888:	d903      	bls.n	8007892 <_svfiprintf_r+0x1a6>
 800788a:	2b00      	cmp	r3, #0
 800788c:	d0c6      	beq.n	800781c <_svfiprintf_r+0x130>
 800788e:	9105      	str	r1, [sp, #20]
 8007890:	e7c4      	b.n	800781c <_svfiprintf_r+0x130>
 8007892:	fb0c 2101 	mla	r1, ip, r1, r2
 8007896:	4604      	mov	r4, r0
 8007898:	2301      	movs	r3, #1
 800789a:	e7f0      	b.n	800787e <_svfiprintf_r+0x192>
 800789c:	ab03      	add	r3, sp, #12
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	462a      	mov	r2, r5
 80078a2:	4b0e      	ldr	r3, [pc, #56]	@ (80078dc <_svfiprintf_r+0x1f0>)
 80078a4:	a904      	add	r1, sp, #16
 80078a6:	4638      	mov	r0, r7
 80078a8:	f3af 8000 	nop.w
 80078ac:	1c42      	adds	r2, r0, #1
 80078ae:	4606      	mov	r6, r0
 80078b0:	d1d6      	bne.n	8007860 <_svfiprintf_r+0x174>
 80078b2:	89ab      	ldrh	r3, [r5, #12]
 80078b4:	065b      	lsls	r3, r3, #25
 80078b6:	f53f af2d 	bmi.w	8007714 <_svfiprintf_r+0x28>
 80078ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80078bc:	e72c      	b.n	8007718 <_svfiprintf_r+0x2c>
 80078be:	ab03      	add	r3, sp, #12
 80078c0:	9300      	str	r3, [sp, #0]
 80078c2:	462a      	mov	r2, r5
 80078c4:	4b05      	ldr	r3, [pc, #20]	@ (80078dc <_svfiprintf_r+0x1f0>)
 80078c6:	a904      	add	r1, sp, #16
 80078c8:	4638      	mov	r0, r7
 80078ca:	f000 f879 	bl	80079c0 <_printf_i>
 80078ce:	e7ed      	b.n	80078ac <_svfiprintf_r+0x1c0>
 80078d0:	08007e40 	.word	0x08007e40
 80078d4:	08007e4a 	.word	0x08007e4a
 80078d8:	00000000 	.word	0x00000000
 80078dc:	08007635 	.word	0x08007635
 80078e0:	08007e46 	.word	0x08007e46

080078e4 <_printf_common>:
 80078e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078e8:	4616      	mov	r6, r2
 80078ea:	4698      	mov	r8, r3
 80078ec:	688a      	ldr	r2, [r1, #8]
 80078ee:	690b      	ldr	r3, [r1, #16]
 80078f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80078f4:	4293      	cmp	r3, r2
 80078f6:	bfb8      	it	lt
 80078f8:	4613      	movlt	r3, r2
 80078fa:	6033      	str	r3, [r6, #0]
 80078fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007900:	4607      	mov	r7, r0
 8007902:	460c      	mov	r4, r1
 8007904:	b10a      	cbz	r2, 800790a <_printf_common+0x26>
 8007906:	3301      	adds	r3, #1
 8007908:	6033      	str	r3, [r6, #0]
 800790a:	6823      	ldr	r3, [r4, #0]
 800790c:	0699      	lsls	r1, r3, #26
 800790e:	bf42      	ittt	mi
 8007910:	6833      	ldrmi	r3, [r6, #0]
 8007912:	3302      	addmi	r3, #2
 8007914:	6033      	strmi	r3, [r6, #0]
 8007916:	6825      	ldr	r5, [r4, #0]
 8007918:	f015 0506 	ands.w	r5, r5, #6
 800791c:	d106      	bne.n	800792c <_printf_common+0x48>
 800791e:	f104 0a19 	add.w	sl, r4, #25
 8007922:	68e3      	ldr	r3, [r4, #12]
 8007924:	6832      	ldr	r2, [r6, #0]
 8007926:	1a9b      	subs	r3, r3, r2
 8007928:	42ab      	cmp	r3, r5
 800792a:	dc26      	bgt.n	800797a <_printf_common+0x96>
 800792c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007930:	6822      	ldr	r2, [r4, #0]
 8007932:	3b00      	subs	r3, #0
 8007934:	bf18      	it	ne
 8007936:	2301      	movne	r3, #1
 8007938:	0692      	lsls	r2, r2, #26
 800793a:	d42b      	bmi.n	8007994 <_printf_common+0xb0>
 800793c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007940:	4641      	mov	r1, r8
 8007942:	4638      	mov	r0, r7
 8007944:	47c8      	blx	r9
 8007946:	3001      	adds	r0, #1
 8007948:	d01e      	beq.n	8007988 <_printf_common+0xa4>
 800794a:	6823      	ldr	r3, [r4, #0]
 800794c:	6922      	ldr	r2, [r4, #16]
 800794e:	f003 0306 	and.w	r3, r3, #6
 8007952:	2b04      	cmp	r3, #4
 8007954:	bf02      	ittt	eq
 8007956:	68e5      	ldreq	r5, [r4, #12]
 8007958:	6833      	ldreq	r3, [r6, #0]
 800795a:	1aed      	subeq	r5, r5, r3
 800795c:	68a3      	ldr	r3, [r4, #8]
 800795e:	bf0c      	ite	eq
 8007960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007964:	2500      	movne	r5, #0
 8007966:	4293      	cmp	r3, r2
 8007968:	bfc4      	itt	gt
 800796a:	1a9b      	subgt	r3, r3, r2
 800796c:	18ed      	addgt	r5, r5, r3
 800796e:	2600      	movs	r6, #0
 8007970:	341a      	adds	r4, #26
 8007972:	42b5      	cmp	r5, r6
 8007974:	d11a      	bne.n	80079ac <_printf_common+0xc8>
 8007976:	2000      	movs	r0, #0
 8007978:	e008      	b.n	800798c <_printf_common+0xa8>
 800797a:	2301      	movs	r3, #1
 800797c:	4652      	mov	r2, sl
 800797e:	4641      	mov	r1, r8
 8007980:	4638      	mov	r0, r7
 8007982:	47c8      	blx	r9
 8007984:	3001      	adds	r0, #1
 8007986:	d103      	bne.n	8007990 <_printf_common+0xac>
 8007988:	f04f 30ff 	mov.w	r0, #4294967295
 800798c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007990:	3501      	adds	r5, #1
 8007992:	e7c6      	b.n	8007922 <_printf_common+0x3e>
 8007994:	18e1      	adds	r1, r4, r3
 8007996:	1c5a      	adds	r2, r3, #1
 8007998:	2030      	movs	r0, #48	@ 0x30
 800799a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800799e:	4422      	add	r2, r4
 80079a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80079a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80079a8:	3302      	adds	r3, #2
 80079aa:	e7c7      	b.n	800793c <_printf_common+0x58>
 80079ac:	2301      	movs	r3, #1
 80079ae:	4622      	mov	r2, r4
 80079b0:	4641      	mov	r1, r8
 80079b2:	4638      	mov	r0, r7
 80079b4:	47c8      	blx	r9
 80079b6:	3001      	adds	r0, #1
 80079b8:	d0e6      	beq.n	8007988 <_printf_common+0xa4>
 80079ba:	3601      	adds	r6, #1
 80079bc:	e7d9      	b.n	8007972 <_printf_common+0x8e>
	...

080079c0 <_printf_i>:
 80079c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079c4:	7e0f      	ldrb	r7, [r1, #24]
 80079c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80079c8:	2f78      	cmp	r7, #120	@ 0x78
 80079ca:	4691      	mov	r9, r2
 80079cc:	4680      	mov	r8, r0
 80079ce:	460c      	mov	r4, r1
 80079d0:	469a      	mov	sl, r3
 80079d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80079d6:	d807      	bhi.n	80079e8 <_printf_i+0x28>
 80079d8:	2f62      	cmp	r7, #98	@ 0x62
 80079da:	d80a      	bhi.n	80079f2 <_printf_i+0x32>
 80079dc:	2f00      	cmp	r7, #0
 80079de:	f000 80d1 	beq.w	8007b84 <_printf_i+0x1c4>
 80079e2:	2f58      	cmp	r7, #88	@ 0x58
 80079e4:	f000 80b8 	beq.w	8007b58 <_printf_i+0x198>
 80079e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80079ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80079f0:	e03a      	b.n	8007a68 <_printf_i+0xa8>
 80079f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80079f6:	2b15      	cmp	r3, #21
 80079f8:	d8f6      	bhi.n	80079e8 <_printf_i+0x28>
 80079fa:	a101      	add	r1, pc, #4	@ (adr r1, 8007a00 <_printf_i+0x40>)
 80079fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a00:	08007a59 	.word	0x08007a59
 8007a04:	08007a6d 	.word	0x08007a6d
 8007a08:	080079e9 	.word	0x080079e9
 8007a0c:	080079e9 	.word	0x080079e9
 8007a10:	080079e9 	.word	0x080079e9
 8007a14:	080079e9 	.word	0x080079e9
 8007a18:	08007a6d 	.word	0x08007a6d
 8007a1c:	080079e9 	.word	0x080079e9
 8007a20:	080079e9 	.word	0x080079e9
 8007a24:	080079e9 	.word	0x080079e9
 8007a28:	080079e9 	.word	0x080079e9
 8007a2c:	08007b6b 	.word	0x08007b6b
 8007a30:	08007a97 	.word	0x08007a97
 8007a34:	08007b25 	.word	0x08007b25
 8007a38:	080079e9 	.word	0x080079e9
 8007a3c:	080079e9 	.word	0x080079e9
 8007a40:	08007b8d 	.word	0x08007b8d
 8007a44:	080079e9 	.word	0x080079e9
 8007a48:	08007a97 	.word	0x08007a97
 8007a4c:	080079e9 	.word	0x080079e9
 8007a50:	080079e9 	.word	0x080079e9
 8007a54:	08007b2d 	.word	0x08007b2d
 8007a58:	6833      	ldr	r3, [r6, #0]
 8007a5a:	1d1a      	adds	r2, r3, #4
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	6032      	str	r2, [r6, #0]
 8007a60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a64:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e09c      	b.n	8007ba6 <_printf_i+0x1e6>
 8007a6c:	6833      	ldr	r3, [r6, #0]
 8007a6e:	6820      	ldr	r0, [r4, #0]
 8007a70:	1d19      	adds	r1, r3, #4
 8007a72:	6031      	str	r1, [r6, #0]
 8007a74:	0606      	lsls	r6, r0, #24
 8007a76:	d501      	bpl.n	8007a7c <_printf_i+0xbc>
 8007a78:	681d      	ldr	r5, [r3, #0]
 8007a7a:	e003      	b.n	8007a84 <_printf_i+0xc4>
 8007a7c:	0645      	lsls	r5, r0, #25
 8007a7e:	d5fb      	bpl.n	8007a78 <_printf_i+0xb8>
 8007a80:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007a84:	2d00      	cmp	r5, #0
 8007a86:	da03      	bge.n	8007a90 <_printf_i+0xd0>
 8007a88:	232d      	movs	r3, #45	@ 0x2d
 8007a8a:	426d      	negs	r5, r5
 8007a8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a90:	4858      	ldr	r0, [pc, #352]	@ (8007bf4 <_printf_i+0x234>)
 8007a92:	230a      	movs	r3, #10
 8007a94:	e011      	b.n	8007aba <_printf_i+0xfa>
 8007a96:	6821      	ldr	r1, [r4, #0]
 8007a98:	6833      	ldr	r3, [r6, #0]
 8007a9a:	0608      	lsls	r0, r1, #24
 8007a9c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007aa0:	d402      	bmi.n	8007aa8 <_printf_i+0xe8>
 8007aa2:	0649      	lsls	r1, r1, #25
 8007aa4:	bf48      	it	mi
 8007aa6:	b2ad      	uxthmi	r5, r5
 8007aa8:	2f6f      	cmp	r7, #111	@ 0x6f
 8007aaa:	4852      	ldr	r0, [pc, #328]	@ (8007bf4 <_printf_i+0x234>)
 8007aac:	6033      	str	r3, [r6, #0]
 8007aae:	bf14      	ite	ne
 8007ab0:	230a      	movne	r3, #10
 8007ab2:	2308      	moveq	r3, #8
 8007ab4:	2100      	movs	r1, #0
 8007ab6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007aba:	6866      	ldr	r6, [r4, #4]
 8007abc:	60a6      	str	r6, [r4, #8]
 8007abe:	2e00      	cmp	r6, #0
 8007ac0:	db05      	blt.n	8007ace <_printf_i+0x10e>
 8007ac2:	6821      	ldr	r1, [r4, #0]
 8007ac4:	432e      	orrs	r6, r5
 8007ac6:	f021 0104 	bic.w	r1, r1, #4
 8007aca:	6021      	str	r1, [r4, #0]
 8007acc:	d04b      	beq.n	8007b66 <_printf_i+0x1a6>
 8007ace:	4616      	mov	r6, r2
 8007ad0:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ad4:	fb03 5711 	mls	r7, r3, r1, r5
 8007ad8:	5dc7      	ldrb	r7, [r0, r7]
 8007ada:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007ade:	462f      	mov	r7, r5
 8007ae0:	42bb      	cmp	r3, r7
 8007ae2:	460d      	mov	r5, r1
 8007ae4:	d9f4      	bls.n	8007ad0 <_printf_i+0x110>
 8007ae6:	2b08      	cmp	r3, #8
 8007ae8:	d10b      	bne.n	8007b02 <_printf_i+0x142>
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	07df      	lsls	r7, r3, #31
 8007aee:	d508      	bpl.n	8007b02 <_printf_i+0x142>
 8007af0:	6923      	ldr	r3, [r4, #16]
 8007af2:	6861      	ldr	r1, [r4, #4]
 8007af4:	4299      	cmp	r1, r3
 8007af6:	bfde      	ittt	le
 8007af8:	2330      	movle	r3, #48	@ 0x30
 8007afa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007afe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b02:	1b92      	subs	r2, r2, r6
 8007b04:	6122      	str	r2, [r4, #16]
 8007b06:	f8cd a000 	str.w	sl, [sp]
 8007b0a:	464b      	mov	r3, r9
 8007b0c:	aa03      	add	r2, sp, #12
 8007b0e:	4621      	mov	r1, r4
 8007b10:	4640      	mov	r0, r8
 8007b12:	f7ff fee7 	bl	80078e4 <_printf_common>
 8007b16:	3001      	adds	r0, #1
 8007b18:	d14a      	bne.n	8007bb0 <_printf_i+0x1f0>
 8007b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b1e:	b004      	add	sp, #16
 8007b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b24:	6823      	ldr	r3, [r4, #0]
 8007b26:	f043 0320 	orr.w	r3, r3, #32
 8007b2a:	6023      	str	r3, [r4, #0]
 8007b2c:	4832      	ldr	r0, [pc, #200]	@ (8007bf8 <_printf_i+0x238>)
 8007b2e:	2778      	movs	r7, #120	@ 0x78
 8007b30:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007b34:	6823      	ldr	r3, [r4, #0]
 8007b36:	6831      	ldr	r1, [r6, #0]
 8007b38:	061f      	lsls	r7, r3, #24
 8007b3a:	f851 5b04 	ldr.w	r5, [r1], #4
 8007b3e:	d402      	bmi.n	8007b46 <_printf_i+0x186>
 8007b40:	065f      	lsls	r7, r3, #25
 8007b42:	bf48      	it	mi
 8007b44:	b2ad      	uxthmi	r5, r5
 8007b46:	6031      	str	r1, [r6, #0]
 8007b48:	07d9      	lsls	r1, r3, #31
 8007b4a:	bf44      	itt	mi
 8007b4c:	f043 0320 	orrmi.w	r3, r3, #32
 8007b50:	6023      	strmi	r3, [r4, #0]
 8007b52:	b11d      	cbz	r5, 8007b5c <_printf_i+0x19c>
 8007b54:	2310      	movs	r3, #16
 8007b56:	e7ad      	b.n	8007ab4 <_printf_i+0xf4>
 8007b58:	4826      	ldr	r0, [pc, #152]	@ (8007bf4 <_printf_i+0x234>)
 8007b5a:	e7e9      	b.n	8007b30 <_printf_i+0x170>
 8007b5c:	6823      	ldr	r3, [r4, #0]
 8007b5e:	f023 0320 	bic.w	r3, r3, #32
 8007b62:	6023      	str	r3, [r4, #0]
 8007b64:	e7f6      	b.n	8007b54 <_printf_i+0x194>
 8007b66:	4616      	mov	r6, r2
 8007b68:	e7bd      	b.n	8007ae6 <_printf_i+0x126>
 8007b6a:	6833      	ldr	r3, [r6, #0]
 8007b6c:	6825      	ldr	r5, [r4, #0]
 8007b6e:	6961      	ldr	r1, [r4, #20]
 8007b70:	1d18      	adds	r0, r3, #4
 8007b72:	6030      	str	r0, [r6, #0]
 8007b74:	062e      	lsls	r6, r5, #24
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	d501      	bpl.n	8007b7e <_printf_i+0x1be>
 8007b7a:	6019      	str	r1, [r3, #0]
 8007b7c:	e002      	b.n	8007b84 <_printf_i+0x1c4>
 8007b7e:	0668      	lsls	r0, r5, #25
 8007b80:	d5fb      	bpl.n	8007b7a <_printf_i+0x1ba>
 8007b82:	8019      	strh	r1, [r3, #0]
 8007b84:	2300      	movs	r3, #0
 8007b86:	6123      	str	r3, [r4, #16]
 8007b88:	4616      	mov	r6, r2
 8007b8a:	e7bc      	b.n	8007b06 <_printf_i+0x146>
 8007b8c:	6833      	ldr	r3, [r6, #0]
 8007b8e:	1d1a      	adds	r2, r3, #4
 8007b90:	6032      	str	r2, [r6, #0]
 8007b92:	681e      	ldr	r6, [r3, #0]
 8007b94:	6862      	ldr	r2, [r4, #4]
 8007b96:	2100      	movs	r1, #0
 8007b98:	4630      	mov	r0, r6
 8007b9a:	f7f8 fb89 	bl	80002b0 <memchr>
 8007b9e:	b108      	cbz	r0, 8007ba4 <_printf_i+0x1e4>
 8007ba0:	1b80      	subs	r0, r0, r6
 8007ba2:	6060      	str	r0, [r4, #4]
 8007ba4:	6863      	ldr	r3, [r4, #4]
 8007ba6:	6123      	str	r3, [r4, #16]
 8007ba8:	2300      	movs	r3, #0
 8007baa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bae:	e7aa      	b.n	8007b06 <_printf_i+0x146>
 8007bb0:	6923      	ldr	r3, [r4, #16]
 8007bb2:	4632      	mov	r2, r6
 8007bb4:	4649      	mov	r1, r9
 8007bb6:	4640      	mov	r0, r8
 8007bb8:	47d0      	blx	sl
 8007bba:	3001      	adds	r0, #1
 8007bbc:	d0ad      	beq.n	8007b1a <_printf_i+0x15a>
 8007bbe:	6823      	ldr	r3, [r4, #0]
 8007bc0:	079b      	lsls	r3, r3, #30
 8007bc2:	d413      	bmi.n	8007bec <_printf_i+0x22c>
 8007bc4:	68e0      	ldr	r0, [r4, #12]
 8007bc6:	9b03      	ldr	r3, [sp, #12]
 8007bc8:	4298      	cmp	r0, r3
 8007bca:	bfb8      	it	lt
 8007bcc:	4618      	movlt	r0, r3
 8007bce:	e7a6      	b.n	8007b1e <_printf_i+0x15e>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	4632      	mov	r2, r6
 8007bd4:	4649      	mov	r1, r9
 8007bd6:	4640      	mov	r0, r8
 8007bd8:	47d0      	blx	sl
 8007bda:	3001      	adds	r0, #1
 8007bdc:	d09d      	beq.n	8007b1a <_printf_i+0x15a>
 8007bde:	3501      	adds	r5, #1
 8007be0:	68e3      	ldr	r3, [r4, #12]
 8007be2:	9903      	ldr	r1, [sp, #12]
 8007be4:	1a5b      	subs	r3, r3, r1
 8007be6:	42ab      	cmp	r3, r5
 8007be8:	dcf2      	bgt.n	8007bd0 <_printf_i+0x210>
 8007bea:	e7eb      	b.n	8007bc4 <_printf_i+0x204>
 8007bec:	2500      	movs	r5, #0
 8007bee:	f104 0619 	add.w	r6, r4, #25
 8007bf2:	e7f5      	b.n	8007be0 <_printf_i+0x220>
 8007bf4:	08007e51 	.word	0x08007e51
 8007bf8:	08007e62 	.word	0x08007e62

08007bfc <memmove>:
 8007bfc:	4288      	cmp	r0, r1
 8007bfe:	b510      	push	{r4, lr}
 8007c00:	eb01 0402 	add.w	r4, r1, r2
 8007c04:	d902      	bls.n	8007c0c <memmove+0x10>
 8007c06:	4284      	cmp	r4, r0
 8007c08:	4623      	mov	r3, r4
 8007c0a:	d807      	bhi.n	8007c1c <memmove+0x20>
 8007c0c:	1e43      	subs	r3, r0, #1
 8007c0e:	42a1      	cmp	r1, r4
 8007c10:	d008      	beq.n	8007c24 <memmove+0x28>
 8007c12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c1a:	e7f8      	b.n	8007c0e <memmove+0x12>
 8007c1c:	4402      	add	r2, r0
 8007c1e:	4601      	mov	r1, r0
 8007c20:	428a      	cmp	r2, r1
 8007c22:	d100      	bne.n	8007c26 <memmove+0x2a>
 8007c24:	bd10      	pop	{r4, pc}
 8007c26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c2e:	e7f7      	b.n	8007c20 <memmove+0x24>

08007c30 <_sbrk_r>:
 8007c30:	b538      	push	{r3, r4, r5, lr}
 8007c32:	4d06      	ldr	r5, [pc, #24]	@ (8007c4c <_sbrk_r+0x1c>)
 8007c34:	2300      	movs	r3, #0
 8007c36:	4604      	mov	r4, r0
 8007c38:	4608      	mov	r0, r1
 8007c3a:	602b      	str	r3, [r5, #0]
 8007c3c:	f000 f83e 	bl	8007cbc <_sbrk>
 8007c40:	1c43      	adds	r3, r0, #1
 8007c42:	d102      	bne.n	8007c4a <_sbrk_r+0x1a>
 8007c44:	682b      	ldr	r3, [r5, #0]
 8007c46:	b103      	cbz	r3, 8007c4a <_sbrk_r+0x1a>
 8007c48:	6023      	str	r3, [r4, #0]
 8007c4a:	bd38      	pop	{r3, r4, r5, pc}
 8007c4c:	20014630 	.word	0x20014630

08007c50 <_realloc_r>:
 8007c50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c54:	4607      	mov	r7, r0
 8007c56:	4614      	mov	r4, r2
 8007c58:	460d      	mov	r5, r1
 8007c5a:	b921      	cbnz	r1, 8007c66 <_realloc_r+0x16>
 8007c5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c60:	4611      	mov	r1, r2
 8007c62:	f7ff bc5b 	b.w	800751c <_malloc_r>
 8007c66:	b92a      	cbnz	r2, 8007c74 <_realloc_r+0x24>
 8007c68:	f7ff fbec 	bl	8007444 <_free_r>
 8007c6c:	4625      	mov	r5, r4
 8007c6e:	4628      	mov	r0, r5
 8007c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c74:	f000 f81a 	bl	8007cac <_malloc_usable_size_r>
 8007c78:	4284      	cmp	r4, r0
 8007c7a:	4606      	mov	r6, r0
 8007c7c:	d802      	bhi.n	8007c84 <_realloc_r+0x34>
 8007c7e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c82:	d8f4      	bhi.n	8007c6e <_realloc_r+0x1e>
 8007c84:	4621      	mov	r1, r4
 8007c86:	4638      	mov	r0, r7
 8007c88:	f7ff fc48 	bl	800751c <_malloc_r>
 8007c8c:	4680      	mov	r8, r0
 8007c8e:	b908      	cbnz	r0, 8007c94 <_realloc_r+0x44>
 8007c90:	4645      	mov	r5, r8
 8007c92:	e7ec      	b.n	8007c6e <_realloc_r+0x1e>
 8007c94:	42b4      	cmp	r4, r6
 8007c96:	4622      	mov	r2, r4
 8007c98:	4629      	mov	r1, r5
 8007c9a:	bf28      	it	cs
 8007c9c:	4632      	movcs	r2, r6
 8007c9e:	f7ff fbc3 	bl	8007428 <memcpy>
 8007ca2:	4629      	mov	r1, r5
 8007ca4:	4638      	mov	r0, r7
 8007ca6:	f7ff fbcd 	bl	8007444 <_free_r>
 8007caa:	e7f1      	b.n	8007c90 <_realloc_r+0x40>

08007cac <_malloc_usable_size_r>:
 8007cac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cb0:	1f18      	subs	r0, r3, #4
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	bfbc      	itt	lt
 8007cb6:	580b      	ldrlt	r3, [r1, r0]
 8007cb8:	18c0      	addlt	r0, r0, r3
 8007cba:	4770      	bx	lr

08007cbc <_sbrk>:
 8007cbc:	4a04      	ldr	r2, [pc, #16]	@ (8007cd0 <_sbrk+0x14>)
 8007cbe:	6811      	ldr	r1, [r2, #0]
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	b909      	cbnz	r1, 8007cc8 <_sbrk+0xc>
 8007cc4:	4903      	ldr	r1, [pc, #12]	@ (8007cd4 <_sbrk+0x18>)
 8007cc6:	6011      	str	r1, [r2, #0]
 8007cc8:	6810      	ldr	r0, [r2, #0]
 8007cca:	4403      	add	r3, r0
 8007ccc:	6013      	str	r3, [r2, #0]
 8007cce:	4770      	bx	lr
 8007cd0:	20014640 	.word	0x20014640
 8007cd4:	20014648 	.word	0x20014648

08007cd8 <_init>:
 8007cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cda:	bf00      	nop
 8007cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cde:	bc08      	pop	{r3}
 8007ce0:	469e      	mov	lr, r3
 8007ce2:	4770      	bx	lr

08007ce4 <_fini>:
 8007ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ce6:	bf00      	nop
 8007ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cea:	bc08      	pop	{r3}
 8007cec:	469e      	mov	lr, r3
 8007cee:	4770      	bx	lr
