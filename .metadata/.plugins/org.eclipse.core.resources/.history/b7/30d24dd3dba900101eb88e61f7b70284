/*
 * task_handler.c
 *
 *  Created on: Oct 10, 2025
 *      Author: hp
 */

#include "main.h"
extern UART_HandleTypeDef huart2;

void process_command(command_t *cmd); // notify the tasks based on command
int extract_command(command_t *cmd); // extract the bytes from the command

const char* msg_invalid="Invalid option";

void menu_task(void *param)
{
	uint32_t cmd_addr;
	command_t *cmd;
	int option;
	state_t curr_state=sMainMenu;
	// Create the string that is printed first
			const char* msg_menu="===============================\n"
					         "           Menu                \n"
					         "==============================\n"
					         "LED Effect ------------->0     \n"
					         "Date and Time ---------->1     \n"
					         "Exit ------------------->2      \n"
			                 "Enter your choice here  :       ";
			const char* msg_invalid="Invalid option";
	while(1)
	{
		xQueueSend(q_print,&msg_menu,portMAX_DELAY);
		xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
		cmd=(command_t *)cmd_addr;

		if(cmd->len == 1)
		{
			option = cmd->payload[0]-48; // convert ASCII to number
			switch(option)
			{
			case 0:
				curr_state=sLedEffect;
				xTaskNotify(handle_led_task,0,eNoAction);
				break;
			case 1:
				curr_state=sRtcMenu;
				xTaskNotify(handle_rtc_task,0,eNoAction);
				break;
			case 2:
				break;
			default:
				xQueueSend(q_print,&msg_invalid,portMAX_DELAY);
				continue;

			}
		}
		else
		{
			//Invalid option
			xQueueSend(q_print,&msg_invalid,portMAX_DELAY);
			continue;
		}

		//Exit for this
		xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
	}
}

void cmd_task(void *param)
{
	/* The task does the following:
	1. Waits until command from user is received
	2. Processes the command from the input queue
	3. Sends the command to the relevant task to take action
	*/

	BaseType_t ret;
	command_t cmd;
	while(1)
	{
		//Implement notify wait
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // waits indefinitely
		if(ret == pdTRUE)                              // Notification received
		{
			process_command(&cmd);
		}
	}
}

void print_task(void *param)
{
	uint32_t *msg;
	while(1)
	{
		xQueueReceive(q_print, &msg, portMAX_DELAY);
		HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen((char *)msg), HAL_MAX_DELAY);
	}
}

void led_task(void *param)
{
	while(1)
	{
		uint32_t cmd_addr;
			command_t *cmd;
			state_t curr_state=sMainMenu;
			const char* msg_led = "========================\n"
								  "|      LED Effect     |\n"
								  "========================\n"
								  "(none,e1,e2,e3,e4)\n"
								  "Enter your choice here : ";

			while(1){
				/*TODO: Wait for notification (Notify wait) */
				xTaskNotifyWait(0,0,NULL,portMAX_DELAY);
				/*TODO: Print LED menu */
				xQueueSend(q_print,&msg_led,portMAX_DELAY);
				/*TODO: wait for LED command (Notify wait) */
				xTaskNotifyWait(0,0,&cmd_addr,portMAX_DELAY);
				cmd=(command_t*)cmd_addr;
				if(cmd->len <= 4)
				{
					if(! strcmp((char*)cmd->payload,"none"))
						led_effect_stop();
					else if (! strcmp((char*)cmd->payload,"e1"))
						led_effect(1);
					else if (! strcmp((char*)cmd->payload,"e2"))
						led_effect(2);
					else if (! strcmp((char*)cmd->payload,"e3"))
						led_effect(3);
					else if (! strcmp((char*)cmd->payload,"e4"))
						led_effect(4);
					else
						/*TODO: print invalid message */
						xQueueSend(q_print,&msg_invalid,portMAX_DELAY);
				}else
					/*TODO: print invalid message */
					xQueueSend(q_print,&msg_invalid,portMAX_DELAY);
				/*TODO : update state variable */
				curr_state = sMainMenu;

				/*TODO : Notify menu task */
				xTaskNotify(handle_menu_task,0,eNoAction);

			}
	}
}

void rtc_task(void *param)
{
	while(1)
	{

	}
}

void process_command(command_t *cmd)
{
	extract_command(cmd);
    state_t curr_state;
	switch(curr_state)               // based on the state do the further processing
	{
	    case sMainMenu:
		  xTaskNotify(handle_menu_task,(uint32_t)cmd,eSetValueWithOverwrite);// notify menu task with the command
		break;

	    case sLedEffect:                  // notify the led task with the command
	      xTaskNotify(handle_led_task,(uint32_t)cmd,eSetValueWithOverwrite);
	    break;

	    case sRtcMenu:                   // notify the rtc menu
	    case sRtcTimeConfig:
	    case sRtcDateConfig:
	    case sRtcReport:
	    	 xTaskNotify(handle_rtc_task,(uint32_t)cmd,eSetValueWithOverwrite);
	    break;
	}
}

int extract_command(command_t *cmd)
{
	uint8_t item;
	BaseType_t status;

	// Check the status of the message queue q_data
	status= uxQueueMessagesWaiting(q_data);
	if(!status)                            // check if the queue is empty
		return -1;

	uint8_t i;

	do
	{
		// Check what is in the queue and populate the structure member payload with command in placeholder till we receive end of line ie \n
		status=xQueueReceive(q_data, &item, 0);
		if(status == pdTRUE)
			cmd->payload[i++]=item;
	}while(item != '\n');

     cmd->payload[i-1]='\0'; // replace the last element of the payload
     cmd->len=i-1;           // save the number of data bytes captured

     return 0;

}
