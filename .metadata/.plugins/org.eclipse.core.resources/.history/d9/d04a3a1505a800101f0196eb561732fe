/*
 * task_handler.c
 *
 *  Created on: Oct 10, 2025
 *      Author: hp
 */

#include "main.h"

void menu_task(void *param)
{
	while(1)
	{

	}
}

void cmd_task(void *param)
{
	/* The task does the following:
	1. Waits until command from user is received
	2. Processes the command from the input queue
	3. Sends the command to the relevant task to take action
	*/

	BaseType_t ret;
	command_t cmd;
	while(1)
	{
		//Implement notify wait
		ret = xTaskNotifyWait(0,0,NULL,portMAX_DELAY); // waits indefinitely
		if(ret == pdTRUE)                              // Notification received
		{
			process_command(&cmd);
		}
	}
}

void print_task(void *param)
{
	while(1)
	{

	}
}

void led_task(void *param)
{
	while(1)
	{

	}
}

void rtc_task(void *param)
{
	while(1)
	{

	}
}

void process_command(command_t *cmd)
{
	extract_command(cmd);

	switch(curr_state)               // based on the state do the further processing
	{
	    case sMainMenu:
		  xTaskNotify(handle_menu_task,(uint32_t)cmd,eSetValueWithOverwrite);// notify menu task with the command
		break;

	    case sLedEffect:                  // notify the led task with the command
	      xTaskNotify(handle_led_task,(uint32_t)cmd,eSetValueWithOverwrite);
	    break;

	    case sRtcMenu:                   // notify the rtc menu
	    case sRtcTimeConfig:
	    case sRtcDateConfig:
	    case sRtcReport:
	    	 xTaskNotify(handle_rtc_task,(uint32_t)cmd,eSetValueWithOverwrite);
	    break;
	}
}

int extract_command(command_t *cmd)
{
	uint8_t item;
	BaseType_t status;

	// Check the status of the message queue q_data
	status= uxQueueMessagesWaiting(q_data);
	if(!status)                            // check if the queue is empty
		return -1;

	uint8_t i;

	do
	{
		status=xQueueReceive(q_data, &item, 0);
	}



}
